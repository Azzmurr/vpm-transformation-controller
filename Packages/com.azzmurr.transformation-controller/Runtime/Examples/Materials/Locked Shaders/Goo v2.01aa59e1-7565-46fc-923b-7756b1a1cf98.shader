// ValueFactory Goo Shader for VRChat avatars.
// Please see TERMS_OF_USE.txt
// (c) 2022 ValueFactory shader.gay
// https://shader.gay

Shader "Hidden/.ValueFactory/Goo 2/Goo.01aa59e1-7565-46fc-923b-7756b1a1cf98" {
  Properties {

    /* DPS PROPERTY MARKER */

    
    [Space(30)]
    [Header(This is a Locked ValueFactory Goo 2.0 material.)]
    [Header(You might be seeing this for the following reasons)]
    [Header(.      1. You have not imported the ValueFactory Goo 2.0 package (purchase at GOO.SHADER.GAY))]
    [Header(.      2. The included material editor script is either not compiling or is missing.)]
    [Header(.      3. You are experiencing compile issues in your project.)]
    [Space(20)]
    [Header(To resolve this issue try the following)]
    [Header(.      1. If you own the Goo package import it again.)]
    [Header(.      2. Purchase and import the ValueFactory Goo 2.0 package at GOO.SHADER.GAY)]
    [Header(.      3. Resolve any other script compilation errors in your project until you can edit play mode.)]
    [Space(20)]
    [Header(Visit GOO.SHADER.GAY for more information.)]
    [Space(30)]
    _Temp2("",Range(0,0)) = 0
    

    /* SCRIPT_COMPILATION_ERROR_HEADER_BLOCK_END */

    [HideInInspector]                                               _BakedAtVersion                                                     ("", Int)                 = 7                   /* @Metadata */
    [HideInInspector]                                               _RenderingMode                                                      ("", Int)                 = 0
    [HideInInspector] [NoScaleOffset]                               _TANoiseTex                                                         ("", 2D)                  = "white" {}

		[HideInInspector] [Enum(UnityEngine.Rendering.CullMode)]        _CullMode                                                           ("", Int)                 = 2
		[HideInInspector] [Enum(UnityEngine.Rendering.BlendMode)]       _SourceBlend                                                        ("", Int)                 = 1
		[HideInInspector] [Enum(UnityEngine.Rendering.BlendMode)]       _DestinationBlend                                                   ("", Int)                 = 0
    [HideInInspector] [Enum(UnityEngine.Rendering.CompareFunction)] _ZTest                                                              ("", Int)                 = 4                   /* LessEqual */
    [HideInInspector] [Enum(Off, 0, On, 1)]                         _ZWrite                                                             ("", Int)                 = 1

		[HideInInspector]                                               _Stencil_Ref                                                        ("", Int)                 = 0
		[HideInInspector]                                               _Stencil_ReadMask                                                   ("", Int)                 = 255
		[HideInInspector]                                               _Stencil_WriteMask                                                  ("", Int)                 = 255

		[HideInInspector] [Enum(UnityEngine.Rendering.CompareFunction)] _Stencil_Comparison                                                 ("", Int)                 = 8                   /* always */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _Stencil_Pass                                                       ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _Stencil_Fail                                                       ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _Stencil_ZFail                                                      ("", Int)                 = 0                   /* keep */

		[HideInInspector] [Enum(UnityEngine.Rendering.CompareFunction)] _Stencil_ComparisonBack                                             ("", Int)                 = 8                   /* always */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _Stencil_PassBack                                                   ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _Stencil_FailBack                                                   ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _Stencil_ZFailBack                                                  ("", Int)                 = 0                   /* keep */

		[HideInInspector] [Enum(UnityEngine.Rendering.CompareFunction)] _Stencil_ComparisonFront                                            ("", Int)                 = 8                   /* always */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _Stencil_PassFront                                                  ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _Stencil_FailFront                                                  ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _Stencil_ZFailFront                                                 ("", Int)                 = 0                   /* keep */

		[HideInInspector]                                               _OutlineStencil_Ref                                                 ("", Int)                 = 0
		[HideInInspector]                                               _OutlineStencil_ReadMask                                            ("", Int)                 = 255
		[HideInInspector]                                               _OutlineStencil_WriteMask                                           ("", Int)                 = 255

		[HideInInspector] [Enum(UnityEngine.Rendering.CompareFunction)] _OutlineStencil_Comparison                                          ("", Int)                 = 8                   /* always */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _OutlineStencil_Pass                                                ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _OutlineStencil_Fail                                                ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _OutlineStencil_ZFail                                               ("", Int)                 = 0                   /* keep */

		[HideInInspector] [Enum(UnityEngine.Rendering.CompareFunction)] _OutlineStencil_ComparisonBack                                      ("", Int)                 = 8                   /* always */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _OutlineStencil_PassBack                                            ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _OutlineStencil_FailBack                                            ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _OutlineStencil_ZFailBack                                           ("", Int)                 = 0                   /* keep */

		[HideInInspector] [Enum(UnityEngine.Rendering.CompareFunction)] _OutlineStencil_ComparisonFront                                     ("", Int)                 = 8                   /* always */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _OutlineStencil_PassFront                                           ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _OutlineStencil_FailFront                                           ("", Int)                 = 0                   /* keep */
		[HideInInspector] [Enum(UnityEngine.Rendering.StencilOp)]       _OutlineStencil_ZFailFront                                          ("", Int)                 = 0                   /* keep */

    [HideInInspector][NoScaleOffset] _MaskChannel_1_Texture ("", 2D) = "white" {}
[HideInInspector] _MaskChannel_1_Texture_UVBus ("", Int) = 0
[HideInInspector] _MaskChannel_1_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _MaskChannel_1_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_1_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_1_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_1_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_1_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_1_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _MaskChannel_1_Strength_PreInversion ("", Float) = 1
[HideInInspector] _MaskChannel_1_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_1_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_1_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_1_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_1_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_1_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_1_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_1_Strength_PostInversion ("", Float) = 1
[HideInInspector] _MaskChannel_1_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_1_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_1_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_1_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_1_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_1_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_1_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _MaskChannel_2_Texture ("", 2D) = "white" {}
[HideInInspector] _MaskChannel_2_Texture_UVBus ("", Int) = 0
[HideInInspector] _MaskChannel_2_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _MaskChannel_2_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_2_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_2_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_2_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_2_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_2_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _MaskChannel_2_Strength_PreInversion ("", Float) = 1
[HideInInspector] _MaskChannel_2_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_2_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_2_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_2_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_2_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_2_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_2_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_2_Strength_PostInversion ("", Float) = 1
[HideInInspector] _MaskChannel_2_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_2_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_2_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_2_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_2_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_2_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_2_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _MaskChannel_3_Texture ("", 2D) = "white" {}
[HideInInspector] _MaskChannel_3_Texture_UVBus ("", Int) = 0
[HideInInspector] _MaskChannel_3_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _MaskChannel_3_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_3_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_3_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_3_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_3_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_3_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _MaskChannel_3_Strength_PreInversion ("", Float) = 1
[HideInInspector] _MaskChannel_3_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_3_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_3_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_3_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_3_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_3_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_3_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_3_Strength_PostInversion ("", Float) = 1
[HideInInspector] _MaskChannel_3_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_3_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_3_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_3_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_3_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_3_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_3_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _MaskChannel_4_Texture ("", 2D) = "white" {}
[HideInInspector] _MaskChannel_4_Texture_UVBus ("", Int) = 0
[HideInInspector] _MaskChannel_4_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _MaskChannel_4_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_4_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_4_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_4_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_4_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_4_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _MaskChannel_4_Strength_PreInversion ("", Float) = 1
[HideInInspector] _MaskChannel_4_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_4_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_4_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_4_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_4_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_4_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_4_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_4_Strength_PostInversion ("", Float) = 1
[HideInInspector] _MaskChannel_4_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_4_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_4_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_4_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_4_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_4_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_4_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _MaskChannel_5_Texture ("", 2D) = "white" {}
[HideInInspector] _MaskChannel_5_Texture_UVBus ("", Int) = 0
[HideInInspector] _MaskChannel_5_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _MaskChannel_5_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_5_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_5_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_5_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_5_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_5_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _MaskChannel_5_Strength_PreInversion ("", Float) = 1
[HideInInspector] _MaskChannel_5_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_5_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_5_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_5_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_5_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_5_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_5_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_5_Strength_PostInversion ("", Float) = 1
[HideInInspector] _MaskChannel_5_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_5_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_5_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_5_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_5_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_5_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_5_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _MaskChannel_6_Texture ("", 2D) = "white" {}
[HideInInspector] _MaskChannel_6_Texture_UVBus ("", Int) = 0
[HideInInspector] _MaskChannel_6_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _MaskChannel_6_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_6_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_6_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_6_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_6_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_6_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _MaskChannel_6_Strength_PreInversion ("", Float) = 1
[HideInInspector] _MaskChannel_6_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_6_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_6_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_6_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_6_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_6_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_6_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_6_Strength_PostInversion ("", Float) = 1
[HideInInspector] _MaskChannel_6_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_6_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_6_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_6_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_6_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_6_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_6_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _MaskChannel_7_Texture ("", 2D) = "white" {}
[HideInInspector] _MaskChannel_7_Texture_UVBus ("", Int) = 0
[HideInInspector] _MaskChannel_7_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _MaskChannel_7_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_7_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_7_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_7_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_7_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_7_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _MaskChannel_7_Strength_PreInversion ("", Float) = 1
[HideInInspector] _MaskChannel_7_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_7_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_7_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_7_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_7_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_7_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_7_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_7_Strength_PostInversion ("", Float) = 1
[HideInInspector] _MaskChannel_7_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_7_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_7_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_7_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_7_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_7_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_7_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _MaskChannel_8_Texture ("", 2D) = "white" {}
[HideInInspector] _MaskChannel_8_Texture_UVBus ("", Int) = 0
[HideInInspector] _MaskChannel_8_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _MaskChannel_8_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_8_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_8_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_8_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _MaskChannel_8_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_8_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _MaskChannel_8_Strength_PreInversion ("", Float) = 1
[HideInInspector] _MaskChannel_8_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_8_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_8_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_8_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_8_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_8_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_8_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_8_Strength_PostInversion ("", Float) = 1
[HideInInspector] _MaskChannel_8_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_8_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MaskChannel_8_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MaskChannel_8_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MaskChannel_8_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MaskChannel_8_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MaskChannel_8_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _MainTex ("", 2D) = "white" {}
[HideInInspector] _MainTex_AlphaIsMask ("", Int) = 0
[HideInInspector] _MainTex_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _MainTex_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _MainTex_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _MainTex_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _MainTex_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _MainTex_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _MainTex_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _MainTex_UVBus ("", Int) = 0
[HideInInspector] _MainTex_MaskChannel ("", Int) = 0
[HideInInspector] _MainTex_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MainTex_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MainTex_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MainTex_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MainTex_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MainTex_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MainTex_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Color ("", Color) = (1,1,1,1)
[HideInInspector] _Color_ANIMATED ("", Int) = 0
[HideInInspector] _Color_Osci_Enabled ("", Int) = 0
[HideInInspector] _Color_Osci_Slot ("", Int) = 0
[HideInInspector] _Color_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _Color_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Color_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _Color_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _Mix_MainTex ("", 2D) = "white" {}
[HideInInspector] _Mix_MainTex_AlphaIsMask ("", Int) = 0
[HideInInspector] _Mix_MainTex_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _Mix_MainTex_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_MainTex_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_MainTex_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_MainTex_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_MainTex_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_MainTex_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _Mix_MainTex_UVBus ("", Int) = 0
[HideInInspector] _Mix_MainTex_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_MainTex_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_MainTex_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_MainTex_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_MainTex_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_MainTex_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_MainTex_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_MainTex_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Color ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Color_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Color_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_Color_Osci_Slot ("", Int) = 0
[HideInInspector] _Mix_Color_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Color_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Color_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Color_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_MainTex ("", Int) = 1
[HideInInspector][NoScaleOffset] _SecondaryTex ("", 2D) = "white" {}
[HideInInspector] _SecondaryTex_AlphaIsMask ("", Int) = 0
[HideInInspector] _SecondaryTex_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _SecondaryTex_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _SecondaryTex_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _SecondaryTex_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _SecondaryTex_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _SecondaryTex_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _SecondaryTex_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _SecondaryTex_UVBus ("", Int) = 0
[HideInInspector] _SecondaryTex_MaskChannel ("", Int) = 0
[HideInInspector] _SecondaryTex_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _SecondaryTex_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _SecondaryTex_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _SecondaryTex_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _SecondaryTex_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _SecondaryTex_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _SecondaryTex_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _SecondaryTex_BlendMode ("", Int) = 0
[HideInInspector] _SecondaryTex_Color ("", Color) = (0,0,0,0)
[HideInInspector] _SecondaryTex_Color_ANIMATED ("", Int) = 0
[HideInInspector] _SecondaryTex_Color_Osci_Enabled ("", Int) = 0
[HideInInspector] _SecondaryTex_Color_Osci_Slot ("", Int) = 0
[HideInInspector] _SecondaryTex_Color_Osci_Color_Start ("", Color) = (0,0,0,0)
[HideInInspector] _SecondaryTex_Color_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _SecondaryTex_Color_Osci_Color_End ("", Color) = (0,0,0,0)
[HideInInspector] _SecondaryTex_Color_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _Mix_SecondaryTex ("", 2D) = "white" {}
[HideInInspector] _Mix_SecondaryTex_AlphaIsMask ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _Mix_SecondaryTex_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_SecondaryTex_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_SecondaryTex_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_UVBus ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_SecondaryTex_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_SecondaryTex_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_SecondaryTex_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_BlendMode ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_Color ("", Color) = (0,0,0,0)
[HideInInspector] _Mix_SecondaryTex_Color_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_Color_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_Color_Osci_Slot ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_Color_Osci_Color_Start ("", Color) = (0,0,0,0)
[HideInInspector] _Mix_SecondaryTex_Color_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_SecondaryTex_Color_Osci_Color_End ("", Color) = (0,0,0,0)
[HideInInspector] _Mix_SecondaryTex_Color_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_SecondaryTex ("", Int) = 1
[HideInInspector] _Opacity ("", Range(0, 1)) = 1
[HideInInspector] _Opacity_ANIMATED ("", Int) = 0
[HideInInspector] _Opacity_MaskChannel ("", Int) = 0
[HideInInspector] _Opacity_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Opacity_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Opacity_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Opacity_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Opacity_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Opacity_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Opacity_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Opacity_Osci_Enabled ("", Int) = 0
[HideInInspector] _Opacity_Osci_Slot ("", Int) = 0
[HideInInspector] _Opacity_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _Opacity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Opacity_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _Opacity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Opacity ("", Range(0, 1)) = 1
[HideInInspector] _Mix_Opacity_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Opacity_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_Opacity_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_Opacity_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_Opacity_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Opacity_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_Opacity_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Opacity_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_Opacity_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Opacity_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_Opacity_Osci_Slot ("", Int) = 0
[HideInInspector] _Mix_Opacity_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _Mix_Opacity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Opacity_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _Mix_Opacity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_Opacity ("", Int) = 1
[HideInInspector][NoScaleOffset] _OcclusionMap ("", 2D) = "white" {}
[HideInInspector] _OcclusionMap_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _OcclusionMap_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _OcclusionMap_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _OcclusionMap_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _OcclusionMap_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _OcclusionMap_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _OcclusionMap_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _OcclusionMap_UVBus ("", Int) = 0
[HideInInspector] _OcclusionMap_MaskChannel ("", Int) = 0
[HideInInspector] _OcclusionMap_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _OcclusionMap_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _OcclusionMap_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _OcclusionMap_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _OcclusionMap_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _OcclusionMap_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _OcclusionMap_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _OcclusionStrength ("", Range(0, 1)) = 1
[HideInInspector] _OcclusionStrength_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _Mix_OcclusionMap ("", 2D) = "white" {}
[HideInInspector] _Mix_OcclusionMap_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _Mix_OcclusionMap_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_OcclusionMap_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_OcclusionMap_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_OcclusionMap_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_OcclusionMap_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_OcclusionMap_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _Mix_OcclusionMap_UVBus ("", Int) = 0
[HideInInspector] _Mix_OcclusionMap_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_OcclusionMap_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_OcclusionMap_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_OcclusionMap_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_OcclusionMap_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_OcclusionMap_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_OcclusionMap_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_OcclusionMap_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_OcclusionStrength ("", Range(0, 1)) = 1
[HideInInspector] _Mix_OcclusionStrength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_Occlusion ("", Int) = 0
[HideInInspector][NoScaleOffset] [Normal] _BumpMap ("", 2D) = "bump" {}
[HideInInspector] _BumpMap_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _BumpMap_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _BumpMap_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _BumpMap_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _BumpMap_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _BumpMap_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _BumpMap_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _BumpMap_UVBus ("", Int) = 0
[HideInInspector] _BumpMap_MaskChannel ("", Int) = 0
[HideInInspector] _BumpMap_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BumpMap_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BumpMap_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BumpMap_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BumpMap_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BumpMap_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BumpMap_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BumpScale ("", Range(0, 1)) = 1
[HideInInspector] _BumpScale_ANIMATED ("", Int) = 0
[HideInInspector] _BumpScale_Osci_Enabled ("", Int) = 0
[HideInInspector] _BumpScale_Osci_Slot ("", Int) = 0
[HideInInspector] _BumpScale_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _BumpScale_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BumpScale_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _BumpScale_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] [Normal] _Mix_BumpMap ("", 2D) = "bump" {}
[HideInInspector] _Mix_BumpMap_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _Mix_BumpMap_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_BumpMap_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_BumpMap_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_BumpMap_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_BumpMap_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_BumpMap_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _Mix_BumpMap_UVBus ("", Int) = 0
[HideInInspector] _Mix_BumpMap_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_BumpMap_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_BumpMap_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_BumpMap_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_BumpMap_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_BumpMap_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_BumpMap_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_BumpMap_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_BumpScale ("", Range(0, 1)) = 1
[HideInInspector] _Mix_BumpScale_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_BumpScale_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_BumpScale_Osci_Slot ("", Int) = 0
[HideInInspector] _Mix_BumpScale_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _Mix_BumpScale_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_BumpScale_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _Mix_BumpScale_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_BumpMap ("", Int) = 1
[HideInInspector][NoScaleOffset] [Normal] _DetailNormalMap ("", 2D) = "bump" {}
[HideInInspector] _DetailNormalMap_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _DetailNormalMap_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _DetailNormalMap_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _DetailNormalMap_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _DetailNormalMap_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _DetailNormalMap_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _DetailNormalMap_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _DetailNormalMap_UVBus ("", Int) = 0
[HideInInspector] _DetailNormalMap_MaskChannel ("", Int) = 0
[HideInInspector] _DetailNormalMap_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _DetailNormalMap_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _DetailNormalMap_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _DetailNormalMap_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _DetailNormalMap_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _DetailNormalMap_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _DetailNormalMap_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _DetailBumpScale ("", Range(0, 1)) = 1
[HideInInspector] _DetailBumpScale_ANIMATED ("", Int) = 0
[HideInInspector] _DetailBumpScale_Osci_Enabled ("", Int) = 0
[HideInInspector] _DetailBumpScale_Osci_Slot ("", Int) = 0
[HideInInspector] _DetailBumpScale_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _DetailBumpScale_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DetailBumpScale_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _DetailBumpScale_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] [Normal] _Mix_DetailNormalMap ("", 2D) = "bump" {}
[HideInInspector] _Mix_DetailNormalMap_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _Mix_DetailNormalMap_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_DetailNormalMap_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_DetailNormalMap_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_DetailNormalMap_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_DetailNormalMap_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_DetailNormalMap_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _Mix_DetailNormalMap_UVBus ("", Int) = 0
[HideInInspector] _Mix_DetailNormalMap_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_DetailNormalMap_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_DetailNormalMap_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_DetailNormalMap_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_DetailNormalMap_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_DetailNormalMap_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_DetailNormalMap_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_DetailNormalMap_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_DetailBumpScale ("", Range(0, 1)) = 1
[HideInInspector] _Mix_DetailBumpScale_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_DetailBumpScale_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_DetailBumpScale_Osci_Slot ("", Int) = 0
[HideInInspector] _Mix_DetailBumpScale_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _Mix_DetailBumpScale_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_DetailBumpScale_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _Mix_DetailBumpScale_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_DetailNormalMap ("", Int) = 1
[HideInInspector][NoScaleOffset] _EmissionMap ("", 2D) = "black" {}
[HideInInspector] _EmissionMap_AlphaIsMask ("", Int) = 0
[HideInInspector] _EmissionMap_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _EmissionMap_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionMap_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _EmissionMap_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionMap_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _EmissionMap_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionMap_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _EmissionMap_UVBus ("", Int) = 0
[HideInInspector] _EmissionMap_MaskChannel ("", Int) = 0
[HideInInspector] _EmissionMap_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _EmissionMap_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _EmissionMap_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionMap_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _EmissionMap_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionMap_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _EmissionMap_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _EmissionColor ("", Color) = (1,1,1,1)
[HideInInspector] _EmissionColor_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionColor_Osci_Enabled ("", Int) = 0
[HideInInspector] _EmissionColor_Osci_Slot ("", Int) = 0
[HideInInspector][HDR] _EmissionColor_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _EmissionColor_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _EmissionColor_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _EmissionColor_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _Mix_EmissionMap ("", 2D) = "black" {}
[HideInInspector] _Mix_EmissionMap_AlphaIsMask ("", Int) = 0
[HideInInspector] _Mix_EmissionMap_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _Mix_EmissionMap_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionMap_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_EmissionMap_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionMap_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_EmissionMap_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionMap_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _Mix_EmissionMap_UVBus ("", Int) = 0
[HideInInspector] _Mix_EmissionMap_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_EmissionMap_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_EmissionMap_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_EmissionMap_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionMap_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_EmissionMap_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionMap_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_EmissionMap_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _Mix_EmissionColor ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_EmissionColor_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionColor_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_EmissionColor_Osci_Slot ("", Int) = 0
[HideInInspector][HDR] _Mix_EmissionColor_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_EmissionColor_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _Mix_EmissionColor_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_EmissionColor_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_Emission_1 ("", Int) = 1
[HideInInspector][NoScaleOffset] _EmissionMap2 ("", 2D) = "black" {}
[HideInInspector] _EmissionMap2_AlphaIsMask ("", Int) = 0
[HideInInspector] _EmissionMap2_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _EmissionMap2_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionMap2_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _EmissionMap2_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionMap2_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _EmissionMap2_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionMap2_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _EmissionMap2_UVBus ("", Int) = 0
[HideInInspector] _EmissionMap2_MaskChannel ("", Int) = 0
[HideInInspector] _EmissionMap2_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _EmissionMap2_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _EmissionMap2_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionMap2_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _EmissionMap2_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionMap2_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _EmissionMap2_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _EmissionColor2 ("", Color) = (1,1,1,1)
[HideInInspector] _EmissionColor2_ANIMATED ("", Int) = 0
[HideInInspector] _EmissionColor2_Osci_Enabled ("", Int) = 0
[HideInInspector] _EmissionColor2_Osci_Slot ("", Int) = 0
[HideInInspector][HDR] _EmissionColor2_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _EmissionColor2_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _EmissionColor2_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _EmissionColor2_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _Mix_EmissionMap2 ("", 2D) = "black" {}
[HideInInspector] _Mix_EmissionMap2_AlphaIsMask ("", Int) = 0
[HideInInspector] _Mix_EmissionMap2_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _Mix_EmissionMap2_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionMap2_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_EmissionMap2_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionMap2_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _Mix_EmissionMap2_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionMap2_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _Mix_EmissionMap2_UVBus ("", Int) = 0
[HideInInspector] _Mix_EmissionMap2_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_EmissionMap2_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_EmissionMap2_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_EmissionMap2_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionMap2_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_EmissionMap2_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionMap2_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_EmissionMap2_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _Mix_EmissionColor2 ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_EmissionColor2_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_EmissionColor2_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_EmissionColor2_Osci_Slot ("", Int) = 0
[HideInInspector][HDR] _Mix_EmissionColor2_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_EmissionColor2_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _Mix_EmissionColor2_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_EmissionColor2_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_Emission_2 ("", Int) = 1
[HideInInspector][NoScaleOffset] _Matcap_1_Texture ("", 2D) = "black" {}
[HideInInspector] _Matcap_1_Texture_AlphaIsMask ("", Int) = 0
[HideInInspector] _Matcap_1_Texture_MaskChannel ("", Int) = 0
[HideInInspector] _Matcap_1_Texture_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Matcap_1_Texture_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Matcap_1_Texture_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_1_Texture_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Matcap_1_Texture_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_1_Texture_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Matcap_1_Texture_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_1_Color ("", Color) = (1,1,1,1)
[HideInInspector] _Matcap_1_Color_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_1_Color_Osci_Enabled ("", Int) = 0
[HideInInspector] _Matcap_1_Color_Osci_Slot ("", Int) = 0
[HideInInspector] _Matcap_1_Color_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _Matcap_1_Color_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_1_Color_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _Matcap_1_Color_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_1_Lighting_Enabled ("", Int) = 1
[HideInInspector] _Matcap_1_Lighting_Enabled_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_1_Size ("", Float) = .43
[HideInInspector] _Matcap_1_Size_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _Mix_Matcap_1_Texture ("", 2D) = "black" {}
[HideInInspector] _Mix_Matcap_1_Texture_AlphaIsMask ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Texture_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Texture_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Texture_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_Matcap_1_Texture_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Texture_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_Matcap_1_Texture_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Texture_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_Matcap_1_Texture_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Color ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Matcap_1_Color_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Color_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Color_Osci_Slot ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Color_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Matcap_1_Color_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Color_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Matcap_1_Color_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Lighting_Enabled ("", Int) = 1
[HideInInspector] _Mix_Matcap_1_Lighting_Enabled_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_1_Size ("", Float) = .43
[HideInInspector] _Mix_Matcap_1_Size_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_Matcap_1 ("", Int) = 1
[HideInInspector][NoScaleOffset] _Matcap_2_Texture ("", 2D) = "black" {}
[HideInInspector] _Matcap_2_Texture_AlphaIsMask ("", Int) = 0
[HideInInspector] _Matcap_2_Texture_MaskChannel ("", Int) = 0
[HideInInspector] _Matcap_2_Texture_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Matcap_2_Texture_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Matcap_2_Texture_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_2_Texture_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Matcap_2_Texture_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_2_Texture_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Matcap_2_Texture_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_2_Color ("", Color) = (1,1,1,1)
[HideInInspector] _Matcap_2_Color_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_2_Color_Osci_Enabled ("", Int) = 0
[HideInInspector] _Matcap_2_Color_Osci_Slot ("", Int) = 0
[HideInInspector] _Matcap_2_Color_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _Matcap_2_Color_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_2_Color_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _Matcap_2_Color_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_2_Lighting_Enabled ("", Int) = 1
[HideInInspector] _Matcap_2_Lighting_Enabled_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_2_Size ("", Float) = .43
[HideInInspector] _Matcap_2_Size_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _Mix_Matcap_2_Texture ("", 2D) = "black" {}
[HideInInspector] _Mix_Matcap_2_Texture_AlphaIsMask ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Texture_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Texture_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Texture_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_Matcap_2_Texture_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Texture_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_Matcap_2_Texture_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Texture_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_Matcap_2_Texture_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Color ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Matcap_2_Color_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Color_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Color_Osci_Slot ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Color_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Matcap_2_Color_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Color_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Matcap_2_Color_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Lighting_Enabled ("", Int) = 1
[HideInInspector] _Mix_Matcap_2_Lighting_Enabled_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_2_Size ("", Float) = .43
[HideInInspector] _Mix_Matcap_2_Size_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_Matcap_2 ("", Int) = 1
[HideInInspector][NoScaleOffset] _Matcap_3_Texture ("", 2D) = "black" {}
[HideInInspector] _Matcap_3_Texture_AlphaIsMask ("", Int) = 0
[HideInInspector] _Matcap_3_Texture_MaskChannel ("", Int) = 0
[HideInInspector] _Matcap_3_Texture_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Matcap_3_Texture_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Matcap_3_Texture_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_3_Texture_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Matcap_3_Texture_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_3_Texture_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Matcap_3_Texture_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_3_Color ("", Color) = (1,1,1,1)
[HideInInspector] _Matcap_3_Color_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_3_Color_Osci_Enabled ("", Int) = 0
[HideInInspector] _Matcap_3_Color_Osci_Slot ("", Int) = 0
[HideInInspector] _Matcap_3_Color_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _Matcap_3_Color_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_3_Color_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _Matcap_3_Color_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_3_Lighting_Enabled ("", Int) = 1
[HideInInspector] _Matcap_3_Lighting_Enabled_ANIMATED ("", Int) = 0
[HideInInspector] _Matcap_3_Size ("", Float) = .43
[HideInInspector] _Matcap_3_Size_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _Mix_Matcap_3_Texture ("", 2D) = "black" {}
[HideInInspector] _Mix_Matcap_3_Texture_AlphaIsMask ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Texture_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Texture_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Texture_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_Matcap_3_Texture_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Texture_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_Matcap_3_Texture_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Texture_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_Matcap_3_Texture_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Color ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Matcap_3_Color_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Color_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Color_Osci_Slot ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Color_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Matcap_3_Color_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Color_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _Mix_Matcap_3_Color_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Lighting_Enabled ("", Int) = 1
[HideInInspector] _Mix_Matcap_3_Lighting_Enabled_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Matcap_3_Size ("", Float) = .43
[HideInInspector] _Mix_Matcap_3_Size_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_Matcap_3 ("", Int) = 1
[HideInInspector] _AlbedoEmissionWeight ("", Float) = 0
[HideInInspector] _AlbedoEmissionWeight_ANIMATED ("", Int) = 0
[HideInInspector] _AlbedoEmissionWeight_MaskChannel ("", Int) = 0
[HideInInspector] _AlbedoEmissionWeight_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _AlbedoEmissionWeight_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _AlbedoEmissionWeight_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _AlbedoEmissionWeight_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _AlbedoEmissionWeight_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _AlbedoEmissionWeight_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _AlbedoEmissionWeight_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _AlbedoEmissionWeight_Osci_Enabled ("", Int) = 0
[HideInInspector] _AlbedoEmissionWeight_Osci_Slot ("", Int) = 0
[HideInInspector] _AlbedoEmissionWeight_Osci_Value_Start ("", Float) = 0
[HideInInspector] _AlbedoEmissionWeight_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _AlbedoEmissionWeight_Osci_Value_End ("", Float) = 0
[HideInInspector] _AlbedoEmissionWeight_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _AddedEmissionColor ("", Color) = (0,0,0,1)
[HideInInspector] _AddedEmissionColor_ANIMATED ("", Int) = 0
[HideInInspector] _AddedEmissionColor_MaskChannel ("", Int) = 0
[HideInInspector] _AddedEmissionColor_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _AddedEmissionColor_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _AddedEmissionColor_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _AddedEmissionColor_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _AddedEmissionColor_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _AddedEmissionColor_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _AddedEmissionColor_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _AddedEmissionColor_Osci_Enabled ("", Int) = 0
[HideInInspector] _AddedEmissionColor_Osci_Slot ("", Int) = 0
[HideInInspector][HDR] _AddedEmissionColor_Osci_Color_Start ("", Color) = (0,0,0,1)
[HideInInspector] _AddedEmissionColor_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _AddedEmissionColor_Osci_Color_End ("", Color) = (0,0,0,1)
[HideInInspector] _AddedEmissionColor_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight ("", Float) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_AlbedoEmissionWeight_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_AlbedoEmissionWeight_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_Osci_Slot ("", Int) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_Osci_Value_Start ("", Float) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_Osci_Value_End ("", Float) = 0
[HideInInspector] _Mix_AlbedoEmissionWeight_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _Mix_AddedEmissionColor ("", Color) = (0,0,0,1)
[HideInInspector] _Mix_AddedEmissionColor_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_AddedEmissionColor_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_AddedEmissionColor_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_AddedEmissionColor_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_AddedEmissionColor_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_AddedEmissionColor_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_AddedEmissionColor_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_AddedEmissionColor_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_AddedEmissionColor_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_AddedEmissionColor_Osci_Enabled ("", Int) = 0
[HideInInspector] _Mix_AddedEmissionColor_Osci_Slot ("", Int) = 0
[HideInInspector][HDR] _Mix_AddedEmissionColor_Osci_Color_Start ("", Color) = (0,0,0,1)
[HideInInspector] _Mix_AddedEmissionColor_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _Mix_AddedEmissionColor_Osci_Color_End ("", Color) = (0,0,0,1)
[HideInInspector] _Mix_AddedEmissionColor_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_Emission_Const ("", Int) = 1
[HideInInspector] _Glossiness ("", Range(0, 1)) = .85
[HideInInspector] _Glossiness_ANIMATED ("", Int) = 0
[HideInInspector] _Glossiness_MaskChannel ("", Int) = 0
[HideInInspector] _Glossiness_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Glossiness_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Glossiness_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Glossiness_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Glossiness_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Glossiness_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Glossiness_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Metallic ("", Range(0, 1)) = 0
[HideInInspector] _Metallic_ANIMATED ("", Int) = 0
[HideInInspector] _Metallic_MaskChannel ("", Int) = 0
[HideInInspector] _Metallic_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Metallic_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Metallic_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Metallic_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Metallic_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Metallic_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Metallic_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Glossiness ("", Range(0, 1)) = .85
[HideInInspector] _Mix_Glossiness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Glossiness_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_Glossiness_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_Glossiness_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_Glossiness_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Glossiness_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_Glossiness_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Glossiness_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_Glossiness_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Metallic ("", Range(0, 1)) = 0
[HideInInspector] _Mix_Metallic_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Metallic_MaskChannel ("", Int) = 0
[HideInInspector] _Mix_Metallic_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Mix_Metallic_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Mix_Metallic_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Metallic_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Mix_Metallic_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Metallic_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Mix_Metallic_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Mix_Separate_MetallicGlossiness ("", Int) = 1
[HideInInspector] _GSAA_Enabled ("", Int) = 1
[HideInInspector] _Goo_Enabled ("", Int) = 1
[HideInInspector] _Goo_Size ("", Float) = 7.5
[HideInInspector] _Goo_Size_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Size_Osci_Enabled ("", Int) = 0
[HideInInspector] _Goo_Size_Osci_Slot ("", Int) = 0
[HideInInspector] _Goo_Size_Osci_Value_Start ("", Float) = 7.5
[HideInInspector] _Goo_Size_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Size_Osci_Value_End ("", Float) = 7.5
[HideInInspector] _Goo_Size_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Speed ("", Vector) = (0,.5,.5,0)
[HideInInspector] _Goo_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Speed_TimeBase ("", Int) = 0
[HideInInspector] _Goo_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _Goo_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Offset_Osci_Enabled ("", Int) = 0
[HideInInspector] _Goo_Offset_Osci_Slot ("", Int) = 0
[HideInInspector] _Goo_Offset_Osci_Color_Start ("", Vector) = (0,0,0,0)
[HideInInspector] _Goo_Offset_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Offset_Osci_Color_End ("", Vector) = (0,0,0,0)
[HideInInspector] _Goo_Offset_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Normal_Offset_Min_Degrees ("", Float) = -10
[HideInInspector] _Goo_Normal_Offset_Min_Degrees_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Normal_Offset_Max_Degrees ("", Float) = 10
[HideInInspector] _Goo_Normal_Offset_Max_Degrees_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_Enabled ("", Int) = 1
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Min ("", Float) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Min_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Min_Osci_Enabled ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Min_Osci_Slot ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_Start ("", Float) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_End ("", Float) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Max ("", Float) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Max_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Max_Osci_Enabled ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Max_Osci_Slot ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_Start ("", Float) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_End ("", Float) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_ProceduralNormal_Size ("", Float) = 1.5
[HideInInspector] _Goo_Deformation_ProceduralNormal_Size_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_ProceduralNormal_Size_Osci_Enabled ("", Int) = 0
[HideInInspector] _Goo_Deformation_ProceduralNormal_Size_Osci_Slot ("", Int) = 0
[HideInInspector] _Goo_Deformation_ProceduralNormal_Size_Osci_Value_Start ("", Float) = 1.5
[HideInInspector] _Goo_Deformation_ProceduralNormal_Size_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_ProceduralNormal_Size_Osci_Value_End ("", Float) = 1.5
[HideInInspector] _Goo_Deformation_ProceduralNormal_Size_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_ApplyOnMaterialMix ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_MaskChannel ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Goo_Deformation_MeshNormal_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Goo_Deformation_MeshNormal_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Goo_Deformation_MeshNormal_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_Enabled ("", Int) = 1
[HideInInspector] _Goo_Drip_Size ("", Float) = .2
[HideInInspector] _Goo_Drip_Size_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_Size_Osci_Enabled ("", Int) = 0
[HideInInspector] _Goo_Drip_Size_Osci_Slot ("", Int) = 0
[HideInInspector] _Goo_Drip_Size_Osci_Value_Start ("", Float) = .2
[HideInInspector] _Goo_Drip_Size_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_Size_Osci_Value_End ("", Float) = .2
[HideInInspector] _Goo_Drip_Size_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_Start ("", Range(0, 1)) = .6
[HideInInspector] _Goo_Drip_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_Start_Osci_Enabled ("", Int) = 0
[HideInInspector] _Goo_Drip_Start_Osci_Slot ("", Int) = 0
[HideInInspector] _Goo_Drip_Start_Osci_Value_Start ("", Range(0, 1)) = .6
[HideInInspector] _Goo_Drip_Start_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_Start_Osci_Value_End ("", Range(0, 1)) = .6
[HideInInspector] _Goo_Drip_Start_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_End ("", Range(0, 1)) = 1.0
[HideInInspector] _Goo_Drip_End_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_End_Osci_Enabled ("", Int) = 0
[HideInInspector] _Goo_Drip_End_Osci_Slot ("", Int) = 0
[HideInInspector] _Goo_Drip_End_Osci_Value_Start ("", Range(0, 1)) = 1.0
[HideInInspector] _Goo_Drip_End_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_End_Osci_Value_End ("", Range(0, 1)) = 1.0
[HideInInspector] _Goo_Drip_End_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_Amount ("", Range(0, 1)) = 1.0
[HideInInspector] _Goo_Drip_Amount_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_Amount_Osci_Enabled ("", Int) = 0
[HideInInspector] _Goo_Drip_Amount_Osci_Slot ("", Int) = 0
[HideInInspector] _Goo_Drip_Amount_Osci_Value_Start ("", Range(0, 1)) = 1.0
[HideInInspector] _Goo_Drip_Amount_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_Amount_Osci_Value_End ("", Range(0, 1)) = 1.0
[HideInInspector] _Goo_Drip_Amount_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_MaskChannel ("", Int) = 0
[HideInInspector] _Goo_Drip_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Goo_Drip_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Goo_Drip_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Goo_Drip_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Goo_Drip_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Goo_Drip_ApplyOnMaterialMix ("", Int) = 0
[HideInInspector] _Goo_Drip_Gravity_Vector ("", Vector) = (0, -1, 0, 0)
[HideInInspector] _Goo_Drip_Gravity_Vector_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Origin ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_1_Origin_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Origin_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Origin_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Origin_Osci_Color_Start ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_1_Origin_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Origin_Osci_Color_End ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_1_Origin_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Axis ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_1_Axis_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Axis_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Axis_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Axis_Osci_Color_Start ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_1_Axis_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Axis_Osci_Color_End ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_1_Axis_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Flip ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Radius ("", Float) = .125
[HideInInspector] _CapsuleMask_1_Radius_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Radius_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Radius_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Radius_Osci_Value_Start ("", Float) = .125
[HideInInspector] _CapsuleMask_1_Radius_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Radius_Osci_Value_End ("", Float) = .125
[HideInInspector] _CapsuleMask_1_Radius_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Height ("", Float) = .25
[HideInInspector] _CapsuleMask_1_Height_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Height_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Height_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Height_Osci_Value_Start ("", Float) = .25
[HideInInspector] _CapsuleMask_1_Height_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Height_Osci_Value_End ("", Float) = .25
[HideInInspector] _CapsuleMask_1_Height_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Strength_PreInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_1_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_1_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_1_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Strength_PostInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_1_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_1_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_1_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_1_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Origin ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_2_Origin_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Origin_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Origin_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Origin_Osci_Color_Start ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_2_Origin_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Origin_Osci_Color_End ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_2_Origin_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Axis ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_2_Axis_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Axis_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Axis_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Axis_Osci_Color_Start ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_2_Axis_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Axis_Osci_Color_End ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_2_Axis_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Flip ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Radius ("", Float) = .125
[HideInInspector] _CapsuleMask_2_Radius_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Radius_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Radius_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Radius_Osci_Value_Start ("", Float) = .125
[HideInInspector] _CapsuleMask_2_Radius_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Radius_Osci_Value_End ("", Float) = .125
[HideInInspector] _CapsuleMask_2_Radius_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Height ("", Float) = .25
[HideInInspector] _CapsuleMask_2_Height_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Height_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Height_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Height_Osci_Value_Start ("", Float) = .25
[HideInInspector] _CapsuleMask_2_Height_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Height_Osci_Value_End ("", Float) = .25
[HideInInspector] _CapsuleMask_2_Height_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Strength_PreInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_2_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_2_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_2_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Strength_PostInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_2_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_2_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_2_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_2_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Origin ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_3_Origin_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Origin_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Origin_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Origin_Osci_Color_Start ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_3_Origin_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Origin_Osci_Color_End ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_3_Origin_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Axis ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_3_Axis_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Axis_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Axis_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Axis_Osci_Color_Start ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_3_Axis_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Axis_Osci_Color_End ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_3_Axis_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Flip ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Radius ("", Float) = .125
[HideInInspector] _CapsuleMask_3_Radius_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Radius_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Radius_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Radius_Osci_Value_Start ("", Float) = .125
[HideInInspector] _CapsuleMask_3_Radius_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Radius_Osci_Value_End ("", Float) = .125
[HideInInspector] _CapsuleMask_3_Radius_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Height ("", Float) = .25
[HideInInspector] _CapsuleMask_3_Height_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Height_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Height_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Height_Osci_Value_Start ("", Float) = .25
[HideInInspector] _CapsuleMask_3_Height_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Height_Osci_Value_End ("", Float) = .25
[HideInInspector] _CapsuleMask_3_Height_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Strength_PreInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_3_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_3_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_3_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Strength_PostInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_3_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_3_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_3_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_3_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Origin ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_4_Origin_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Origin_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Origin_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Origin_Osci_Color_Start ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_4_Origin_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Origin_Osci_Color_End ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_4_Origin_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Axis ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_4_Axis_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Axis_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Axis_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Axis_Osci_Color_Start ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_4_Axis_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Axis_Osci_Color_End ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_4_Axis_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Flip ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Radius ("", Float) = .125
[HideInInspector] _CapsuleMask_4_Radius_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Radius_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Radius_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Radius_Osci_Value_Start ("", Float) = .125
[HideInInspector] _CapsuleMask_4_Radius_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Radius_Osci_Value_End ("", Float) = .125
[HideInInspector] _CapsuleMask_4_Radius_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Height ("", Float) = .25
[HideInInspector] _CapsuleMask_4_Height_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Height_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Height_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Height_Osci_Value_Start ("", Float) = .25
[HideInInspector] _CapsuleMask_4_Height_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Height_Osci_Value_End ("", Float) = .25
[HideInInspector] _CapsuleMask_4_Height_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Strength_PreInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_4_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_4_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_4_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Strength_PostInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_4_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_4_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_4_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_4_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Origin ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_5_Origin_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Origin_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Origin_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Origin_Osci_Color_Start ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_5_Origin_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Origin_Osci_Color_End ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_5_Origin_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Axis ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_5_Axis_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Axis_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Axis_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Axis_Osci_Color_Start ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_5_Axis_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Axis_Osci_Color_End ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_5_Axis_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Flip ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Radius ("", Float) = .125
[HideInInspector] _CapsuleMask_5_Radius_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Radius_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Radius_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Radius_Osci_Value_Start ("", Float) = .125
[HideInInspector] _CapsuleMask_5_Radius_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Radius_Osci_Value_End ("", Float) = .125
[HideInInspector] _CapsuleMask_5_Radius_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Height ("", Float) = .25
[HideInInspector] _CapsuleMask_5_Height_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Height_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Height_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Height_Osci_Value_Start ("", Float) = .25
[HideInInspector] _CapsuleMask_5_Height_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Height_Osci_Value_End ("", Float) = .25
[HideInInspector] _CapsuleMask_5_Height_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Strength_PreInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_5_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_5_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_5_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Strength_PostInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_5_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_5_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_5_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_5_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Origin ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_6_Origin_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Origin_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Origin_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Origin_Osci_Color_Start ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_6_Origin_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Origin_Osci_Color_End ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_6_Origin_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Axis ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_6_Axis_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Axis_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Axis_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Axis_Osci_Color_Start ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_6_Axis_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Axis_Osci_Color_End ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_6_Axis_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Flip ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Radius ("", Float) = .125
[HideInInspector] _CapsuleMask_6_Radius_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Radius_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Radius_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Radius_Osci_Value_Start ("", Float) = .125
[HideInInspector] _CapsuleMask_6_Radius_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Radius_Osci_Value_End ("", Float) = .125
[HideInInspector] _CapsuleMask_6_Radius_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Height ("", Float) = .25
[HideInInspector] _CapsuleMask_6_Height_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Height_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Height_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Height_Osci_Value_Start ("", Float) = .25
[HideInInspector] _CapsuleMask_6_Height_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Height_Osci_Value_End ("", Float) = .25
[HideInInspector] _CapsuleMask_6_Height_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Strength_PreInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_6_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_6_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_6_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Strength_PostInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_6_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_6_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_6_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_6_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Origin ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_7_Origin_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Origin_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Origin_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Origin_Osci_Color_Start ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_7_Origin_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Origin_Osci_Color_End ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_7_Origin_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Axis ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_7_Axis_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Axis_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Axis_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Axis_Osci_Color_Start ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_7_Axis_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Axis_Osci_Color_End ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_7_Axis_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Flip ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Radius ("", Float) = .125
[HideInInspector] _CapsuleMask_7_Radius_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Radius_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Radius_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Radius_Osci_Value_Start ("", Float) = .125
[HideInInspector] _CapsuleMask_7_Radius_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Radius_Osci_Value_End ("", Float) = .125
[HideInInspector] _CapsuleMask_7_Radius_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Height ("", Float) = .25
[HideInInspector] _CapsuleMask_7_Height_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Height_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Height_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Height_Osci_Value_Start ("", Float) = .25
[HideInInspector] _CapsuleMask_7_Height_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Height_Osci_Value_End ("", Float) = .25
[HideInInspector] _CapsuleMask_7_Height_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Strength_PreInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_7_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_7_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_7_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Strength_PostInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_7_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_7_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_7_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_7_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Origin ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_8_Origin_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Origin_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Origin_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Origin_Osci_Color_Start ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_8_Origin_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Origin_Osci_Color_End ("", Vector) = (0,0,0,0)
[HideInInspector] _CapsuleMask_8_Origin_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Axis ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_8_Axis_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Axis_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Axis_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Axis_Osci_Color_Start ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_8_Axis_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Axis_Osci_Color_End ("", Vector) = (0,1,0,0)
[HideInInspector] _CapsuleMask_8_Axis_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Flip ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Radius ("", Float) = .125
[HideInInspector] _CapsuleMask_8_Radius_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Radius_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Radius_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Radius_Osci_Value_Start ("", Float) = .125
[HideInInspector] _CapsuleMask_8_Radius_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Radius_Osci_Value_End ("", Float) = .125
[HideInInspector] _CapsuleMask_8_Radius_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Height ("", Float) = .25
[HideInInspector] _CapsuleMask_8_Height_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Height_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Height_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Height_Osci_Value_Start ("", Float) = .25
[HideInInspector] _CapsuleMask_8_Height_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Height_Osci_Value_End ("", Float) = .25
[HideInInspector] _CapsuleMask_8_Height_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Strength_PreInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_8_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_8_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_8_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Strength_PostInversion ("", Float) = 1
[HideInInspector] _CapsuleMask_8_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _CapsuleMask_8_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _CapsuleMask_8_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _CapsuleMask_8_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_1_Enabled ("", Int) = 0
[HideInInspector] _Physbone_1_MaskChannel ("", Int) = 0
[HideInInspector] _Physbone_1_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Physbone_1_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Physbone_1_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_1_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Physbone_1_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_1_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Physbone_1_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_1_Proximity_X ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_1_Proximity_X_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_1_Proximity_Y ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_1_Proximity_Y_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_1_Proximity_Z ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_1_Proximity_Z_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_2_Enabled ("", Int) = 0
[HideInInspector] _Physbone_2_MaskChannel ("", Int) = 0
[HideInInspector] _Physbone_2_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Physbone_2_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Physbone_2_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_2_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Physbone_2_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_2_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Physbone_2_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_2_Proximity_X ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_2_Proximity_X_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_2_Proximity_Y ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_2_Proximity_Y_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_2_Proximity_Z ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_2_Proximity_Z_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_3_Enabled ("", Int) = 0
[HideInInspector] _Physbone_3_MaskChannel ("", Int) = 0
[HideInInspector] _Physbone_3_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Physbone_3_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Physbone_3_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_3_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Physbone_3_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_3_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Physbone_3_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_3_Proximity_X ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_3_Proximity_X_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_3_Proximity_Y ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_3_Proximity_Y_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_3_Proximity_Z ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_3_Proximity_Z_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_4_Enabled ("", Int) = 0
[HideInInspector] _Physbone_4_MaskChannel ("", Int) = 0
[HideInInspector] _Physbone_4_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Physbone_4_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Physbone_4_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_4_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Physbone_4_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_4_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Physbone_4_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_4_Proximity_X ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_4_Proximity_X_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_4_Proximity_Y ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_4_Proximity_Y_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_4_Proximity_Z ("", Range(-1, 1)) = 0
[HideInInspector] _Physbone_4_Proximity_Z_ANIMATED ("", Int) = 0
[HideInInspector] _Physics_Body_ApplyOnMaterialMix ("", Int) = 0
[HideInInspector] _Physbone_Drip_DragForce_Strength ("", Float) = 4
[HideInInspector] _Physbone_Drip_DragForce_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_Drip_MaskChannel ("", Int) = 0
[HideInInspector] _Physbone_Drip_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Physbone_Drip_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Physbone_Drip_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_Drip_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Physbone_Drip_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_Drip_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Physbone_Drip_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_Body_DragForce_Strength ("", Float) = .05
[HideInInspector] _Physbone_Body_DragForce_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_Body_MaskChannel ("", Int) = 0
[HideInInspector] _Physbone_Body_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Physbone_Body_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Physbone_Body_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_Body_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Physbone_Body_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Physbone_Body_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Physbone_Body_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Enabled ("", Int) = 0
[HideInInspector] _TF_Manual_MaskChannel ("", Int) = 0
[HideInInspector] _TF_Manual_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _TF_Manual_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _TF_Manual_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Manual_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _TF_Manual_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Manual_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _TF_Manual_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Manual_Osci_Enabled ("", Int) = 0
[HideInInspector] _TF_Manual_Osci_Slot ("", Int) = 0
[HideInInspector] _TF_Manual_Osci_Value_Start ("", Range(-1, 2)) = 0
[HideInInspector] _TF_Manual_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Manual_Osci_Value_End ("", Range(-1, 2)) = 0
[HideInInspector] _TF_Manual_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _TF_ManualBuiltin_BlendMode ("", Int) = 0
[HideInInspector] _DebugVisualisation_Type ("", Int) = 0
[HideInInspector] _DebugVisualisation_MaskChannel ("", Int) = 0
[HideInInspector] _DebugVisualisation_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _DebugVisualisation_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _DebugVisualisation_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _DebugVisualisation_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _DebugVisualisation_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _DebugVisualisation_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _DebugVisualisation_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _DebugVisualisation_UVBus ("", Int) = 0
[HideInInspector] _TF_Bulging_Enabled ("", Int) = 0
[HideInInspector] _TF_Bulging_MaskChannel ("", Int) = 0
[HideInInspector] _TF_Bulging_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _TF_Bulging_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _TF_Bulging_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Bulging_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _TF_Bulging_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Bulging_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _TF_Bulging_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Bulging_Size ("", Float) = 5
[HideInInspector] _TF_Bulging_Size_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Animation_Bulging_Offset ("", Float) = 0
[HideInInspector] _TF_Animation_Bulging_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _FakeCubemap_Enabled ("", Int) = 0
[HideInInspector] _FakeCubemap_Enabled_ANIMATED ("", Int) = 0
[HideInInspector] _FakeCubemap_Blend ("", Range(0, 1)) = 1
[HideInInspector] _FakeCubemap_Blend_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _FakeCubemap_Texture ("", Cube) = "" {}
[HideInInspector][Gamma] _FakeCubemap_Exposure ("", Range(0, 8)) = 1.0
[HideInInspector] _FakeCubemap_Exposure_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _FakeCubemap_Tint2 ("", Color) = (1,1,1,1)
[HideInInspector] _FakeCubemap_Tint2_ANIMATED ("", Int) = 0
[HideInInspector] _FakeCubemap_AppearsOnMaterial ("", Int) = 0
[HideInInspector][HDR] _World_ReflectionProbe_Tint ("", Color) = (1,1,1,1)
[HideInInspector] _World_ReflectionProbe_Tint_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _Specular_Tint ("", Color) = (1,1,1,1)
[HideInInspector] _Specular_Tint_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivity_Mode ("", Int) = 0
[HideInInspector] _TouchReactivity_Strength ("", Float) = .035
[HideInInspector] _TouchReactivity_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivity_MaskChannel ("", Int) = 0
[HideInInspector] _TouchReactivity_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _TouchReactivity_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _TouchReactivity_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivity_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _TouchReactivity_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivity_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _TouchReactivity_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivity_And_PD_ApplyOnMaterialMix ("", Int) = 0
[HideInInspector] _TouchReactivity_Remap_End ("", Float) = .1
[HideInInspector] _TouchReactivity_Remap_End_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivity_Bypassed ("", Int) = 0
[HideInInspector] _TouchReactivity_Bypassed_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivity_SafeMode4000 ("", Int) = 0
[HideInInspector] _TouchReactivity_Dispersion ("", Float) = 1
[HideInInspector] _TouchReactivity_Dispersion_ANIMATED ("", Int) = 0
[HideInInspector] _ProximityDistortion_Enabled ("", Int) = 0
[HideInInspector] _ProximityDistortion_MaskChannel ("", Int) = 0
[HideInInspector] _ProximityDistortion_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _ProximityDistortion_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _ProximityDistortion_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _ProximityDistortion_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _ProximityDistortion_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _ProximityDistortion_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _ProximityDistortion_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _ProximityDistortion_Depth_Start ("", Float) = .05
[HideInInspector] _ProximityDistortion_Depth_Start_ANIMATED ("", Int) = 0
[HideInInspector] _ProximityDistortion_Depth_End ("", Float) = .225
[HideInInspector] _ProximityDistortion_Depth_End_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Mode ("", Int) = 0
[HideInInspector] _TF_AnimationMap ("", 2D) = "black" {}
[HideInInspector] _TF_AnimationMap_Offset ("", Vector) = (.5,.5,.5,0)
[HideInInspector] _TF_AnimationMap_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _TF_AnimationMap_Scale ("", Vector) = (1,1,1,0)
[HideInInspector] _TF_AnimationMap_Scale_ANIMATED ("", Int) = 0
[HideInInspector] _TF_AnimationMap_Mip ("", Float) = 3
[HideInInspector] _TF_AnimationMap_Mip_ANIMATED ("", Int) = 0
[HideInInspector] _TF_AnimationMap_UseUVBus ("", Int) = 0
[HideInInspector] _TF_AnimationMap_UVBus ("", Int) = 0
[HideInInspector] _TF_Time ("", Range(0, 1)) = 0
[HideInInspector] _TF_Time_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Time_Osci_Enabled ("", Int) = 0
[HideInInspector] _TF_Time_Osci_Slot ("", Int) = 0
[HideInInspector] _TF_Time_Osci_Value_Start ("", Range(0, 1)) = 0
[HideInInspector] _TF_Time_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Time_Osci_Value_End ("", Range(0, 1)) = 0
[HideInInspector] _TF_Time_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Visualisation_Enabled ("", Int) = 0
[HideInInspector] _TF_Visualisation_Speed ("", Float) = 1
[HideInInspector] _TF_Animation_Blur_PS ("", Range(0.001, 0.5)) = .001
[HideInInspector] _TF_Animation_Blur_PS_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Animation_Blur_VS ("", Range(0.001, 0.5)) = .2
[HideInInspector] _TF_Animation_Blur_VS_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Animation_Radial_Radius ("", Float) = 1
[HideInInspector] _TF_Animation_Radial_Radius_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Animation_Radial_Origin ("", Vector) = (0,.5,0,0)
[HideInInspector] _TF_Animation_Radial_Origin_ANIMATED ("", Int) = 0
[HideInInspector] _TF_Animation_Radial_LegacyNoise_Enabled ("", Int) = 0
[HideInInspector] _TF_Animation_CenterOut_Invert ("", Int) = 0
[HideInInspector] _GlossyReflections_Enabled ("", Int) = 1
[HideInInspector] _SpecularHightlights_Enabled ("", Int) = 1
[HideInInspector] _IndirectLighting_Amount ("", Range(0, 1)) = 1
[HideInInspector] _IndirectLighting_Amount_ANIMATED ("", Int) = 0
[HideInInspector] _LightMix_Sensitivity ("", Range(0, 0.999)) = .5
[HideInInspector] _LightMix_Sensitivity_ANIMATED ("", Int) = 0
[HideInInspector] _LightMix_Sensitivity_Osci_Enabled ("", Int) = 0
[HideInInspector] _LightMix_Sensitivity_Osci_Slot ("", Int) = 0
[HideInInspector] _LightMix_Sensitivity_Osci_Value_Start ("", Range(0, 0.999)) = .5
[HideInInspector] _LightMix_Sensitivity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _LightMix_Sensitivity_Osci_Value_End ("", Range(0, 0.999)) = .5
[HideInInspector] _LightMix_Sensitivity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _IntersectionModulation_HSV_Enabled ("", Int) = 0
[HideInInspector] _IntersectionModulation_HSV_Hue_Amount ("", Float) = 0.5
[HideInInspector] _IntersectionModulation_HSV_Hue_Amount_ANIMATED ("", Int) = 0
[HideInInspector] _IntersectionModulation_HSV_Saturation_Amount ("", Float) = 0
[HideInInspector] _IntersectionModulation_HSV_Saturation_Amount_ANIMATED ("", Int) = 0
[HideInInspector] _IntersectionModulation_HSV_Value_Amount ("", Float) = 0
[HideInInspector] _IntersectionModulation_HSV_Value_Amount_ANIMATED ("", Int) = 0
[HideInInspector] _IntersectionModulation_Color_Enabled ("", Int) = 0
[HideInInspector][HDR] _IntersectionModulation_Color_Target ("", Color) = (1,1,1,1)
[HideInInspector] _IntersectionModulation_Color_Target_ANIMATED ("", Int) = 0
[HideInInspector] _IntersectionModulation_Opacity_Enabled ("", Int) = 0
[HideInInspector] _IntersectionModulation_Opacity_Amount ("", Float) = 1
[HideInInspector] _IntersectionModulation_Depth_Start ("", Float) = 0
[HideInInspector] _IntersectionModulation_Depth_End ("", Float) = .2
[HideInInspector] _NormalOffset_Amount ("", Float) = .0
[HideInInspector] _UVBus_1_Source ("", Int) = 0
[HideInInspector] _UVBus_1_VertexChannel_Channel ("", Int) = 0
[HideInInspector] _UVBus_1_WorldLocation_XComponent ("", Int) = 0
[HideInInspector] _UVBus_1_WorldLocation_YComponent ("", Int) = 2
[HideInInspector] _UVBus_1_BakedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_1_BakedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_1_SkinnedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_1_SkinnedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_1_Distortion_Texture ("", 2D) = "black" {}
[HideInInspector] _UVBus_1_Distortion_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_1_Distortion_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_1_Distortion_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _UVBus_1_Distortion_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _UVBus_1_Distortion_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_1_Distortion_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_1_Distortion_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_1_Distortion_Texture_Strength ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_1_Distortion_Texture_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_1_Distortion_Texture_Strength_Osci_Enabled ("", Int) = 0
[HideInInspector] _UVBus_1_Distortion_Texture_Strength_Osci_Slot ("", Int) = 0
[HideInInspector] _UVBus_1_Distortion_Texture_Strength_Osci_Value_Start ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_1_Distortion_Texture_Strength_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_1_Distortion_Texture_Strength_Osci_Value_End ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_1_Distortion_Texture_Strength_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_1_Distortion_Texture_UVBus ("", Int) = 0
[HideInInspector] _UVBus_2_Source ("", Int) = 0
[HideInInspector] _UVBus_2_VertexChannel_Channel ("", Int) = 0
[HideInInspector] _UVBus_2_WorldLocation_XComponent ("", Int) = 0
[HideInInspector] _UVBus_2_WorldLocation_YComponent ("", Int) = 2
[HideInInspector] _UVBus_2_BakedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_2_BakedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_2_SkinnedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_2_SkinnedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_2_Distortion_Texture ("", 2D) = "black" {}
[HideInInspector] _UVBus_2_Distortion_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_2_Distortion_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_2_Distortion_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _UVBus_2_Distortion_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _UVBus_2_Distortion_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_2_Distortion_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_2_Distortion_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_2_Distortion_Texture_Strength ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_2_Distortion_Texture_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_2_Distortion_Texture_Strength_Osci_Enabled ("", Int) = 0
[HideInInspector] _UVBus_2_Distortion_Texture_Strength_Osci_Slot ("", Int) = 0
[HideInInspector] _UVBus_2_Distortion_Texture_Strength_Osci_Value_Start ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_2_Distortion_Texture_Strength_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_2_Distortion_Texture_Strength_Osci_Value_End ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_2_Distortion_Texture_Strength_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_2_Distortion_Texture_UVBus ("", Int) = 0
[HideInInspector] _UVBus_3_Source ("", Int) = 0
[HideInInspector] _UVBus_3_VertexChannel_Channel ("", Int) = 0
[HideInInspector] _UVBus_3_WorldLocation_XComponent ("", Int) = 0
[HideInInspector] _UVBus_3_WorldLocation_YComponent ("", Int) = 2
[HideInInspector] _UVBus_3_BakedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_3_BakedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_3_SkinnedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_3_SkinnedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_3_Distortion_Texture ("", 2D) = "black" {}
[HideInInspector] _UVBus_3_Distortion_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_3_Distortion_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_3_Distortion_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _UVBus_3_Distortion_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _UVBus_3_Distortion_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_3_Distortion_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_3_Distortion_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_3_Distortion_Texture_Strength ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_3_Distortion_Texture_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_3_Distortion_Texture_Strength_Osci_Enabled ("", Int) = 0
[HideInInspector] _UVBus_3_Distortion_Texture_Strength_Osci_Slot ("", Int) = 0
[HideInInspector] _UVBus_3_Distortion_Texture_Strength_Osci_Value_Start ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_3_Distortion_Texture_Strength_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_3_Distortion_Texture_Strength_Osci_Value_End ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_3_Distortion_Texture_Strength_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_3_Distortion_Texture_UVBus ("", Int) = 0
[HideInInspector] _UVBus_4_Source ("", Int) = 0
[HideInInspector] _UVBus_4_VertexChannel_Channel ("", Int) = 0
[HideInInspector] _UVBus_4_WorldLocation_XComponent ("", Int) = 0
[HideInInspector] _UVBus_4_WorldLocation_YComponent ("", Int) = 2
[HideInInspector] _UVBus_4_BakedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_4_BakedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_4_SkinnedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_4_SkinnedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_4_Distortion_Texture ("", 2D) = "black" {}
[HideInInspector] _UVBus_4_Distortion_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_4_Distortion_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_4_Distortion_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _UVBus_4_Distortion_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _UVBus_4_Distortion_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_4_Distortion_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_4_Distortion_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_4_Distortion_Texture_Strength ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_4_Distortion_Texture_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_4_Distortion_Texture_Strength_Osci_Enabled ("", Int) = 0
[HideInInspector] _UVBus_4_Distortion_Texture_Strength_Osci_Slot ("", Int) = 0
[HideInInspector] _UVBus_4_Distortion_Texture_Strength_Osci_Value_Start ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_4_Distortion_Texture_Strength_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_4_Distortion_Texture_Strength_Osci_Value_End ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_4_Distortion_Texture_Strength_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_4_Distortion_Texture_UVBus ("", Int) = 0
[HideInInspector] _UVBus_5_Source ("", Int) = 0
[HideInInspector] _UVBus_5_VertexChannel_Channel ("", Int) = 0
[HideInInspector] _UVBus_5_WorldLocation_XComponent ("", Int) = 0
[HideInInspector] _UVBus_5_WorldLocation_YComponent ("", Int) = 2
[HideInInspector] _UVBus_5_BakedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_5_BakedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_5_SkinnedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_5_SkinnedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_5_Distortion_Texture ("", 2D) = "black" {}
[HideInInspector] _UVBus_5_Distortion_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_5_Distortion_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_5_Distortion_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _UVBus_5_Distortion_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _UVBus_5_Distortion_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_5_Distortion_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_5_Distortion_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_5_Distortion_Texture_Strength ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_5_Distortion_Texture_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_5_Distortion_Texture_Strength_Osci_Enabled ("", Int) = 0
[HideInInspector] _UVBus_5_Distortion_Texture_Strength_Osci_Slot ("", Int) = 0
[HideInInspector] _UVBus_5_Distortion_Texture_Strength_Osci_Value_Start ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_5_Distortion_Texture_Strength_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_5_Distortion_Texture_Strength_Osci_Value_End ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_5_Distortion_Texture_Strength_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_5_Distortion_Texture_UVBus ("", Int) = 0
[HideInInspector] _UVBus_6_Source ("", Int) = 0
[HideInInspector] _UVBus_6_VertexChannel_Channel ("", Int) = 0
[HideInInspector] _UVBus_6_WorldLocation_XComponent ("", Int) = 0
[HideInInspector] _UVBus_6_WorldLocation_YComponent ("", Int) = 2
[HideInInspector] _UVBus_6_BakedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_6_BakedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_6_SkinnedVertex_XComponent ("", Int) = 0
[HideInInspector] _UVBus_6_SkinnedVertex_YComponent ("", Int) = 2
[HideInInspector] _UVBus_6_Distortion_Texture ("", 2D) = "black" {}
[HideInInspector] _UVBus_6_Distortion_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_6_Distortion_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_6_Distortion_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _UVBus_6_Distortion_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _UVBus_6_Distortion_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_6_Distortion_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _UVBus_6_Distortion_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_6_Distortion_Texture_Strength ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_6_Distortion_Texture_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_6_Distortion_Texture_Strength_Osci_Enabled ("", Int) = 0
[HideInInspector] _UVBus_6_Distortion_Texture_Strength_Osci_Slot ("", Int) = 0
[HideInInspector] _UVBus_6_Distortion_Texture_Strength_Osci_Value_Start ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_6_Distortion_Texture_Strength_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_6_Distortion_Texture_Strength_Osci_Value_End ("", Range(-2, 2)) = .1
[HideInInspector] _UVBus_6_Distortion_Texture_Strength_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _UVBus_6_Distortion_Texture_UVBus ("", Int) = 0
[HideInInspector] _RimMask_1_Start ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_1_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_Start_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_1_Start_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_1_Start_Osci_Value_Start ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_1_Start_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_Start_Osci_Value_End ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_1_Start_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_End ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_1_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_End_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_1_End_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_1_End_Osci_Value_Start ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_1_End_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_End_Osci_Value_End ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_1_End_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_Strength_PreInversion ("", Float) = 1
[HideInInspector] _RimMask_1_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_1_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_1_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_1_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_1_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_Strength_PostInversion ("", Float) = 1
[HideInInspector] _RimMask_1_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_1_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_1_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_1_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_1_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_Smoothing ("", Float) = 1
[HideInInspector] _RimMask_1_Smoothing_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_Smoothing_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_1_Smoothing_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_1_Smoothing_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_1_Smoothing_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_1_Smoothing_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_1_Smoothing_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Start ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_2_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Start_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_2_Start_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_2_Start_Osci_Value_Start ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_2_Start_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Start_Osci_Value_End ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_2_Start_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_End ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_2_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_End_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_2_End_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_2_End_Osci_Value_Start ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_2_End_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_End_Osci_Value_End ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_2_End_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Strength_PreInversion ("", Float) = 1
[HideInInspector] _RimMask_2_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_2_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_2_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_2_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_2_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Strength_PostInversion ("", Float) = 1
[HideInInspector] _RimMask_2_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_2_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_2_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_2_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_2_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Smoothing ("", Float) = 1
[HideInInspector] _RimMask_2_Smoothing_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Smoothing_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_2_Smoothing_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_2_Smoothing_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_2_Smoothing_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_2_Smoothing_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_2_Smoothing_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Start ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_3_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Start_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_3_Start_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_3_Start_Osci_Value_Start ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_3_Start_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Start_Osci_Value_End ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_3_Start_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_End ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_3_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_End_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_3_End_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_3_End_Osci_Value_Start ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_3_End_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_End_Osci_Value_End ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_3_End_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Strength_PreInversion ("", Float) = 1
[HideInInspector] _RimMask_3_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_3_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_3_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_3_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_3_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Strength_PostInversion ("", Float) = 1
[HideInInspector] _RimMask_3_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_3_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_3_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_3_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_3_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Smoothing ("", Float) = 1
[HideInInspector] _RimMask_3_Smoothing_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Smoothing_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_3_Smoothing_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_3_Smoothing_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_3_Smoothing_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_3_Smoothing_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_3_Smoothing_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Start ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_4_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Start_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_4_Start_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_4_Start_Osci_Value_Start ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_4_Start_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Start_Osci_Value_End ("", Range(-1, 1)) = 1
[HideInInspector] _RimMask_4_Start_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_End ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_4_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_End_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_4_End_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_4_End_Osci_Value_Start ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_4_End_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_End_Osci_Value_End ("", Range(-1, 1)) = .5
[HideInInspector] _RimMask_4_End_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Strength_PreInversion ("", Float) = 1
[HideInInspector] _RimMask_4_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_4_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_4_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_4_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_4_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Strength_PostInversion ("", Float) = 1
[HideInInspector] _RimMask_4_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_4_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_4_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_4_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_4_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Smoothing ("", Float) = 1
[HideInInspector] _RimMask_4_Smoothing_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Smoothing_Osci_Enabled ("", Int) = 0
[HideInInspector] _RimMask_4_Smoothing_Osci_Slot ("", Int) = 0
[HideInInspector] _RimMask_4_Smoothing_Osci_Value_Start ("", Float) = 1
[HideInInspector] _RimMask_4_Smoothing_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _RimMask_4_Smoothing_Osci_Value_End ("", Float) = 1
[HideInInspector] _RimMask_4_Smoothing_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Distance_Start ("", Float) = 1
[HideInInspector] _DistanceMask_1_Distance_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Distance_Start_Osci_Enabled ("", Int) = 0
[HideInInspector] _DistanceMask_1_Distance_Start_Osci_Slot ("", Int) = 0
[HideInInspector] _DistanceMask_1_Distance_Start_Osci_Value_Start ("", Float) = 1
[HideInInspector] _DistanceMask_1_Distance_Start_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Distance_Start_Osci_Value_End ("", Float) = 1
[HideInInspector] _DistanceMask_1_Distance_Start_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Distance_End ("", Float) = 0
[HideInInspector] _DistanceMask_1_Distance_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Distance_End_Osci_Enabled ("", Int) = 0
[HideInInspector] _DistanceMask_1_Distance_End_Osci_Slot ("", Int) = 0
[HideInInspector] _DistanceMask_1_Distance_End_Osci_Value_Start ("", Float) = 0
[HideInInspector] _DistanceMask_1_Distance_End_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Distance_End_Osci_Value_End ("", Float) = 0
[HideInInspector] _DistanceMask_1_Distance_End_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Strength_PreInversion ("", Float) = 1
[HideInInspector] _DistanceMask_1_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _DistanceMask_1_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _DistanceMask_1_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _DistanceMask_1_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _DistanceMask_1_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Strength_PostInversion ("", Float) = 1
[HideInInspector] _DistanceMask_1_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _DistanceMask_1_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _DistanceMask_1_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _DistanceMask_1_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_1_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _DistanceMask_1_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Distance_Start ("", Float) = 1
[HideInInspector] _DistanceMask_2_Distance_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Distance_Start_Osci_Enabled ("", Int) = 0
[HideInInspector] _DistanceMask_2_Distance_Start_Osci_Slot ("", Int) = 0
[HideInInspector] _DistanceMask_2_Distance_Start_Osci_Value_Start ("", Float) = 1
[HideInInspector] _DistanceMask_2_Distance_Start_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Distance_Start_Osci_Value_End ("", Float) = 1
[HideInInspector] _DistanceMask_2_Distance_Start_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Distance_End ("", Float) = 0
[HideInInspector] _DistanceMask_2_Distance_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Distance_End_Osci_Enabled ("", Int) = 0
[HideInInspector] _DistanceMask_2_Distance_End_Osci_Slot ("", Int) = 0
[HideInInspector] _DistanceMask_2_Distance_End_Osci_Value_Start ("", Float) = 0
[HideInInspector] _DistanceMask_2_Distance_End_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Distance_End_Osci_Value_End ("", Float) = 0
[HideInInspector] _DistanceMask_2_Distance_End_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Strength_PreInversion ("", Float) = 1
[HideInInspector] _DistanceMask_2_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _DistanceMask_2_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _DistanceMask_2_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _DistanceMask_2_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _DistanceMask_2_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Strength_PostInversion ("", Float) = 1
[HideInInspector] _DistanceMask_2_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _DistanceMask_2_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _DistanceMask_2_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _DistanceMask_2_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceMask_2_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _DistanceMask_2_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Pre ("", Float) = 20
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Pre_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Pre_Osci_Enabled ("", Int) = 0
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Pre_Osci_Slot ("", Int) = 0
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_Start ("", Float) = 20
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_End ("", Float) = 20
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivityInteractionMask_Intensity ("", Float) = 1
[HideInInspector] _TouchReactivityInteractionMask_Intensity_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Osci_Enabled ("", Int) = 0
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Osci_Slot ("", Int) = 0
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Osci_Value_Start ("", Float) = 1
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Osci_Value_End ("", Float) = 1
[HideInInspector] _TouchReactivityInteractionMask_Intensity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_BlendMode ("", Int) = 0
[HideInInspector] _BlendMask_1_Mask_Fore_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_1_Mask_Fore_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_1_Mask_Fore_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_1_Mask_Fore_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Mask_Fore_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_1_Mask_Fore_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Mask_Fore_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_1_Mask_Fore_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Mask_Back_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_1_Mask_Back_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_1_Mask_Back_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_1_Mask_Back_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Mask_Back_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_1_Mask_Back_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Mask_Back_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_1_Mask_Back_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Opacity ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_1_Opacity_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Opacity_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_1_Opacity_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_1_Opacity_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_1_Opacity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Opacity_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_1_Opacity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Strength_PreInversion ("", Float) = 1
[HideInInspector] _BlendMask_1_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_1_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_1_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_1_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_1_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Strength_PostInversion ("", Float) = 1
[HideInInspector] _BlendMask_1_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_1_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_1_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_1_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_1_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_1_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_BlendMode ("", Int) = 0
[HideInInspector] _BlendMask_2_Mask_Fore_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_2_Mask_Fore_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_2_Mask_Fore_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_2_Mask_Fore_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Mask_Fore_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_2_Mask_Fore_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Mask_Fore_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_2_Mask_Fore_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Mask_Back_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_2_Mask_Back_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_2_Mask_Back_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_2_Mask_Back_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Mask_Back_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_2_Mask_Back_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Mask_Back_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_2_Mask_Back_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Opacity ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_2_Opacity_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Opacity_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_2_Opacity_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_2_Opacity_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_2_Opacity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Opacity_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_2_Opacity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Strength_PreInversion ("", Float) = 1
[HideInInspector] _BlendMask_2_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_2_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_2_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_2_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_2_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Strength_PostInversion ("", Float) = 1
[HideInInspector] _BlendMask_2_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_2_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_2_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_2_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_2_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_2_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_BlendMode ("", Int) = 0
[HideInInspector] _BlendMask_3_Mask_Fore_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_3_Mask_Fore_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_3_Mask_Fore_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_3_Mask_Fore_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Mask_Fore_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_3_Mask_Fore_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Mask_Fore_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_3_Mask_Fore_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Mask_Back_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_3_Mask_Back_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_3_Mask_Back_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_3_Mask_Back_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Mask_Back_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_3_Mask_Back_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Mask_Back_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_3_Mask_Back_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Opacity ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_3_Opacity_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Opacity_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_3_Opacity_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_3_Opacity_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_3_Opacity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Opacity_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_3_Opacity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Strength_PreInversion ("", Float) = 1
[HideInInspector] _BlendMask_3_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_3_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_3_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_3_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_3_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Strength_PostInversion ("", Float) = 1
[HideInInspector] _BlendMask_3_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_3_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_3_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_3_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_3_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_3_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_BlendMode ("", Int) = 0
[HideInInspector] _BlendMask_4_Mask_Fore_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_4_Mask_Fore_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_4_Mask_Fore_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_4_Mask_Fore_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Mask_Fore_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_4_Mask_Fore_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Mask_Fore_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_4_Mask_Fore_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Mask_Back_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_4_Mask_Back_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_4_Mask_Back_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_4_Mask_Back_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Mask_Back_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_4_Mask_Back_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Mask_Back_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_4_Mask_Back_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Opacity ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_4_Opacity_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Opacity_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_4_Opacity_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_4_Opacity_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_4_Opacity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Opacity_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_4_Opacity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Strength_PreInversion ("", Float) = 1
[HideInInspector] _BlendMask_4_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_4_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_4_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_4_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_4_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Strength_PostInversion ("", Float) = 1
[HideInInspector] _BlendMask_4_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_4_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_4_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_4_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_4_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_4_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_BlendMode ("", Int) = 0
[HideInInspector] _BlendMask_5_Mask_Fore_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_5_Mask_Fore_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_5_Mask_Fore_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_5_Mask_Fore_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Mask_Fore_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_5_Mask_Fore_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Mask_Fore_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_5_Mask_Fore_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Mask_Back_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_5_Mask_Back_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_5_Mask_Back_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_5_Mask_Back_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Mask_Back_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_5_Mask_Back_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Mask_Back_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_5_Mask_Back_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Opacity ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_5_Opacity_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Opacity_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_5_Opacity_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_5_Opacity_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_5_Opacity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Opacity_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_5_Opacity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Strength_PreInversion ("", Float) = 1
[HideInInspector] _BlendMask_5_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_5_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_5_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_5_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_5_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Strength_PostInversion ("", Float) = 1
[HideInInspector] _BlendMask_5_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_5_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_5_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_5_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_5_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_5_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_BlendMode ("", Int) = 0
[HideInInspector] _BlendMask_6_Mask_Fore_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_6_Mask_Fore_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_6_Mask_Fore_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_6_Mask_Fore_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Mask_Fore_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_6_Mask_Fore_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Mask_Fore_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_6_Mask_Fore_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Mask_Back_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_6_Mask_Back_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_6_Mask_Back_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_6_Mask_Back_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Mask_Back_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_6_Mask_Back_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Mask_Back_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_6_Mask_Back_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Opacity ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_6_Opacity_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Opacity_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_6_Opacity_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_6_Opacity_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_6_Opacity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Opacity_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_6_Opacity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Strength_PreInversion ("", Float) = 1
[HideInInspector] _BlendMask_6_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_6_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_6_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_6_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_6_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Strength_PostInversion ("", Float) = 1
[HideInInspector] _BlendMask_6_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_6_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_6_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_6_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_6_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_6_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_BlendMode ("", Int) = 0
[HideInInspector] _BlendMask_7_Mask_Fore_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_7_Mask_Fore_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_7_Mask_Fore_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_7_Mask_Fore_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Mask_Fore_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_7_Mask_Fore_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Mask_Fore_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_7_Mask_Fore_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Mask_Back_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_7_Mask_Back_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_7_Mask_Back_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_7_Mask_Back_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Mask_Back_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_7_Mask_Back_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Mask_Back_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_7_Mask_Back_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Opacity ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_7_Opacity_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Opacity_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_7_Opacity_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_7_Opacity_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_7_Opacity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Opacity_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_7_Opacity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Strength_PreInversion ("", Float) = 1
[HideInInspector] _BlendMask_7_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_7_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_7_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_7_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_7_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Strength_PostInversion ("", Float) = 1
[HideInInspector] _BlendMask_7_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_7_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_7_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_7_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_7_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_7_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_BlendMode ("", Int) = 0
[HideInInspector] _BlendMask_8_Mask_Fore_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_8_Mask_Fore_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_8_Mask_Fore_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_8_Mask_Fore_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Mask_Fore_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_8_Mask_Fore_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Mask_Fore_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_8_Mask_Fore_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Mask_Back_MaskChannel ("", Int) = 0
[HideInInspector] _BlendMask_8_Mask_Back_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _BlendMask_8_Mask_Back_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _BlendMask_8_Mask_Back_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Mask_Back_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _BlendMask_8_Mask_Back_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Mask_Back_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _BlendMask_8_Mask_Back_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Opacity ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_8_Opacity_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Opacity_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_8_Opacity_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_8_Opacity_Osci_Value_Start ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_8_Opacity_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Opacity_Osci_Value_End ("", Range(0, 1)) = 1
[HideInInspector] _BlendMask_8_Opacity_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Strength_PreInversion ("", Float) = 1
[HideInInspector] _BlendMask_8_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_8_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_8_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_8_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_8_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Strength_PostInversion ("", Float) = 1
[HideInInspector] _BlendMask_8_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _BlendMask_8_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _BlendMask_8_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _BlendMask_8_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _BlendMask_8_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _BlendMask_8_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Speed ("", Float) = 1
[HideInInspector] _ScrollMask_1_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Speed_TimeBase ("", Int) = 0
[HideInInspector] _ScrollMask_1_Axis ("", Vector) = (0,1,0,0)
[HideInInspector] _ScrollMask_1_Axis_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Frequency ("", Float) = 1
[HideInInspector] _ScrollMask_1_Frequency_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Frequency_Osci_Enabled ("", Int) = 0
[HideInInspector] _ScrollMask_1_Frequency_Osci_Slot ("", Int) = 0
[HideInInspector] _ScrollMask_1_Frequency_Osci_Value_Start ("", Float) = 1
[HideInInspector] _ScrollMask_1_Frequency_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Frequency_Osci_Value_End ("", Float) = 1
[HideInInspector] _ScrollMask_1_Frequency_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Gap ("", Range(0, 1)) = .5
[HideInInspector] _ScrollMask_1_Gap_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Gap_Osci_Enabled ("", Int) = 0
[HideInInspector] _ScrollMask_1_Gap_Osci_Slot ("", Int) = 0
[HideInInspector] _ScrollMask_1_Gap_Osci_Value_Start ("", Range(0, 1)) = .5
[HideInInspector] _ScrollMask_1_Gap_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Gap_Osci_Value_End ("", Range(0, 1)) = .5
[HideInInspector] _ScrollMask_1_Gap_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Offset ("", Float) = 0
[HideInInspector] _ScrollMask_1_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Offset_Osci_Enabled ("", Int) = 0
[HideInInspector] _ScrollMask_1_Offset_Osci_Slot ("", Int) = 0
[HideInInspector] _ScrollMask_1_Offset_Osci_Value_Start ("", Float) = 0
[HideInInspector] _ScrollMask_1_Offset_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Offset_Osci_Value_End ("", Float) = 0
[HideInInspector] _ScrollMask_1_Offset_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Strength_PreInversion ("", Float) = 1
[HideInInspector] _ScrollMask_1_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _ScrollMask_1_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _ScrollMask_1_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _ScrollMask_1_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _ScrollMask_1_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Strength_PostInversion ("", Float) = 1
[HideInInspector] _ScrollMask_1_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _ScrollMask_1_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _ScrollMask_1_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _ScrollMask_1_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_1_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _ScrollMask_1_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Speed ("", Float) = 1
[HideInInspector] _ScrollMask_2_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Speed_TimeBase ("", Int) = 0
[HideInInspector] _ScrollMask_2_Axis ("", Vector) = (0,1,0,0)
[HideInInspector] _ScrollMask_2_Axis_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Frequency ("", Float) = 1
[HideInInspector] _ScrollMask_2_Frequency_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Frequency_Osci_Enabled ("", Int) = 0
[HideInInspector] _ScrollMask_2_Frequency_Osci_Slot ("", Int) = 0
[HideInInspector] _ScrollMask_2_Frequency_Osci_Value_Start ("", Float) = 1
[HideInInspector] _ScrollMask_2_Frequency_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Frequency_Osci_Value_End ("", Float) = 1
[HideInInspector] _ScrollMask_2_Frequency_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Gap ("", Range(0, 1)) = .5
[HideInInspector] _ScrollMask_2_Gap_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Gap_Osci_Enabled ("", Int) = 0
[HideInInspector] _ScrollMask_2_Gap_Osci_Slot ("", Int) = 0
[HideInInspector] _ScrollMask_2_Gap_Osci_Value_Start ("", Range(0, 1)) = .5
[HideInInspector] _ScrollMask_2_Gap_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Gap_Osci_Value_End ("", Range(0, 1)) = .5
[HideInInspector] _ScrollMask_2_Gap_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Offset ("", Float) = 0
[HideInInspector] _ScrollMask_2_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Offset_Osci_Enabled ("", Int) = 0
[HideInInspector] _ScrollMask_2_Offset_Osci_Slot ("", Int) = 0
[HideInInspector] _ScrollMask_2_Offset_Osci_Value_Start ("", Float) = 0
[HideInInspector] _ScrollMask_2_Offset_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Offset_Osci_Value_End ("", Float) = 0
[HideInInspector] _ScrollMask_2_Offset_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Strength_PreInversion ("", Float) = 1
[HideInInspector] _ScrollMask_2_Strength_PreInversion_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Strength_PreInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _ScrollMask_2_Strength_PreInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _ScrollMask_2_Strength_PreInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _ScrollMask_2_Strength_PreInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Strength_PreInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _ScrollMask_2_Strength_PreInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Strength_PostInversion ("", Float) = 1
[HideInInspector] _ScrollMask_2_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _ScrollMask_2_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _ScrollMask_2_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _ScrollMask_2_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _ScrollMask_2_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _ScrollMask_2_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_BlendMode ("", Int) = 0
[HideInInspector] _MassBlendMask_1_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_1_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_Strength_Osci_Enabled ("", Int) = 0
[HideInInspector] _MassBlendMask_1_Strength_Osci_Slot ("", Int) = 0
[HideInInspector] _MassBlendMask_1_Strength_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MassBlendMask_1_Strength_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_Strength_Osci_Value_End ("", Float) = 1
[HideInInspector] _MassBlendMask_1_Strength_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_Strength_PostInversion ("", Float) = 1
[HideInInspector] _MassBlendMask_1_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MassBlendMask_1_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MassBlendMask_1_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MassBlendMask_1_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MassBlendMask_1_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_1_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_1_1_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_1_1_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_1_1_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_1_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_1_1_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_1_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_1_1_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_2_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_1_2_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_1_2_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_1_2_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_2_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_1_2_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_2_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_1_2_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_3_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_1_3_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_1_3_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_1_3_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_3_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_1_3_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_3_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_1_3_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_4_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_1_4_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_1_4_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_1_4_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_4_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_1_4_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_4_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_1_4_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_5_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_1_5_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_1_5_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_1_5_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_5_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_1_5_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_5_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_1_5_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_6_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_1_6_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_1_6_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_1_6_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_6_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_1_6_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_6_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_1_6_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_7_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_1_7_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_1_7_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_1_7_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_7_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_1_7_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_7_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_1_7_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_8_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_1_8_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_1_8_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_1_8_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_8_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_1_8_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_1_8_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_1_8_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_BlendMode ("", Int) = 0
[HideInInspector] _MassBlendMask_2_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_2_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_Strength_Osci_Enabled ("", Int) = 0
[HideInInspector] _MassBlendMask_2_Strength_Osci_Slot ("", Int) = 0
[HideInInspector] _MassBlendMask_2_Strength_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MassBlendMask_2_Strength_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_Strength_Osci_Value_End ("", Float) = 1
[HideInInspector] _MassBlendMask_2_Strength_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_Strength_PostInversion ("", Float) = 1
[HideInInspector] _MassBlendMask_2_Strength_PostInversion_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_Strength_PostInversion_Osci_Enabled ("", Int) = 0
[HideInInspector] _MassBlendMask_2_Strength_PostInversion_Osci_Slot ("", Int) = 0
[HideInInspector] _MassBlendMask_2_Strength_PostInversion_Osci_Value_Start ("", Float) = 1
[HideInInspector] _MassBlendMask_2_Strength_PostInversion_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_Strength_PostInversion_Osci_Value_End ("", Float) = 1
[HideInInspector] _MassBlendMask_2_Strength_PostInversion_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_1_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_2_1_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_2_1_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_2_1_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_1_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_2_1_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_1_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_2_1_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_2_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_2_2_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_2_2_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_2_2_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_2_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_2_2_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_2_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_2_2_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_3_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_2_3_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_2_3_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_2_3_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_3_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_2_3_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_3_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_2_3_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_4_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_2_4_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_2_4_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_2_4_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_4_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_2_4_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_4_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_2_4_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_5_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_2_5_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_2_5_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_2_5_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_5_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_2_5_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_5_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_2_5_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_6_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_2_6_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_2_6_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_2_6_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_6_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_2_6_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_6_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_2_6_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_7_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_2_7_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_2_7_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_2_7_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_7_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_2_7_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_7_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_2_7_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_8_MaskChannel ("", Int) = 0
[HideInInspector] _MassBlendMask_2_8_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _MassBlendMask_2_8_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _MassBlendMask_2_8_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_8_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _MassBlendMask_2_8_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _MassBlendMask_2_8_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _MassBlendMask_2_8_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _LTCGI ("", Int) = 0
[HideInInspector] _GrabPass_Distortion_Amount ("", Float) = .01
[HideInInspector] _GrabPass_Distortion_Amount_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Distortion_Amount_MaskChannel ("", Int) = 0
[HideInInspector] _GrabPass_Distortion_Amount_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _GrabPass_Distortion_Amount_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _GrabPass_Distortion_Amount_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Distortion_Amount_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _GrabPass_Distortion_Amount_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Distortion_Amount_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _GrabPass_Distortion_Amount_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Zoom_Amount ("", Float) = 1
[HideInInspector] _GrabPass_Zoom_Amount_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Blur_Enabled ("", Int) = 0
[HideInInspector] _GrabPass_Blur_Enabled_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Blur_Dispersion ("", Int) = 2
[HideInInspector] _GrabPass_Blur_Weight_MaskChannel ("", Int) = 0
[HideInInspector] _GrabPass_Blur_Weight_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _GrabPass_Blur_Weight_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _GrabPass_Blur_Weight_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Blur_Weight_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _GrabPass_Blur_Weight_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Blur_Weight_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _GrabPass_Blur_Weight_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector][NoScaleOffset] _GrabPass_Tint_Texture ("", 2D) = "white" {}
[HideInInspector] _GrabPass_Tint_Texture_AlphaIsMask ("", Int) = 0
[HideInInspector] _GrabPass_Tint_Texture_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _GrabPass_Tint_Texture_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Tint_Texture_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _GrabPass_Tint_Texture_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Tint_Texture_ScrollSpeed ("", Vector) = (0,0,0,0)
[HideInInspector] _GrabPass_Tint_Texture_ScrollSpeed_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Tint_Texture_ScrollSpeed_TimeBase ("", Int) = 0
[HideInInspector] _GrabPass_Tint_Texture_UVBus ("", Int) = 0
[HideInInspector] _GrabPass_Tint_Color ("", Color) = (1,1,1,1)
[HideInInspector] _GrabPass_Tint_Color_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Tint_MaskChannel ("", Int) = 0
[HideInInspector] _GrabPass_Tint_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _GrabPass_Tint_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _GrabPass_Tint_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Tint_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _GrabPass_Tint_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _GrabPass_Tint_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _GrabPass_Tint_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_UVBus ("", Int) = 0
[HideInInspector] _Glitter_Density ("", Float) = 700
[HideInInspector] _Glitter_Density_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Amount ("", Range(0, 1)) = .5
[HideInInspector] _Glitter_Amount_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Amount_Osci_Enabled ("", Int) = 0
[HideInInspector] _Glitter_Amount_Osci_Slot ("", Int) = 0
[HideInInspector] _Glitter_Amount_Osci_Value_Start ("", Range(0, 1)) = .5
[HideInInspector] _Glitter_Amount_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Amount_Osci_Value_End ("", Range(0, 1)) = .5
[HideInInspector] _Glitter_Amount_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Disorder ("", Range(0, 1)) = 1
[HideInInspector] _Glitter_AppearsOnMaterial ("", Int) = 0
[HideInInspector] _Glitter_MaskChannel ("", Int) = 0
[HideInInspector] _Glitter_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Glitter_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Glitter_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Glitter_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Glitter_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _Glitter_Color ("", Color) = (1,1,1,1)
[HideInInspector] _Glitter_Color_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Color_Osci_Enabled ("", Int) = 0
[HideInInspector] _Glitter_Color_Osci_Slot ("", Int) = 0
[HideInInspector][HDR] _Glitter_Color_Osci_Color_Start ("", Color) = (1,1,1,1)
[HideInInspector] _Glitter_Color_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector][HDR] _Glitter_Color_Osci_Color_End ("", Color) = (1,1,1,1)
[HideInInspector] _Glitter_Color_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Color_FromAlbedo ("", Range(0, 1)) = 0
[HideInInspector] _Glitter_Color_FromAlbedo_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Color_FromAlbedo_Osci_Enabled ("", Int) = 0
[HideInInspector] _Glitter_Color_FromAlbedo_Osci_Slot ("", Int) = 0
[HideInInspector] _Glitter_Color_FromAlbedo_Osci_Value_Start ("", Range(0, 1)) = 0
[HideInInspector] _Glitter_Color_FromAlbedo_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Color_FromAlbedo_Osci_Value_End ("", Range(0, 1)) = 0
[HideInInspector] _Glitter_Color_FromAlbedo_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Opacity_MinMax ("", Vector) = (.5,1,0,0)
[HideInInspector] _Glitter_Opacity_MinMax_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Opacity_MinMax_Osci_Enabled ("", Int) = 0
[HideInInspector] _Glitter_Opacity_MinMax_Osci_Slot ("", Int) = 0
[HideInInspector] _Glitter_Opacity_MinMax_Osci_Color_Start ("", Vector) = (.5,1,0,0)
[HideInInspector] _Glitter_Opacity_MinMax_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Opacity_MinMax_Osci_Color_End ("", Vector) = (.5,1,0,0)
[HideInInspector] _Glitter_Opacity_MinMax_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Size_MinMax ("", Vector) = (.25,.5,0,0)
[HideInInspector] _Glitter_Size_MinMax_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Size_MinMax_Osci_Enabled ("", Int) = 0
[HideInInspector] _Glitter_Size_MinMax_Osci_Slot ("", Int) = 0
[HideInInspector] _Glitter_Size_MinMax_Osci_Color_Start ("", Vector) = (.25,.5,0,0)
[HideInInspector] _Glitter_Size_MinMax_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Size_MinMax_Osci_Color_End ("", Vector) = (.25,.5,0,0)
[HideInInspector] _Glitter_Size_MinMax_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Brightness_MinMax ("", Vector) = (0,1,0,0)
[HideInInspector] _Glitter_Brightness_MinMax_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Brightness_MinMax_Osci_Enabled ("", Int) = 0
[HideInInspector] _Glitter_Brightness_MinMax_Osci_Slot ("", Int) = 0
[HideInInspector] _Glitter_Brightness_MinMax_Osci_Color_Start ("", Vector) = (0,1,0,0)
[HideInInspector] _Glitter_Brightness_MinMax_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Brightness_MinMax_Osci_Color_End ("", Vector) = (0,1,0,0)
[HideInInspector] _Glitter_Brightness_MinMax_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Texture_Enabled ("", Int) = 0
[HideInInspector][NoScaleOffset] _Glitter_Texture_Map ("", 2D) = "white" {}
[HideInInspector] _Glitter_Texture_Map_AlphaIsMask ("", Int) = 1
[HideInInspector] _Glitter_Texture_Map_Tiling ("", Vector) = (1,1,0,0)
[HideInInspector] _Glitter_Texture_Map_Tiling_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Texture_Map_Offset ("", Vector) = (0,0,0,0)
[HideInInspector] _Glitter_Texture_Map_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Texture_Zoom_MinMax ("", Vector) = (1,1,0,0)
[HideInInspector] _Glitter_Texture_Zoom_MinMax_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Texture_Zoom_MinMax_Osci_Enabled ("", Int) = 0
[HideInInspector] _Glitter_Texture_Zoom_MinMax_Osci_Slot ("", Int) = 0
[HideInInspector] _Glitter_Texture_Zoom_MinMax_Osci_Color_Start ("", Vector) = (1,1,0,0)
[HideInInspector] _Glitter_Texture_Zoom_MinMax_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Texture_Zoom_MinMax_Osci_Color_End ("", Vector) = (1,1,0,0)
[HideInInspector] _Glitter_Texture_Zoom_MinMax_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Texture_Rotation_Random_Enabled ("", Int) = 1
[HideInInspector] _Glitter_Texture_Rotation_Speed ("", Float) = 0
[HideInInspector] _Glitter_Texture_Rotation_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_Texture_Rotation_Speed_TimeBase ("", Int) = 0
[HideInInspector] _Glitter_HSV_Enabled ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_MinMax ("", Vector) = (.0,.2,0,0)
[HideInInspector] _Glitter_HSV_Hue_MinMax_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_MinMax_Osci_Enabled ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_MinMax_Osci_Slot ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_MinMax_Osci_Color_Start ("", Vector) = (.0,.2,0,0)
[HideInInspector] _Glitter_HSV_Hue_MinMax_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_MinMax_Osci_Color_End ("", Vector) = (.0,.2,0,0)
[HideInInspector] _Glitter_HSV_Hue_MinMax_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_HSV_Saturation_MinMax ("", Vector) = (-.1,1,0,0)
[HideInInspector] _Glitter_HSV_Saturation_MinMax_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_HSV_Saturation_MinMax_Osci_Enabled ("", Int) = 0
[HideInInspector] _Glitter_HSV_Saturation_MinMax_Osci_Slot ("", Int) = 0
[HideInInspector] _Glitter_HSV_Saturation_MinMax_Osci_Color_Start ("", Vector) = (-.1,1,0,0)
[HideInInspector] _Glitter_HSV_Saturation_MinMax_Osci_Color_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_HSV_Saturation_MinMax_Osci_Color_End ("", Vector) = (-.1,1,0,0)
[HideInInspector] _Glitter_HSV_Saturation_MinMax_Osci_Color_End_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_Speed ("", Float) = 0
[HideInInspector] _Glitter_HSV_Hue_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_Speed_TimeBase ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_Shift ("", Range(-1, 1)) = 0
[HideInInspector] _Glitter_HSV_Hue_Shift_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_Shift_Osci_Enabled ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_Shift_Osci_Slot ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_Shift_Osci_Value_Start ("", Range(-1, 1)) = 0
[HideInInspector] _Glitter_HSV_Hue_Shift_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_HSV_Hue_Shift_Osci_Value_End ("", Range(-1, 1)) = 0
[HideInInspector] _Glitter_HSV_Hue_Shift_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_AutoBlink_Speed ("", Float) = 3
[HideInInspector] _Glitter_AutoBlink_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_AutoBlink_Speed_TimeBase ("", Int) = 0
[HideInInspector] _Glitter_AutoBlink_Randomness ("", Float) = 1000
[HideInInspector] _Glitter_ManualBlink_Enabled ("", Int) = 0
[HideInInspector] _Glitter_ManualBlink_Offset ("", Float) = 0
[HideInInspector] _Glitter_ManualBlink_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_ManualBlink_Offset_Osci_Enabled ("", Int) = 0
[HideInInspector] _Glitter_ManualBlink_Offset_Osci_Slot ("", Int) = 0
[HideInInspector] _Glitter_ManualBlink_Offset_Osci_Value_Start ("", Float) = 0
[HideInInspector] _Glitter_ManualBlink_Offset_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_ManualBlink_Offset_Osci_Value_End ("", Float) = 0
[HideInInspector] _Glitter_ManualBlink_Offset_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_ManualBlink_Offset_Randomness ("", Float) = 20000
[HideInInspector] _Glitter_UV_Scroll_Speed ("", Vector) = (0,0,0,0)
[HideInInspector] _Glitter_UV_Scroll_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _Glitter_UV_Scroll_Speed_TimeBase ("", Int) = 0
[HideInInspector] _PostProcessHSV_Hue_Shift ("", Range(-1, 1)) = 0
[HideInInspector] _PostProcessHSV_Hue_Shift_ANIMATED ("", Int) = 0
[HideInInspector] _PostProcessHSV_Hue_Shift_Osci_Enabled ("", Int) = 0
[HideInInspector] _PostProcessHSV_Hue_Shift_Osci_Slot ("", Int) = 0
[HideInInspector] _PostProcessHSV_Hue_Shift_Osci_Value_Start ("", Range(-1, 1)) = 0
[HideInInspector] _PostProcessHSV_Hue_Shift_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _PostProcessHSV_Hue_Shift_Osci_Value_End ("", Range(-1, 1)) = 0
[HideInInspector] _PostProcessHSV_Hue_Shift_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _PostProcessHSV_Sat_Shift ("", Range(-1, 1)) = 0
[HideInInspector] _PostProcessHSV_Sat_Shift_ANIMATED ("", Int) = 0
[HideInInspector] _PostProcessHSV_Sat_Shift_Osci_Enabled ("", Int) = 0
[HideInInspector] _PostProcessHSV_Sat_Shift_Osci_Slot ("", Int) = 0
[HideInInspector] _PostProcessHSV_Sat_Shift_Osci_Value_Start ("", Range(-1, 1)) = 0
[HideInInspector] _PostProcessHSV_Sat_Shift_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _PostProcessHSV_Sat_Shift_Osci_Value_End ("", Range(-1, 1)) = 0
[HideInInspector] _PostProcessHSV_Sat_Shift_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _PostProcessHSV_Value_Shift ("", Range(-1, 1)) = 0
[HideInInspector] _PostProcessHSV_Value_Shift_ANIMATED ("", Int) = 0
[HideInInspector] _PostProcessHSV_Value_Shift_Osci_Enabled ("", Int) = 0
[HideInInspector] _PostProcessHSV_Value_Shift_Osci_Slot ("", Int) = 0
[HideInInspector] _PostProcessHSV_Value_Shift_Osci_Value_Start ("", Range(-1, 1)) = 0
[HideInInspector] _PostProcessHSV_Value_Shift_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _PostProcessHSV_Value_Shift_Osci_Value_End ("", Range(-1, 1)) = 0
[HideInInspector] _PostProcessHSV_Value_Shift_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _PostProcessHSV_Hue_Speed ("", Float) = 0
[HideInInspector] _PostProcessHSV_Hue_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _PostProcessHSV_Hue_Speed_TimeBase ("", Int) = 0
[HideInInspector] _DistanceDither_Enabled ("", Int) = 0
[HideInInspector] _DistanceDither_Separate_Faces ("", Int) = 1
[HideInInspector] _DistanceDither_Front_Distance_Start ("", Float) = .1
[HideInInspector] _DistanceDither_Front_Distance_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceDither_Front_Distance_End ("", Float) = 0
[HideInInspector] _DistanceDither_Front_Distance_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceDither_Back_Distance_Start ("", Float) = .01
[HideInInspector] _DistanceDither_Back_Distance_Start_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceDither_Back_Distance_End ("", Float) = 0
[HideInInspector] _DistanceDither_Back_Distance_End_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceDither_Front_Bias ("", Range(-1, 1)) = 0
[HideInInspector] _DistanceDither_Front_Bias_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceDither_Back_Bias ("", Range(-1, 1)) = 0
[HideInInspector] _DistanceDither_Back_Bias_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceDither_MaskChannel ("", Int) = 0
[HideInInspector] _DistanceDither_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _DistanceDither_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _DistanceDither_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceDither_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _DistanceDither_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _DistanceDither_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _DistanceDither_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _BackfaceFill_Enabled ("", Int) = 0
[HideInInspector] _BackfaceFill_Color ("", Color) = (0,0,0,1)
[HideInInspector] _BackfaceFill_Color_ANIMATED ("", Int) = 0
[HideInInspector] _PreviewMirror ("", Int) = 0
[HideInInspector] _Cutoff ("", Range(0, 1)) = .5
[HideInInspector] _Cutoff_ANIMATED ("", Int) = 0
[HideInInspector] _Cutoff_Osci_Enabled ("", Int) = 0
[HideInInspector] _Cutoff_Osci_Slot ("", Int) = 0
[HideInInspector] _Cutoff_Osci_Value_Start ("", Range(0, 1)) = .5
[HideInInspector] _Cutoff_Osci_Value_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Cutoff_Osci_Value_End ("", Range(0, 1)) = .5
[HideInInspector] _Cutoff_Osci_Value_End_ANIMATED ("", Int) = 0
[HideInInspector] _FlipNormalsOnBackFacingTris ("", Int) = 1
[HideInInspector] _Osci_Slot_1_Type ("", Int) = 0
[HideInInspector] _Osci_Slot_1_Speed ("", Float) = 1
[HideInInspector] _Osci_Slot_1_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_1_Speed_TimeBase ("", Int) = 0
[HideInInspector] _Osci_Slot_1_Square_DutyCycle ("", Range(0, 1)) = .5
[HideInInspector] _Osci_Slot_1_Square_DutyCycle_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_1_Sine_HalfWave ("", Int) = 0
[HideInInspector] _Osci_Slot_2_Type ("", Int) = 0
[HideInInspector] _Osci_Slot_2_Speed ("", Float) = 1
[HideInInspector] _Osci_Slot_2_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_2_Speed_TimeBase ("", Int) = 0
[HideInInspector] _Osci_Slot_2_Square_DutyCycle ("", Range(0, 1)) = .5
[HideInInspector] _Osci_Slot_2_Square_DutyCycle_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_2_Sine_HalfWave ("", Int) = 0
[HideInInspector] _Osci_Slot_3_Type ("", Int) = 0
[HideInInspector] _Osci_Slot_3_Speed ("", Float) = 1
[HideInInspector] _Osci_Slot_3_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_3_Speed_TimeBase ("", Int) = 0
[HideInInspector] _Osci_Slot_3_Square_DutyCycle ("", Range(0, 1)) = .5
[HideInInspector] _Osci_Slot_3_Square_DutyCycle_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_3_Sine_HalfWave ("", Int) = 0
[HideInInspector] _Osci_Slot_4_Type ("", Int) = 0
[HideInInspector] _Osci_Slot_4_Speed ("", Float) = 1
[HideInInspector] _Osci_Slot_4_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_4_Speed_TimeBase ("", Int) = 0
[HideInInspector] _Osci_Slot_4_Square_DutyCycle ("", Range(0, 1)) = .5
[HideInInspector] _Osci_Slot_4_Square_DutyCycle_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_4_Sine_HalfWave ("", Int) = 0
[HideInInspector] _Osci_Slot_5_Type ("", Int) = 0
[HideInInspector] _Osci_Slot_5_Speed ("", Float) = 1
[HideInInspector] _Osci_Slot_5_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_5_Speed_TimeBase ("", Int) = 0
[HideInInspector] _Osci_Slot_5_Square_DutyCycle ("", Range(0, 1)) = .5
[HideInInspector] _Osci_Slot_5_Square_DutyCycle_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_5_Sine_HalfWave ("", Int) = 0
[HideInInspector] _Osci_Slot_6_Type ("", Int) = 0
[HideInInspector] _Osci_Slot_6_Speed ("", Float) = 1
[HideInInspector] _Osci_Slot_6_Speed_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_6_Speed_TimeBase ("", Int) = 0
[HideInInspector] _Osci_Slot_6_Square_DutyCycle ("", Range(0, 1)) = .5
[HideInInspector] _Osci_Slot_6_Square_DutyCycle_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Slot_6_Sine_HalfWave ("", Int) = 0
[HideInInspector] _Osci_ALBand_1_Band ("", Int) = 0
[HideInInspector] _Osci_ALBand_1_Band_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_1_Smoothness_Enabled ("", Int) = 0
[HideInInspector] _Osci_ALBand_1_Smoothness_Level ("", Range(0, 15)) = 0
[HideInInspector] _Osci_ALBand_1_Smoothness_Level_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_1_Fallback_Type ("", Float) = 0
[HideInInspector] _Osci_ALBand_1_Fallback_Osci ("", Float) = 0
[HideInInspector] _Osci_ALBand_1_Fallback_Value ("", Range(0, 1)) = 0
[HideInInspector] _Osci_ALBand_2_Band ("", Int) = 0
[HideInInspector] _Osci_ALBand_2_Band_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_2_Smoothness_Enabled ("", Int) = 0
[HideInInspector] _Osci_ALBand_2_Smoothness_Level ("", Range(0, 15)) = 0
[HideInInspector] _Osci_ALBand_2_Smoothness_Level_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_2_Fallback_Type ("", Float) = 0
[HideInInspector] _Osci_ALBand_2_Fallback_Osci ("", Float) = 0
[HideInInspector] _Osci_ALBand_2_Fallback_Value ("", Range(0, 1)) = 0
[HideInInspector] _Osci_ALBand_3_Band ("", Int) = 0
[HideInInspector] _Osci_ALBand_3_Band_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_3_Smoothness_Enabled ("", Int) = 0
[HideInInspector] _Osci_ALBand_3_Smoothness_Level ("", Range(0, 15)) = 0
[HideInInspector] _Osci_ALBand_3_Smoothness_Level_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_3_Fallback_Type ("", Float) = 0
[HideInInspector] _Osci_ALBand_3_Fallback_Osci ("", Float) = 0
[HideInInspector] _Osci_ALBand_3_Fallback_Value ("", Range(0, 1)) = 0
[HideInInspector] _Osci_ALBand_4_Band ("", Int) = 0
[HideInInspector] _Osci_ALBand_4_Band_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_4_Smoothness_Enabled ("", Int) = 0
[HideInInspector] _Osci_ALBand_4_Smoothness_Level ("", Range(0, 15)) = 0
[HideInInspector] _Osci_ALBand_4_Smoothness_Level_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_4_Fallback_Type ("", Float) = 0
[HideInInspector] _Osci_ALBand_4_Fallback_Osci ("", Float) = 0
[HideInInspector] _Osci_ALBand_4_Fallback_Value ("", Range(0, 1)) = 0
[HideInInspector] _Osci_ALBand_5_Band ("", Int) = 0
[HideInInspector] _Osci_ALBand_5_Band_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_5_Smoothness_Enabled ("", Int) = 0
[HideInInspector] _Osci_ALBand_5_Smoothness_Level ("", Range(0, 15)) = 0
[HideInInspector] _Osci_ALBand_5_Smoothness_Level_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_5_Fallback_Type ("", Float) = 0
[HideInInspector] _Osci_ALBand_5_Fallback_Osci ("", Float) = 0
[HideInInspector] _Osci_ALBand_5_Fallback_Value ("", Range(0, 1)) = 0
[HideInInspector] _Osci_ALBand_6_Band ("", Int) = 0
[HideInInspector] _Osci_ALBand_6_Band_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_6_Smoothness_Enabled ("", Int) = 0
[HideInInspector] _Osci_ALBand_6_Smoothness_Level ("", Range(0, 15)) = 0
[HideInInspector] _Osci_ALBand_6_Smoothness_Level_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALBand_6_Fallback_Type ("", Float) = 0
[HideInInspector] _Osci_ALBand_6_Fallback_Osci ("", Float) = 0
[HideInInspector] _Osci_ALBand_6_Fallback_Value ("", Range(0, 1)) = 0
[HideInInspector] _Osci_ALEnergy_1_Smoothness_Enabled ("", Int) = 1
[HideInInspector] _Osci_ALEnergy_1_Smoothness_Level ("", Range(0, 2)) = 1
[HideInInspector] _Osci_ALEnergy_1_Smoothness_Level_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALEnergy_1_Fallback_Type ("", Float) = 0
[HideInInspector] _Osci_ALEnergy_1_Fallback_Osci ("", Float) = 0
[HideInInspector] _Osci_ALEnergy_1_Fallback_Value ("", Range(0, 1)) = 0
[HideInInspector] _Osci_ALEnergy_2_Smoothness_Enabled ("", Int) = 1
[HideInInspector] _Osci_ALEnergy_2_Smoothness_Level ("", Range(0, 2)) = 1
[HideInInspector] _Osci_ALEnergy_2_Smoothness_Level_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_ALEnergy_2_Fallback_Type ("", Float) = 0
[HideInInspector] _Osci_ALEnergy_2_Fallback_Osci ("", Float) = 0
[HideInInspector] _Osci_ALEnergy_2_Fallback_Value ("", Range(0, 1)) = 0
[HideInInspector] _Osci_Mask_1_MaskChannel ("", Int) = 0
[HideInInspector] _Osci_Mask_1_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Osci_Mask_1_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Osci_Mask_1_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_1_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Osci_Mask_1_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_1_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Osci_Mask_1_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_2_MaskChannel ("", Int) = 0
[HideInInspector] _Osci_Mask_2_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Osci_Mask_2_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Osci_Mask_2_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_2_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Osci_Mask_2_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_2_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Osci_Mask_2_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_3_MaskChannel ("", Int) = 0
[HideInInspector] _Osci_Mask_3_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Osci_Mask_3_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Osci_Mask_3_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_3_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Osci_Mask_3_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_3_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Osci_Mask_3_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_4_MaskChannel ("", Int) = 0
[HideInInspector] _Osci_Mask_4_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Osci_Mask_4_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Osci_Mask_4_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_4_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Osci_Mask_4_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_4_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Osci_Mask_4_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_5_MaskChannel ("", Int) = 0
[HideInInspector] _Osci_Mask_5_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Osci_Mask_5_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Osci_Mask_5_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_5_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Osci_Mask_5_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_5_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Osci_Mask_5_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_6_MaskChannel ("", Int) = 0
[HideInInspector] _Osci_Mask_6_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Osci_Mask_6_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Osci_Mask_6_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_6_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Osci_Mask_6_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_6_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Osci_Mask_6_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_7_MaskChannel ("", Int) = 0
[HideInInspector] _Osci_Mask_7_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Osci_Mask_7_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Osci_Mask_7_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_7_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Osci_Mask_7_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_7_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Osci_Mask_7_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_8_MaskChannel ("", Int) = 0
[HideInInspector] _Osci_Mask_8_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Osci_Mask_8_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Osci_Mask_8_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_8_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Osci_Mask_8_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Osci_Mask_8_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Osci_Mask_8_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_1_Type ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_1_Band ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_1_UseTimeAsFallback ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_1_AddTime ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_1_Strength ("", Float) = 1
[HideInInspector] _TimeBase_AL_Slot_2_Type ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_2_Band ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_2_UseTimeAsFallback ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_2_AddTime ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_2_Strength ("", Float) = 1
[HideInInspector] _TimeBase_AL_Slot_3_Type ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_3_Band ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_3_UseTimeAsFallback ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_3_AddTime ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_3_Strength ("", Float) = 1
[HideInInspector] _TimeBase_AL_Slot_4_Type ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_4_Band ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_4_UseTimeAsFallback ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_4_AddTime ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_4_Strength ("", Float) = 1
[HideInInspector] _TimeBase_AL_Slot_5_Type ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_5_Band ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_5_UseTimeAsFallback ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_5_AddTime ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_5_Strength ("", Float) = 1
[HideInInspector] _TimeBase_AL_Slot_6_Type ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_6_Band ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_6_UseTimeAsFallback ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_6_AddTime ("", Int) = 0
[HideInInspector] _TimeBase_AL_Slot_6_Strength ("", Float) = 1
[HideInInspector] _Diffuse_Type ("", Int) = 0
[HideInInspector] _Diffuse_Ramp_1_Start ("", Range(0, 1)) = 0
[HideInInspector] _Diffuse_Ramp_1_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Diffuse_Ramp_1_End ("", Range(0, 1)) = 1
[HideInInspector] _Diffuse_Ramp_1_End_ANIMATED ("", Int) = 0
[HideInInspector] _Diffuse_Ramp_1_Offset ("", Range(-1, 1)) = 0
[HideInInspector] _Diffuse_Ramp_1_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Diffuse_Ramp_2_Start ("", Range(0, 1)) = 0
[HideInInspector] _Diffuse_Ramp_2_Start_ANIMATED ("", Int) = 0
[HideInInspector] _Diffuse_Ramp_2_End ("", Range(0, 1)) = 1
[HideInInspector] _Diffuse_Ramp_2_End_ANIMATED ("", Int) = 0
[HideInInspector] _Diffuse_Ramp_2_Offset ("", Range(-1, 1)) = 0
[HideInInspector] _Diffuse_Ramp_2_Offset_ANIMATED ("", Int) = 0
[HideInInspector] _Diffuse_Ramp_Blend ("", Range(0, 1)) = 0
[HideInInspector] _Diffuse_Ramp_Blend_ANIMATED ("", Int) = 0
[HideInInspector] _Diffuse_LUT_Texture ("", 2D) = "white" {}
[HideInInspector] _Diffuse_Shadow_Tint_Color ("", Color) = (0,0,0,1)
[HideInInspector] _Diffuse_Shadow_Tint_Color_ANIMATED ("", Int) = 0
[HideInInspector] _LightProbeWeight ("", Range(0, 1)) = 1
[HideInInspector] _LightProbeWeight_ANIMATED ("", Int) = 0
[HideInInspector] _LightProbe_Shadow_Tint_Color ("", Color) = (0,0,0,1)
[HideInInspector] _LightProbe_Shadow_Tint_Color_ANIMATED ("", Int) = 0
[HideInInspector] _LightColor_Weight ("", Range(0, 1)) = 1
[HideInInspector] _LightColor_Weight_ANIMATED ("", Int) = 0
[HideInInspector] _FallbackLight_Enabled ("", Int) = 0
[HideInInspector] _FallbackLight_Direction ("", Vector) = (0.57735026919, 0.57735026919, 0.57735026919, 1)
[HideInInspector] _FallbackLight_Direction_ANIMATED ("", Int) = 0
[HideInInspector] _FallbackLight_Color ("", Color) = (1, 0.9568627, 0.8392157, 1)
[HideInInspector] _FallbackLight_Color_ANIMATED ("", Int) = 0
[HideInInspector] _Outline_Enabled ("", Int) = 0
[HideInInspector] _Outline_Size ("", Float) = 0.01
[HideInInspector] _Outline_Size_ANIMATED ("", Int) = 0
[HideInInspector] _Outline_Color ("", Color) = (0,0,0,1)
[HideInInspector] _Outline_Color_ANIMATED ("", Int) = 0
[HideInInspector] _Outline_Mask_Cutoff ("", Range(0, 1)) = .5
[HideInInspector] _Outline_Mask_Cutoff_ANIMATED ("", Int) = 0
[HideInInspector] _Outline_MaskChannel ("", Int) = 0
[HideInInspector] _Outline_MaskChannel_Inverted ("", Int) = 0
[HideInInspector] _Outline_MaskChannel_Strength ("", Float) = 1
[HideInInspector] _Outline_MaskChannel_Strength_ANIMATED ("", Int) = 0
[HideInInspector] _Outline_MaskChannel_Contrast ("", Float) = 1
[HideInInspector] _Outline_MaskChannel_Contrast_ANIMATED ("", Int) = 0
[HideInInspector] _Outline_MaskChannel_Brightness ("", Float) = 0
[HideInInspector] _Outline_MaskChannel_Brightness_ANIMATED ("", Int) = 0
[HideInInspector] _Outline_AppearsOnMaterial ("", Int) = 0
[HideInInspector] _EarlyZ_Enabled ("", Int) = 0
[HideInInspector] _AudioLink_Disabled ("", Int) = 0
[HideInInspector] _AudioLink_Disabled_ANIMATED ("", Int) = 0
[HideInInspector] _VFGOO_SHADOWCASTER_DISABLED ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_UV_BUS_1 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_UV_BUS_2 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_UV_BUS_3 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_UV_BUS_4 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_UV_BUS_5 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_UV_BUS_6 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_SCROLL_1 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_SCROLL_2 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_TOUCH_REACTIVITY ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_POINT_LIGHTS ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_RIM_1 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_RIM_2 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_RIM_3 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_RIM_4 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_CAPSULE_1 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_CAPSULE_2 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_CAPSULE_3 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_CAPSULE_4 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_CAPSULE_5 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_CAPSULE_6 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_CAPSULE_7 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_CAPSULE_8 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_TEXTURE_1 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_TEXTURE_2 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_TEXTURE_3 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_TEXTURE_4 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_TEXTURE_5 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_TEXTURE_6 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_TEXTURE_7 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_TEXTURE_8 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_DISTANCE_1 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_DISTANCE_2 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_MASSBLEND_1 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_MASSBLEND_2 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_BLEND_1 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_BLEND_2 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_BLEND_3 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_BLEND_4 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_BLEND_5 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_BLEND_6 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_BLEND_7 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_MASK_BLEND_8 ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_GLITTER ("", Int) = 0
[HideInInspector] _VFGOO_ENABLE_HSV_POSTPROCESSING ("", Int) = 0


    //_AuxFloat ("Aux Float", Range(-1,1)) = 0
    //_AuxFloat2 ("Aux Float2", Float) = 1
    //_AuxColor("Aux Color", Color) = (1,1,1,1)
    //_AuxTexture ("Aux Texture", 2D) = "white" {}
    //[Toggle] _AuxToggle ("Aux Toggle", Int) = 0

    // Custom properties: if you want your custom properties to appear on the editor, add them
    // anywhere here WITHOUT the HideInInspector attribute!
    // Your properties will appear under a 'Custom Properties' tab at the bottom of the editor.
    // To use the custom property, look for a '@CustomProperty' string in the Common.cginc file and 
    // add the fields underneath. Not doing so may cause compilation issues when the material is locked.
  }

  CustomEditor "ValueFactory_Goo_2.Shader_Editor_Goo"

  SubShader {
    Tags { 
      "RenderType"="Opaque" 
      "VRCFallback"="Standard" 
      "IgnoreProjector"="False"

      "LTCGI" = "_LTCGI"

      "VFG2_GooMaterial" = "Yes"
      "VFG2_UnlockedShaderName" = ""
    }

    Stencil {
      Ref         [_Stencil_Ref]
      ReadMask    [_Stencil_ReadMask]
      WriteMask   [_Stencil_WriteMask]

      Comp        [_Stencil_Comparison]
      Pass        [_Stencil_Pass]
      Fail        [_Stencil_Fail]
      ZFail       [_Stencil_ZFail]

      CompBack    [_Stencil_ComparisonBack]
      PassBack    [_Stencil_PassBack]
      FailBack    [_Stencil_FailBack]
      ZFailBack   [_Stencil_ZFailBack]

      CompFront   [_Stencil_ComparisonFront]
      PassFront   [_Stencil_PassFront]
      FailFront   [_Stencil_FailFront]
      ZFailFront  [_Stencil_ZFailFront] 
    }

    /*GRABPASS MARKER*/

    LOD 100

    /*EARLY Z PASS END*/

    Pass {
      Name "FORWARD"
      Tags { "LightMode" = "ForwardBase" }

      Cull [_CullMode]
      ZWrite [_ZWrite]
      Blend [_SourceBlend] [_DestinationBlend]
      ZTest [_ZTest]

      CGPROGRAM
      #pragma vertex vertex_base
      #pragma fragment pixel_base

      

      #pragma target 5.0
      
      #pragma multi_compile_fwdbase
      #pragma multi_compile_fog
      #pragma skip_variants LIGHTMAP_ON DIRLIGHTMAP_COMBINED DYNAMICLIGHTMAP_ON SHADOWS_SHADOWMASK LIGHTMAP_SHADOW_MIXING 
      #pragma skip_variants VERTEXLIGHT_ON
      #pragma skip_variants LIGHTPROBE_SH
      /*SHADOWS_SCREEN SKIP*/

      
      #pragma shader_feature_local LTCGI

      #pragma shader_feature_local VFGOO_SHADOWCASTER_DISABLED

      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_1
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_2
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_3
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_4
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_5
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_6

      #pragma shader_feature_local VFGOO_ENABLE_MASK_SCROLL_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_SCROLL_2

      #pragma shader_feature_local VFGOO_ENABLE_MASK_TOUCH_REACTIVITY

      #pragma shader_feature_local VFGOO_ENABLE_MASK_POINT_LIGHTS

      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_4

      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_4
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_5
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_6
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_7
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_8

      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_4
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_5
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_6
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_7
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_8

      #pragma shader_feature_local VFGOO_ENABLE_MASK_DISTANCE_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_DISTANCE_2

      #pragma shader_feature_local VFGOO_ENABLE_MASK_MASSBLEND_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_MASSBLEND_2

      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_4
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_5
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_6
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_7
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_8

      #pragma shader_feature_local VFGOO_ENABLE_GLITTER
      #pragma shader_feature_local VFGOO_ENABLE_HSV_POSTPROCESSING
    

      /*VARIANT GEN MARKER*/
      #define VFGOO_ENABLE_MASK_TEXTURE_2
#define VFGOO_ENABLE_MASK_TEXTURE_3
#define OPT_GOO_NOISE_INTERPOLATOR_DISABLED
#define OPT_GOO_DRIP_INTERPOLATOR_DISABLED
#define OPT_UV1_INTERPOLATOR_DISABLED
#define OPT_UV3_INTERPOLATOR_DISABLED
#define OPT_UV4_INTERPOLATOR_DISABLED
#define OPT_UV5_INTERPOLATOR_DISABLED
#define OPT_UV6_INTERPOLATOR_DISABLED
#define OPT_UV7_INTERPOLATOR_DISABLED
#define OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED
#define OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED
#define OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED
#define OPT_GRAB_POS_INTERPOLATOR_DISABLED
// ValueFactory Goo Shader for VRChat avatars.
// Please see TERMS_OF_USE.txt
// (c) 2024 ValueFactory shader.gay
// https://shader.gay

// This file conatins Unity PBS shader code licensed under the following license:
//   Copyright (c) 2016 Unity Technologies
// 
//   Permission is hereby granted, free of charge, to any person obtaining a copy of
//   this software and associated documentation files (the "Software"), to deal in
//   the Software without restriction, including without limitation the rights to
//   use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
//   of the Software, and to permit persons to whom the Software is furnished to do
//   so, subject to the following conditions:
//   
//   The above copyright notice and this permission notice shall be included in all
//   copies or substantial portions of the Software.
//   
//   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
//   FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
//   COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
//   IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#define _Temp 0.00000000
#define _BakedAtVersion 7.00000000
#define _RenderingMode 0.00000000
#define is_TANoiseTex_set true
#define _CullMode 0.00000000
#define _SourceBlend 1.00000000
#define _DestinationBlend 0.00000000
#define _ZTest 4.00000000
#define _ZWrite 1.00000000
#define _Stencil_Ref 0.00000000
#define _Stencil_ReadMask 255.00000000
#define _Stencil_WriteMask 255.00000000
#define _Stencil_Comparison 8.00000000
#define _Stencil_Pass 0.00000000
#define _Stencil_Fail 0.00000000
#define _Stencil_ZFail 0.00000000
#define _Stencil_ComparisonBack 8.00000000
#define _Stencil_PassBack 0.00000000
#define _Stencil_FailBack 0.00000000
#define _Stencil_ZFailBack 0.00000000
#define _Stencil_ComparisonFront 8.00000000
#define _Stencil_PassFront 0.00000000
#define _Stencil_FailFront 0.00000000
#define _Stencil_ZFailFront 0.00000000
#define _OutlineStencil_Ref 0.00000000
#define _OutlineStencil_ReadMask 255.00000000
#define _OutlineStencil_WriteMask 255.00000000
#define _OutlineStencil_Comparison 8.00000000
#define _OutlineStencil_Pass 0.00000000
#define _OutlineStencil_Fail 0.00000000
#define _OutlineStencil_ZFail 0.00000000
#define _OutlineStencil_ComparisonBack 8.00000000
#define _OutlineStencil_PassBack 0.00000000
#define _OutlineStencil_FailBack 0.00000000
#define _OutlineStencil_ZFailBack 0.00000000
#define _OutlineStencil_ComparisonFront 8.00000000
#define _OutlineStencil_PassFront 0.00000000
#define _OutlineStencil_FailFront 0.00000000
#define _OutlineStencil_ZFailFront 0.00000000
#define is_MaskChannel_1_Texture_set false
#define _MaskChannel_1_Texture_UVBus 0.00000000
#define _MaskChannel_1_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_1_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_1_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_1_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_1_Strength_PreInversion 1.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_1_Strength_PostInversion 1.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_2_Texture_set false
#define _MaskChannel_2_Texture_UVBus 0.00000000
#define _MaskChannel_2_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_2_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_2_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_2_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_2_Strength_PreInversion 1.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_2_Strength_PostInversion 1.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_3_Texture_set false
#define _MaskChannel_3_Texture_UVBus 0.00000000
#define _MaskChannel_3_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_3_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_3_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_3_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_3_Strength_PreInversion 1.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_3_Strength_PostInversion 1.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_4_Texture_set false
#define _MaskChannel_4_Texture_UVBus 0.00000000
#define _MaskChannel_4_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_4_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_4_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_4_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_4_Strength_PreInversion 1.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_4_Strength_PostInversion 1.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_5_Texture_set false
#define _MaskChannel_5_Texture_UVBus 0.00000000
#define _MaskChannel_5_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_5_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_5_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_5_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_5_Strength_PreInversion 1.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_5_Strength_PostInversion 1.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_6_Texture_set false
#define _MaskChannel_6_Texture_UVBus 0.00000000
#define _MaskChannel_6_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_6_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_6_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_6_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_6_Strength_PreInversion 1.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_6_Strength_PostInversion 1.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_7_Texture_set false
#define _MaskChannel_7_Texture_UVBus 0.00000000
#define _MaskChannel_7_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_7_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_7_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_7_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_7_Strength_PreInversion 1.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_7_Strength_PostInversion 1.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_8_Texture_set false
#define _MaskChannel_8_Texture_UVBus 0.00000000
#define _MaskChannel_8_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_8_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_8_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_8_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_8_Strength_PreInversion 1.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_8_Strength_PostInversion 1.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MainTex_set false
#define _MainTex_AlphaIsMask 0.00000000
#define _MainTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MainTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MainTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MainTex_ScrollSpeed_TimeBase 0.00000000
#define _MainTex_UVBus 0.00000000
#define _MainTex_MaskChannel 0.00000000
#define _MainTex_MaskChannel_Inverted 0.00000000
#define _MainTex_MaskChannel_Strength 1.00000000
#define _MainTex_MaskChannel_Contrast 1.00000000
#define _MainTex_MaskChannel_Brightness 0.00000000
#define _Color float4(0.00000000, 0.04817181, 0.52099570, 1.00000000)
#define _Color_Osci_Enabled 0.00000000
#define _Color_Osci_Slot 0.00000000
#define _Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define is_Mix_MainTex_set false
#define _Mix_MainTex_AlphaIsMask 0.00000000
#define _Mix_MainTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_MainTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_MainTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_MainTex_ScrollSpeed_TimeBase 0.00000000
#define _Mix_MainTex_UVBus 0.00000000
#define _Mix_MainTex_MaskChannel 0.00000000
#define _Mix_MainTex_MaskChannel_Inverted 0.00000000
#define _Mix_MainTex_MaskChannel_Strength 1.00000000
#define _Mix_MainTex_MaskChannel_Contrast 1.00000000
#define _Mix_MainTex_MaskChannel_Brightness 0.00000000
#define _Mix_Color float4(0.52099570, 0.10224170, 0.52099570, 1.00000000)
#define _Mix_Color_Osci_Enabled 0.00000000
#define _Mix_Color_Osci_Slot 0.00000000
#define _Mix_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Separate_MainTex 1.00000000
#define is_SecondaryTex_set false
#define _SecondaryTex_AlphaIsMask 0.00000000
#define _SecondaryTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_ScrollSpeed_TimeBase 0.00000000
#define _SecondaryTex_UVBus 0.00000000
#define _SecondaryTex_MaskChannel 0.00000000
#define _SecondaryTex_MaskChannel_Inverted 0.00000000
#define _SecondaryTex_MaskChannel_Strength 1.00000000
#define _SecondaryTex_MaskChannel_Contrast 1.00000000
#define _SecondaryTex_MaskChannel_Brightness 0.00000000
#define _SecondaryTex_BlendMode 0.00000000
#define _SecondaryTex_Color float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_Color_Osci_Enabled 0.00000000
#define _SecondaryTex_Color_Osci_Slot 0.00000000
#define _SecondaryTex_Color_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_Color_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define is_Mix_SecondaryTex_set false
#define _Mix_SecondaryTex_AlphaIsMask 0.00000000
#define _Mix_SecondaryTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_ScrollSpeed_TimeBase 0.00000000
#define _Mix_SecondaryTex_UVBus 0.00000000
#define _Mix_SecondaryTex_MaskChannel 0.00000000
#define _Mix_SecondaryTex_MaskChannel_Inverted 0.00000000
#define _Mix_SecondaryTex_MaskChannel_Strength 1.00000000
#define _Mix_SecondaryTex_MaskChannel_Contrast 1.00000000
#define _Mix_SecondaryTex_MaskChannel_Brightness 0.00000000
#define _Mix_SecondaryTex_BlendMode 0.00000000
#define _Mix_SecondaryTex_Color float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_Color_Osci_Enabled 0.00000000
#define _Mix_SecondaryTex_Color_Osci_Slot 0.00000000
#define _Mix_SecondaryTex_Color_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_Color_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_Separate_SecondaryTex 0.00000000
#define _Opacity 0.98000000
#define _Opacity_MaskChannel 0.00000000
#define _Opacity_MaskChannel_Inverted 0.00000000
#define _Opacity_MaskChannel_Strength 1.00000000
#define _Opacity_MaskChannel_Contrast 1.00000000
#define _Opacity_MaskChannel_Brightness 0.00000000
#define _Opacity_Osci_Enabled 0.00000000
#define _Opacity_Osci_Slot 0.00000000
#define _Opacity_Osci_Value_Start 1.00000000
#define _Opacity_Osci_Value_End 1.00000000
#define _Mix_Opacity 1.00000000
#define _Mix_Opacity_MaskChannel 0.00000000
#define _Mix_Opacity_MaskChannel_Inverted 0.00000000
#define _Mix_Opacity_MaskChannel_Strength 1.00000000
#define _Mix_Opacity_MaskChannel_Contrast 1.00000000
#define _Mix_Opacity_MaskChannel_Brightness 0.00000000
#define _Mix_Opacity_Osci_Enabled 0.00000000
#define _Mix_Opacity_Osci_Slot 0.00000000
#define _Mix_Opacity_Osci_Value_Start 1.00000000
#define _Mix_Opacity_Osci_Value_End 1.00000000
#define _Mix_Separate_Opacity 0.00000000
#define is_OcclusionMap_set false
#define _OcclusionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _OcclusionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _OcclusionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _OcclusionMap_ScrollSpeed_TimeBase 0.00000000
#define _OcclusionMap_UVBus 0.00000000
#define _OcclusionMap_MaskChannel 0.00000000
#define _OcclusionMap_MaskChannel_Inverted 0.00000000
#define _OcclusionMap_MaskChannel_Strength 1.00000000
#define _OcclusionMap_MaskChannel_Contrast 1.00000000
#define _OcclusionMap_MaskChannel_Brightness 0.00000000
#define _OcclusionStrength 1.00000000
#define is_Mix_OcclusionMap_set false
#define _Mix_OcclusionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_OcclusionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_OcclusionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_OcclusionMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_OcclusionMap_UVBus 0.00000000
#define _Mix_OcclusionMap_MaskChannel 0.00000000
#define _Mix_OcclusionMap_MaskChannel_Inverted 0.00000000
#define _Mix_OcclusionMap_MaskChannel_Strength 1.00000000
#define _Mix_OcclusionMap_MaskChannel_Contrast 1.00000000
#define _Mix_OcclusionMap_MaskChannel_Brightness 0.00000000
#define _Mix_OcclusionStrength 1.00000000
#define _Mix_Separate_Occlusion 0.00000000
#define is_BumpMap_set false
#define _BumpMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _BumpMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _BumpMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _BumpMap_ScrollSpeed_TimeBase 0.00000000
#define _BumpMap_UVBus 0.00000000
#define _BumpMap_MaskChannel 0.00000000
#define _BumpMap_MaskChannel_Inverted 0.00000000
#define _BumpMap_MaskChannel_Strength 1.00000000
#define _BumpMap_MaskChannel_Contrast 1.00000000
#define _BumpMap_MaskChannel_Brightness 0.00000000
#define _BumpScale 1.00000000
#define _BumpScale_Osci_Enabled 0.00000000
#define _BumpScale_Osci_Slot 0.00000000
#define _BumpScale_Osci_Value_Start 1.00000000
#define _BumpScale_Osci_Value_End 1.00000000
#define is_Mix_BumpMap_set false
#define _Mix_BumpMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_BumpMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_BumpMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_BumpMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_BumpMap_UVBus 0.00000000
#define _Mix_BumpMap_MaskChannel 0.00000000
#define _Mix_BumpMap_MaskChannel_Inverted 0.00000000
#define _Mix_BumpMap_MaskChannel_Strength 1.00000000
#define _Mix_BumpMap_MaskChannel_Contrast 1.00000000
#define _Mix_BumpMap_MaskChannel_Brightness 0.00000000
#define _Mix_BumpScale 1.00000000
#define _Mix_BumpScale_Osci_Enabled 0.00000000
#define _Mix_BumpScale_Osci_Slot 0.00000000
#define _Mix_BumpScale_Osci_Value_Start 1.00000000
#define _Mix_BumpScale_Osci_Value_End 1.00000000
#define _Mix_Separate_BumpMap 0.00000000
#define is_DetailNormalMap_set false
#define _DetailNormalMap_Tiling float4(3.20000000, 3.20000000, 0.00000000, 0.00000000)
#define _DetailNormalMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _DetailNormalMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _DetailNormalMap_ScrollSpeed_TimeBase 0.00000000
#define _DetailNormalMap_UVBus 0.00000000
#define _DetailNormalMap_MaskChannel 0.00000000
#define _DetailNormalMap_MaskChannel_Inverted 0.00000000
#define _DetailNormalMap_MaskChannel_Strength 1.00000000
#define _DetailNormalMap_MaskChannel_Contrast 1.00000000
#define _DetailNormalMap_MaskChannel_Brightness 0.00000000
#define _DetailBumpScale 1.00000000
#define _DetailBumpScale_Osci_Enabled 0.00000000
#define _DetailBumpScale_Osci_Slot 0.00000000
#define _DetailBumpScale_Osci_Value_Start 1.00000000
#define _DetailBumpScale_Osci_Value_End 1.00000000
#define is_Mix_DetailNormalMap_set false
#define _Mix_DetailNormalMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_DetailNormalMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_DetailNormalMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_DetailNormalMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_DetailNormalMap_UVBus 0.00000000
#define _Mix_DetailNormalMap_MaskChannel 0.00000000
#define _Mix_DetailNormalMap_MaskChannel_Inverted 0.00000000
#define _Mix_DetailNormalMap_MaskChannel_Strength 1.00000000
#define _Mix_DetailNormalMap_MaskChannel_Contrast 1.00000000
#define _Mix_DetailNormalMap_MaskChannel_Brightness 0.00000000
#define _Mix_DetailBumpScale 1.00000000
#define _Mix_DetailBumpScale_Osci_Enabled 0.00000000
#define _Mix_DetailBumpScale_Osci_Slot 0.00000000
#define _Mix_DetailBumpScale_Osci_Value_Start 1.00000000
#define _Mix_DetailBumpScale_Osci_Value_End 1.00000000
#define _Mix_Separate_DetailNormalMap 0.00000000
#define is_EmissionMap_set false
#define _EmissionMap_AlphaIsMask 0.00000000
#define _EmissionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _EmissionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap_ScrollSpeed_TimeBase 0.00000000
#define _EmissionMap_UVBus 0.00000000
#define _EmissionMap_MaskChannel 0.00000000
#define _EmissionMap_MaskChannel_Inverted 0.00000000
#define _EmissionMap_MaskChannel_Strength 1.00000000
#define _EmissionMap_MaskChannel_Contrast 1.00000000
#define _EmissionMap_MaskChannel_Brightness 0.00000000
#define _EmissionColor float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _EmissionColor_Osci_Enabled 0.00000000
#define _EmissionColor_Osci_Slot 0.00000000
#define _EmissionColor_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _EmissionColor_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define is_Mix_EmissionMap_set false
#define _Mix_EmissionMap_AlphaIsMask 0.00000000
#define _Mix_EmissionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_EmissionMap_UVBus 0.00000000
#define _Mix_EmissionMap_MaskChannel 0.00000000
#define _Mix_EmissionMap_MaskChannel_Inverted 0.00000000
#define _Mix_EmissionMap_MaskChannel_Strength 1.00000000
#define _Mix_EmissionMap_MaskChannel_Contrast 1.00000000
#define _Mix_EmissionMap_MaskChannel_Brightness 0.00000000
#define _Mix_EmissionColor float4(0.00000000, 1.35320800, 5.65685400, 1.00000000)
#define _Mix_EmissionColor_Osci_Enabled 0.00000000
#define _Mix_EmissionColor_Osci_Slot 0.00000000
#define _Mix_EmissionColor_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_EmissionColor_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Separate_Emission_1 0.00000000
#define is_EmissionMap2_set false
#define _EmissionMap2_AlphaIsMask 0.00000000
#define _EmissionMap2_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _EmissionMap2_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap2_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap2_ScrollSpeed_TimeBase 0.00000000
#define _EmissionMap2_UVBus 0.00000000
#define _EmissionMap2_MaskChannel 0.00000000
#define _EmissionMap2_MaskChannel_Inverted 0.00000000
#define _EmissionMap2_MaskChannel_Strength 1.00000000
#define _EmissionMap2_MaskChannel_Contrast 1.00000000
#define _EmissionMap2_MaskChannel_Brightness 0.00000000
#define _EmissionColor2 float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _EmissionColor2_Osci_Enabled 0.00000000
#define _EmissionColor2_Osci_Slot 0.00000000
#define _EmissionColor2_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _EmissionColor2_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define is_Mix_EmissionMap2_set false
#define _Mix_EmissionMap2_AlphaIsMask 0.00000000
#define _Mix_EmissionMap2_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap2_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap2_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap2_ScrollSpeed_TimeBase 0.00000000
#define _Mix_EmissionMap2_UVBus 0.00000000
#define _Mix_EmissionMap2_MaskChannel 0.00000000
#define _Mix_EmissionMap2_MaskChannel_Inverted 0.00000000
#define _Mix_EmissionMap2_MaskChannel_Strength 1.00000000
#define _Mix_EmissionMap2_MaskChannel_Contrast 1.00000000
#define _Mix_EmissionMap2_MaskChannel_Brightness 0.00000000
#define _Mix_EmissionColor2 float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_EmissionColor2_Osci_Enabled 0.00000000
#define _Mix_EmissionColor2_Osci_Slot 0.00000000
#define _Mix_EmissionColor2_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_EmissionColor2_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Separate_Emission_2 0.00000000
#define is_Matcap_1_Texture_set false
#define _Matcap_1_Texture_AlphaIsMask 0.00000000
#define _Matcap_1_Texture_MaskChannel 0.00000000
#define _Matcap_1_Texture_MaskChannel_Inverted 0.00000000
#define _Matcap_1_Texture_MaskChannel_Strength 1.00000000
#define _Matcap_1_Texture_MaskChannel_Contrast 1.00000000
#define _Matcap_1_Texture_MaskChannel_Brightness 0.00000000
#define _Matcap_1_Color float4(0.13687000, 0.13550940, 0.13550940, 1.00000000)
#define _Matcap_1_Color_Osci_Enabled 0.00000000
#define _Matcap_1_Color_Osci_Slot 0.00000000
#define _Matcap_1_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_1_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_1_Lighting_Enabled 1.00000000
#define _Matcap_1_Size 0.43000000
#define is_Mix_Matcap_1_Texture_set false
#define _Mix_Matcap_1_Texture_AlphaIsMask 0.00000000
#define _Mix_Matcap_1_Texture_MaskChannel 1.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Inverted 0.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Strength 1.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Contrast 1.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Brightness 0.00000000
#define _Mix_Matcap_1_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_1_Color_Osci_Enabled 0.00000000
#define _Mix_Matcap_1_Color_Osci_Slot 0.00000000
#define _Mix_Matcap_1_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_1_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_1_Lighting_Enabled 1.00000000
#define _Mix_Matcap_1_Size 0.00000000
#define _Mix_Separate_Matcap_1 0.00000000
#define is_Matcap_2_Texture_set false
#define _Matcap_2_Texture_AlphaIsMask 0.00000000
#define _Matcap_2_Texture_MaskChannel 0.00000000
#define _Matcap_2_Texture_MaskChannel_Inverted 0.00000000
#define _Matcap_2_Texture_MaskChannel_Strength 1.00000000
#define _Matcap_2_Texture_MaskChannel_Contrast 1.00000000
#define _Matcap_2_Texture_MaskChannel_Brightness 0.00000000
#define _Matcap_2_Color float4(0.13687000, 0.13281220, 0.13281220, 1.00000000)
#define _Matcap_2_Color_Osci_Enabled 0.00000000
#define _Matcap_2_Color_Osci_Slot 0.00000000
#define _Matcap_2_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_2_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_2_Lighting_Enabled 1.00000000
#define _Matcap_2_Size 0.43000000
#define is_Mix_Matcap_2_Texture_set false
#define _Mix_Matcap_2_Texture_AlphaIsMask 0.00000000
#define _Mix_Matcap_2_Texture_MaskChannel 0.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Inverted 0.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Strength 1.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Contrast 1.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Brightness 0.00000000
#define _Mix_Matcap_2_Color float4(0.03864443, 0.03864443, 0.03864443, 1.00000000)
#define _Mix_Matcap_2_Color_Osci_Enabled 0.00000000
#define _Mix_Matcap_2_Color_Osci_Slot 0.00000000
#define _Mix_Matcap_2_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_2_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_2_Lighting_Enabled 1.00000000
#define _Mix_Matcap_2_Size 0.00000000
#define _Mix_Separate_Matcap_2 0.00000000
#define is_Matcap_3_Texture_set false
#define _Matcap_3_Texture_AlphaIsMask 0.00000000
#define _Matcap_3_Texture_MaskChannel 0.00000000
#define _Matcap_3_Texture_MaskChannel_Inverted 0.00000000
#define _Matcap_3_Texture_MaskChannel_Strength 1.00000000
#define _Matcap_3_Texture_MaskChannel_Contrast 1.00000000
#define _Matcap_3_Texture_MaskChannel_Brightness 0.00000000
#define _Matcap_3_Color float4(0.15792650, 0.15320800, 0.15320800, 1.00000000)
#define _Matcap_3_Color_Osci_Enabled 0.00000000
#define _Matcap_3_Color_Osci_Slot 0.00000000
#define _Matcap_3_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_3_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_3_Lighting_Enabled 1.00000000
#define _Matcap_3_Size 0.43000000
#define is_Mix_Matcap_3_Texture_set false
#define _Mix_Matcap_3_Texture_AlphaIsMask 0.00000000
#define _Mix_Matcap_3_Texture_MaskChannel 5.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Inverted 0.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Strength 1.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Contrast 1.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Brightness 0.00000000
#define _Mix_Matcap_3_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_3_Color_Osci_Enabled 0.00000000
#define _Mix_Matcap_3_Color_Osci_Slot 0.00000000
#define _Mix_Matcap_3_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_3_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_3_Lighting_Enabled 1.00000000
#define _Mix_Matcap_3_Size 0.00000000
#define _Mix_Separate_Matcap_3 0.00000000
#define _AlbedoEmissionWeight 0.00000000
#define _AlbedoEmissionWeight_MaskChannel 0.00000000
#define _AlbedoEmissionWeight_MaskChannel_Inverted 0.00000000
#define _AlbedoEmissionWeight_MaskChannel_Strength 1.00000000
#define _AlbedoEmissionWeight_MaskChannel_Contrast 1.00000000
#define _AlbedoEmissionWeight_MaskChannel_Brightness 0.00000000
#define _AlbedoEmissionWeight_Osci_Enabled 0.00000000
#define _AlbedoEmissionWeight_Osci_Slot 0.00000000
#define _AlbedoEmissionWeight_Osci_Value_Start 0.00000000
#define _AlbedoEmissionWeight_Osci_Value_End 0.00000000
#define _AddedEmissionColor float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _AddedEmissionColor_MaskChannel 0.00000000
#define _AddedEmissionColor_MaskChannel_Inverted 0.00000000
#define _AddedEmissionColor_MaskChannel_Strength 1.00000000
#define _AddedEmissionColor_MaskChannel_Contrast 1.00000000
#define _AddedEmissionColor_MaskChannel_Brightness 0.00000000
#define _AddedEmissionColor_Osci_Enabled 0.00000000
#define _AddedEmissionColor_Osci_Slot 0.00000000
#define _AddedEmissionColor_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _AddedEmissionColor_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Mix_AlbedoEmissionWeight 0.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel 0.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Inverted 0.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Strength 1.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Contrast 1.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Brightness 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Enabled 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Slot 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Value_Start 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Value_End 0.00000000
#define _Mix_AddedEmissionColor float4(0.00000000, 1.35320800, 5.65685400, 1.00000000)
#define _Mix_AddedEmissionColor_MaskChannel 0.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Inverted 0.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Strength 1.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Contrast 1.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Brightness 0.00000000
#define _Mix_AddedEmissionColor_Osci_Enabled 0.00000000
#define _Mix_AddedEmissionColor_Osci_Slot 0.00000000
#define _Mix_AddedEmissionColor_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Mix_AddedEmissionColor_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Mix_Separate_Emission_Const 0.00000000
#define _Glossiness 1.00000000
#define _Glossiness_MaskChannel 0.00000000
#define _Glossiness_MaskChannel_Inverted 0.00000000
#define _Glossiness_MaskChannel_Strength 1.00000000
#define _Glossiness_MaskChannel_Contrast 1.00000000
#define _Glossiness_MaskChannel_Brightness 0.00000000
#define _Metallic 0.00000000
#define _Metallic_MaskChannel 0.00000000
#define _Metallic_MaskChannel_Inverted 0.00000000
#define _Metallic_MaskChannel_Strength 1.00000000
#define _Metallic_MaskChannel_Contrast 1.00000000
#define _Metallic_MaskChannel_Brightness 0.00000000
#define _Mix_Glossiness 1.00000000
#define _Mix_Glossiness_MaskChannel 9.00000000
#define _Mix_Glossiness_MaskChannel_Inverted 0.00000000
#define _Mix_Glossiness_MaskChannel_Strength 1.00000000
#define _Mix_Glossiness_MaskChannel_Contrast 1.00000000
#define _Mix_Glossiness_MaskChannel_Brightness 0.00000000
#define _Mix_Metallic 0.00000000
#define _Mix_Metallic_MaskChannel 9.00000000
#define _Mix_Metallic_MaskChannel_Inverted 0.00000000
#define _Mix_Metallic_MaskChannel_Strength 1.00000000
#define _Mix_Metallic_MaskChannel_Contrast 1.00000000
#define _Mix_Metallic_MaskChannel_Brightness 0.00000000
#define _Mix_Separate_MetallicGlossiness 0.00000000
#define _GSAA_Enabled 1.00000000
#define _Goo_Enabled 0.00000000
#define _Goo_Size 7.50000000
#define _Goo_Size_Osci_Enabled 0.00000000
#define _Goo_Size_Osci_Slot 0.00000000
#define _Goo_Size_Osci_Value_Start 7.50000000
#define _Goo_Size_Osci_Value_End 7.50000000
#define _Goo_Speed float4(0.00000000, 0.50000000, 0.50000000, 0.00000000)
#define _Goo_Speed_TimeBase 0.00000000
#define _Goo_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Goo_Offset_Osci_Enabled 0.00000000
#define _Goo_Offset_Osci_Slot 0.00000000
#define _Goo_Offset_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Goo_Offset_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Goo_Normal_Offset_Min_Degrees -10.00000000
#define _Goo_Normal_Offset_Max_Degrees 10.00000000
#define _Goo_Deformation_Enabled 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Enabled 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Slot 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_Start 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_End 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Enabled 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Slot 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_Start 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_End 0.00000000
#define _Goo_Deformation_ProceduralNormal_Size 1.50000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Enabled 0.00000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Slot 0.00000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Value_Start 1.50000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Value_End 1.50000000
#define _Goo_Deformation_ApplyOnMaterialMix 0.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel 0.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Inverted 0.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Strength 1.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Contrast 1.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Brightness 0.00000000
#define _Goo_Drip_Enabled 0.00000000
#define _Goo_Drip_Size 0.20000000
#define _Goo_Drip_Size_Osci_Enabled 0.00000000
#define _Goo_Drip_Size_Osci_Slot 0.00000000
#define _Goo_Drip_Size_Osci_Value_Start 0.20000000
#define _Goo_Drip_Size_Osci_Value_End 0.20000000
#define _Goo_Drip_Start 0.60000000
#define _Goo_Drip_Start_Osci_Enabled 0.00000000
#define _Goo_Drip_Start_Osci_Slot 0.00000000
#define _Goo_Drip_Start_Osci_Value_Start 0.60000000
#define _Goo_Drip_Start_Osci_Value_End 0.60000000
#define _Goo_Drip_End 1.00000000
#define _Goo_Drip_End_Osci_Enabled 0.00000000
#define _Goo_Drip_End_Osci_Slot 0.00000000
#define _Goo_Drip_End_Osci_Value_Start 1.00000000
#define _Goo_Drip_End_Osci_Value_End 1.00000000
#define _Goo_Drip_Amount 1.00000000
#define _Goo_Drip_Amount_Osci_Enabled 0.00000000
#define _Goo_Drip_Amount_Osci_Slot 0.00000000
#define _Goo_Drip_Amount_Osci_Value_Start 1.00000000
#define _Goo_Drip_Amount_Osci_Value_End 1.00000000
#define _Goo_Drip_MaskChannel 0.00000000
#define _Goo_Drip_MaskChannel_Inverted 0.00000000
#define _Goo_Drip_MaskChannel_Strength 1.00000000
#define _Goo_Drip_MaskChannel_Contrast 1.00000000
#define _Goo_Drip_MaskChannel_Brightness 0.00000000
#define _Goo_Drip_ApplyOnMaterialMix 0.00000000
#define _Goo_Drip_Gravity_Vector float4(0.00000000, -1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_1_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_1_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Flip 0.00000000
#define _CapsuleMask_1_Radius 0.12500000
#define _CapsuleMask_1_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_1_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_1_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_1_Height 0.25000000
#define _CapsuleMask_1_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Height_Osci_Slot 0.00000000
#define _CapsuleMask_1_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_1_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_1_Strength_PreInversion 1.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_1_Strength_PostInversion 1.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_2_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_2_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_2_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Flip 0.00000000
#define _CapsuleMask_2_Radius 0.12500000
#define _CapsuleMask_2_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_2_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_2_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_2_Height 0.25000000
#define _CapsuleMask_2_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Height_Osci_Slot 0.00000000
#define _CapsuleMask_2_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_2_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_2_Strength_PreInversion 1.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_2_Strength_PostInversion 1.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_3_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_3_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_3_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Flip 0.00000000
#define _CapsuleMask_3_Radius 0.12500000
#define _CapsuleMask_3_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_3_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_3_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_3_Height 0.25000000
#define _CapsuleMask_3_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Height_Osci_Slot 0.00000000
#define _CapsuleMask_3_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_3_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_3_Strength_PreInversion 1.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_3_Strength_PostInversion 1.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_4_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_4_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_4_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Flip 0.00000000
#define _CapsuleMask_4_Radius 0.12500000
#define _CapsuleMask_4_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_4_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_4_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_4_Height 0.25000000
#define _CapsuleMask_4_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Height_Osci_Slot 0.00000000
#define _CapsuleMask_4_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_4_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_4_Strength_PreInversion 1.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_4_Strength_PostInversion 1.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_5_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_5_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_5_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Flip 0.00000000
#define _CapsuleMask_5_Radius 0.12500000
#define _CapsuleMask_5_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_5_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_5_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_5_Height 0.25000000
#define _CapsuleMask_5_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Height_Osci_Slot 0.00000000
#define _CapsuleMask_5_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_5_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_5_Strength_PreInversion 1.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_5_Strength_PostInversion 1.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_6_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_6_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_6_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Flip 0.00000000
#define _CapsuleMask_6_Radius 0.12500000
#define _CapsuleMask_6_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_6_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_6_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_6_Height 0.25000000
#define _CapsuleMask_6_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Height_Osci_Slot 0.00000000
#define _CapsuleMask_6_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_6_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_6_Strength_PreInversion 1.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_6_Strength_PostInversion 1.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_7_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_7_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_7_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Flip 0.00000000
#define _CapsuleMask_7_Radius 0.12500000
#define _CapsuleMask_7_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_7_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_7_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_7_Height 0.25000000
#define _CapsuleMask_7_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Height_Osci_Slot 0.00000000
#define _CapsuleMask_7_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_7_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_7_Strength_PreInversion 1.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_7_Strength_PostInversion 1.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_8_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_8_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_8_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Flip 0.00000000
#define _CapsuleMask_8_Radius 0.12500000
#define _CapsuleMask_8_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_8_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_8_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_8_Height 0.25000000
#define _CapsuleMask_8_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Height_Osci_Slot 0.00000000
#define _CapsuleMask_8_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_8_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_8_Strength_PreInversion 1.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_8_Strength_PostInversion 1.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Value_End 1.00000000
#define _Physbone_1_Enabled 0.00000000
#define _Physbone_1_MaskChannel 0.00000000
#define _Physbone_1_MaskChannel_Inverted 0.00000000
#define _Physbone_1_MaskChannel_Strength 1.00000000
#define _Physbone_1_MaskChannel_Contrast 1.00000000
#define _Physbone_1_MaskChannel_Brightness 0.00000000
#define _Physbone_1_Proximity_X 0.00000000
#define _Physbone_1_Proximity_Y 0.00000000
#define _Physbone_1_Proximity_Z 0.00000000
#define _Physbone_2_Enabled 0.00000000
#define _Physbone_2_MaskChannel 0.00000000
#define _Physbone_2_MaskChannel_Inverted 0.00000000
#define _Physbone_2_MaskChannel_Strength 1.00000000
#define _Physbone_2_MaskChannel_Contrast 1.00000000
#define _Physbone_2_MaskChannel_Brightness 0.00000000
#define _Physbone_2_Proximity_X 0.00000000
#define _Physbone_2_Proximity_Y 0.00000000
#define _Physbone_2_Proximity_Z 0.00000000
#define _Physbone_3_Enabled 0.00000000
#define _Physbone_3_MaskChannel 0.00000000
#define _Physbone_3_MaskChannel_Inverted 0.00000000
#define _Physbone_3_MaskChannel_Strength 1.00000000
#define _Physbone_3_MaskChannel_Contrast 1.00000000
#define _Physbone_3_MaskChannel_Brightness 0.00000000
#define _Physbone_3_Proximity_X 0.00000000
#define _Physbone_3_Proximity_Y 0.00000000
#define _Physbone_3_Proximity_Z 0.00000000
#define _Physbone_4_Enabled 0.00000000
#define _Physbone_4_MaskChannel 0.00000000
#define _Physbone_4_MaskChannel_Inverted 0.00000000
#define _Physbone_4_MaskChannel_Strength 1.00000000
#define _Physbone_4_MaskChannel_Contrast 1.00000000
#define _Physbone_4_MaskChannel_Brightness 0.00000000
#define _Physbone_4_Proximity_X 0.00000000
#define _Physbone_4_Proximity_Y 0.00000000
#define _Physbone_4_Proximity_Z 0.00000000
#define _Physics_Body_ApplyOnMaterialMix 0.00000000
#define _Physbone_Drip_DragForce_Strength 4.00000000
#define _Physbone_Drip_MaskChannel 0.00000000
#define _Physbone_Drip_MaskChannel_Inverted 0.00000000
#define _Physbone_Drip_MaskChannel_Strength 1.00000000
#define _Physbone_Drip_MaskChannel_Contrast 1.00000000
#define _Physbone_Drip_MaskChannel_Brightness 0.00000000
#define _Physbone_Body_DragForce_Strength 0.05000000
#define _Physbone_Body_MaskChannel 0.00000000
#define _Physbone_Body_MaskChannel_Inverted 0.00000000
#define _Physbone_Body_MaskChannel_Strength 1.00000000
#define _Physbone_Body_MaskChannel_Contrast 1.00000000
#define _Physbone_Body_MaskChannel_Brightness 0.00000000
#define _TF_Enabled 1.00000000
#define _TF_Manual_MaskChannel 0.00000000
#define _TF_Manual_MaskChannel_Inverted 0.00000000
#define _TF_Manual_MaskChannel_Strength 1.00000000
#define _TF_Manual_MaskChannel_Contrast 1.00000000
#define _TF_Manual_MaskChannel_Brightness 0.00000000
#define _TF_Manual_Osci_Enabled 0.00000000
#define _TF_Manual_Osci_Slot 0.00000000
#define _TF_Manual_Osci_Value_Start 0.00000000
#define _TF_Manual_Osci_Value_End 0.00000000
#define _TF_ManualBuiltin_BlendMode 0.00000000
#define _DebugVisualisation_Type 0.00000000
#define _DebugVisualisation_MaskChannel 9.00000000
#define _DebugVisualisation_MaskChannel_Inverted 0.00000000
#define _DebugVisualisation_MaskChannel_Strength 1.00000000
#define _DebugVisualisation_MaskChannel_Contrast 1.00000000
#define _DebugVisualisation_MaskChannel_Brightness 0.00000000
#define _DebugVisualisation_UVBus 0.00000000
#define _TF_Bulging_Enabled 0.00000000
#define _TF_Bulging_MaskChannel 0.00000000
#define _TF_Bulging_MaskChannel_Inverted 0.00000000
#define _TF_Bulging_MaskChannel_Strength 1.00000000
#define _TF_Bulging_MaskChannel_Contrast 1.00000000
#define _TF_Bulging_MaskChannel_Brightness 0.00000000
#define _TF_Bulging_Size 5.00000000
#define _TF_Animation_Bulging_Offset 0.00000000
#define _FakeCubemap_Enabled 0.00000000
#define _FakeCubemap_Blend 1.00000000
#define is_FakeCubemap_Texture_set false
#define _FakeCubemap_Exposure 1.00000000
#define _FakeCubemap_Tint2 float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _FakeCubemap_AppearsOnMaterial 0.00000000
#define _World_ReflectionProbe_Tint float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Specular_Tint float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _TouchReactivity_Mode 0.00000000
#define _TouchReactivity_Strength 0.03500000
#define _TouchReactivity_MaskChannel 0.00000000
#define _TouchReactivity_MaskChannel_Inverted 0.00000000
#define _TouchReactivity_MaskChannel_Strength 1.00000000
#define _TouchReactivity_MaskChannel_Contrast 1.00000000
#define _TouchReactivity_MaskChannel_Brightness 0.00000000
#define _TouchReactivity_And_PD_ApplyOnMaterialMix 0.00000000
#define _TouchReactivity_Remap_End 0.10000000
#define _TouchReactivity_Bypassed 0.00000000
#define _TouchReactivity_SafeMode4000 0.00000000
#define _TouchReactivity_Dispersion 1.00000000
#define _ProximityDistortion_Enabled 0.00000000
#define _ProximityDistortion_MaskChannel 0.00000000
#define _ProximityDistortion_MaskChannel_Inverted 0.00000000
#define _ProximityDistortion_MaskChannel_Strength 1.00000000
#define _ProximityDistortion_MaskChannel_Contrast 1.00000000
#define _ProximityDistortion_MaskChannel_Brightness 0.00000000
#define _ProximityDistortion_Depth_Start 0.05000000
#define _ProximityDistortion_Depth_End 0.22500000
#define _TF_Mode 3.00000000
#define is_TF_AnimationMap_set false
#define _TF_AnimationMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _TF_AnimationMap_Scale float4(6.00000000, 6.00000000, 6.00000000, 0.00000000)
#define _TF_AnimationMap_Mip 3.00000000
#define _TF_AnimationMap_UseUVBus 1.00000000
#define _TF_AnimationMap_UVBus 0.00000000
float _TF_Time;
#define _TF_Time_Osci_Enabled 0.00000000
#define _TF_Time_Osci_Slot 0.00000000
#define _TF_Time_Osci_Value_Start 0.00000000
#define _TF_Time_Osci_Value_End 0.00000000
#define _TF_Visualisation_Enabled 0.00000000
#define _TF_Visualisation_Speed 1.00000000
#define _TF_Animation_Blur_PS 0.09339190
#define _TF_Animation_Blur_VS 0.16535040
#define _TF_Animation_Radial_Radius 0.25461320
#define _TF_Animation_Radial_Origin float4(0.00000000, 0.86484320, 0.16653480, 0.00000000)
#define _TF_Animation_Radial_LegacyNoise_Enabled 0.00000000
#define _TF_Animation_CenterOut_Invert 0.00000000
#define _GlossyReflections_Enabled 1.00000000
#define _SpecularHightlights_Enabled 1.00000000
#define _IndirectLighting_Amount 1.00000000
#define _LightMix_Sensitivity 0.50000000
#define _LightMix_Sensitivity_Osci_Enabled 0.00000000
#define _LightMix_Sensitivity_Osci_Slot 0.00000000
#define _LightMix_Sensitivity_Osci_Value_Start 0.50000000
#define _LightMix_Sensitivity_Osci_Value_End 0.50000000
#define _IntersectionModulation_HSV_Enabled 0.00000000
#define _IntersectionModulation_HSV_Hue_Amount 0.50000000
#define _IntersectionModulation_HSV_Saturation_Amount 0.00000000
#define _IntersectionModulation_HSV_Value_Amount 0.00000000
#define _IntersectionModulation_Color_Enabled 0.00000000
#define _IntersectionModulation_Color_Target float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _IntersectionModulation_Opacity_Enabled 0.00000000
#define _IntersectionModulation_Opacity_Amount 1.00000000
#define _IntersectionModulation_Depth_Start 0.00000000
#define _IntersectionModulation_Depth_End 0.20000000
#define _NormalOffset_Amount 0.00000000
#define _UVBus_1_Source 0.00000000
#define _UVBus_1_VertexChannel_Channel 0.00000000
#define _UVBus_1_WorldLocation_XComponent 0.00000000
#define _UVBus_1_WorldLocation_YComponent 2.00000000
#define _UVBus_1_BakedVertex_XComponent 0.00000000
#define _UVBus_1_BakedVertex_YComponent 2.00000000
#define _UVBus_1_SkinnedVertex_XComponent 0.00000000
#define _UVBus_1_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_1_Distortion_Texture_set false
#define _UVBus_1_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_1_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_1_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_1_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_1_Distortion_Texture_Strength 0.10000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_1_Distortion_Texture_UVBus 0.00000000
#define _UVBus_2_Source 0.00000000
#define _UVBus_2_VertexChannel_Channel 0.00000000
#define _UVBus_2_WorldLocation_XComponent 0.00000000
#define _UVBus_2_WorldLocation_YComponent 2.00000000
#define _UVBus_2_BakedVertex_XComponent 0.00000000
#define _UVBus_2_BakedVertex_YComponent 2.00000000
#define _UVBus_2_SkinnedVertex_XComponent 0.00000000
#define _UVBus_2_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_2_Distortion_Texture_set false
#define _UVBus_2_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_2_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_2_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_2_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_2_Distortion_Texture_Strength 0.10000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_2_Distortion_Texture_UVBus 0.00000000
#define _UVBus_3_Source 0.00000000
#define _UVBus_3_VertexChannel_Channel 0.00000000
#define _UVBus_3_WorldLocation_XComponent 0.00000000
#define _UVBus_3_WorldLocation_YComponent 2.00000000
#define _UVBus_3_BakedVertex_XComponent 0.00000000
#define _UVBus_3_BakedVertex_YComponent 2.00000000
#define _UVBus_3_SkinnedVertex_XComponent 0.00000000
#define _UVBus_3_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_3_Distortion_Texture_set false
#define _UVBus_3_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_3_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_3_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_3_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_3_Distortion_Texture_Strength 0.10000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_3_Distortion_Texture_UVBus 0.00000000
#define _UVBus_4_Source 0.00000000
#define _UVBus_4_VertexChannel_Channel 0.00000000
#define _UVBus_4_WorldLocation_XComponent 0.00000000
#define _UVBus_4_WorldLocation_YComponent 2.00000000
#define _UVBus_4_BakedVertex_XComponent 0.00000000
#define _UVBus_4_BakedVertex_YComponent 2.00000000
#define _UVBus_4_SkinnedVertex_XComponent 0.00000000
#define _UVBus_4_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_4_Distortion_Texture_set false
#define _UVBus_4_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_4_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_4_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_4_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_4_Distortion_Texture_Strength 0.10000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_4_Distortion_Texture_UVBus 0.00000000
#define _UVBus_5_Source 0.00000000
#define _UVBus_5_VertexChannel_Channel 0.00000000
#define _UVBus_5_WorldLocation_XComponent 0.00000000
#define _UVBus_5_WorldLocation_YComponent 2.00000000
#define _UVBus_5_BakedVertex_XComponent 0.00000000
#define _UVBus_5_BakedVertex_YComponent 2.00000000
#define _UVBus_5_SkinnedVertex_XComponent 0.00000000
#define _UVBus_5_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_5_Distortion_Texture_set false
#define _UVBus_5_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_5_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_5_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_5_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_5_Distortion_Texture_Strength 0.10000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_5_Distortion_Texture_UVBus 0.00000000
#define _UVBus_6_Source 0.00000000
#define _UVBus_6_VertexChannel_Channel 0.00000000
#define _UVBus_6_WorldLocation_XComponent 0.00000000
#define _UVBus_6_WorldLocation_YComponent 2.00000000
#define _UVBus_6_BakedVertex_XComponent 0.00000000
#define _UVBus_6_BakedVertex_YComponent 2.00000000
#define _UVBus_6_SkinnedVertex_XComponent 0.00000000
#define _UVBus_6_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_6_Distortion_Texture_set false
#define _UVBus_6_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_6_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_6_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_6_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_6_Distortion_Texture_Strength 0.10000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_6_Distortion_Texture_UVBus 0.00000000
#define _RimMask_1_Start 1.00000000
#define _RimMask_1_Start_Osci_Enabled 0.00000000
#define _RimMask_1_Start_Osci_Slot 0.00000000
#define _RimMask_1_Start_Osci_Value_Start 1.00000000
#define _RimMask_1_Start_Osci_Value_End 1.00000000
#define _RimMask_1_End 0.50000000
#define _RimMask_1_End_Osci_Enabled 0.00000000
#define _RimMask_1_End_Osci_Slot 0.00000000
#define _RimMask_1_End_Osci_Value_Start 0.50000000
#define _RimMask_1_End_Osci_Value_End 0.50000000
#define _RimMask_1_Strength_PreInversion 1.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_1_Strength_PostInversion 1.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_1_Smoothing 1.00000000
#define _RimMask_1_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_1_Smoothing_Osci_Slot 0.00000000
#define _RimMask_1_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_1_Smoothing_Osci_Value_End 1.00000000
#define _RimMask_2_Start 1.00000000
#define _RimMask_2_Start_Osci_Enabled 0.00000000
#define _RimMask_2_Start_Osci_Slot 0.00000000
#define _RimMask_2_Start_Osci_Value_Start 1.00000000
#define _RimMask_2_Start_Osci_Value_End 1.00000000
#define _RimMask_2_End 0.50000000
#define _RimMask_2_End_Osci_Enabled 0.00000000
#define _RimMask_2_End_Osci_Slot 0.00000000
#define _RimMask_2_End_Osci_Value_Start 0.50000000
#define _RimMask_2_End_Osci_Value_End 0.50000000
#define _RimMask_2_Strength_PreInversion 1.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_2_Strength_PostInversion 1.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_2_Smoothing 1.00000000
#define _RimMask_2_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_2_Smoothing_Osci_Slot 0.00000000
#define _RimMask_2_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_2_Smoothing_Osci_Value_End 1.00000000
#define _RimMask_3_Start 1.00000000
#define _RimMask_3_Start_Osci_Enabled 0.00000000
#define _RimMask_3_Start_Osci_Slot 0.00000000
#define _RimMask_3_Start_Osci_Value_Start 1.00000000
#define _RimMask_3_Start_Osci_Value_End 1.00000000
#define _RimMask_3_End 0.50000000
#define _RimMask_3_End_Osci_Enabled 0.00000000
#define _RimMask_3_End_Osci_Slot 0.00000000
#define _RimMask_3_End_Osci_Value_Start 0.50000000
#define _RimMask_3_End_Osci_Value_End 0.50000000
#define _RimMask_3_Strength_PreInversion 1.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_3_Strength_PostInversion 1.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_3_Smoothing 1.00000000
#define _RimMask_3_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_3_Smoothing_Osci_Slot 0.00000000
#define _RimMask_3_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_3_Smoothing_Osci_Value_End 1.00000000
#define _RimMask_4_Start 1.00000000
#define _RimMask_4_Start_Osci_Enabled 0.00000000
#define _RimMask_4_Start_Osci_Slot 0.00000000
#define _RimMask_4_Start_Osci_Value_Start 1.00000000
#define _RimMask_4_Start_Osci_Value_End 1.00000000
#define _RimMask_4_End 0.50000000
#define _RimMask_4_End_Osci_Enabled 0.00000000
#define _RimMask_4_End_Osci_Slot 0.00000000
#define _RimMask_4_End_Osci_Value_Start 0.50000000
#define _RimMask_4_End_Osci_Value_End 0.50000000
#define _RimMask_4_Strength_PreInversion 1.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_4_Strength_PostInversion 1.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_4_Smoothing 1.00000000
#define _RimMask_4_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_4_Smoothing_Osci_Slot 0.00000000
#define _RimMask_4_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_4_Smoothing_Osci_Value_End 1.00000000
#define _DistanceMask_1_Distance_Start 1.00000000
#define _DistanceMask_1_Distance_Start_Osci_Enabled 0.00000000
#define _DistanceMask_1_Distance_Start_Osci_Slot 0.00000000
#define _DistanceMask_1_Distance_Start_Osci_Value_Start 1.00000000
#define _DistanceMask_1_Distance_Start_Osci_Value_End 1.00000000
#define _DistanceMask_1_Distance_End 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Enabled 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Slot 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Value_Start 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Value_End 0.00000000
#define _DistanceMask_1_Strength_PreInversion 1.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _DistanceMask_1_Strength_PostInversion 1.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _DistanceMask_2_Distance_Start 1.00000000
#define _DistanceMask_2_Distance_Start_Osci_Enabled 0.00000000
#define _DistanceMask_2_Distance_Start_Osci_Slot 0.00000000
#define _DistanceMask_2_Distance_Start_Osci_Value_Start 1.00000000
#define _DistanceMask_2_Distance_Start_Osci_Value_End 1.00000000
#define _DistanceMask_2_Distance_End 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Enabled 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Slot 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Value_Start 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Value_End 0.00000000
#define _DistanceMask_2_Strength_PreInversion 1.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _DistanceMask_2_Strength_PostInversion 1.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre 20.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Enabled 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Slot 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_Start 20.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_End 20.00000000
#define _TouchReactivityInteractionMask_Intensity 1.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Enabled 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Slot 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Value_Start 1.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Value_End 1.00000000
#define _BlendMask_1_BlendMode 0.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_1_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_1_Opacity 1.00000000
#define _BlendMask_1_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_1_Opacity_Osci_Slot 0.00000000
#define _BlendMask_1_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_1_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_1_Strength_PreInversion 1.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_1_Strength_PostInversion 1.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_2_BlendMode 0.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_2_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_2_Opacity 1.00000000
#define _BlendMask_2_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_2_Opacity_Osci_Slot 0.00000000
#define _BlendMask_2_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_2_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_2_Strength_PreInversion 1.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_2_Strength_PostInversion 1.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_3_BlendMode 0.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_3_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_3_Opacity 1.00000000
#define _BlendMask_3_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_3_Opacity_Osci_Slot 0.00000000
#define _BlendMask_3_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_3_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_3_Strength_PreInversion 1.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_3_Strength_PostInversion 1.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_4_BlendMode 0.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_4_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_4_Opacity 1.00000000
#define _BlendMask_4_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_4_Opacity_Osci_Slot 0.00000000
#define _BlendMask_4_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_4_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_4_Strength_PreInversion 1.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_4_Strength_PostInversion 1.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_5_BlendMode 0.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_5_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_5_Opacity 1.00000000
#define _BlendMask_5_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_5_Opacity_Osci_Slot 0.00000000
#define _BlendMask_5_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_5_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_5_Strength_PreInversion 1.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_5_Strength_PostInversion 1.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_6_BlendMode 0.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_6_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_6_Opacity 1.00000000
#define _BlendMask_6_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_6_Opacity_Osci_Slot 0.00000000
#define _BlendMask_6_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_6_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_6_Strength_PreInversion 1.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_6_Strength_PostInversion 1.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_7_BlendMode 0.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_7_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_7_Opacity 1.00000000
#define _BlendMask_7_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_7_Opacity_Osci_Slot 0.00000000
#define _BlendMask_7_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_7_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_7_Strength_PreInversion 1.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_7_Strength_PostInversion 1.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_8_BlendMode 0.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_8_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_8_Opacity 1.00000000
#define _BlendMask_8_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_8_Opacity_Osci_Slot 0.00000000
#define _BlendMask_8_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_8_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_8_Strength_PreInversion 1.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_8_Strength_PostInversion 1.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Value_End 1.00000000
#define _ScrollMask_1_Speed 1.00000000
#define _ScrollMask_1_Speed_TimeBase 0.00000000
#define _ScrollMask_1_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _ScrollMask_1_Frequency 1.00000000
#define _ScrollMask_1_Frequency_Osci_Enabled 0.00000000
#define _ScrollMask_1_Frequency_Osci_Slot 0.00000000
#define _ScrollMask_1_Frequency_Osci_Value_Start 1.00000000
#define _ScrollMask_1_Frequency_Osci_Value_End 1.00000000
#define _ScrollMask_1_Gap 0.50000000
#define _ScrollMask_1_Gap_Osci_Enabled 0.00000000
#define _ScrollMask_1_Gap_Osci_Slot 0.00000000
#define _ScrollMask_1_Gap_Osci_Value_Start 0.50000000
#define _ScrollMask_1_Gap_Osci_Value_End 0.50000000
#define _ScrollMask_1_Offset 0.00000000
#define _ScrollMask_1_Offset_Osci_Enabled 0.00000000
#define _ScrollMask_1_Offset_Osci_Slot 0.00000000
#define _ScrollMask_1_Offset_Osci_Value_Start 0.00000000
#define _ScrollMask_1_Offset_Osci_Value_End 0.00000000
#define _ScrollMask_1_Strength_PreInversion 1.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _ScrollMask_1_Strength_PostInversion 1.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _ScrollMask_2_Speed 1.00000000
#define _ScrollMask_2_Speed_TimeBase 0.00000000
#define _ScrollMask_2_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _ScrollMask_2_Frequency 1.00000000
#define _ScrollMask_2_Frequency_Osci_Enabled 0.00000000
#define _ScrollMask_2_Frequency_Osci_Slot 0.00000000
#define _ScrollMask_2_Frequency_Osci_Value_Start 1.00000000
#define _ScrollMask_2_Frequency_Osci_Value_End 1.00000000
#define _ScrollMask_2_Gap 0.50000000
#define _ScrollMask_2_Gap_Osci_Enabled 0.00000000
#define _ScrollMask_2_Gap_Osci_Slot 0.00000000
#define _ScrollMask_2_Gap_Osci_Value_Start 0.50000000
#define _ScrollMask_2_Gap_Osci_Value_End 0.50000000
#define _ScrollMask_2_Offset 0.00000000
#define _ScrollMask_2_Offset_Osci_Enabled 0.00000000
#define _ScrollMask_2_Offset_Osci_Slot 0.00000000
#define _ScrollMask_2_Offset_Osci_Value_Start 0.00000000
#define _ScrollMask_2_Offset_Osci_Value_End 0.00000000
#define _ScrollMask_2_Strength_PreInversion 1.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _ScrollMask_2_Strength_PostInversion 1.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _MassBlendMask_1_BlendMode 0.00000000
#define _MassBlendMask_1_Strength 1.00000000
#define _MassBlendMask_1_Strength_Osci_Enabled 0.00000000
#define _MassBlendMask_1_Strength_Osci_Slot 0.00000000
#define _MassBlendMask_1_Strength_Osci_Value_Start 1.00000000
#define _MassBlendMask_1_Strength_Osci_Value_End 1.00000000
#define _MassBlendMask_1_Strength_PostInversion 1.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _MassBlendMask_1_1_MaskChannel 0.00000000
#define _MassBlendMask_1_1_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_1_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_1_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_1_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_2_MaskChannel 0.00000000
#define _MassBlendMask_1_2_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_2_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_2_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_2_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_3_MaskChannel 0.00000000
#define _MassBlendMask_1_3_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_3_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_3_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_3_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_4_MaskChannel 0.00000000
#define _MassBlendMask_1_4_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_4_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_4_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_4_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_5_MaskChannel 0.00000000
#define _MassBlendMask_1_5_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_5_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_5_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_5_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_6_MaskChannel 0.00000000
#define _MassBlendMask_1_6_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_6_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_6_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_6_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_7_MaskChannel 0.00000000
#define _MassBlendMask_1_7_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_7_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_7_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_7_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_8_MaskChannel 0.00000000
#define _MassBlendMask_1_8_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_8_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_8_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_8_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_BlendMode 0.00000000
#define _MassBlendMask_2_Strength 1.00000000
#define _MassBlendMask_2_Strength_Osci_Enabled 0.00000000
#define _MassBlendMask_2_Strength_Osci_Slot 0.00000000
#define _MassBlendMask_2_Strength_Osci_Value_Start 1.00000000
#define _MassBlendMask_2_Strength_Osci_Value_End 1.00000000
#define _MassBlendMask_2_Strength_PostInversion 1.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _MassBlendMask_2_1_MaskChannel 0.00000000
#define _MassBlendMask_2_1_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_1_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_1_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_1_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_2_MaskChannel 0.00000000
#define _MassBlendMask_2_2_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_2_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_2_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_2_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_3_MaskChannel 0.00000000
#define _MassBlendMask_2_3_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_3_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_3_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_3_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_4_MaskChannel 0.00000000
#define _MassBlendMask_2_4_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_4_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_4_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_4_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_5_MaskChannel 0.00000000
#define _MassBlendMask_2_5_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_5_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_5_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_5_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_6_MaskChannel 0.00000000
#define _MassBlendMask_2_6_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_6_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_6_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_6_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_7_MaskChannel 0.00000000
#define _MassBlendMask_2_7_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_7_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_7_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_7_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_8_MaskChannel 0.00000000
#define _MassBlendMask_2_8_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_8_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_8_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_8_MaskChannel_Brightness 0.00000000
#define _LTCGI 0.00000000
#define _GrabPass_Distortion_Amount 0.01000000
#define _GrabPass_Distortion_Amount_MaskChannel 0.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Inverted 0.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Strength 1.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Contrast 1.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Brightness 0.00000000
#define _GrabPass_Zoom_Amount 1.00000000
#define _GrabPass_Blur_Enabled 0.00000000
#define _GrabPass_Blur_Dispersion 2.00000000
#define _GrabPass_Blur_Weight_MaskChannel 0.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Inverted 0.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Strength 1.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Contrast 1.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Brightness 0.00000000
#define is_GrabPass_Tint_Texture_set false
#define _GrabPass_Tint_Texture_AlphaIsMask 0.00000000
#define _GrabPass_Tint_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _GrabPass_Tint_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _GrabPass_Tint_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _GrabPass_Tint_Texture_ScrollSpeed_TimeBase 0.00000000
#define _GrabPass_Tint_Texture_UVBus 0.00000000
#define _GrabPass_Tint_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _GrabPass_Tint_MaskChannel 0.00000000
#define _GrabPass_Tint_MaskChannel_Inverted 0.00000000
#define _GrabPass_Tint_MaskChannel_Strength 1.00000000
#define _GrabPass_Tint_MaskChannel_Contrast 1.00000000
#define _GrabPass_Tint_MaskChannel_Brightness 0.00000000
#define _Glitter_UVBus 0.00000000
#define _Glitter_Density 700.00000000
#define _Glitter_Amount 0.50000000
#define _Glitter_Amount_Osci_Enabled 0.00000000
#define _Glitter_Amount_Osci_Slot 0.00000000
#define _Glitter_Amount_Osci_Value_Start 0.50000000
#define _Glitter_Amount_Osci_Value_End 0.50000000
#define _Glitter_Disorder 1.00000000
#define _Glitter_AppearsOnMaterial 0.00000000
#define _Glitter_MaskChannel 0.00000000
#define _Glitter_MaskChannel_Inverted 0.00000000
#define _Glitter_MaskChannel_Strength 1.00000000
#define _Glitter_MaskChannel_Contrast 1.00000000
#define _Glitter_MaskChannel_Brightness 0.00000000
#define _Glitter_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Glitter_Color_Osci_Enabled 0.00000000
#define _Glitter_Color_Osci_Slot 0.00000000
#define _Glitter_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Glitter_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Glitter_Color_FromAlbedo 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Enabled 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Slot 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Value_Start 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Value_End 0.00000000
#define _Glitter_Opacity_MinMax float4(0.50000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Opacity_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Opacity_MinMax_Osci_Slot 0.00000000
#define _Glitter_Opacity_MinMax_Osci_Color_Start float4(0.50000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Opacity_MinMax_Osci_Color_End float4(0.50000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Size_MinMax float4(0.25000000, 0.50000000, 0.00000000, 0.00000000)
#define _Glitter_Size_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Size_MinMax_Osci_Slot 0.00000000
#define _Glitter_Size_MinMax_Osci_Color_Start float4(0.25000000, 0.50000000, 0.00000000, 0.00000000)
#define _Glitter_Size_MinMax_Osci_Color_End float4(0.25000000, 0.50000000, 0.00000000, 0.00000000)
#define _Glitter_Brightness_MinMax float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Brightness_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Brightness_MinMax_Osci_Slot 0.00000000
#define _Glitter_Brightness_MinMax_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Brightness_MinMax_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Enabled 0.00000000
#define is_Glitter_Texture_Map_set false
#define _Glitter_Texture_Map_AlphaIsMask 1.00000000
#define _Glitter_Texture_Map_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Map_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Zoom_MinMax float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Zoom_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Texture_Zoom_MinMax_Osci_Slot 0.00000000
#define _Glitter_Texture_Zoom_MinMax_Osci_Color_Start float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Zoom_MinMax_Osci_Color_End float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Rotation_Random_Enabled 1.00000000
#define _Glitter_Texture_Rotation_Speed 0.00000000
#define _Glitter_Texture_Rotation_Speed_TimeBase 0.00000000
#define _Glitter_HSV_Enabled 0.00000000
#define _Glitter_HSV_Hue_MinMax float4(0.00000000, 0.20000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Hue_MinMax_Osci_Enabled 0.00000000
#define _Glitter_HSV_Hue_MinMax_Osci_Slot 0.00000000
#define _Glitter_HSV_Hue_MinMax_Osci_Color_Start float4(0.00000000, 0.20000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Hue_MinMax_Osci_Color_End float4(0.00000000, 0.20000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Saturation_MinMax float4(-0.10000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Saturation_MinMax_Osci_Enabled 0.00000000
#define _Glitter_HSV_Saturation_MinMax_Osci_Slot 0.00000000
#define _Glitter_HSV_Saturation_MinMax_Osci_Color_Start float4(-0.10000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Saturation_MinMax_Osci_Color_End float4(-0.10000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Hue_Speed 0.00000000
#define _Glitter_HSV_Hue_Speed_TimeBase 0.00000000
#define _Glitter_HSV_Hue_Shift 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Enabled 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Slot 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Value_Start 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Value_End 0.00000000
#define _Glitter_AutoBlink_Speed 3.00000000
#define _Glitter_AutoBlink_Speed_TimeBase 0.00000000
#define _Glitter_AutoBlink_Randomness 1000.00000000
#define _Glitter_ManualBlink_Enabled 0.00000000
#define _Glitter_ManualBlink_Offset 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Enabled 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Slot 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Value_Start 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Value_End 0.00000000
#define _Glitter_ManualBlink_Offset_Randomness 20000.00000000
#define _Glitter_UV_Scroll_Speed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Glitter_UV_Scroll_Speed_TimeBase 0.00000000
#define _PostProcessHSV_Hue_Shift 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Enabled 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Slot 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Value_Start 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Value_End 0.00000000
#define _PostProcessHSV_Sat_Shift 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Enabled 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Slot 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Value_Start 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Value_End 0.00000000
#define _PostProcessHSV_Value_Shift 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Enabled 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Slot 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Value_Start 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Value_End 0.00000000
#define _PostProcessHSV_Hue_Speed 0.00000000
#define _PostProcessHSV_Hue_Speed_TimeBase 0.00000000
#define _DistanceDither_Enabled 0.00000000
#define _DistanceDither_Separate_Faces 1.00000000
#define _DistanceDither_Front_Distance_Start 0.10000000
#define _DistanceDither_Front_Distance_End 0.00000000
#define _DistanceDither_Back_Distance_Start 0.01000000
#define _DistanceDither_Back_Distance_End 0.00000000
#define _DistanceDither_Front_Bias 0.00000000
#define _DistanceDither_Back_Bias 0.00000000
#define _DistanceDither_MaskChannel 0.00000000
#define _DistanceDither_MaskChannel_Inverted 0.00000000
#define _DistanceDither_MaskChannel_Strength 1.00000000
#define _DistanceDither_MaskChannel_Contrast 1.00000000
#define _DistanceDither_MaskChannel_Brightness 0.00000000
#define _BackfaceFill_Enabled 0.00000000
#define _BackfaceFill_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _PreviewMirror 0.00000000
#define _Cutoff 0.50000000
#define _Cutoff_Osci_Enabled 0.00000000
#define _Cutoff_Osci_Slot 0.00000000
#define _Cutoff_Osci_Value_Start 0.50000000
#define _Cutoff_Osci_Value_End 0.50000000
#define _FlipNormalsOnBackFacingTris 1.00000000
#define _Osci_Slot_1_Type 0.00000000
#define _Osci_Slot_1_Speed 1.00000000
#define _Osci_Slot_1_Speed_TimeBase 0.00000000
#define _Osci_Slot_1_Square_DutyCycle 0.50000000
#define _Osci_Slot_1_Sine_HalfWave 0.00000000
#define _Osci_Slot_2_Type 0.00000000
#define _Osci_Slot_2_Speed 1.00000000
#define _Osci_Slot_2_Speed_TimeBase 0.00000000
#define _Osci_Slot_2_Square_DutyCycle 0.50000000
#define _Osci_Slot_2_Sine_HalfWave 0.00000000
#define _Osci_Slot_3_Type 0.00000000
#define _Osci_Slot_3_Speed 1.00000000
#define _Osci_Slot_3_Speed_TimeBase 0.00000000
#define _Osci_Slot_3_Square_DutyCycle 0.50000000
#define _Osci_Slot_3_Sine_HalfWave 0.00000000
#define _Osci_Slot_4_Type 0.00000000
#define _Osci_Slot_4_Speed 1.00000000
#define _Osci_Slot_4_Speed_TimeBase 0.00000000
#define _Osci_Slot_4_Square_DutyCycle 0.50000000
#define _Osci_Slot_4_Sine_HalfWave 0.00000000
#define _Osci_Slot_5_Type 0.00000000
#define _Osci_Slot_5_Speed 1.00000000
#define _Osci_Slot_5_Speed_TimeBase 0.00000000
#define _Osci_Slot_5_Square_DutyCycle 0.50000000
#define _Osci_Slot_5_Sine_HalfWave 0.00000000
#define _Osci_Slot_6_Type 0.00000000
#define _Osci_Slot_6_Speed 1.00000000
#define _Osci_Slot_6_Speed_TimeBase 0.00000000
#define _Osci_Slot_6_Square_DutyCycle 0.50000000
#define _Osci_Slot_6_Sine_HalfWave 0.00000000
#define _Osci_ALBand_1_Band 0.00000000
#define _Osci_ALBand_1_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_1_Smoothness_Level 0.00000000
#define _Osci_ALBand_1_Fallback_Type 0.00000000
#define _Osci_ALBand_1_Fallback_Osci 0.00000000
#define _Osci_ALBand_1_Fallback_Value 0.00000000
#define _Osci_ALBand_2_Band 0.00000000
#define _Osci_ALBand_2_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_2_Smoothness_Level 0.00000000
#define _Osci_ALBand_2_Fallback_Type 0.00000000
#define _Osci_ALBand_2_Fallback_Osci 0.00000000
#define _Osci_ALBand_2_Fallback_Value 0.00000000
#define _Osci_ALBand_3_Band 0.00000000
#define _Osci_ALBand_3_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_3_Smoothness_Level 0.00000000
#define _Osci_ALBand_3_Fallback_Type 0.00000000
#define _Osci_ALBand_3_Fallback_Osci 0.00000000
#define _Osci_ALBand_3_Fallback_Value 0.00000000
#define _Osci_ALBand_4_Band 0.00000000
#define _Osci_ALBand_4_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_4_Smoothness_Level 0.00000000
#define _Osci_ALBand_4_Fallback_Type 0.00000000
#define _Osci_ALBand_4_Fallback_Osci 0.00000000
#define _Osci_ALBand_4_Fallback_Value 0.00000000
#define _Osci_ALBand_5_Band 0.00000000
#define _Osci_ALBand_5_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_5_Smoothness_Level 0.00000000
#define _Osci_ALBand_5_Fallback_Type 0.00000000
#define _Osci_ALBand_5_Fallback_Osci 0.00000000
#define _Osci_ALBand_5_Fallback_Value 0.00000000
#define _Osci_ALBand_6_Band 0.00000000
#define _Osci_ALBand_6_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_6_Smoothness_Level 0.00000000
#define _Osci_ALBand_6_Fallback_Type 0.00000000
#define _Osci_ALBand_6_Fallback_Osci 0.00000000
#define _Osci_ALBand_6_Fallback_Value 0.00000000
#define _Osci_ALEnergy_1_Smoothness_Enabled 1.00000000
#define _Osci_ALEnergy_1_Smoothness_Level 1.00000000
#define _Osci_ALEnergy_1_Fallback_Type 0.00000000
#define _Osci_ALEnergy_1_Fallback_Osci 0.00000000
#define _Osci_ALEnergy_1_Fallback_Value 0.00000000
#define _Osci_ALEnergy_2_Smoothness_Enabled 1.00000000
#define _Osci_ALEnergy_2_Smoothness_Level 1.00000000
#define _Osci_ALEnergy_2_Fallback_Type 0.00000000
#define _Osci_ALEnergy_2_Fallback_Osci 0.00000000
#define _Osci_ALEnergy_2_Fallback_Value 0.00000000
#define _Osci_Mask_1_MaskChannel 0.00000000
#define _Osci_Mask_1_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_1_MaskChannel_Strength 1.00000000
#define _Osci_Mask_1_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_1_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_2_MaskChannel 0.00000000
#define _Osci_Mask_2_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_2_MaskChannel_Strength 1.00000000
#define _Osci_Mask_2_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_2_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_3_MaskChannel 0.00000000
#define _Osci_Mask_3_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_3_MaskChannel_Strength 1.00000000
#define _Osci_Mask_3_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_3_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_4_MaskChannel 0.00000000
#define _Osci_Mask_4_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_4_MaskChannel_Strength 1.00000000
#define _Osci_Mask_4_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_4_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_5_MaskChannel 0.00000000
#define _Osci_Mask_5_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_5_MaskChannel_Strength 1.00000000
#define _Osci_Mask_5_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_5_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_6_MaskChannel 0.00000000
#define _Osci_Mask_6_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_6_MaskChannel_Strength 1.00000000
#define _Osci_Mask_6_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_6_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_7_MaskChannel 0.00000000
#define _Osci_Mask_7_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_7_MaskChannel_Strength 1.00000000
#define _Osci_Mask_7_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_7_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_8_MaskChannel 0.00000000
#define _Osci_Mask_8_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_8_MaskChannel_Strength 1.00000000
#define _Osci_Mask_8_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_8_MaskChannel_Brightness 0.00000000
#define _TimeBase_AL_Slot_1_Type 0.00000000
#define _TimeBase_AL_Slot_1_Band 0.00000000
#define _TimeBase_AL_Slot_1_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_1_AddTime 0.00000000
#define _TimeBase_AL_Slot_1_Strength 1.00000000
#define _TimeBase_AL_Slot_2_Type 0.00000000
#define _TimeBase_AL_Slot_2_Band 0.00000000
#define _TimeBase_AL_Slot_2_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_2_AddTime 0.00000000
#define _TimeBase_AL_Slot_2_Strength 1.00000000
#define _TimeBase_AL_Slot_3_Type 0.00000000
#define _TimeBase_AL_Slot_3_Band 0.00000000
#define _TimeBase_AL_Slot_3_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_3_AddTime 0.00000000
#define _TimeBase_AL_Slot_3_Strength 1.00000000
#define _TimeBase_AL_Slot_4_Type 0.00000000
#define _TimeBase_AL_Slot_4_Band 0.00000000
#define _TimeBase_AL_Slot_4_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_4_AddTime 0.00000000
#define _TimeBase_AL_Slot_4_Strength 1.00000000
#define _TimeBase_AL_Slot_5_Type 0.00000000
#define _TimeBase_AL_Slot_5_Band 0.00000000
#define _TimeBase_AL_Slot_5_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_5_AddTime 0.00000000
#define _TimeBase_AL_Slot_5_Strength 1.00000000
#define _TimeBase_AL_Slot_6_Type 0.00000000
#define _TimeBase_AL_Slot_6_Band 0.00000000
#define _TimeBase_AL_Slot_6_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_6_AddTime 0.00000000
#define _TimeBase_AL_Slot_6_Strength 1.00000000
#define _Diffuse_Type 0.00000000
#define _Diffuse_Ramp_1_Start 0.00000000
#define _Diffuse_Ramp_1_End 1.00000000
#define _Diffuse_Ramp_1_Offset 0.00000000
#define _Diffuse_Ramp_2_Start 0.00000000
#define _Diffuse_Ramp_2_End 1.00000000
#define _Diffuse_Ramp_2_Offset 0.00000000
#define _Diffuse_Ramp_Blend 0.00000000
#define is_Diffuse_LUT_Texture_set false
#define _Diffuse_Shadow_Tint_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _LightProbeWeight 1.00000000
#define _LightProbe_Shadow_Tint_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _LightColor_Weight 1.00000000
#define _FallbackLight_Enabled 0.00000000
#define _FallbackLight_Direction float4(0.57735030, 0.57735030, 0.57735030, 1.00000000)
#define _FallbackLight_Color float4(1.00000000, 0.90466110, 0.67244320, 1.00000000)
#define _Outline_Enabled 0.00000000
#define _Outline_Size 0.01000000
#define _Outline_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Outline_Mask_Cutoff 0.50000000
#define _Outline_MaskChannel 0.00000000
#define _Outline_MaskChannel_Inverted 0.00000000
#define _Outline_MaskChannel_Strength 1.00000000
#define _Outline_MaskChannel_Contrast 1.00000000
#define _Outline_MaskChannel_Brightness 0.00000000
#define _Outline_AppearsOnMaterial 0.00000000
#define _EarlyZ_Enabled 0.00000000
#define _AudioLink_Disabled 0.00000000
#define _VFGOO_SHADOWCASTER_DISABLED 0.00000000
#define _VFGOO_ENABLE_UV_BUS_1 0.00000000
#define _VFGOO_ENABLE_UV_BUS_2 0.00000000
#define _VFGOO_ENABLE_UV_BUS_3 0.00000000
#define _VFGOO_ENABLE_UV_BUS_4 0.00000000
#define _VFGOO_ENABLE_UV_BUS_5 0.00000000
#define _VFGOO_ENABLE_UV_BUS_6 0.00000000
#define _VFGOO_ENABLE_MASK_SCROLL_1 0.00000000
#define _VFGOO_ENABLE_MASK_SCROLL_2 0.00000000
#define _VFGOO_ENABLE_MASK_TOUCH_REACTIVITY 0.00000000
#define _VFGOO_ENABLE_MASK_POINT_LIGHTS 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_1 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_2 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_3 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_4 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_1 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_2 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_3 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_4 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_5 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_6 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_7 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_8 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_1 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_2 1.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_3 1.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_4 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_5 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_6 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_7 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_8 0.00000000
#define _VFGOO_ENABLE_MASK_DISTANCE_1 0.00000000
#define _VFGOO_ENABLE_MASK_DISTANCE_2 0.00000000
#define _VFGOO_ENABLE_MASK_MASSBLEND_1 0.00000000
#define _VFGOO_ENABLE_MASK_MASSBLEND_2 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_1 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_2 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_3 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_4 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_5 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_6 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_7 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_8 0.00000000
#define _VFGOO_ENABLE_GLITTER 0.00000000
#define _VFGOO_ENABLE_HSV_POSTPROCESSING 0.00000000

#define EDITOR_BRANCH

// NOTE(valuef):
// @LightprobeExperiment
// For over a year I've been running a shader that _always_ samples SH in the PS and doesn't care about the 
// LIGHTPROBE_SH keyword - it acts as if it's always enabled.
// So why not try this on the goo shader as well? We'd save on a multi compile keyword resulting in faster build
// times!
// 2023-10-31
#define LIGHTPROBE_SH
#define UNITY_SAMPLE_FULL_SH_PER_PIXEL

static bool IS_VERTEX_SHADER = false;
static bool IS_SHADOWCASTER = false;
static bool IS_FORWARD_ADD = false;
static bool IS_FORWARD_BASE = false;

#define UNITY_SPECCUBE_LOD_STEPS 6

/*
// @LightprobeExperiment
#ifndef UNITY_SAMPLE_FULL_SH_PER_PIXEL
  // Lightmap UVs and ambient color from SHL2 are shared in the vertex to pixel interpolators. Do
  // full SH evaluation in the pixel shader when static lightmap and LIGHTPROBE_SH is enabled.
  #define UNITY_SAMPLE_FULL_SH_PER_PIXEL (LIGHTMAP_ON && LIGHTPROBE_SH)
#endif
*/

#ifndef UNITY_BRDF_GGX
  #define UNITY_BRDF_GGX 1
#endif

// Orthnormalize Tangent Space basis per-pixel Necessary to support high-quality normal-maps.
// Compatible with Maya and Marmoset.  However xNormal expects oldschool non-orthnormalized basis -
// essentially preventing good looking normal-maps :( Due to the fact that xNormal is probably _the
// most used tool to bake out normal-maps today_ we have to stick to old ways for now.
//
// Disabled by default, until xNormal has an option to bake proper normal-maps.
#ifndef UNITY_TANGENT_ORTHONORMALIZE
  #define UNITY_TANGENT_ORTHONORMALIZE 0
#endif

#include "UnityCG.cginc"

// NOTE(valuef): Inlined AudioLink.cginc 1.2.0 header.
// Originally was #include "Packages/com.llealloo.audiolink/Runtime/Shaders/AudioLink.cginc"
// Retrieved 2023-11-14
#ifndef AUDIOLINK_CGINC_INCLUDED
    #define AUDIOLINK_CGINC_INCLUDED

    // Map of where features in AudioLink are.
    #define ALPASS_DFT                      uint2(0,4)  //Size: 128, 2
    #define ALPASS_WAVEFORM                 uint2(0,6)  //Size: 128, 16
    #define ALPASS_AUDIOLINK                uint2(0,0)  //Size: 128, 4
    #define ALPASS_AUDIOBASS                uint2(0,0)  //Size: 128, 1
    #define ALPASS_AUDIOLOWMIDS             uint2(0,1)  //Size: 128, 1
    #define ALPASS_AUDIOHIGHMIDS            uint2(0,2)  //Size: 128, 1
    #define ALPASS_AUDIOTREBLE              uint2(0,3)  //Size: 128, 1
    #define ALPASS_AUDIOLINKHISTORY         uint2(1,0)  //Size: 127, 4
    #define ALPASS_GENERALVU                uint2(0,22) //Size: 12, 1
    #define ALPASS_GENERALVU_INSTANCE_TIME  uint2(2,22)
    #define ALPASS_GENERALVU_LOCAL_TIME     uint2(3,22)
    #define ALPASS_GENERALVU_NETWORK_TIME   uint2(4,22)
    #define ALPASS_GENERALVU_PLAYERINFO     uint2(6,22)
    #define ALPASS_THEME_COLOR0             uint2(0,23)
    #define ALPASS_THEME_COLOR1             uint2(1,23)
    #define ALPASS_THEME_COLOR2             uint2(2,23)
    #define ALPASS_THEME_COLOR3             uint2(3,23)
    #define ALPASS_GENERALVU_UNIX_DAYS      uint2(5,23)
    #define ALPASS_GENERALVU_UNIX_SECONDS   uint2(6,23)
    #define ALPASS_GENERALVU_SOURCE_POS     uint2(7,23)
    #define ALPASS_MEDIASTATE               uint2(5,22)

    #define ALPASS_CCINTERNAL               uint2(12,22) //Size: 12, 2
    #define ALPASS_CCCOLORS                 uint2(25,22) //Size: 12, 1 (Note Color #0 is always black, Colors start at 1)
    #define ALPASS_CCSTRIP                  uint2(0,24)  //Size: 128, 1
    #define ALPASS_CCLIGHTS                 uint2(0,25)  //Size: 128, 2
    #define ALPASS_AUTOCORRELATOR           uint2(0,27)  //Size: 128, 1
    #define ALPASS_FILTEREDAUDIOLINK        uint2(0,28)  //Size: 16, 4
    #define ALPASS_CHRONOTENSITY            uint2(16,28) //Size: 8, 4
    #define ALPASS_FILTEREDVU               uint2(23,28) //Size: 4, 4
    #define ALPASS_FILTEREDVU_INTENSITY     uint2(24,28) //Size: 4, 1
    #define ALPASS_FILTEREDVU_MARKER        uint2(24,29) //Size: 4, 1
    #define ALPASS_GLOBAL_STRINGS           uint2(40,28) //Size: 8, 4

    // Some basic constants to use (Note, these should be compatible with
    // future version of AudioLink, but may change.
    #define AUDIOLINK_SAMPHIST              3069        // Internal use for algos, do not change.
    #define AUDIOLINK_SAMPLEDATA24          2046
    #define AUDIOLINK_EXPBINS               24
    #define AUDIOLINK_EXPOCT                10
    #define AUDIOLINK_ETOTALBINS            (AUDIOLINK_EXPBINS * AUDIOLINK_EXPOCT)
    #define AUDIOLINK_WIDTH                 128
    #define AUDIOLINK_SPS                   48000       // Samples per second
    #define AUDIOLINK_ROOTNOTE              0
    #define AUDIOLINK_4BAND_FREQFLOOR       0.123
    #define AUDIOLINK_4BAND_FREQCEILING     1
    #define AUDIOLINK_BOTTOM_FREQUENCY      13.75
    #define AUDIOLINK_BASE_AMPLITUDE        2.5
    #define AUDIOLINK_DELAY_COEFFICIENT_MIN 0.3
    #define AUDIOLINK_DELAY_COEFFICIENT_MAX 0.9
    #define AUDIOLINK_DFT_Q                 4.0
    #define AUDIOLINK_TREBLE_CORRECTION     5.0
    #define AUDIOLINK_4BAND_TARGET_RATE     90.0

    // Text constants
    #define AUDIOLINK_STRING_MAX_CHARS      32
    #define AUDIOLINK_STRING_LOCALPLAYER    0
    #define AUDIOLINK_STRING_MASTER         1
    #define AUDIOLINK_STRING_CUSTOM1        2
    #define AUDIOLINK_STRING_CUSTOM2        3

    // ColorChord constants
    #define COLORCHORD_EMAXBIN              192
    #define COLORCHORD_NOTE_CLOSEST         3.0
    #define COLORCHORD_NEW_NOTE_GAIN        8.0
    #define COLORCHORD_MAX_NOTES            10

    // We use glsl_mod for most calculations because it behaves better
    // on negative numbers, and in some situations actually outperforms
    // HLSL's modf().
    #ifndef glsl_mod
        #define glsl_mod(x,y) (((x)-(y)*floor((x)/(y))))
    #endif

    uniform float4               _AudioTexture_TexelSize;

    #ifdef SHADER_TARGET_SURFACE_ANALYSIS
        #define AUDIOLINK_STANDARD_INDEXING
    #endif

    // Mechanism to index into texture.
    #ifdef AUDIOLINK_STANDARD_INDEXING
        sampler2D _AudioTexture;
        #define AudioLinkData(xycoord) tex2Dlod(_AudioTexture, float4(uint2(xycoord) * _AudioTexture_TexelSize.xy, 0, 0))
    #else
        uniform Texture2D<float4>   _AudioTexture;
        #define AudioLinkData(xycoord) _AudioTexture[uint2(xycoord)]
    #endif

    // Convenient mechanism to read from the AudioLink texture that handles reading off the end of one line and onto the next above it.
    float4 AudioLinkDataMultiline(uint2 xycoord) { return AudioLinkData(uint2(xycoord.x % AUDIOLINK_WIDTH, xycoord.y + xycoord.x/AUDIOLINK_WIDTH)); }

    // Mechanism to sample between two adjacent pixels and lerp between them, like "linear" supesampling
    float4 AudioLinkLerp(float2 xy) { return lerp( AudioLinkData(xy), AudioLinkData(xy+int2(1,0)), frac( xy.x ) ); }

    // Same as AudioLinkLerp but properly handles multiline reading.
    float4 AudioLinkLerpMultiline(float2 xy) { return lerp(AudioLinkDataMultiline(xy), AudioLinkDataMultiline(xy+float2(1,0)), frac(xy.x)); }

    //Tests to see if Audio Link texture is available
    bool AudioLinkIsAvailable()
    {
        #if !defined(AUDIOLINK_STANDARD_INDEXING)
            int width, height;
            _AudioTexture.GetDimensions(width, height);
            return width > 16;
        #else
            return _AudioTexture_TexelSize.z > 16;
        #endif
    }

    // DEPRECATED! Use AudioLinkGetVersionMajor and AudioLinkGetVersionMinor() instead.
    //Get version of audiolink present in the world, 0 if no audiolink is present
    float AudioLinkGetVersion()
    {
        int2 dims;
        #if !defined(AUDIOLINK_STANDARD_INDEXING)
            _AudioTexture.GetDimensions(dims.x, dims.y);
        #else
            dims = _AudioTexture_TexelSize.zw;
        #endif

        if (dims.x >= 128)
            return AudioLinkData(ALPASS_GENERALVU).x;
        else if (dims.x > 16)
            return 1;
        else
            return 0;
    }

    float AudioLinkGetVersionMajor()
    {
        return AudioLinkData(ALPASS_GENERALVU).y;
    }

    float AudioLinkGetVersionMinor()
    {
        // If the major version is 1 or greater, we are using the new versioning system.
        if (AudioLinkGetVersionMajor() > 0)
        {
            return AudioLinkData(ALPASS_GENERALVU).w;
        }
        // Otherwise, defer to the old logic for determining version.
        else
        {
            int2 dims;
            #if !defined(AUDIOLINK_STANDARD_INDEXING)
                _AudioTexture.GetDimensions(dims.x, dims.y);
            #else
                dims = _AudioTexture_TexelSize.zw;
            #endif

            if (dims.x >= 128)
                return AudioLinkData(ALPASS_GENERALVU).x;
            else if (dims.x > 16)
                return 1;
            else
                return 0;
        }
    }

    // This pulls data from this texture.
    #define AudioLinkGetSelfPixelData(xy) _SelfTexture2D[xy]

    // Extra utility functions for time.
    uint AudioLinkDecodeDataAsUInt(uint2 indexloc)
    {
        uint4 rpx = AudioLinkData(indexloc);
        return rpx.x + rpx.y*1024 + rpx.z * 1048576 + rpx.w * 1073741824;
    }

    //Note: This will truncate time to every 134,217.728 seconds (~1.5 days of an instance being up) to prevent floating point aliasing.
    // if your code will alias sooner, you will need to use a different function.  It should be safe to use this on all times.
    float AudioLinkDecodeDataAsSeconds(uint2 indexloc)
    {
        uint time = AudioLinkDecodeDataAsUInt(indexloc) & 0x7ffffff;
        //Can't just divide by float.  Bug in Unity's HLSL compiler.
        return float(time / 1000) + float( time % 1000 ) / 1000.; 
    }

    #define ALDecodeDataAsSeconds( x ) AudioLinkDecodeDataAsSeconds( x )
    #define ALDecodeDataAsUInt( x ) AudioLinkDecodeDataAsUInt( x )

    float AudioLinkRemap(float t, float a, float b, float u, float v) { return ((t-a) / (b-a)) * (v-u) + u; }

    float3 AudioLinkHSVtoRGB(float3 HSV)
    {
        float3 RGB = 0;
        float C = HSV.z * HSV.y;
        float H = HSV.x * 6;
        float X = C * (1 - abs(fmod(H, 2) - 1));
        if (HSV.y != 0)
        {
            float I = floor(H);
            if (I == 0) { RGB = float3(C, X, 0); }
            else if (I == 1) { RGB = float3(X, C, 0); }
            else if (I == 2) { RGB = float3(0, C, X); }
            else if (I == 3) { RGB = float3(0, X, C); }
            else if (I == 4) { RGB = float3(X, 0, C); }
            else { RGB = float3(C, 0, X); }
        }
        float M = HSV.z - C;
        return RGB + M;
    }

    float3 AudioLinkCCtoRGB(float bin, float intensity, int rootNote)
    {
        float note = bin / AUDIOLINK_EXPBINS;

        float hue = 0.0;
        note *= 12.0;
        note = glsl_mod(4. - note + rootNote, 12.0);
        {
            if(note < 4.0)
            {
                //Needs to be YELLOW->RED
                hue = (note) / 24.0;
            }
            else if(note < 8.0)
            {
                //            [4]  [8]
                //Needs to be RED->BLUE
                hue = (note-2.0) / 12.0;
            }
            else
            {
                //             [8] [12]
                //Needs to be BLUE->YELLOW
                hue = (note - 4.0) / 8.0;
            }
        }
        float val = intensity - 0.1;
        return AudioLinkHSVtoRGB(float3(fmod(hue, 1.0), 1.0, clamp(val, 0.0, 1.0)));
    }

    // Sample the amplitude of a given frequency in the DFT, supports frequencies in [13.75; 14080].
    float4 AudioLinkGetAmplitudeAtFrequency(float hertz)
    {
        float note = AUDIOLINK_EXPBINS * log2(hertz / AUDIOLINK_BOTTOM_FREQUENCY);
        return AudioLinkLerpMultiline(ALPASS_DFT + float2(note, 0));
    }

    // Sample the amplitude of a given quartertone in an octave. Octave is in [0; 9] while quarter is [0; 23].
    float4 AudioLinkGetAmplitudeAtQuarterNote(float octave, float quarter)
    {
        return AudioLinkLerpMultiline(ALPASS_DFT + float2(octave * AUDIOLINK_EXPBINS + quarter, 0));
    }

    // Sample the amplitude of a given semitone in an octave. Octave is in [0; 9] while note is [0; 11].
    float4 AudioLinkGetAmplitudeAtNote(float octave, float note)
    {
        float quarter = note * 2.0;
        return AudioLinkGetAmplitudeAtQuarterNote(octave, quarter);
    }

    // Sample the amplitude of a given quartertone across all octaves. Quarter is [0; 23].
    float4 AudioLinkGetAmplitudesAtQuarterNote(float quarter)
    {
        float amplitude = 0;
        UNITY_UNROLL
        for (int i = 0; i < AUDIOLINK_EXPOCT; i++)
        {
            amplitude += AudioLinkGetAmplitudeAtQuarterNote(i,quarter);
        }
        return amplitude;
    }

    // Sample the amplitude of a given semitone across all octaves. Note is [0; 11].
    float4 AudioLinkGetAmplitudesAtNote(float note)
    {
        float quarter = note * 2.0;
        return AudioLinkGetAmplitudesAtQuarterNote(quarter);
    }

    // Get a reasonable drop-in replacement time value for _Time.y with the
    // given chronotensity index [0; 7] and AudioLink band [0; 3].
    float AudioLinkGetChronoTime(uint index, uint band)
    {
        return (AudioLinkDecodeDataAsUInt(ALPASS_CHRONOTENSITY + uint2(index, band))) / 100000.0;
    }

    // Get a chronotensity value in the interval [0; 1], modulated by the speed input, 
    // with the given chronotensity index [0; 7] and AudioLink band [0; 3].
    float AudioLinkGetChronoTimeNormalized(uint index, uint band, float speed)
    {
        return frac(AudioLinkGetChronoTime(index, band) * speed);
    }

    // Get a chronotensity value in the interval [0; interval], modulated by the speed input, 
    // with the given chronotensity index [0; 7] and AudioLink band [0; 3].
    float AudioLinkGetChronoTimeInterval(uint index, uint band, float speed, float interval)
    {
        return AudioLinkGetChronoTimeNormalized(index, band, speed) * interval;
    }

    // Get time of day. The return value is a float4 with the values float3(hour, minute, second).
    float3 AudioLinkGetTimeOfDay()
    {
        float value = AudioLinkDecodeDataAsSeconds(ALPASS_GENERALVU_UNIX_SECONDS);
        float hour = floor(value / 3600.0);
        float minute = floor(value / 60.0) % 60.0;
        float second = value % 60.0;
        return float3(hour, minute, second);
    }

    // Get a character from a globally synced string, given an index of string in range [0; 3], and
    // a character index in range [0; 31]. The string at the 0th index is the local player name.
    // The 1st index is the master name, and index 2 and 3 are custom strings.
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetGlobalStringChar(uint stringIndex, uint charIndex)
    {
        uint4 fourChars = asuint(AudioLinkData(ALPASS_GLOBAL_STRINGS + uint2(charIndex / 4, stringIndex)));
        return fourChars[charIndex % 4];
    }

    // Get a character from the local player name given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetLocalPlayerNameChar(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_LOCALPLAYER, charIndex);
    }

    // Get a character from the master player name given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetMasterNameChar(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_MASTER, charIndex);
    }

    // Get a character from the first custom string given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetCustomString1Char(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_CUSTOM1, charIndex);
    }

    // Get a character from the second custom string given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetCustomString2Char(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_CUSTOM2, charIndex);
    }

    // Returns the position of the AudioLink AudioSource in world space.
    float4 AudioLinkGetAudioSourcePosition()
    {
        return float4(AudioLinkData(ALPASS_GENERALVU_SOURCE_POS).xyz,1);
    }
#endif

#include "AutoLight.cginc"

#if defined(LTCGI)
  #define LTCGI_AVATAR_MODE
  #include "Packages/at.pimaker.ltcgi/Shaders/LTCGI.cginc"
#endif

#define rot2x2(x) float2x2(cos(x),-sin(x),sin(x),cos(x))

struct Capsule_Physbone_Data {
  bool is_enabled;
  float3 proximity;
  float mask;
};

float4 _LightColor0;

//Texture2D _AuxTexture;	
Texture2D _Diffuse_LUT_Texture;	

#define TOUCH_REACTIVITY_MODE_NONE                                  0
#define TOUCH_REACTIVITY_MODE_DONT_INTERACT_WITH_OTHER_TR_MATERIALS 1
#define TOUCH_REACTIVITY_MODE_ENABLED                               2

#define DEBUG_VIS_NONE                              0
#define DEBUG_VIS_MASK_VS                           1
#define DEBUG_VIS_MASK_PS                           2
#define DEBUG_VIS_UV                                3
#define DEBUG_VIS_NORMAL                            4
#define DEBUG_VIS_TOTAL_DRAG_FORCE                  5
#define DEBUG_VIS_TF_VS                             6
#define DEBUG_VIS_TF_PS                             7
#define DEBUG_VIS_UV2_CHANNEL                       8
#define DEBUG_VIS_SKINNED_VERTICES                  9
#define DEBUG_VIS_IS_CAMERA_DEPTH_TEXTURE_AVAILABLE 10

#define UV_BUS_UV0            0
#define UV_BUS_UV1            1
#define UV_BUS_UV3            2
#define UV_BUS_UV4            3
#define UV_BUS_UV5            4
#define UV_BUS_UV6            5
#define UV_BUS_UV7            6
#define UV_BUS_PANOSPHERE     7
#define UV_BUS_1              8
#define UV_BUS_2              9
#define UV_BUS_3              10
#define UV_BUS_4              11
#define UV_BUS_5              12
#define UV_BUS_6              13
#define UV_MAX                14

#define TF_ANIMATION_NONE                 0
#define TF_ANIMATION_VERY_SIMPLE          1
#define TF_ANIMATION_SIMPLE_WITH_NOISE    2
#define TF_ANIMATION_RADIAL               3
#define TF_ANIMATION_CENTER_OUT           4

#define OSCI_SIMPLE_1                 0
#define OSCI_SIMPLE_2                 1
#define OSCI_SIMPLE_3                 2
#define OSCI_SIMPLE_4                 3
#define OSCI_SIMPLE_5                 4
#define OSCI_SIMPLE_6                 5
#define OSCI_SIMPLE_IS_AL_AVAILABLE   6
#define OSCI_AL_BAND_1                7
#define OSCI_AL_BAND_2                8
#define OSCI_AL_BAND_3                9
#define OSCI_AL_BAND_4                10
#define OSCI_AL_BAND_5                11
#define OSCI_AL_BAND_6                12
#define OSCI_AL_ENERGY_1              13
#define OSCI_AL_ENERGY_2              14
#define OSCI_MASK_1                   15
#define OSCI_MASK_2                   16
#define OSCI_MASK_3                   17
#define OSCI_MASK_4                   18
#define OSCI_MASK_5                   19
#define OSCI_MASK_6                   20
#define OSCI_MASK_7                   21
#define OSCI_MASK_8                   22
#define OSCI_MAX                      23

#define OSCI_SIMPLE_TYPE_SIN          0
#define OSCI_SIMPLE_TYPE_SQUARE       1
#define OSCI_SIMPLE_TYPE_SAW          2
#define OSCI_SIMPLE_TYPE_TRIANGLE     3

#define TIMEBASE_SLOT_BASE    0
#define TIMEBASE_SLOT_AL_1    1
#define TIMEBASE_SLOT_AL_2    2
#define TIMEBASE_SLOT_AL_3    3
#define TIMEBASE_SLOT_AL_4    4
#define TIMEBASE_SLOT_AL_5    5
#define TIMEBASE_SLOT_AL_6    6
#define TIMEBASE_SLOT_MAX     7

#define TIMEBASE_AL_TYPE_INCREASING             0
#define TIMEBASE_AL_TYPE_INCREASING_SMOOTHED    1
#define TIMEBASE_AL_TYPE_BACK_N_FORTH           2
#define TIMEBASE_AL_TYPE_BACK_N_FORTH_SMOOTHED  3

struct Time_Bases {
  float slots[TIMEBASE_SLOT_MAX];
};

static Time_Bases TIME_BASES;

#define get_time(_time_base_slot) TIME_BASES.slots[_time_base_slot]

struct Oscillators {
  float slots[OSCI_MAX];
};

static Oscillators OSCILLATORS;

struct UV_Bus {
  float2 uv[UV_MAX]; 
};

static UV_Bus UV_BUSES;

#define resolve_uv_bus(_uv_bus_to_use) UV_BUSES.uv[_uv_bus_to_use]

float2 apply_uv_tiling_offset_and_scroll(
  float2 uv,
  float2 tiling,
  float2 offset,
  float2 scroll,
  float time_base
) {
  uv = uv * tiling + offset;

  uv += scroll * time_base.xx;

  return uv;
}

float4 
sample_texture_2d(
  const Texture2D tex,
  const float2 tiling,
  const float2 offset,
  const float2 scroll,
  const int uv_bus_to_use,
  const SamplerState samp,
  int time_base_slot
) {
  // @InlinedTextureSampling
  float2 uv = resolve_uv_bus(uv_bus_to_use);

  float time_base = get_time(time_base_slot);
  uv = apply_uv_tiling_offset_and_scroll(uv, tiling, offset, scroll, time_base);
  
  float4 tap;
  if(IS_VERTEX_SHADER) {
    tap = tex.SampleLevel(samp, uv, 0);
  }
  else {
    tap = tex.Sample(samp, uv);
  }

  return tap;
}

#if defined(NOT_BAKED)

  //
  // @CustomProperty
  // Add your custom property fields in this define block here!
  // When you do this, baking them into the shader will be automatically handled during material baking.
  //

  float   _AuxFloat;
  float   _AuxFloat2;
  float4  _AuxColor;
  int     _AuxToggle;
  int     _AuxToggle2;

  int     _RenderingMode;
  int     _SourceBlend;
  int     _DestinationBlend;

  /* MARKER VARIABLES START */
int    _MaskChannel_1_Texture_UVBus;
float4 _MaskChannel_1_Texture_Tiling;
float4 _MaskChannel_1_Texture_Offset;
float4 _MaskChannel_1_Texture_ScrollSpeed;
int    _MaskChannel_1_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_1_Strength_PreInversion;
int    _MaskChannel_1_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_1_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_1_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_1_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_1_Strength_PostInversion;
int    _MaskChannel_1_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_1_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_1_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_1_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_2_Texture_UVBus;
float4 _MaskChannel_2_Texture_Tiling;
float4 _MaskChannel_2_Texture_Offset;
float4 _MaskChannel_2_Texture_ScrollSpeed;
int    _MaskChannel_2_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_2_Strength_PreInversion;
int    _MaskChannel_2_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_2_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_2_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_2_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_2_Strength_PostInversion;
int    _MaskChannel_2_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_2_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_2_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_2_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_3_Texture_UVBus;
float4 _MaskChannel_3_Texture_Tiling;
float4 _MaskChannel_3_Texture_Offset;
float4 _MaskChannel_3_Texture_ScrollSpeed;
int    _MaskChannel_3_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_3_Strength_PreInversion;
int    _MaskChannel_3_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_3_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_3_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_3_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_3_Strength_PostInversion;
int    _MaskChannel_3_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_3_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_3_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_3_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_4_Texture_UVBus;
float4 _MaskChannel_4_Texture_Tiling;
float4 _MaskChannel_4_Texture_Offset;
float4 _MaskChannel_4_Texture_ScrollSpeed;
int    _MaskChannel_4_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_4_Strength_PreInversion;
int    _MaskChannel_4_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_4_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_4_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_4_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_4_Strength_PostInversion;
int    _MaskChannel_4_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_4_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_4_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_4_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_5_Texture_UVBus;
float4 _MaskChannel_5_Texture_Tiling;
float4 _MaskChannel_5_Texture_Offset;
float4 _MaskChannel_5_Texture_ScrollSpeed;
int    _MaskChannel_5_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_5_Strength_PreInversion;
int    _MaskChannel_5_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_5_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_5_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_5_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_5_Strength_PostInversion;
int    _MaskChannel_5_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_5_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_5_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_5_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_6_Texture_UVBus;
float4 _MaskChannel_6_Texture_Tiling;
float4 _MaskChannel_6_Texture_Offset;
float4 _MaskChannel_6_Texture_ScrollSpeed;
int    _MaskChannel_6_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_6_Strength_PreInversion;
int    _MaskChannel_6_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_6_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_6_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_6_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_6_Strength_PostInversion;
int    _MaskChannel_6_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_6_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_6_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_6_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_7_Texture_UVBus;
float4 _MaskChannel_7_Texture_Tiling;
float4 _MaskChannel_7_Texture_Offset;
float4 _MaskChannel_7_Texture_ScrollSpeed;
int    _MaskChannel_7_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_7_Strength_PreInversion;
int    _MaskChannel_7_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_7_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_7_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_7_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_7_Strength_PostInversion;
int    _MaskChannel_7_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_7_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_7_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_7_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_8_Texture_UVBus;
float4 _MaskChannel_8_Texture_Tiling;
float4 _MaskChannel_8_Texture_Offset;
float4 _MaskChannel_8_Texture_ScrollSpeed;
int    _MaskChannel_8_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_8_Strength_PreInversion;
int    _MaskChannel_8_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_8_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_8_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_8_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_8_Strength_PostInversion;
int    _MaskChannel_8_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_8_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_8_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_8_Strength_PostInversion_Osci_Value_End;
int    _MainTex_AlphaIsMask;
float4 _MainTex_Tiling;
float4 _MainTex_Offset;
float4 _MainTex_ScrollSpeed;
int    _MainTex_ScrollSpeed_TimeBase;
int    _MainTex_UVBus;
int    _MainTex_MaskChannel;
int    _MainTex_MaskChannel_Inverted;
float  _MainTex_MaskChannel_Strength;
float  _MainTex_MaskChannel_Contrast;
float  _MainTex_MaskChannel_Brightness;
float4 _Color;
int    _Color_Osci_Enabled;
int    _Color_Osci_Slot;
float4 _Color_Osci_Color_Start;
float4 _Color_Osci_Color_End;
int    _Mix_MainTex_AlphaIsMask;
float4 _Mix_MainTex_Tiling;
float4 _Mix_MainTex_Offset;
float4 _Mix_MainTex_ScrollSpeed;
int    _Mix_MainTex_ScrollSpeed_TimeBase;
int    _Mix_MainTex_UVBus;
int    _Mix_MainTex_MaskChannel;
int    _Mix_MainTex_MaskChannel_Inverted;
float  _Mix_MainTex_MaskChannel_Strength;
float  _Mix_MainTex_MaskChannel_Contrast;
float  _Mix_MainTex_MaskChannel_Brightness;
float4 _Mix_Color;
int    _Mix_Color_Osci_Enabled;
int    _Mix_Color_Osci_Slot;
float4 _Mix_Color_Osci_Color_Start;
float4 _Mix_Color_Osci_Color_End;
int    _Mix_Separate_MainTex;
int    _SecondaryTex_AlphaIsMask;
float4 _SecondaryTex_Tiling;
float4 _SecondaryTex_Offset;
float4 _SecondaryTex_ScrollSpeed;
int    _SecondaryTex_ScrollSpeed_TimeBase;
int    _SecondaryTex_UVBus;
int    _SecondaryTex_MaskChannel;
int    _SecondaryTex_MaskChannel_Inverted;
float  _SecondaryTex_MaskChannel_Strength;
float  _SecondaryTex_MaskChannel_Contrast;
float  _SecondaryTex_MaskChannel_Brightness;
int    _SecondaryTex_BlendMode;
float4 _SecondaryTex_Color;
int    _SecondaryTex_Color_Osci_Enabled;
int    _SecondaryTex_Color_Osci_Slot;
float4 _SecondaryTex_Color_Osci_Color_Start;
float4 _SecondaryTex_Color_Osci_Color_End;
int    _Mix_SecondaryTex_AlphaIsMask;
float4 _Mix_SecondaryTex_Tiling;
float4 _Mix_SecondaryTex_Offset;
float4 _Mix_SecondaryTex_ScrollSpeed;
int    _Mix_SecondaryTex_ScrollSpeed_TimeBase;
int    _Mix_SecondaryTex_UVBus;
int    _Mix_SecondaryTex_MaskChannel;
int    _Mix_SecondaryTex_MaskChannel_Inverted;
float  _Mix_SecondaryTex_MaskChannel_Strength;
float  _Mix_SecondaryTex_MaskChannel_Contrast;
float  _Mix_SecondaryTex_MaskChannel_Brightness;
int    _Mix_SecondaryTex_BlendMode;
float4 _Mix_SecondaryTex_Color;
int    _Mix_SecondaryTex_Color_Osci_Enabled;
int    _Mix_SecondaryTex_Color_Osci_Slot;
float4 _Mix_SecondaryTex_Color_Osci_Color_Start;
float4 _Mix_SecondaryTex_Color_Osci_Color_End;
int    _Mix_Separate_SecondaryTex;
float  _Opacity;
int    _Opacity_MaskChannel;
int    _Opacity_MaskChannel_Inverted;
float  _Opacity_MaskChannel_Strength;
float  _Opacity_MaskChannel_Contrast;
float  _Opacity_MaskChannel_Brightness;
int    _Opacity_Osci_Enabled;
int    _Opacity_Osci_Slot;
float  _Opacity_Osci_Value_Start;
float  _Opacity_Osci_Value_End;
float  _Mix_Opacity;
int    _Mix_Opacity_MaskChannel;
int    _Mix_Opacity_MaskChannel_Inverted;
float  _Mix_Opacity_MaskChannel_Strength;
float  _Mix_Opacity_MaskChannel_Contrast;
float  _Mix_Opacity_MaskChannel_Brightness;
int    _Mix_Opacity_Osci_Enabled;
int    _Mix_Opacity_Osci_Slot;
float  _Mix_Opacity_Osci_Value_Start;
float  _Mix_Opacity_Osci_Value_End;
int    _Mix_Separate_Opacity;
float4 _OcclusionMap_Tiling;
float4 _OcclusionMap_Offset;
float4 _OcclusionMap_ScrollSpeed;
int    _OcclusionMap_ScrollSpeed_TimeBase;
int    _OcclusionMap_UVBus;
int    _OcclusionMap_MaskChannel;
int    _OcclusionMap_MaskChannel_Inverted;
float  _OcclusionMap_MaskChannel_Strength;
float  _OcclusionMap_MaskChannel_Contrast;
float  _OcclusionMap_MaskChannel_Brightness;
float  _OcclusionStrength;
float4 _Mix_OcclusionMap_Tiling;
float4 _Mix_OcclusionMap_Offset;
float4 _Mix_OcclusionMap_ScrollSpeed;
int    _Mix_OcclusionMap_ScrollSpeed_TimeBase;
int    _Mix_OcclusionMap_UVBus;
int    _Mix_OcclusionMap_MaskChannel;
int    _Mix_OcclusionMap_MaskChannel_Inverted;
float  _Mix_OcclusionMap_MaskChannel_Strength;
float  _Mix_OcclusionMap_MaskChannel_Contrast;
float  _Mix_OcclusionMap_MaskChannel_Brightness;
float  _Mix_OcclusionStrength;
int    _Mix_Separate_Occlusion;
float4 _BumpMap_Tiling;
float4 _BumpMap_Offset;
float4 _BumpMap_ScrollSpeed;
int    _BumpMap_ScrollSpeed_TimeBase;
int    _BumpMap_UVBus;
int    _BumpMap_MaskChannel;
int    _BumpMap_MaskChannel_Inverted;
float  _BumpMap_MaskChannel_Strength;
float  _BumpMap_MaskChannel_Contrast;
float  _BumpMap_MaskChannel_Brightness;
float  _BumpScale;
int    _BumpScale_Osci_Enabled;
int    _BumpScale_Osci_Slot;
float  _BumpScale_Osci_Value_Start;
float  _BumpScale_Osci_Value_End;
float4 _Mix_BumpMap_Tiling;
float4 _Mix_BumpMap_Offset;
float4 _Mix_BumpMap_ScrollSpeed;
int    _Mix_BumpMap_ScrollSpeed_TimeBase;
int    _Mix_BumpMap_UVBus;
int    _Mix_BumpMap_MaskChannel;
int    _Mix_BumpMap_MaskChannel_Inverted;
float  _Mix_BumpMap_MaskChannel_Strength;
float  _Mix_BumpMap_MaskChannel_Contrast;
float  _Mix_BumpMap_MaskChannel_Brightness;
float  _Mix_BumpScale;
int    _Mix_BumpScale_Osci_Enabled;
int    _Mix_BumpScale_Osci_Slot;
float  _Mix_BumpScale_Osci_Value_Start;
float  _Mix_BumpScale_Osci_Value_End;
int    _Mix_Separate_BumpMap;
float4 _DetailNormalMap_Tiling;
float4 _DetailNormalMap_Offset;
float4 _DetailNormalMap_ScrollSpeed;
int    _DetailNormalMap_ScrollSpeed_TimeBase;
int    _DetailNormalMap_UVBus;
int    _DetailNormalMap_MaskChannel;
int    _DetailNormalMap_MaskChannel_Inverted;
float  _DetailNormalMap_MaskChannel_Strength;
float  _DetailNormalMap_MaskChannel_Contrast;
float  _DetailNormalMap_MaskChannel_Brightness;
float  _DetailBumpScale;
int    _DetailBumpScale_Osci_Enabled;
int    _DetailBumpScale_Osci_Slot;
float  _DetailBumpScale_Osci_Value_Start;
float  _DetailBumpScale_Osci_Value_End;
float4 _Mix_DetailNormalMap_Tiling;
float4 _Mix_DetailNormalMap_Offset;
float4 _Mix_DetailNormalMap_ScrollSpeed;
int    _Mix_DetailNormalMap_ScrollSpeed_TimeBase;
int    _Mix_DetailNormalMap_UVBus;
int    _Mix_DetailNormalMap_MaskChannel;
int    _Mix_DetailNormalMap_MaskChannel_Inverted;
float  _Mix_DetailNormalMap_MaskChannel_Strength;
float  _Mix_DetailNormalMap_MaskChannel_Contrast;
float  _Mix_DetailNormalMap_MaskChannel_Brightness;
float  _Mix_DetailBumpScale;
int    _Mix_DetailBumpScale_Osci_Enabled;
int    _Mix_DetailBumpScale_Osci_Slot;
float  _Mix_DetailBumpScale_Osci_Value_Start;
float  _Mix_DetailBumpScale_Osci_Value_End;
int    _Mix_Separate_DetailNormalMap;
int    _EmissionMap_AlphaIsMask;
float4 _EmissionMap_Tiling;
float4 _EmissionMap_Offset;
float4 _EmissionMap_ScrollSpeed;
int    _EmissionMap_ScrollSpeed_TimeBase;
int    _EmissionMap_UVBus;
int    _EmissionMap_MaskChannel;
int    _EmissionMap_MaskChannel_Inverted;
float  _EmissionMap_MaskChannel_Strength;
float  _EmissionMap_MaskChannel_Contrast;
float  _EmissionMap_MaskChannel_Brightness;
float4 _EmissionColor;
int    _EmissionColor_Osci_Enabled;
int    _EmissionColor_Osci_Slot;
float4 _EmissionColor_Osci_Color_Start;
float4 _EmissionColor_Osci_Color_End;
int    _Mix_EmissionMap_AlphaIsMask;
float4 _Mix_EmissionMap_Tiling;
float4 _Mix_EmissionMap_Offset;
float4 _Mix_EmissionMap_ScrollSpeed;
int    _Mix_EmissionMap_ScrollSpeed_TimeBase;
int    _Mix_EmissionMap_UVBus;
int    _Mix_EmissionMap_MaskChannel;
int    _Mix_EmissionMap_MaskChannel_Inverted;
float  _Mix_EmissionMap_MaskChannel_Strength;
float  _Mix_EmissionMap_MaskChannel_Contrast;
float  _Mix_EmissionMap_MaskChannel_Brightness;
float4 _Mix_EmissionColor;
int    _Mix_EmissionColor_Osci_Enabled;
int    _Mix_EmissionColor_Osci_Slot;
float4 _Mix_EmissionColor_Osci_Color_Start;
float4 _Mix_EmissionColor_Osci_Color_End;
int    _Mix_Separate_Emission_1;
int    _EmissionMap2_AlphaIsMask;
float4 _EmissionMap2_Tiling;
float4 _EmissionMap2_Offset;
float4 _EmissionMap2_ScrollSpeed;
int    _EmissionMap2_ScrollSpeed_TimeBase;
int    _EmissionMap2_UVBus;
int    _EmissionMap2_MaskChannel;
int    _EmissionMap2_MaskChannel_Inverted;
float  _EmissionMap2_MaskChannel_Strength;
float  _EmissionMap2_MaskChannel_Contrast;
float  _EmissionMap2_MaskChannel_Brightness;
float4 _EmissionColor2;
int    _EmissionColor2_Osci_Enabled;
int    _EmissionColor2_Osci_Slot;
float4 _EmissionColor2_Osci_Color_Start;
float4 _EmissionColor2_Osci_Color_End;
int    _Mix_EmissionMap2_AlphaIsMask;
float4 _Mix_EmissionMap2_Tiling;
float4 _Mix_EmissionMap2_Offset;
float4 _Mix_EmissionMap2_ScrollSpeed;
int    _Mix_EmissionMap2_ScrollSpeed_TimeBase;
int    _Mix_EmissionMap2_UVBus;
int    _Mix_EmissionMap2_MaskChannel;
int    _Mix_EmissionMap2_MaskChannel_Inverted;
float  _Mix_EmissionMap2_MaskChannel_Strength;
float  _Mix_EmissionMap2_MaskChannel_Contrast;
float  _Mix_EmissionMap2_MaskChannel_Brightness;
float4 _Mix_EmissionColor2;
int    _Mix_EmissionColor2_Osci_Enabled;
int    _Mix_EmissionColor2_Osci_Slot;
float4 _Mix_EmissionColor2_Osci_Color_Start;
float4 _Mix_EmissionColor2_Osci_Color_End;
int    _Mix_Separate_Emission_2;
int    _Matcap_1_Texture_AlphaIsMask;
int    _Matcap_1_Texture_MaskChannel;
int    _Matcap_1_Texture_MaskChannel_Inverted;
float  _Matcap_1_Texture_MaskChannel_Strength;
float  _Matcap_1_Texture_MaskChannel_Contrast;
float  _Matcap_1_Texture_MaskChannel_Brightness;
float4 _Matcap_1_Color;
int    _Matcap_1_Color_Osci_Enabled;
int    _Matcap_1_Color_Osci_Slot;
float4 _Matcap_1_Color_Osci_Color_Start;
float4 _Matcap_1_Color_Osci_Color_End;
int    _Matcap_1_Lighting_Enabled;
float  _Matcap_1_Size;
int    _Mix_Matcap_1_Texture_AlphaIsMask;
int    _Mix_Matcap_1_Texture_MaskChannel;
int    _Mix_Matcap_1_Texture_MaskChannel_Inverted;
float  _Mix_Matcap_1_Texture_MaskChannel_Strength;
float  _Mix_Matcap_1_Texture_MaskChannel_Contrast;
float  _Mix_Matcap_1_Texture_MaskChannel_Brightness;
float4 _Mix_Matcap_1_Color;
int    _Mix_Matcap_1_Color_Osci_Enabled;
int    _Mix_Matcap_1_Color_Osci_Slot;
float4 _Mix_Matcap_1_Color_Osci_Color_Start;
float4 _Mix_Matcap_1_Color_Osci_Color_End;
int    _Mix_Matcap_1_Lighting_Enabled;
float  _Mix_Matcap_1_Size;
int    _Mix_Separate_Matcap_1;
int    _Matcap_2_Texture_AlphaIsMask;
int    _Matcap_2_Texture_MaskChannel;
int    _Matcap_2_Texture_MaskChannel_Inverted;
float  _Matcap_2_Texture_MaskChannel_Strength;
float  _Matcap_2_Texture_MaskChannel_Contrast;
float  _Matcap_2_Texture_MaskChannel_Brightness;
float4 _Matcap_2_Color;
int    _Matcap_2_Color_Osci_Enabled;
int    _Matcap_2_Color_Osci_Slot;
float4 _Matcap_2_Color_Osci_Color_Start;
float4 _Matcap_2_Color_Osci_Color_End;
int    _Matcap_2_Lighting_Enabled;
float  _Matcap_2_Size;
int    _Mix_Matcap_2_Texture_AlphaIsMask;
int    _Mix_Matcap_2_Texture_MaskChannel;
int    _Mix_Matcap_2_Texture_MaskChannel_Inverted;
float  _Mix_Matcap_2_Texture_MaskChannel_Strength;
float  _Mix_Matcap_2_Texture_MaskChannel_Contrast;
float  _Mix_Matcap_2_Texture_MaskChannel_Brightness;
float4 _Mix_Matcap_2_Color;
int    _Mix_Matcap_2_Color_Osci_Enabled;
int    _Mix_Matcap_2_Color_Osci_Slot;
float4 _Mix_Matcap_2_Color_Osci_Color_Start;
float4 _Mix_Matcap_2_Color_Osci_Color_End;
int    _Mix_Matcap_2_Lighting_Enabled;
float  _Mix_Matcap_2_Size;
int    _Mix_Separate_Matcap_2;
int    _Matcap_3_Texture_AlphaIsMask;
int    _Matcap_3_Texture_MaskChannel;
int    _Matcap_3_Texture_MaskChannel_Inverted;
float  _Matcap_3_Texture_MaskChannel_Strength;
float  _Matcap_3_Texture_MaskChannel_Contrast;
float  _Matcap_3_Texture_MaskChannel_Brightness;
float4 _Matcap_3_Color;
int    _Matcap_3_Color_Osci_Enabled;
int    _Matcap_3_Color_Osci_Slot;
float4 _Matcap_3_Color_Osci_Color_Start;
float4 _Matcap_3_Color_Osci_Color_End;
int    _Matcap_3_Lighting_Enabled;
float  _Matcap_3_Size;
int    _Mix_Matcap_3_Texture_AlphaIsMask;
int    _Mix_Matcap_3_Texture_MaskChannel;
int    _Mix_Matcap_3_Texture_MaskChannel_Inverted;
float  _Mix_Matcap_3_Texture_MaskChannel_Strength;
float  _Mix_Matcap_3_Texture_MaskChannel_Contrast;
float  _Mix_Matcap_3_Texture_MaskChannel_Brightness;
float4 _Mix_Matcap_3_Color;
int    _Mix_Matcap_3_Color_Osci_Enabled;
int    _Mix_Matcap_3_Color_Osci_Slot;
float4 _Mix_Matcap_3_Color_Osci_Color_Start;
float4 _Mix_Matcap_3_Color_Osci_Color_End;
int    _Mix_Matcap_3_Lighting_Enabled;
float  _Mix_Matcap_3_Size;
int    _Mix_Separate_Matcap_3;
float  _AlbedoEmissionWeight;
int    _AlbedoEmissionWeight_MaskChannel;
int    _AlbedoEmissionWeight_MaskChannel_Inverted;
float  _AlbedoEmissionWeight_MaskChannel_Strength;
float  _AlbedoEmissionWeight_MaskChannel_Contrast;
float  _AlbedoEmissionWeight_MaskChannel_Brightness;
int    _AlbedoEmissionWeight_Osci_Enabled;
int    _AlbedoEmissionWeight_Osci_Slot;
float  _AlbedoEmissionWeight_Osci_Value_Start;
float  _AlbedoEmissionWeight_Osci_Value_End;
float4 _AddedEmissionColor;
int    _AddedEmissionColor_MaskChannel;
int    _AddedEmissionColor_MaskChannel_Inverted;
float  _AddedEmissionColor_MaskChannel_Strength;
float  _AddedEmissionColor_MaskChannel_Contrast;
float  _AddedEmissionColor_MaskChannel_Brightness;
int    _AddedEmissionColor_Osci_Enabled;
int    _AddedEmissionColor_Osci_Slot;
float4 _AddedEmissionColor_Osci_Color_Start;
float4 _AddedEmissionColor_Osci_Color_End;
float  _Mix_AlbedoEmissionWeight;
int    _Mix_AlbedoEmissionWeight_MaskChannel;
int    _Mix_AlbedoEmissionWeight_MaskChannel_Inverted;
float  _Mix_AlbedoEmissionWeight_MaskChannel_Strength;
float  _Mix_AlbedoEmissionWeight_MaskChannel_Contrast;
float  _Mix_AlbedoEmissionWeight_MaskChannel_Brightness;
int    _Mix_AlbedoEmissionWeight_Osci_Enabled;
int    _Mix_AlbedoEmissionWeight_Osci_Slot;
float  _Mix_AlbedoEmissionWeight_Osci_Value_Start;
float  _Mix_AlbedoEmissionWeight_Osci_Value_End;
float4 _Mix_AddedEmissionColor;
int    _Mix_AddedEmissionColor_MaskChannel;
int    _Mix_AddedEmissionColor_MaskChannel_Inverted;
float  _Mix_AddedEmissionColor_MaskChannel_Strength;
float  _Mix_AddedEmissionColor_MaskChannel_Contrast;
float  _Mix_AddedEmissionColor_MaskChannel_Brightness;
int    _Mix_AddedEmissionColor_Osci_Enabled;
int    _Mix_AddedEmissionColor_Osci_Slot;
float4 _Mix_AddedEmissionColor_Osci_Color_Start;
float4 _Mix_AddedEmissionColor_Osci_Color_End;
int    _Mix_Separate_Emission_Const;
float  _Glossiness;
int    _Glossiness_MaskChannel;
int    _Glossiness_MaskChannel_Inverted;
float  _Glossiness_MaskChannel_Strength;
float  _Glossiness_MaskChannel_Contrast;
float  _Glossiness_MaskChannel_Brightness;
float  _Metallic;
int    _Metallic_MaskChannel;
int    _Metallic_MaskChannel_Inverted;
float  _Metallic_MaskChannel_Strength;
float  _Metallic_MaskChannel_Contrast;
float  _Metallic_MaskChannel_Brightness;
float  _Mix_Glossiness;
int    _Mix_Glossiness_MaskChannel;
int    _Mix_Glossiness_MaskChannel_Inverted;
float  _Mix_Glossiness_MaskChannel_Strength;
float  _Mix_Glossiness_MaskChannel_Contrast;
float  _Mix_Glossiness_MaskChannel_Brightness;
float  _Mix_Metallic;
int    _Mix_Metallic_MaskChannel;
int    _Mix_Metallic_MaskChannel_Inverted;
float  _Mix_Metallic_MaskChannel_Strength;
float  _Mix_Metallic_MaskChannel_Contrast;
float  _Mix_Metallic_MaskChannel_Brightness;
int    _Mix_Separate_MetallicGlossiness;
int    _GSAA_Enabled;
int    _Goo_Enabled;
float  _Goo_Size;
int    _Goo_Size_Osci_Enabled;
int    _Goo_Size_Osci_Slot;
float  _Goo_Size_Osci_Value_Start;
float  _Goo_Size_Osci_Value_End;
float4 _Goo_Speed;
int    _Goo_Speed_TimeBase;
float4 _Goo_Offset;
int    _Goo_Offset_Osci_Enabled;
int    _Goo_Offset_Osci_Slot;
float4 _Goo_Offset_Osci_Color_Start;
float4 _Goo_Offset_Osci_Color_End;
float  _Goo_Normal_Offset_Min_Degrees;
float  _Goo_Normal_Offset_Max_Degrees;
int    _Goo_Deformation_Enabled;
float  _Goo_Deformation_MeshNormal_Offset_Min;
int    _Goo_Deformation_MeshNormal_Offset_Min_Osci_Enabled;
int    _Goo_Deformation_MeshNormal_Offset_Min_Osci_Slot;
float  _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_Start;
float  _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_End;
float  _Goo_Deformation_MeshNormal_Offset_Max;
int    _Goo_Deformation_MeshNormal_Offset_Max_Osci_Enabled;
int    _Goo_Deformation_MeshNormal_Offset_Max_Osci_Slot;
float  _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_Start;
float  _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_End;
float  _Goo_Deformation_ProceduralNormal_Size;
int    _Goo_Deformation_ProceduralNormal_Size_Osci_Enabled;
int    _Goo_Deformation_ProceduralNormal_Size_Osci_Slot;
float  _Goo_Deformation_ProceduralNormal_Size_Osci_Value_Start;
float  _Goo_Deformation_ProceduralNormal_Size_Osci_Value_End;
int    _Goo_Deformation_ApplyOnMaterialMix;
int    _Goo_Deformation_MeshNormal_MaskChannel;
int    _Goo_Deformation_MeshNormal_MaskChannel_Inverted;
float  _Goo_Deformation_MeshNormal_MaskChannel_Strength;
float  _Goo_Deformation_MeshNormal_MaskChannel_Contrast;
float  _Goo_Deformation_MeshNormal_MaskChannel_Brightness;
int    _Goo_Drip_Enabled;
float  _Goo_Drip_Size;
int    _Goo_Drip_Size_Osci_Enabled;
int    _Goo_Drip_Size_Osci_Slot;
float  _Goo_Drip_Size_Osci_Value_Start;
float  _Goo_Drip_Size_Osci_Value_End;
float  _Goo_Drip_Start;
int    _Goo_Drip_Start_Osci_Enabled;
int    _Goo_Drip_Start_Osci_Slot;
float  _Goo_Drip_Start_Osci_Value_Start;
float  _Goo_Drip_Start_Osci_Value_End;
float  _Goo_Drip_End;
int    _Goo_Drip_End_Osci_Enabled;
int    _Goo_Drip_End_Osci_Slot;
float  _Goo_Drip_End_Osci_Value_Start;
float  _Goo_Drip_End_Osci_Value_End;
float  _Goo_Drip_Amount;
int    _Goo_Drip_Amount_Osci_Enabled;
int    _Goo_Drip_Amount_Osci_Slot;
float  _Goo_Drip_Amount_Osci_Value_Start;
float  _Goo_Drip_Amount_Osci_Value_End;
int    _Goo_Drip_MaskChannel;
int    _Goo_Drip_MaskChannel_Inverted;
float  _Goo_Drip_MaskChannel_Strength;
float  _Goo_Drip_MaskChannel_Contrast;
float  _Goo_Drip_MaskChannel_Brightness;
int    _Goo_Drip_ApplyOnMaterialMix;
float4 _Goo_Drip_Gravity_Vector;
float4 _CapsuleMask_1_Origin;
int    _CapsuleMask_1_Origin_Osci_Enabled;
int    _CapsuleMask_1_Origin_Osci_Slot;
float4 _CapsuleMask_1_Origin_Osci_Color_Start;
float4 _CapsuleMask_1_Origin_Osci_Color_End;
float4 _CapsuleMask_1_Axis;
int    _CapsuleMask_1_Axis_Osci_Enabled;
int    _CapsuleMask_1_Axis_Osci_Slot;
float4 _CapsuleMask_1_Axis_Osci_Color_Start;
float4 _CapsuleMask_1_Axis_Osci_Color_End;
int    _CapsuleMask_1_Flip;
float  _CapsuleMask_1_Radius;
int    _CapsuleMask_1_Radius_Osci_Enabled;
int    _CapsuleMask_1_Radius_Osci_Slot;
float  _CapsuleMask_1_Radius_Osci_Value_Start;
float  _CapsuleMask_1_Radius_Osci_Value_End;
float  _CapsuleMask_1_Height;
int    _CapsuleMask_1_Height_Osci_Enabled;
int    _CapsuleMask_1_Height_Osci_Slot;
float  _CapsuleMask_1_Height_Osci_Value_Start;
float  _CapsuleMask_1_Height_Osci_Value_End;
float  _CapsuleMask_1_Strength_PreInversion;
int    _CapsuleMask_1_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_1_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_1_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_1_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_1_Strength_PostInversion;
int    _CapsuleMask_1_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_1_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_1_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_1_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_2_Origin;
int    _CapsuleMask_2_Origin_Osci_Enabled;
int    _CapsuleMask_2_Origin_Osci_Slot;
float4 _CapsuleMask_2_Origin_Osci_Color_Start;
float4 _CapsuleMask_2_Origin_Osci_Color_End;
float4 _CapsuleMask_2_Axis;
int    _CapsuleMask_2_Axis_Osci_Enabled;
int    _CapsuleMask_2_Axis_Osci_Slot;
float4 _CapsuleMask_2_Axis_Osci_Color_Start;
float4 _CapsuleMask_2_Axis_Osci_Color_End;
int    _CapsuleMask_2_Flip;
float  _CapsuleMask_2_Radius;
int    _CapsuleMask_2_Radius_Osci_Enabled;
int    _CapsuleMask_2_Radius_Osci_Slot;
float  _CapsuleMask_2_Radius_Osci_Value_Start;
float  _CapsuleMask_2_Radius_Osci_Value_End;
float  _CapsuleMask_2_Height;
int    _CapsuleMask_2_Height_Osci_Enabled;
int    _CapsuleMask_2_Height_Osci_Slot;
float  _CapsuleMask_2_Height_Osci_Value_Start;
float  _CapsuleMask_2_Height_Osci_Value_End;
float  _CapsuleMask_2_Strength_PreInversion;
int    _CapsuleMask_2_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_2_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_2_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_2_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_2_Strength_PostInversion;
int    _CapsuleMask_2_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_2_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_2_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_2_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_3_Origin;
int    _CapsuleMask_3_Origin_Osci_Enabled;
int    _CapsuleMask_3_Origin_Osci_Slot;
float4 _CapsuleMask_3_Origin_Osci_Color_Start;
float4 _CapsuleMask_3_Origin_Osci_Color_End;
float4 _CapsuleMask_3_Axis;
int    _CapsuleMask_3_Axis_Osci_Enabled;
int    _CapsuleMask_3_Axis_Osci_Slot;
float4 _CapsuleMask_3_Axis_Osci_Color_Start;
float4 _CapsuleMask_3_Axis_Osci_Color_End;
int    _CapsuleMask_3_Flip;
float  _CapsuleMask_3_Radius;
int    _CapsuleMask_3_Radius_Osci_Enabled;
int    _CapsuleMask_3_Radius_Osci_Slot;
float  _CapsuleMask_3_Radius_Osci_Value_Start;
float  _CapsuleMask_3_Radius_Osci_Value_End;
float  _CapsuleMask_3_Height;
int    _CapsuleMask_3_Height_Osci_Enabled;
int    _CapsuleMask_3_Height_Osci_Slot;
float  _CapsuleMask_3_Height_Osci_Value_Start;
float  _CapsuleMask_3_Height_Osci_Value_End;
float  _CapsuleMask_3_Strength_PreInversion;
int    _CapsuleMask_3_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_3_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_3_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_3_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_3_Strength_PostInversion;
int    _CapsuleMask_3_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_3_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_3_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_3_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_4_Origin;
int    _CapsuleMask_4_Origin_Osci_Enabled;
int    _CapsuleMask_4_Origin_Osci_Slot;
float4 _CapsuleMask_4_Origin_Osci_Color_Start;
float4 _CapsuleMask_4_Origin_Osci_Color_End;
float4 _CapsuleMask_4_Axis;
int    _CapsuleMask_4_Axis_Osci_Enabled;
int    _CapsuleMask_4_Axis_Osci_Slot;
float4 _CapsuleMask_4_Axis_Osci_Color_Start;
float4 _CapsuleMask_4_Axis_Osci_Color_End;
int    _CapsuleMask_4_Flip;
float  _CapsuleMask_4_Radius;
int    _CapsuleMask_4_Radius_Osci_Enabled;
int    _CapsuleMask_4_Radius_Osci_Slot;
float  _CapsuleMask_4_Radius_Osci_Value_Start;
float  _CapsuleMask_4_Radius_Osci_Value_End;
float  _CapsuleMask_4_Height;
int    _CapsuleMask_4_Height_Osci_Enabled;
int    _CapsuleMask_4_Height_Osci_Slot;
float  _CapsuleMask_4_Height_Osci_Value_Start;
float  _CapsuleMask_4_Height_Osci_Value_End;
float  _CapsuleMask_4_Strength_PreInversion;
int    _CapsuleMask_4_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_4_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_4_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_4_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_4_Strength_PostInversion;
int    _CapsuleMask_4_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_4_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_4_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_4_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_5_Origin;
int    _CapsuleMask_5_Origin_Osci_Enabled;
int    _CapsuleMask_5_Origin_Osci_Slot;
float4 _CapsuleMask_5_Origin_Osci_Color_Start;
float4 _CapsuleMask_5_Origin_Osci_Color_End;
float4 _CapsuleMask_5_Axis;
int    _CapsuleMask_5_Axis_Osci_Enabled;
int    _CapsuleMask_5_Axis_Osci_Slot;
float4 _CapsuleMask_5_Axis_Osci_Color_Start;
float4 _CapsuleMask_5_Axis_Osci_Color_End;
int    _CapsuleMask_5_Flip;
float  _CapsuleMask_5_Radius;
int    _CapsuleMask_5_Radius_Osci_Enabled;
int    _CapsuleMask_5_Radius_Osci_Slot;
float  _CapsuleMask_5_Radius_Osci_Value_Start;
float  _CapsuleMask_5_Radius_Osci_Value_End;
float  _CapsuleMask_5_Height;
int    _CapsuleMask_5_Height_Osci_Enabled;
int    _CapsuleMask_5_Height_Osci_Slot;
float  _CapsuleMask_5_Height_Osci_Value_Start;
float  _CapsuleMask_5_Height_Osci_Value_End;
float  _CapsuleMask_5_Strength_PreInversion;
int    _CapsuleMask_5_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_5_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_5_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_5_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_5_Strength_PostInversion;
int    _CapsuleMask_5_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_5_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_5_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_5_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_6_Origin;
int    _CapsuleMask_6_Origin_Osci_Enabled;
int    _CapsuleMask_6_Origin_Osci_Slot;
float4 _CapsuleMask_6_Origin_Osci_Color_Start;
float4 _CapsuleMask_6_Origin_Osci_Color_End;
float4 _CapsuleMask_6_Axis;
int    _CapsuleMask_6_Axis_Osci_Enabled;
int    _CapsuleMask_6_Axis_Osci_Slot;
float4 _CapsuleMask_6_Axis_Osci_Color_Start;
float4 _CapsuleMask_6_Axis_Osci_Color_End;
int    _CapsuleMask_6_Flip;
float  _CapsuleMask_6_Radius;
int    _CapsuleMask_6_Radius_Osci_Enabled;
int    _CapsuleMask_6_Radius_Osci_Slot;
float  _CapsuleMask_6_Radius_Osci_Value_Start;
float  _CapsuleMask_6_Radius_Osci_Value_End;
float  _CapsuleMask_6_Height;
int    _CapsuleMask_6_Height_Osci_Enabled;
int    _CapsuleMask_6_Height_Osci_Slot;
float  _CapsuleMask_6_Height_Osci_Value_Start;
float  _CapsuleMask_6_Height_Osci_Value_End;
float  _CapsuleMask_6_Strength_PreInversion;
int    _CapsuleMask_6_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_6_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_6_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_6_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_6_Strength_PostInversion;
int    _CapsuleMask_6_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_6_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_6_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_6_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_7_Origin;
int    _CapsuleMask_7_Origin_Osci_Enabled;
int    _CapsuleMask_7_Origin_Osci_Slot;
float4 _CapsuleMask_7_Origin_Osci_Color_Start;
float4 _CapsuleMask_7_Origin_Osci_Color_End;
float4 _CapsuleMask_7_Axis;
int    _CapsuleMask_7_Axis_Osci_Enabled;
int    _CapsuleMask_7_Axis_Osci_Slot;
float4 _CapsuleMask_7_Axis_Osci_Color_Start;
float4 _CapsuleMask_7_Axis_Osci_Color_End;
int    _CapsuleMask_7_Flip;
float  _CapsuleMask_7_Radius;
int    _CapsuleMask_7_Radius_Osci_Enabled;
int    _CapsuleMask_7_Radius_Osci_Slot;
float  _CapsuleMask_7_Radius_Osci_Value_Start;
float  _CapsuleMask_7_Radius_Osci_Value_End;
float  _CapsuleMask_7_Height;
int    _CapsuleMask_7_Height_Osci_Enabled;
int    _CapsuleMask_7_Height_Osci_Slot;
float  _CapsuleMask_7_Height_Osci_Value_Start;
float  _CapsuleMask_7_Height_Osci_Value_End;
float  _CapsuleMask_7_Strength_PreInversion;
int    _CapsuleMask_7_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_7_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_7_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_7_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_7_Strength_PostInversion;
int    _CapsuleMask_7_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_7_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_7_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_7_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_8_Origin;
int    _CapsuleMask_8_Origin_Osci_Enabled;
int    _CapsuleMask_8_Origin_Osci_Slot;
float4 _CapsuleMask_8_Origin_Osci_Color_Start;
float4 _CapsuleMask_8_Origin_Osci_Color_End;
float4 _CapsuleMask_8_Axis;
int    _CapsuleMask_8_Axis_Osci_Enabled;
int    _CapsuleMask_8_Axis_Osci_Slot;
float4 _CapsuleMask_8_Axis_Osci_Color_Start;
float4 _CapsuleMask_8_Axis_Osci_Color_End;
int    _CapsuleMask_8_Flip;
float  _CapsuleMask_8_Radius;
int    _CapsuleMask_8_Radius_Osci_Enabled;
int    _CapsuleMask_8_Radius_Osci_Slot;
float  _CapsuleMask_8_Radius_Osci_Value_Start;
float  _CapsuleMask_8_Radius_Osci_Value_End;
float  _CapsuleMask_8_Height;
int    _CapsuleMask_8_Height_Osci_Enabled;
int    _CapsuleMask_8_Height_Osci_Slot;
float  _CapsuleMask_8_Height_Osci_Value_Start;
float  _CapsuleMask_8_Height_Osci_Value_End;
float  _CapsuleMask_8_Strength_PreInversion;
int    _CapsuleMask_8_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_8_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_8_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_8_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_8_Strength_PostInversion;
int    _CapsuleMask_8_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_8_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_8_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_8_Strength_PostInversion_Osci_Value_End;
int    _Physbone_1_Enabled;
int    _Physbone_1_MaskChannel;
int    _Physbone_1_MaskChannel_Inverted;
float  _Physbone_1_MaskChannel_Strength;
float  _Physbone_1_MaskChannel_Contrast;
float  _Physbone_1_MaskChannel_Brightness;
float  _Physbone_1_Proximity_X;
float  _Physbone_1_Proximity_Y;
float  _Physbone_1_Proximity_Z;
int    _Physbone_2_Enabled;
int    _Physbone_2_MaskChannel;
int    _Physbone_2_MaskChannel_Inverted;
float  _Physbone_2_MaskChannel_Strength;
float  _Physbone_2_MaskChannel_Contrast;
float  _Physbone_2_MaskChannel_Brightness;
float  _Physbone_2_Proximity_X;
float  _Physbone_2_Proximity_Y;
float  _Physbone_2_Proximity_Z;
int    _Physbone_3_Enabled;
int    _Physbone_3_MaskChannel;
int    _Physbone_3_MaskChannel_Inverted;
float  _Physbone_3_MaskChannel_Strength;
float  _Physbone_3_MaskChannel_Contrast;
float  _Physbone_3_MaskChannel_Brightness;
float  _Physbone_3_Proximity_X;
float  _Physbone_3_Proximity_Y;
float  _Physbone_3_Proximity_Z;
int    _Physbone_4_Enabled;
int    _Physbone_4_MaskChannel;
int    _Physbone_4_MaskChannel_Inverted;
float  _Physbone_4_MaskChannel_Strength;
float  _Physbone_4_MaskChannel_Contrast;
float  _Physbone_4_MaskChannel_Brightness;
float  _Physbone_4_Proximity_X;
float  _Physbone_4_Proximity_Y;
float  _Physbone_4_Proximity_Z;
int    _Physics_Body_ApplyOnMaterialMix;
float  _Physbone_Drip_DragForce_Strength;
int    _Physbone_Drip_MaskChannel;
int    _Physbone_Drip_MaskChannel_Inverted;
float  _Physbone_Drip_MaskChannel_Strength;
float  _Physbone_Drip_MaskChannel_Contrast;
float  _Physbone_Drip_MaskChannel_Brightness;
float  _Physbone_Body_DragForce_Strength;
int    _Physbone_Body_MaskChannel;
int    _Physbone_Body_MaskChannel_Inverted;
float  _Physbone_Body_MaskChannel_Strength;
float  _Physbone_Body_MaskChannel_Contrast;
float  _Physbone_Body_MaskChannel_Brightness;
int    _TF_Enabled;
int    _TF_Manual_MaskChannel;
int    _TF_Manual_MaskChannel_Inverted;
float  _TF_Manual_MaskChannel_Strength;
float  _TF_Manual_MaskChannel_Contrast;
float  _TF_Manual_MaskChannel_Brightness;
int    _TF_Manual_Osci_Enabled;
int    _TF_Manual_Osci_Slot;
float  _TF_Manual_Osci_Value_Start;
float  _TF_Manual_Osci_Value_End;
int    _TF_ManualBuiltin_BlendMode;
int    _DebugVisualisation_Type;
int    _DebugVisualisation_MaskChannel;
int    _DebugVisualisation_MaskChannel_Inverted;
float  _DebugVisualisation_MaskChannel_Strength;
float  _DebugVisualisation_MaskChannel_Contrast;
float  _DebugVisualisation_MaskChannel_Brightness;
int    _DebugVisualisation_UVBus;
int    _TF_Bulging_Enabled;
int    _TF_Bulging_MaskChannel;
int    _TF_Bulging_MaskChannel_Inverted;
float  _TF_Bulging_MaskChannel_Strength;
float  _TF_Bulging_MaskChannel_Contrast;
float  _TF_Bulging_MaskChannel_Brightness;
float  _TF_Bulging_Size;
float  _TF_Animation_Bulging_Offset;
int    _FakeCubemap_Enabled;
float  _FakeCubemap_Blend;
float  _FakeCubemap_Exposure;
float4 _FakeCubemap_Tint2;
int    _FakeCubemap_AppearsOnMaterial;
float4 _World_ReflectionProbe_Tint;
float4 _Specular_Tint;
int    _TouchReactivity_Mode;
float  _TouchReactivity_Strength;
int    _TouchReactivity_MaskChannel;
int    _TouchReactivity_MaskChannel_Inverted;
float  _TouchReactivity_MaskChannel_Strength;
float  _TouchReactivity_MaskChannel_Contrast;
float  _TouchReactivity_MaskChannel_Brightness;
int    _TouchReactivity_And_PD_ApplyOnMaterialMix;
float  _TouchReactivity_Remap_End;
int    _TouchReactivity_Bypassed;
int    _TouchReactivity_SafeMode4000;
float  _TouchReactivity_Dispersion;
int    _ProximityDistortion_Enabled;
int    _ProximityDistortion_MaskChannel;
int    _ProximityDistortion_MaskChannel_Inverted;
float  _ProximityDistortion_MaskChannel_Strength;
float  _ProximityDistortion_MaskChannel_Contrast;
float  _ProximityDistortion_MaskChannel_Brightness;
float  _ProximityDistortion_Depth_Start;
float  _ProximityDistortion_Depth_End;
int    _TF_Mode;
float4 _TF_AnimationMap_Offset;
float4 _TF_AnimationMap_Scale;
float  _TF_AnimationMap_Mip;
int    _TF_AnimationMap_UseUVBus;
int    _TF_AnimationMap_UVBus;
float  _TF_Time;
int    _TF_Time_Osci_Enabled;
int    _TF_Time_Osci_Slot;
float  _TF_Time_Osci_Value_Start;
float  _TF_Time_Osci_Value_End;
int    _TF_Visualisation_Enabled;
float  _TF_Visualisation_Speed;
float  _TF_Animation_Blur_PS;
float  _TF_Animation_Blur_VS;
float  _TF_Animation_Radial_Radius;
float4 _TF_Animation_Radial_Origin;
int    _TF_Animation_Radial_LegacyNoise_Enabled;
int    _TF_Animation_CenterOut_Invert;
int    _GlossyReflections_Enabled;
int    _SpecularHightlights_Enabled;
float  _IndirectLighting_Amount;
float  _LightMix_Sensitivity;
int    _LightMix_Sensitivity_Osci_Enabled;
int    _LightMix_Sensitivity_Osci_Slot;
float  _LightMix_Sensitivity_Osci_Value_Start;
float  _LightMix_Sensitivity_Osci_Value_End;
int    _IntersectionModulation_HSV_Enabled;
float  _IntersectionModulation_HSV_Hue_Amount;
float  _IntersectionModulation_HSV_Saturation_Amount;
float  _IntersectionModulation_HSV_Value_Amount;
int    _IntersectionModulation_Color_Enabled;
float4 _IntersectionModulation_Color_Target;
int    _IntersectionModulation_Opacity_Enabled;
float  _IntersectionModulation_Opacity_Amount;
float  _IntersectionModulation_Depth_Start;
float  _IntersectionModulation_Depth_End;
float  _NormalOffset_Amount;
int    _UVBus_1_Source;
int    _UVBus_1_VertexChannel_Channel;
int    _UVBus_1_WorldLocation_XComponent;
int    _UVBus_1_WorldLocation_YComponent;
int    _UVBus_1_BakedVertex_XComponent;
int    _UVBus_1_BakedVertex_YComponent;
int    _UVBus_1_SkinnedVertex_XComponent;
int    _UVBus_1_SkinnedVertex_YComponent;
float4 _UVBus_1_Distortion_Texture_ScrollSpeed;
int    _UVBus_1_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_1_Distortion_Texture_Tiling;
float4 _UVBus_1_Distortion_Texture_Offset;
float  _UVBus_1_Distortion_Texture_Strength;
int    _UVBus_1_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_1_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_1_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_1_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_1_Distortion_Texture_UVBus;
int    _UVBus_2_Source;
int    _UVBus_2_VertexChannel_Channel;
int    _UVBus_2_WorldLocation_XComponent;
int    _UVBus_2_WorldLocation_YComponent;
int    _UVBus_2_BakedVertex_XComponent;
int    _UVBus_2_BakedVertex_YComponent;
int    _UVBus_2_SkinnedVertex_XComponent;
int    _UVBus_2_SkinnedVertex_YComponent;
float4 _UVBus_2_Distortion_Texture_ScrollSpeed;
int    _UVBus_2_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_2_Distortion_Texture_Tiling;
float4 _UVBus_2_Distortion_Texture_Offset;
float  _UVBus_2_Distortion_Texture_Strength;
int    _UVBus_2_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_2_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_2_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_2_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_2_Distortion_Texture_UVBus;
int    _UVBus_3_Source;
int    _UVBus_3_VertexChannel_Channel;
int    _UVBus_3_WorldLocation_XComponent;
int    _UVBus_3_WorldLocation_YComponent;
int    _UVBus_3_BakedVertex_XComponent;
int    _UVBus_3_BakedVertex_YComponent;
int    _UVBus_3_SkinnedVertex_XComponent;
int    _UVBus_3_SkinnedVertex_YComponent;
float4 _UVBus_3_Distortion_Texture_ScrollSpeed;
int    _UVBus_3_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_3_Distortion_Texture_Tiling;
float4 _UVBus_3_Distortion_Texture_Offset;
float  _UVBus_3_Distortion_Texture_Strength;
int    _UVBus_3_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_3_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_3_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_3_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_3_Distortion_Texture_UVBus;
int    _UVBus_4_Source;
int    _UVBus_4_VertexChannel_Channel;
int    _UVBus_4_WorldLocation_XComponent;
int    _UVBus_4_WorldLocation_YComponent;
int    _UVBus_4_BakedVertex_XComponent;
int    _UVBus_4_BakedVertex_YComponent;
int    _UVBus_4_SkinnedVertex_XComponent;
int    _UVBus_4_SkinnedVertex_YComponent;
float4 _UVBus_4_Distortion_Texture_ScrollSpeed;
int    _UVBus_4_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_4_Distortion_Texture_Tiling;
float4 _UVBus_4_Distortion_Texture_Offset;
float  _UVBus_4_Distortion_Texture_Strength;
int    _UVBus_4_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_4_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_4_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_4_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_4_Distortion_Texture_UVBus;
int    _UVBus_5_Source;
int    _UVBus_5_VertexChannel_Channel;
int    _UVBus_5_WorldLocation_XComponent;
int    _UVBus_5_WorldLocation_YComponent;
int    _UVBus_5_BakedVertex_XComponent;
int    _UVBus_5_BakedVertex_YComponent;
int    _UVBus_5_SkinnedVertex_XComponent;
int    _UVBus_5_SkinnedVertex_YComponent;
float4 _UVBus_5_Distortion_Texture_ScrollSpeed;
int    _UVBus_5_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_5_Distortion_Texture_Tiling;
float4 _UVBus_5_Distortion_Texture_Offset;
float  _UVBus_5_Distortion_Texture_Strength;
int    _UVBus_5_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_5_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_5_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_5_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_5_Distortion_Texture_UVBus;
int    _UVBus_6_Source;
int    _UVBus_6_VertexChannel_Channel;
int    _UVBus_6_WorldLocation_XComponent;
int    _UVBus_6_WorldLocation_YComponent;
int    _UVBus_6_BakedVertex_XComponent;
int    _UVBus_6_BakedVertex_YComponent;
int    _UVBus_6_SkinnedVertex_XComponent;
int    _UVBus_6_SkinnedVertex_YComponent;
float4 _UVBus_6_Distortion_Texture_ScrollSpeed;
int    _UVBus_6_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_6_Distortion_Texture_Tiling;
float4 _UVBus_6_Distortion_Texture_Offset;
float  _UVBus_6_Distortion_Texture_Strength;
int    _UVBus_6_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_6_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_6_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_6_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_6_Distortion_Texture_UVBus;
float  _RimMask_1_Start;
int    _RimMask_1_Start_Osci_Enabled;
int    _RimMask_1_Start_Osci_Slot;
float  _RimMask_1_Start_Osci_Value_Start;
float  _RimMask_1_Start_Osci_Value_End;
float  _RimMask_1_End;
int    _RimMask_1_End_Osci_Enabled;
int    _RimMask_1_End_Osci_Slot;
float  _RimMask_1_End_Osci_Value_Start;
float  _RimMask_1_End_Osci_Value_End;
float  _RimMask_1_Strength_PreInversion;
int    _RimMask_1_Strength_PreInversion_Osci_Enabled;
int    _RimMask_1_Strength_PreInversion_Osci_Slot;
float  _RimMask_1_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_1_Strength_PreInversion_Osci_Value_End;
float  _RimMask_1_Strength_PostInversion;
int    _RimMask_1_Strength_PostInversion_Osci_Enabled;
int    _RimMask_1_Strength_PostInversion_Osci_Slot;
float  _RimMask_1_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_1_Strength_PostInversion_Osci_Value_End;
float  _RimMask_1_Smoothing;
int    _RimMask_1_Smoothing_Osci_Enabled;
int    _RimMask_1_Smoothing_Osci_Slot;
float  _RimMask_1_Smoothing_Osci_Value_Start;
float  _RimMask_1_Smoothing_Osci_Value_End;
float  _RimMask_2_Start;
int    _RimMask_2_Start_Osci_Enabled;
int    _RimMask_2_Start_Osci_Slot;
float  _RimMask_2_Start_Osci_Value_Start;
float  _RimMask_2_Start_Osci_Value_End;
float  _RimMask_2_End;
int    _RimMask_2_End_Osci_Enabled;
int    _RimMask_2_End_Osci_Slot;
float  _RimMask_2_End_Osci_Value_Start;
float  _RimMask_2_End_Osci_Value_End;
float  _RimMask_2_Strength_PreInversion;
int    _RimMask_2_Strength_PreInversion_Osci_Enabled;
int    _RimMask_2_Strength_PreInversion_Osci_Slot;
float  _RimMask_2_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_2_Strength_PreInversion_Osci_Value_End;
float  _RimMask_2_Strength_PostInversion;
int    _RimMask_2_Strength_PostInversion_Osci_Enabled;
int    _RimMask_2_Strength_PostInversion_Osci_Slot;
float  _RimMask_2_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_2_Strength_PostInversion_Osci_Value_End;
float  _RimMask_2_Smoothing;
int    _RimMask_2_Smoothing_Osci_Enabled;
int    _RimMask_2_Smoothing_Osci_Slot;
float  _RimMask_2_Smoothing_Osci_Value_Start;
float  _RimMask_2_Smoothing_Osci_Value_End;
float  _RimMask_3_Start;
int    _RimMask_3_Start_Osci_Enabled;
int    _RimMask_3_Start_Osci_Slot;
float  _RimMask_3_Start_Osci_Value_Start;
float  _RimMask_3_Start_Osci_Value_End;
float  _RimMask_3_End;
int    _RimMask_3_End_Osci_Enabled;
int    _RimMask_3_End_Osci_Slot;
float  _RimMask_3_End_Osci_Value_Start;
float  _RimMask_3_End_Osci_Value_End;
float  _RimMask_3_Strength_PreInversion;
int    _RimMask_3_Strength_PreInversion_Osci_Enabled;
int    _RimMask_3_Strength_PreInversion_Osci_Slot;
float  _RimMask_3_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_3_Strength_PreInversion_Osci_Value_End;
float  _RimMask_3_Strength_PostInversion;
int    _RimMask_3_Strength_PostInversion_Osci_Enabled;
int    _RimMask_3_Strength_PostInversion_Osci_Slot;
float  _RimMask_3_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_3_Strength_PostInversion_Osci_Value_End;
float  _RimMask_3_Smoothing;
int    _RimMask_3_Smoothing_Osci_Enabled;
int    _RimMask_3_Smoothing_Osci_Slot;
float  _RimMask_3_Smoothing_Osci_Value_Start;
float  _RimMask_3_Smoothing_Osci_Value_End;
float  _RimMask_4_Start;
int    _RimMask_4_Start_Osci_Enabled;
int    _RimMask_4_Start_Osci_Slot;
float  _RimMask_4_Start_Osci_Value_Start;
float  _RimMask_4_Start_Osci_Value_End;
float  _RimMask_4_End;
int    _RimMask_4_End_Osci_Enabled;
int    _RimMask_4_End_Osci_Slot;
float  _RimMask_4_End_Osci_Value_Start;
float  _RimMask_4_End_Osci_Value_End;
float  _RimMask_4_Strength_PreInversion;
int    _RimMask_4_Strength_PreInversion_Osci_Enabled;
int    _RimMask_4_Strength_PreInversion_Osci_Slot;
float  _RimMask_4_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_4_Strength_PreInversion_Osci_Value_End;
float  _RimMask_4_Strength_PostInversion;
int    _RimMask_4_Strength_PostInversion_Osci_Enabled;
int    _RimMask_4_Strength_PostInversion_Osci_Slot;
float  _RimMask_4_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_4_Strength_PostInversion_Osci_Value_End;
float  _RimMask_4_Smoothing;
int    _RimMask_4_Smoothing_Osci_Enabled;
int    _RimMask_4_Smoothing_Osci_Slot;
float  _RimMask_4_Smoothing_Osci_Value_Start;
float  _RimMask_4_Smoothing_Osci_Value_End;
float  _DistanceMask_1_Distance_Start;
int    _DistanceMask_1_Distance_Start_Osci_Enabled;
int    _DistanceMask_1_Distance_Start_Osci_Slot;
float  _DistanceMask_1_Distance_Start_Osci_Value_Start;
float  _DistanceMask_1_Distance_Start_Osci_Value_End;
float  _DistanceMask_1_Distance_End;
int    _DistanceMask_1_Distance_End_Osci_Enabled;
int    _DistanceMask_1_Distance_End_Osci_Slot;
float  _DistanceMask_1_Distance_End_Osci_Value_Start;
float  _DistanceMask_1_Distance_End_Osci_Value_End;
float  _DistanceMask_1_Strength_PreInversion;
int    _DistanceMask_1_Strength_PreInversion_Osci_Enabled;
int    _DistanceMask_1_Strength_PreInversion_Osci_Slot;
float  _DistanceMask_1_Strength_PreInversion_Osci_Value_Start;
float  _DistanceMask_1_Strength_PreInversion_Osci_Value_End;
float  _DistanceMask_1_Strength_PostInversion;
int    _DistanceMask_1_Strength_PostInversion_Osci_Enabled;
int    _DistanceMask_1_Strength_PostInversion_Osci_Slot;
float  _DistanceMask_1_Strength_PostInversion_Osci_Value_Start;
float  _DistanceMask_1_Strength_PostInversion_Osci_Value_End;
float  _DistanceMask_2_Distance_Start;
int    _DistanceMask_2_Distance_Start_Osci_Enabled;
int    _DistanceMask_2_Distance_Start_Osci_Slot;
float  _DistanceMask_2_Distance_Start_Osci_Value_Start;
float  _DistanceMask_2_Distance_Start_Osci_Value_End;
float  _DistanceMask_2_Distance_End;
int    _DistanceMask_2_Distance_End_Osci_Enabled;
int    _DistanceMask_2_Distance_End_Osci_Slot;
float  _DistanceMask_2_Distance_End_Osci_Value_Start;
float  _DistanceMask_2_Distance_End_Osci_Value_End;
float  _DistanceMask_2_Strength_PreInversion;
int    _DistanceMask_2_Strength_PreInversion_Osci_Enabled;
int    _DistanceMask_2_Strength_PreInversion_Osci_Slot;
float  _DistanceMask_2_Strength_PreInversion_Osci_Value_Start;
float  _DistanceMask_2_Strength_PreInversion_Osci_Value_End;
float  _DistanceMask_2_Strength_PostInversion;
int    _DistanceMask_2_Strength_PostInversion_Osci_Enabled;
int    _DistanceMask_2_Strength_PostInversion_Osci_Slot;
float  _DistanceMask_2_Strength_PostInversion_Osci_Value_Start;
float  _DistanceMask_2_Strength_PostInversion_Osci_Value_End;
float  _TouchReactivityInteractionMask_Intensity_Pre;
int    _TouchReactivityInteractionMask_Intensity_Pre_Osci_Enabled;
int    _TouchReactivityInteractionMask_Intensity_Pre_Osci_Slot;
float  _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_Start;
float  _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_End;
float  _TouchReactivityInteractionMask_Intensity;
int    _TouchReactivityInteractionMask_Intensity_Osci_Enabled;
int    _TouchReactivityInteractionMask_Intensity_Osci_Slot;
float  _TouchReactivityInteractionMask_Intensity_Osci_Value_Start;
float  _TouchReactivityInteractionMask_Intensity_Osci_Value_End;
int    _BlendMask_1_BlendMode;
int    _BlendMask_1_Mask_Fore_MaskChannel;
int    _BlendMask_1_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_1_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_1_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_1_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_1_Mask_Back_MaskChannel;
int    _BlendMask_1_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_1_Mask_Back_MaskChannel_Strength;
float  _BlendMask_1_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_1_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_1_Opacity;
int    _BlendMask_1_Opacity_Osci_Enabled;
int    _BlendMask_1_Opacity_Osci_Slot;
float  _BlendMask_1_Opacity_Osci_Value_Start;
float  _BlendMask_1_Opacity_Osci_Value_End;
float  _BlendMask_1_Strength_PreInversion;
int    _BlendMask_1_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_1_Strength_PreInversion_Osci_Slot;
float  _BlendMask_1_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_1_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_1_Strength_PostInversion;
int    _BlendMask_1_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_1_Strength_PostInversion_Osci_Slot;
float  _BlendMask_1_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_1_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_2_BlendMode;
int    _BlendMask_2_Mask_Fore_MaskChannel;
int    _BlendMask_2_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_2_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_2_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_2_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_2_Mask_Back_MaskChannel;
int    _BlendMask_2_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_2_Mask_Back_MaskChannel_Strength;
float  _BlendMask_2_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_2_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_2_Opacity;
int    _BlendMask_2_Opacity_Osci_Enabled;
int    _BlendMask_2_Opacity_Osci_Slot;
float  _BlendMask_2_Opacity_Osci_Value_Start;
float  _BlendMask_2_Opacity_Osci_Value_End;
float  _BlendMask_2_Strength_PreInversion;
int    _BlendMask_2_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_2_Strength_PreInversion_Osci_Slot;
float  _BlendMask_2_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_2_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_2_Strength_PostInversion;
int    _BlendMask_2_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_2_Strength_PostInversion_Osci_Slot;
float  _BlendMask_2_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_2_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_3_BlendMode;
int    _BlendMask_3_Mask_Fore_MaskChannel;
int    _BlendMask_3_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_3_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_3_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_3_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_3_Mask_Back_MaskChannel;
int    _BlendMask_3_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_3_Mask_Back_MaskChannel_Strength;
float  _BlendMask_3_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_3_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_3_Opacity;
int    _BlendMask_3_Opacity_Osci_Enabled;
int    _BlendMask_3_Opacity_Osci_Slot;
float  _BlendMask_3_Opacity_Osci_Value_Start;
float  _BlendMask_3_Opacity_Osci_Value_End;
float  _BlendMask_3_Strength_PreInversion;
int    _BlendMask_3_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_3_Strength_PreInversion_Osci_Slot;
float  _BlendMask_3_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_3_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_3_Strength_PostInversion;
int    _BlendMask_3_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_3_Strength_PostInversion_Osci_Slot;
float  _BlendMask_3_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_3_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_4_BlendMode;
int    _BlendMask_4_Mask_Fore_MaskChannel;
int    _BlendMask_4_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_4_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_4_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_4_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_4_Mask_Back_MaskChannel;
int    _BlendMask_4_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_4_Mask_Back_MaskChannel_Strength;
float  _BlendMask_4_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_4_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_4_Opacity;
int    _BlendMask_4_Opacity_Osci_Enabled;
int    _BlendMask_4_Opacity_Osci_Slot;
float  _BlendMask_4_Opacity_Osci_Value_Start;
float  _BlendMask_4_Opacity_Osci_Value_End;
float  _BlendMask_4_Strength_PreInversion;
int    _BlendMask_4_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_4_Strength_PreInversion_Osci_Slot;
float  _BlendMask_4_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_4_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_4_Strength_PostInversion;
int    _BlendMask_4_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_4_Strength_PostInversion_Osci_Slot;
float  _BlendMask_4_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_4_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_5_BlendMode;
int    _BlendMask_5_Mask_Fore_MaskChannel;
int    _BlendMask_5_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_5_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_5_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_5_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_5_Mask_Back_MaskChannel;
int    _BlendMask_5_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_5_Mask_Back_MaskChannel_Strength;
float  _BlendMask_5_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_5_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_5_Opacity;
int    _BlendMask_5_Opacity_Osci_Enabled;
int    _BlendMask_5_Opacity_Osci_Slot;
float  _BlendMask_5_Opacity_Osci_Value_Start;
float  _BlendMask_5_Opacity_Osci_Value_End;
float  _BlendMask_5_Strength_PreInversion;
int    _BlendMask_5_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_5_Strength_PreInversion_Osci_Slot;
float  _BlendMask_5_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_5_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_5_Strength_PostInversion;
int    _BlendMask_5_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_5_Strength_PostInversion_Osci_Slot;
float  _BlendMask_5_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_5_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_6_BlendMode;
int    _BlendMask_6_Mask_Fore_MaskChannel;
int    _BlendMask_6_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_6_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_6_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_6_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_6_Mask_Back_MaskChannel;
int    _BlendMask_6_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_6_Mask_Back_MaskChannel_Strength;
float  _BlendMask_6_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_6_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_6_Opacity;
int    _BlendMask_6_Opacity_Osci_Enabled;
int    _BlendMask_6_Opacity_Osci_Slot;
float  _BlendMask_6_Opacity_Osci_Value_Start;
float  _BlendMask_6_Opacity_Osci_Value_End;
float  _BlendMask_6_Strength_PreInversion;
int    _BlendMask_6_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_6_Strength_PreInversion_Osci_Slot;
float  _BlendMask_6_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_6_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_6_Strength_PostInversion;
int    _BlendMask_6_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_6_Strength_PostInversion_Osci_Slot;
float  _BlendMask_6_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_6_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_7_BlendMode;
int    _BlendMask_7_Mask_Fore_MaskChannel;
int    _BlendMask_7_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_7_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_7_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_7_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_7_Mask_Back_MaskChannel;
int    _BlendMask_7_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_7_Mask_Back_MaskChannel_Strength;
float  _BlendMask_7_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_7_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_7_Opacity;
int    _BlendMask_7_Opacity_Osci_Enabled;
int    _BlendMask_7_Opacity_Osci_Slot;
float  _BlendMask_7_Opacity_Osci_Value_Start;
float  _BlendMask_7_Opacity_Osci_Value_End;
float  _BlendMask_7_Strength_PreInversion;
int    _BlendMask_7_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_7_Strength_PreInversion_Osci_Slot;
float  _BlendMask_7_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_7_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_7_Strength_PostInversion;
int    _BlendMask_7_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_7_Strength_PostInversion_Osci_Slot;
float  _BlendMask_7_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_7_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_8_BlendMode;
int    _BlendMask_8_Mask_Fore_MaskChannel;
int    _BlendMask_8_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_8_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_8_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_8_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_8_Mask_Back_MaskChannel;
int    _BlendMask_8_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_8_Mask_Back_MaskChannel_Strength;
float  _BlendMask_8_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_8_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_8_Opacity;
int    _BlendMask_8_Opacity_Osci_Enabled;
int    _BlendMask_8_Opacity_Osci_Slot;
float  _BlendMask_8_Opacity_Osci_Value_Start;
float  _BlendMask_8_Opacity_Osci_Value_End;
float  _BlendMask_8_Strength_PreInversion;
int    _BlendMask_8_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_8_Strength_PreInversion_Osci_Slot;
float  _BlendMask_8_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_8_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_8_Strength_PostInversion;
int    _BlendMask_8_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_8_Strength_PostInversion_Osci_Slot;
float  _BlendMask_8_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_8_Strength_PostInversion_Osci_Value_End;
float  _ScrollMask_1_Speed;
int    _ScrollMask_1_Speed_TimeBase;
float4 _ScrollMask_1_Axis;
float  _ScrollMask_1_Frequency;
int    _ScrollMask_1_Frequency_Osci_Enabled;
int    _ScrollMask_1_Frequency_Osci_Slot;
float  _ScrollMask_1_Frequency_Osci_Value_Start;
float  _ScrollMask_1_Frequency_Osci_Value_End;
float  _ScrollMask_1_Gap;
int    _ScrollMask_1_Gap_Osci_Enabled;
int    _ScrollMask_1_Gap_Osci_Slot;
float  _ScrollMask_1_Gap_Osci_Value_Start;
float  _ScrollMask_1_Gap_Osci_Value_End;
float  _ScrollMask_1_Offset;
int    _ScrollMask_1_Offset_Osci_Enabled;
int    _ScrollMask_1_Offset_Osci_Slot;
float  _ScrollMask_1_Offset_Osci_Value_Start;
float  _ScrollMask_1_Offset_Osci_Value_End;
float  _ScrollMask_1_Strength_PreInversion;
int    _ScrollMask_1_Strength_PreInversion_Osci_Enabled;
int    _ScrollMask_1_Strength_PreInversion_Osci_Slot;
float  _ScrollMask_1_Strength_PreInversion_Osci_Value_Start;
float  _ScrollMask_1_Strength_PreInversion_Osci_Value_End;
float  _ScrollMask_1_Strength_PostInversion;
int    _ScrollMask_1_Strength_PostInversion_Osci_Enabled;
int    _ScrollMask_1_Strength_PostInversion_Osci_Slot;
float  _ScrollMask_1_Strength_PostInversion_Osci_Value_Start;
float  _ScrollMask_1_Strength_PostInversion_Osci_Value_End;
float  _ScrollMask_2_Speed;
int    _ScrollMask_2_Speed_TimeBase;
float4 _ScrollMask_2_Axis;
float  _ScrollMask_2_Frequency;
int    _ScrollMask_2_Frequency_Osci_Enabled;
int    _ScrollMask_2_Frequency_Osci_Slot;
float  _ScrollMask_2_Frequency_Osci_Value_Start;
float  _ScrollMask_2_Frequency_Osci_Value_End;
float  _ScrollMask_2_Gap;
int    _ScrollMask_2_Gap_Osci_Enabled;
int    _ScrollMask_2_Gap_Osci_Slot;
float  _ScrollMask_2_Gap_Osci_Value_Start;
float  _ScrollMask_2_Gap_Osci_Value_End;
float  _ScrollMask_2_Offset;
int    _ScrollMask_2_Offset_Osci_Enabled;
int    _ScrollMask_2_Offset_Osci_Slot;
float  _ScrollMask_2_Offset_Osci_Value_Start;
float  _ScrollMask_2_Offset_Osci_Value_End;
float  _ScrollMask_2_Strength_PreInversion;
int    _ScrollMask_2_Strength_PreInversion_Osci_Enabled;
int    _ScrollMask_2_Strength_PreInversion_Osci_Slot;
float  _ScrollMask_2_Strength_PreInversion_Osci_Value_Start;
float  _ScrollMask_2_Strength_PreInversion_Osci_Value_End;
float  _ScrollMask_2_Strength_PostInversion;
int    _ScrollMask_2_Strength_PostInversion_Osci_Enabled;
int    _ScrollMask_2_Strength_PostInversion_Osci_Slot;
float  _ScrollMask_2_Strength_PostInversion_Osci_Value_Start;
float  _ScrollMask_2_Strength_PostInversion_Osci_Value_End;
int    _MassBlendMask_1_BlendMode;
float  _MassBlendMask_1_Strength;
int    _MassBlendMask_1_Strength_Osci_Enabled;
int    _MassBlendMask_1_Strength_Osci_Slot;
float  _MassBlendMask_1_Strength_Osci_Value_Start;
float  _MassBlendMask_1_Strength_Osci_Value_End;
float  _MassBlendMask_1_Strength_PostInversion;
int    _MassBlendMask_1_Strength_PostInversion_Osci_Enabled;
int    _MassBlendMask_1_Strength_PostInversion_Osci_Slot;
float  _MassBlendMask_1_Strength_PostInversion_Osci_Value_Start;
float  _MassBlendMask_1_Strength_PostInversion_Osci_Value_End;
int    _MassBlendMask_1_1_MaskChannel;
int    _MassBlendMask_1_1_MaskChannel_Inverted;
float  _MassBlendMask_1_1_MaskChannel_Strength;
float  _MassBlendMask_1_1_MaskChannel_Contrast;
float  _MassBlendMask_1_1_MaskChannel_Brightness;
int    _MassBlendMask_1_2_MaskChannel;
int    _MassBlendMask_1_2_MaskChannel_Inverted;
float  _MassBlendMask_1_2_MaskChannel_Strength;
float  _MassBlendMask_1_2_MaskChannel_Contrast;
float  _MassBlendMask_1_2_MaskChannel_Brightness;
int    _MassBlendMask_1_3_MaskChannel;
int    _MassBlendMask_1_3_MaskChannel_Inverted;
float  _MassBlendMask_1_3_MaskChannel_Strength;
float  _MassBlendMask_1_3_MaskChannel_Contrast;
float  _MassBlendMask_1_3_MaskChannel_Brightness;
int    _MassBlendMask_1_4_MaskChannel;
int    _MassBlendMask_1_4_MaskChannel_Inverted;
float  _MassBlendMask_1_4_MaskChannel_Strength;
float  _MassBlendMask_1_4_MaskChannel_Contrast;
float  _MassBlendMask_1_4_MaskChannel_Brightness;
int    _MassBlendMask_1_5_MaskChannel;
int    _MassBlendMask_1_5_MaskChannel_Inverted;
float  _MassBlendMask_1_5_MaskChannel_Strength;
float  _MassBlendMask_1_5_MaskChannel_Contrast;
float  _MassBlendMask_1_5_MaskChannel_Brightness;
int    _MassBlendMask_1_6_MaskChannel;
int    _MassBlendMask_1_6_MaskChannel_Inverted;
float  _MassBlendMask_1_6_MaskChannel_Strength;
float  _MassBlendMask_1_6_MaskChannel_Contrast;
float  _MassBlendMask_1_6_MaskChannel_Brightness;
int    _MassBlendMask_1_7_MaskChannel;
int    _MassBlendMask_1_7_MaskChannel_Inverted;
float  _MassBlendMask_1_7_MaskChannel_Strength;
float  _MassBlendMask_1_7_MaskChannel_Contrast;
float  _MassBlendMask_1_7_MaskChannel_Brightness;
int    _MassBlendMask_1_8_MaskChannel;
int    _MassBlendMask_1_8_MaskChannel_Inverted;
float  _MassBlendMask_1_8_MaskChannel_Strength;
float  _MassBlendMask_1_8_MaskChannel_Contrast;
float  _MassBlendMask_1_8_MaskChannel_Brightness;
int    _MassBlendMask_2_BlendMode;
float  _MassBlendMask_2_Strength;
int    _MassBlendMask_2_Strength_Osci_Enabled;
int    _MassBlendMask_2_Strength_Osci_Slot;
float  _MassBlendMask_2_Strength_Osci_Value_Start;
float  _MassBlendMask_2_Strength_Osci_Value_End;
float  _MassBlendMask_2_Strength_PostInversion;
int    _MassBlendMask_2_Strength_PostInversion_Osci_Enabled;
int    _MassBlendMask_2_Strength_PostInversion_Osci_Slot;
float  _MassBlendMask_2_Strength_PostInversion_Osci_Value_Start;
float  _MassBlendMask_2_Strength_PostInversion_Osci_Value_End;
int    _MassBlendMask_2_1_MaskChannel;
int    _MassBlendMask_2_1_MaskChannel_Inverted;
float  _MassBlendMask_2_1_MaskChannel_Strength;
float  _MassBlendMask_2_1_MaskChannel_Contrast;
float  _MassBlendMask_2_1_MaskChannel_Brightness;
int    _MassBlendMask_2_2_MaskChannel;
int    _MassBlendMask_2_2_MaskChannel_Inverted;
float  _MassBlendMask_2_2_MaskChannel_Strength;
float  _MassBlendMask_2_2_MaskChannel_Contrast;
float  _MassBlendMask_2_2_MaskChannel_Brightness;
int    _MassBlendMask_2_3_MaskChannel;
int    _MassBlendMask_2_3_MaskChannel_Inverted;
float  _MassBlendMask_2_3_MaskChannel_Strength;
float  _MassBlendMask_2_3_MaskChannel_Contrast;
float  _MassBlendMask_2_3_MaskChannel_Brightness;
int    _MassBlendMask_2_4_MaskChannel;
int    _MassBlendMask_2_4_MaskChannel_Inverted;
float  _MassBlendMask_2_4_MaskChannel_Strength;
float  _MassBlendMask_2_4_MaskChannel_Contrast;
float  _MassBlendMask_2_4_MaskChannel_Brightness;
int    _MassBlendMask_2_5_MaskChannel;
int    _MassBlendMask_2_5_MaskChannel_Inverted;
float  _MassBlendMask_2_5_MaskChannel_Strength;
float  _MassBlendMask_2_5_MaskChannel_Contrast;
float  _MassBlendMask_2_5_MaskChannel_Brightness;
int    _MassBlendMask_2_6_MaskChannel;
int    _MassBlendMask_2_6_MaskChannel_Inverted;
float  _MassBlendMask_2_6_MaskChannel_Strength;
float  _MassBlendMask_2_6_MaskChannel_Contrast;
float  _MassBlendMask_2_6_MaskChannel_Brightness;
int    _MassBlendMask_2_7_MaskChannel;
int    _MassBlendMask_2_7_MaskChannel_Inverted;
float  _MassBlendMask_2_7_MaskChannel_Strength;
float  _MassBlendMask_2_7_MaskChannel_Contrast;
float  _MassBlendMask_2_7_MaskChannel_Brightness;
int    _MassBlendMask_2_8_MaskChannel;
int    _MassBlendMask_2_8_MaskChannel_Inverted;
float  _MassBlendMask_2_8_MaskChannel_Strength;
float  _MassBlendMask_2_8_MaskChannel_Contrast;
float  _MassBlendMask_2_8_MaskChannel_Brightness;
int    _LTCGI;
float  _GrabPass_Distortion_Amount;
int    _GrabPass_Distortion_Amount_MaskChannel;
int    _GrabPass_Distortion_Amount_MaskChannel_Inverted;
float  _GrabPass_Distortion_Amount_MaskChannel_Strength;
float  _GrabPass_Distortion_Amount_MaskChannel_Contrast;
float  _GrabPass_Distortion_Amount_MaskChannel_Brightness;
float  _GrabPass_Zoom_Amount;
int    _GrabPass_Blur_Enabled;
int    _GrabPass_Blur_Dispersion;
int    _GrabPass_Blur_Weight_MaskChannel;
int    _GrabPass_Blur_Weight_MaskChannel_Inverted;
float  _GrabPass_Blur_Weight_MaskChannel_Strength;
float  _GrabPass_Blur_Weight_MaskChannel_Contrast;
float  _GrabPass_Blur_Weight_MaskChannel_Brightness;
int    _GrabPass_Tint_Texture_AlphaIsMask;
float4 _GrabPass_Tint_Texture_Tiling;
float4 _GrabPass_Tint_Texture_Offset;
float4 _GrabPass_Tint_Texture_ScrollSpeed;
int    _GrabPass_Tint_Texture_ScrollSpeed_TimeBase;
int    _GrabPass_Tint_Texture_UVBus;
float4 _GrabPass_Tint_Color;
int    _GrabPass_Tint_MaskChannel;
int    _GrabPass_Tint_MaskChannel_Inverted;
float  _GrabPass_Tint_MaskChannel_Strength;
float  _GrabPass_Tint_MaskChannel_Contrast;
float  _GrabPass_Tint_MaskChannel_Brightness;
int    _Glitter_UVBus;
float  _Glitter_Density;
float  _Glitter_Amount;
int    _Glitter_Amount_Osci_Enabled;
int    _Glitter_Amount_Osci_Slot;
float  _Glitter_Amount_Osci_Value_Start;
float  _Glitter_Amount_Osci_Value_End;
float  _Glitter_Disorder;
int    _Glitter_AppearsOnMaterial;
int    _Glitter_MaskChannel;
int    _Glitter_MaskChannel_Inverted;
float  _Glitter_MaskChannel_Strength;
float  _Glitter_MaskChannel_Contrast;
float  _Glitter_MaskChannel_Brightness;
float4 _Glitter_Color;
int    _Glitter_Color_Osci_Enabled;
int    _Glitter_Color_Osci_Slot;
float4 _Glitter_Color_Osci_Color_Start;
float4 _Glitter_Color_Osci_Color_End;
float  _Glitter_Color_FromAlbedo;
int    _Glitter_Color_FromAlbedo_Osci_Enabled;
int    _Glitter_Color_FromAlbedo_Osci_Slot;
float  _Glitter_Color_FromAlbedo_Osci_Value_Start;
float  _Glitter_Color_FromAlbedo_Osci_Value_End;
float4 _Glitter_Opacity_MinMax;
int    _Glitter_Opacity_MinMax_Osci_Enabled;
int    _Glitter_Opacity_MinMax_Osci_Slot;
float4 _Glitter_Opacity_MinMax_Osci_Color_Start;
float4 _Glitter_Opacity_MinMax_Osci_Color_End;
float4 _Glitter_Size_MinMax;
int    _Glitter_Size_MinMax_Osci_Enabled;
int    _Glitter_Size_MinMax_Osci_Slot;
float4 _Glitter_Size_MinMax_Osci_Color_Start;
float4 _Glitter_Size_MinMax_Osci_Color_End;
float4 _Glitter_Brightness_MinMax;
int    _Glitter_Brightness_MinMax_Osci_Enabled;
int    _Glitter_Brightness_MinMax_Osci_Slot;
float4 _Glitter_Brightness_MinMax_Osci_Color_Start;
float4 _Glitter_Brightness_MinMax_Osci_Color_End;
int    _Glitter_Texture_Enabled;
int    _Glitter_Texture_Map_AlphaIsMask;
float4 _Glitter_Texture_Map_Tiling;
float4 _Glitter_Texture_Map_Offset;
float4 _Glitter_Texture_Zoom_MinMax;
int    _Glitter_Texture_Zoom_MinMax_Osci_Enabled;
int    _Glitter_Texture_Zoom_MinMax_Osci_Slot;
float4 _Glitter_Texture_Zoom_MinMax_Osci_Color_Start;
float4 _Glitter_Texture_Zoom_MinMax_Osci_Color_End;
int    _Glitter_Texture_Rotation_Random_Enabled;
float  _Glitter_Texture_Rotation_Speed;
int    _Glitter_Texture_Rotation_Speed_TimeBase;
int    _Glitter_HSV_Enabled;
float4 _Glitter_HSV_Hue_MinMax;
int    _Glitter_HSV_Hue_MinMax_Osci_Enabled;
int    _Glitter_HSV_Hue_MinMax_Osci_Slot;
float4 _Glitter_HSV_Hue_MinMax_Osci_Color_Start;
float4 _Glitter_HSV_Hue_MinMax_Osci_Color_End;
float4 _Glitter_HSV_Saturation_MinMax;
int    _Glitter_HSV_Saturation_MinMax_Osci_Enabled;
int    _Glitter_HSV_Saturation_MinMax_Osci_Slot;
float4 _Glitter_HSV_Saturation_MinMax_Osci_Color_Start;
float4 _Glitter_HSV_Saturation_MinMax_Osci_Color_End;
float  _Glitter_HSV_Hue_Speed;
int    _Glitter_HSV_Hue_Speed_TimeBase;
float  _Glitter_HSV_Hue_Shift;
int    _Glitter_HSV_Hue_Shift_Osci_Enabled;
int    _Glitter_HSV_Hue_Shift_Osci_Slot;
float  _Glitter_HSV_Hue_Shift_Osci_Value_Start;
float  _Glitter_HSV_Hue_Shift_Osci_Value_End;
float  _Glitter_AutoBlink_Speed;
int    _Glitter_AutoBlink_Speed_TimeBase;
float  _Glitter_AutoBlink_Randomness;
int    _Glitter_ManualBlink_Enabled;
float  _Glitter_ManualBlink_Offset;
int    _Glitter_ManualBlink_Offset_Osci_Enabled;
int    _Glitter_ManualBlink_Offset_Osci_Slot;
float  _Glitter_ManualBlink_Offset_Osci_Value_Start;
float  _Glitter_ManualBlink_Offset_Osci_Value_End;
float  _Glitter_ManualBlink_Offset_Randomness;
float4 _Glitter_UV_Scroll_Speed;
int    _Glitter_UV_Scroll_Speed_TimeBase;
float  _PostProcessHSV_Hue_Shift;
int    _PostProcessHSV_Hue_Shift_Osci_Enabled;
int    _PostProcessHSV_Hue_Shift_Osci_Slot;
float  _PostProcessHSV_Hue_Shift_Osci_Value_Start;
float  _PostProcessHSV_Hue_Shift_Osci_Value_End;
float  _PostProcessHSV_Sat_Shift;
int    _PostProcessHSV_Sat_Shift_Osci_Enabled;
int    _PostProcessHSV_Sat_Shift_Osci_Slot;
float  _PostProcessHSV_Sat_Shift_Osci_Value_Start;
float  _PostProcessHSV_Sat_Shift_Osci_Value_End;
float  _PostProcessHSV_Value_Shift;
int    _PostProcessHSV_Value_Shift_Osci_Enabled;
int    _PostProcessHSV_Value_Shift_Osci_Slot;
float  _PostProcessHSV_Value_Shift_Osci_Value_Start;
float  _PostProcessHSV_Value_Shift_Osci_Value_End;
float  _PostProcessHSV_Hue_Speed;
int    _PostProcessHSV_Hue_Speed_TimeBase;
int    _DistanceDither_Enabled;
int    _DistanceDither_Separate_Faces;
float  _DistanceDither_Front_Distance_Start;
float  _DistanceDither_Front_Distance_End;
float  _DistanceDither_Back_Distance_Start;
float  _DistanceDither_Back_Distance_End;
float  _DistanceDither_Front_Bias;
float  _DistanceDither_Back_Bias;
int    _DistanceDither_MaskChannel;
int    _DistanceDither_MaskChannel_Inverted;
float  _DistanceDither_MaskChannel_Strength;
float  _DistanceDither_MaskChannel_Contrast;
float  _DistanceDither_MaskChannel_Brightness;
int    _BackfaceFill_Enabled;
float4 _BackfaceFill_Color;
int    _PreviewMirror;
float  _Cutoff;
int    _Cutoff_Osci_Enabled;
int    _Cutoff_Osci_Slot;
float  _Cutoff_Osci_Value_Start;
float  _Cutoff_Osci_Value_End;
int    _FlipNormalsOnBackFacingTris;
int    _Osci_Slot_1_Type;
float  _Osci_Slot_1_Speed;
int    _Osci_Slot_1_Speed_TimeBase;
float  _Osci_Slot_1_Square_DutyCycle;
int    _Osci_Slot_1_Sine_HalfWave;
int    _Osci_Slot_2_Type;
float  _Osci_Slot_2_Speed;
int    _Osci_Slot_2_Speed_TimeBase;
float  _Osci_Slot_2_Square_DutyCycle;
int    _Osci_Slot_2_Sine_HalfWave;
int    _Osci_Slot_3_Type;
float  _Osci_Slot_3_Speed;
int    _Osci_Slot_3_Speed_TimeBase;
float  _Osci_Slot_3_Square_DutyCycle;
int    _Osci_Slot_3_Sine_HalfWave;
int    _Osci_Slot_4_Type;
float  _Osci_Slot_4_Speed;
int    _Osci_Slot_4_Speed_TimeBase;
float  _Osci_Slot_4_Square_DutyCycle;
int    _Osci_Slot_4_Sine_HalfWave;
int    _Osci_Slot_5_Type;
float  _Osci_Slot_5_Speed;
int    _Osci_Slot_5_Speed_TimeBase;
float  _Osci_Slot_5_Square_DutyCycle;
int    _Osci_Slot_5_Sine_HalfWave;
int    _Osci_Slot_6_Type;
float  _Osci_Slot_6_Speed;
int    _Osci_Slot_6_Speed_TimeBase;
float  _Osci_Slot_6_Square_DutyCycle;
int    _Osci_Slot_6_Sine_HalfWave;
int    _Osci_ALBand_1_Band;
int    _Osci_ALBand_1_Smoothness_Enabled;
float  _Osci_ALBand_1_Smoothness_Level;
float  _Osci_ALBand_1_Fallback_Type;
float  _Osci_ALBand_1_Fallback_Osci;
float  _Osci_ALBand_1_Fallback_Value;
int    _Osci_ALBand_2_Band;
int    _Osci_ALBand_2_Smoothness_Enabled;
float  _Osci_ALBand_2_Smoothness_Level;
float  _Osci_ALBand_2_Fallback_Type;
float  _Osci_ALBand_2_Fallback_Osci;
float  _Osci_ALBand_2_Fallback_Value;
int    _Osci_ALBand_3_Band;
int    _Osci_ALBand_3_Smoothness_Enabled;
float  _Osci_ALBand_3_Smoothness_Level;
float  _Osci_ALBand_3_Fallback_Type;
float  _Osci_ALBand_3_Fallback_Osci;
float  _Osci_ALBand_3_Fallback_Value;
int    _Osci_ALBand_4_Band;
int    _Osci_ALBand_4_Smoothness_Enabled;
float  _Osci_ALBand_4_Smoothness_Level;
float  _Osci_ALBand_4_Fallback_Type;
float  _Osci_ALBand_4_Fallback_Osci;
float  _Osci_ALBand_4_Fallback_Value;
int    _Osci_ALBand_5_Band;
int    _Osci_ALBand_5_Smoothness_Enabled;
float  _Osci_ALBand_5_Smoothness_Level;
float  _Osci_ALBand_5_Fallback_Type;
float  _Osci_ALBand_5_Fallback_Osci;
float  _Osci_ALBand_5_Fallback_Value;
int    _Osci_ALBand_6_Band;
int    _Osci_ALBand_6_Smoothness_Enabled;
float  _Osci_ALBand_6_Smoothness_Level;
float  _Osci_ALBand_6_Fallback_Type;
float  _Osci_ALBand_6_Fallback_Osci;
float  _Osci_ALBand_6_Fallback_Value;
int    _Osci_ALEnergy_1_Smoothness_Enabled;
float  _Osci_ALEnergy_1_Smoothness_Level;
float  _Osci_ALEnergy_1_Fallback_Type;
float  _Osci_ALEnergy_1_Fallback_Osci;
float  _Osci_ALEnergy_1_Fallback_Value;
int    _Osci_ALEnergy_2_Smoothness_Enabled;
float  _Osci_ALEnergy_2_Smoothness_Level;
float  _Osci_ALEnergy_2_Fallback_Type;
float  _Osci_ALEnergy_2_Fallback_Osci;
float  _Osci_ALEnergy_2_Fallback_Value;
int    _Osci_Mask_1_MaskChannel;
int    _Osci_Mask_1_MaskChannel_Inverted;
float  _Osci_Mask_1_MaskChannel_Strength;
float  _Osci_Mask_1_MaskChannel_Contrast;
float  _Osci_Mask_1_MaskChannel_Brightness;
int    _Osci_Mask_2_MaskChannel;
int    _Osci_Mask_2_MaskChannel_Inverted;
float  _Osci_Mask_2_MaskChannel_Strength;
float  _Osci_Mask_2_MaskChannel_Contrast;
float  _Osci_Mask_2_MaskChannel_Brightness;
int    _Osci_Mask_3_MaskChannel;
int    _Osci_Mask_3_MaskChannel_Inverted;
float  _Osci_Mask_3_MaskChannel_Strength;
float  _Osci_Mask_3_MaskChannel_Contrast;
float  _Osci_Mask_3_MaskChannel_Brightness;
int    _Osci_Mask_4_MaskChannel;
int    _Osci_Mask_4_MaskChannel_Inverted;
float  _Osci_Mask_4_MaskChannel_Strength;
float  _Osci_Mask_4_MaskChannel_Contrast;
float  _Osci_Mask_4_MaskChannel_Brightness;
int    _Osci_Mask_5_MaskChannel;
int    _Osci_Mask_5_MaskChannel_Inverted;
float  _Osci_Mask_5_MaskChannel_Strength;
float  _Osci_Mask_5_MaskChannel_Contrast;
float  _Osci_Mask_5_MaskChannel_Brightness;
int    _Osci_Mask_6_MaskChannel;
int    _Osci_Mask_6_MaskChannel_Inverted;
float  _Osci_Mask_6_MaskChannel_Strength;
float  _Osci_Mask_6_MaskChannel_Contrast;
float  _Osci_Mask_6_MaskChannel_Brightness;
int    _Osci_Mask_7_MaskChannel;
int    _Osci_Mask_7_MaskChannel_Inverted;
float  _Osci_Mask_7_MaskChannel_Strength;
float  _Osci_Mask_7_MaskChannel_Contrast;
float  _Osci_Mask_7_MaskChannel_Brightness;
int    _Osci_Mask_8_MaskChannel;
int    _Osci_Mask_8_MaskChannel_Inverted;
float  _Osci_Mask_8_MaskChannel_Strength;
float  _Osci_Mask_8_MaskChannel_Contrast;
float  _Osci_Mask_8_MaskChannel_Brightness;
int    _TimeBase_AL_Slot_1_Type;
int    _TimeBase_AL_Slot_1_Band;
int    _TimeBase_AL_Slot_1_UseTimeAsFallback;
int    _TimeBase_AL_Slot_1_AddTime;
float  _TimeBase_AL_Slot_1_Strength;
int    _TimeBase_AL_Slot_2_Type;
int    _TimeBase_AL_Slot_2_Band;
int    _TimeBase_AL_Slot_2_UseTimeAsFallback;
int    _TimeBase_AL_Slot_2_AddTime;
float  _TimeBase_AL_Slot_2_Strength;
int    _TimeBase_AL_Slot_3_Type;
int    _TimeBase_AL_Slot_3_Band;
int    _TimeBase_AL_Slot_3_UseTimeAsFallback;
int    _TimeBase_AL_Slot_3_AddTime;
float  _TimeBase_AL_Slot_3_Strength;
int    _TimeBase_AL_Slot_4_Type;
int    _TimeBase_AL_Slot_4_Band;
int    _TimeBase_AL_Slot_4_UseTimeAsFallback;
int    _TimeBase_AL_Slot_4_AddTime;
float  _TimeBase_AL_Slot_4_Strength;
int    _TimeBase_AL_Slot_5_Type;
int    _TimeBase_AL_Slot_5_Band;
int    _TimeBase_AL_Slot_5_UseTimeAsFallback;
int    _TimeBase_AL_Slot_5_AddTime;
float  _TimeBase_AL_Slot_5_Strength;
int    _TimeBase_AL_Slot_6_Type;
int    _TimeBase_AL_Slot_6_Band;
int    _TimeBase_AL_Slot_6_UseTimeAsFallback;
int    _TimeBase_AL_Slot_6_AddTime;
float  _TimeBase_AL_Slot_6_Strength;
int    _Diffuse_Type;
float  _Diffuse_Ramp_1_Start;
float  _Diffuse_Ramp_1_End;
float  _Diffuse_Ramp_1_Offset;
float  _Diffuse_Ramp_2_Start;
float  _Diffuse_Ramp_2_End;
float  _Diffuse_Ramp_2_Offset;
float  _Diffuse_Ramp_Blend;
float4 _Diffuse_Shadow_Tint_Color;
float  _LightProbeWeight;
float4 _LightProbe_Shadow_Tint_Color;
float  _LightColor_Weight;
int    _FallbackLight_Enabled;
float4 _FallbackLight_Direction;
float4 _FallbackLight_Color;
int    _Outline_Enabled;
float  _Outline_Size;
float4 _Outline_Color;
float  _Outline_Mask_Cutoff;
int    _Outline_MaskChannel;
int    _Outline_MaskChannel_Inverted;
float  _Outline_MaskChannel_Strength;
float  _Outline_MaskChannel_Contrast;
float  _Outline_MaskChannel_Brightness;
int    _Outline_AppearsOnMaterial;
int    _EarlyZ_Enabled;
int    _AudioLink_Disabled;

/* MARKER VARIABLES END */
  
  #if defined(RALIV_PENETRATOR) || defined(RALIV_ORIFICE)
    #include "Assets/RalivDynamicPenetrationSystem/Plugins/RalivDPS_Defines.cginc"
  #endif

#else
  #if defined(RALIV_ORIFICE)
	  sampler2D _OrificeData;
  #endif
#endif

SamplerState _SamplerLinearRepeat;
SamplerState _SamplerLinearClamp;
SamplerState _SamplerTrilinearClamp;
SamplerState _SamplerLinearMirror;

#if defined(NOT_BAKED)
  /* MARKER TEXTURE INCLUDE DEFINES START */
#define is_MaskChannel_1_Texture_set true
#define is_MaskChannel_2_Texture_set true
#define is_MaskChannel_3_Texture_set true
#define is_MaskChannel_4_Texture_set true
#define is_MaskChannel_5_Texture_set true
#define is_MaskChannel_6_Texture_set true
#define is_MaskChannel_7_Texture_set true
#define is_MaskChannel_8_Texture_set true
#define is_MainTex_set true
#define is_Mix_MainTex_set true
#define is_SecondaryTex_set true
#define is_Mix_SecondaryTex_set true
#define is_OcclusionMap_set true
#define is_Mix_OcclusionMap_set true
#define is_BumpMap_set true
#define is_Mix_BumpMap_set true
#define is_DetailNormalMap_set true
#define is_Mix_DetailNormalMap_set true
#define is_EmissionMap_set true
#define is_Mix_EmissionMap_set true
#define is_EmissionMap2_set true
#define is_Mix_EmissionMap2_set true
#define is_Matcap_1_Texture_set true
#define is_Mix_Matcap_1_Texture_set true
#define is_Matcap_2_Texture_set true
#define is_Mix_Matcap_2_Texture_set true
#define is_Matcap_3_Texture_set true
#define is_Mix_Matcap_3_Texture_set true
#define is_FakeCubemap_Texture_set true
#define is_TF_AnimationMap_set true
#define is_UVBus_1_Distortion_Texture_set true
#define is_UVBus_2_Distortion_Texture_set true
#define is_UVBus_3_Distortion_Texture_set true
#define is_UVBus_4_Distortion_Texture_set true
#define is_UVBus_5_Distortion_Texture_set true
#define is_UVBus_6_Distortion_Texture_set true
#define is_GrabPass_Tint_Texture_set true
#define is_Glitter_Texture_Map_set true
#define is_Diffuse_LUT_Texture_set true

/* MARKER TEXTURE INCLUDE DEFINES END */
#endif

Texture2D _MainTex;
Texture2D _Mix_MainTex;

Texture2D _SecondaryTex;
Texture2D _Mix_SecondaryTex;

Texture2D _OcclusionMap;
Texture2D _Mix_OcclusionMap;

Texture2D _DetailNormalMap;
Texture2D _Mix_DetailNormalMap;

Texture2D _BumpMap;
Texture2D _Mix_BumpMap;

Texture2D _Matcap_1_Texture;
Texture2D _Mix_Matcap_1_Texture;

Texture2D _Matcap_2_Texture;
Texture2D _Mix_Matcap_2_Texture;

Texture2D _Matcap_3_Texture;
Texture2D _Mix_Matcap_3_Texture;

Texture2D _EmissionMap;
Texture2D _Mix_EmissionMap;

Texture2D _EmissionMap2;
Texture2D _Mix_EmissionMap2;

Texture2D _UVBus_1_Distortion_Texture;
Texture2D _UVBus_2_Distortion_Texture;
Texture2D _UVBus_3_Distortion_Texture;
Texture2D _UVBus_4_Distortion_Texture;
Texture2D _UVBus_5_Distortion_Texture;
Texture2D _UVBus_6_Distortion_Texture;

// NOTE(valuef): Whenever SAMPLE_DEPTH_TEXTURE_LOD is defined to be UNITY_SAMPLE_TEX2DARRAY_LOD
// 2024-01-24
#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
  #define USE_2D_ARRAY_DEPTH
#endif

#if defined(USE_2D_ARRAY_DEPTH)
  Texture2DArray _CameraDepthTexture;
  SamplerState sampler_CameraDepthTexture;

  #define SAMPLE_DEPTH(uv) _CameraDepthTexture.SampleLevel(sampler_CameraDepthTexture, float3((uv).x, (uv).y, (float)unity_StereoEyeIndex), 0).r;

#else
  Texture2D<float> _CameraDepthTexture;
  SamplerState sampler_CameraDepthTexture;

  #define SAMPLE_DEPTH(uv) _CameraDepthTexture.SampleLevel(sampler_CameraDepthTexture, uv, 0).r;

#endif

inline
bool
is_depth_texture_available() {
  float size_x;
  float size_y;

  #if defined(USE_2D_ARRAY_DEPTH)
    float num_elements;
    _CameraDepthTexture.GetDimensions(size_x, size_y, num_elements);
  #else
    _CameraDepthTexture.GetDimensions(size_x, size_y);
  #endif

  return size_x > 16 && size_y > 16;
}

TextureCube _FakeCubemap_Texture;
SamplerState sampler_FakeCubemap_Texture;
half4 _FakeCubemap_Texture_HDR;

Texture2D _TF_AnimationMap;

Texture2D _MaskChannel_1_Texture;
Texture2D _MaskChannel_2_Texture;
Texture2D _MaskChannel_3_Texture;
Texture2D _MaskChannel_4_Texture;
Texture2D _MaskChannel_5_Texture;
Texture2D _MaskChannel_6_Texture;
Texture2D _MaskChannel_7_Texture;
Texture2D _MaskChannel_8_Texture;

Texture2D _Glitter_Texture_Map;

#if defined(VFGOO_GRABPASS)
  Texture2D _GrabPass;
  Texture2D _GrabPass_Tint_Texture;
#endif

struct Oscillator_Info {
  bool enabled;

  int slot;

  float4 default_value;
  float4 start;
  float4 end;
};

Oscillator_Info make_oscillator_info(bool enabled, int slot, float4 default_value, float4 start, float4 end) {
  Oscillator_Info ret;
  ret.enabled = enabled;
  ret.slot = slot;
  ret.default_value = default_value;
  ret.start = start;
  ret.end = end;
  return ret;
}

static const Oscillator_Info OSCILLATOR_INFO_NONE = make_oscillator_info(false, 0, float4(0,0,0,0), float4(0,0,0,0), float4(0,0,0,0));

#define make_oscillator_value(_name, _default) \
  static Oscillator_Info _name = make_oscillator_info( \
    _name##_Enabled, \
    _name##_Slot, \
    _default, \
    _name##_Value_Start.rrrr, \
    _name##_Value_End.rrrr \
  )

#define make_oscillator_color4(_name, _default) \
  static Oscillator_Info _name = make_oscillator_info( \
    _name##_Enabled, \
    _name##_Slot, \
    _default, \
    _name##_Color_Start, \
    _name##_Color_End \
  )

/* MARKER OSCILLATOR INFO START */
make_oscillator_value(_MaskChannel_1_Strength_PreInversion_Osci, _MaskChannel_1_Strength_PreInversion);
make_oscillator_value(_MaskChannel_1_Strength_PostInversion_Osci, _MaskChannel_1_Strength_PostInversion);
make_oscillator_value(_MaskChannel_2_Strength_PreInversion_Osci, _MaskChannel_2_Strength_PreInversion);
make_oscillator_value(_MaskChannel_2_Strength_PostInversion_Osci, _MaskChannel_2_Strength_PostInversion);
make_oscillator_value(_MaskChannel_3_Strength_PreInversion_Osci, _MaskChannel_3_Strength_PreInversion);
make_oscillator_value(_MaskChannel_3_Strength_PostInversion_Osci, _MaskChannel_3_Strength_PostInversion);
make_oscillator_value(_MaskChannel_4_Strength_PreInversion_Osci, _MaskChannel_4_Strength_PreInversion);
make_oscillator_value(_MaskChannel_4_Strength_PostInversion_Osci, _MaskChannel_4_Strength_PostInversion);
make_oscillator_value(_MaskChannel_5_Strength_PreInversion_Osci, _MaskChannel_5_Strength_PreInversion);
make_oscillator_value(_MaskChannel_5_Strength_PostInversion_Osci, _MaskChannel_5_Strength_PostInversion);
make_oscillator_value(_MaskChannel_6_Strength_PreInversion_Osci, _MaskChannel_6_Strength_PreInversion);
make_oscillator_value(_MaskChannel_6_Strength_PostInversion_Osci, _MaskChannel_6_Strength_PostInversion);
make_oscillator_value(_MaskChannel_7_Strength_PreInversion_Osci, _MaskChannel_7_Strength_PreInversion);
make_oscillator_value(_MaskChannel_7_Strength_PostInversion_Osci, _MaskChannel_7_Strength_PostInversion);
make_oscillator_value(_MaskChannel_8_Strength_PreInversion_Osci, _MaskChannel_8_Strength_PreInversion);
make_oscillator_value(_MaskChannel_8_Strength_PostInversion_Osci, _MaskChannel_8_Strength_PostInversion);
make_oscillator_color4(_Color_Osci, _Color);
make_oscillator_color4(_Mix_Color_Osci, _Mix_Color);
make_oscillator_color4(_SecondaryTex_Color_Osci, _SecondaryTex_Color);
make_oscillator_color4(_Mix_SecondaryTex_Color_Osci, _Mix_SecondaryTex_Color);
make_oscillator_value(_Opacity_Osci, _Opacity);
make_oscillator_value(_Mix_Opacity_Osci, _Mix_Opacity);
make_oscillator_value(_BumpScale_Osci, _BumpScale);
make_oscillator_value(_Mix_BumpScale_Osci, _Mix_BumpScale);
make_oscillator_value(_DetailBumpScale_Osci, _DetailBumpScale);
make_oscillator_value(_Mix_DetailBumpScale_Osci, _Mix_DetailBumpScale);
make_oscillator_color4(_EmissionColor_Osci, _EmissionColor);
make_oscillator_color4(_Mix_EmissionColor_Osci, _Mix_EmissionColor);
make_oscillator_color4(_EmissionColor2_Osci, _EmissionColor2);
make_oscillator_color4(_Mix_EmissionColor2_Osci, _Mix_EmissionColor2);
make_oscillator_color4(_Matcap_1_Color_Osci, _Matcap_1_Color);
make_oscillator_color4(_Mix_Matcap_1_Color_Osci, _Mix_Matcap_1_Color);
make_oscillator_color4(_Matcap_2_Color_Osci, _Matcap_2_Color);
make_oscillator_color4(_Mix_Matcap_2_Color_Osci, _Mix_Matcap_2_Color);
make_oscillator_color4(_Matcap_3_Color_Osci, _Matcap_3_Color);
make_oscillator_color4(_Mix_Matcap_3_Color_Osci, _Mix_Matcap_3_Color);
make_oscillator_value(_AlbedoEmissionWeight_Osci, _AlbedoEmissionWeight);
make_oscillator_color4(_AddedEmissionColor_Osci, _AddedEmissionColor);
make_oscillator_value(_Mix_AlbedoEmissionWeight_Osci, _Mix_AlbedoEmissionWeight);
make_oscillator_color4(_Mix_AddedEmissionColor_Osci, _Mix_AddedEmissionColor);
make_oscillator_value(_Goo_Size_Osci, _Goo_Size);
make_oscillator_color4(_Goo_Offset_Osci, _Goo_Offset);
make_oscillator_value(_Goo_Deformation_MeshNormal_Offset_Min_Osci, _Goo_Deformation_MeshNormal_Offset_Min);
make_oscillator_value(_Goo_Deformation_MeshNormal_Offset_Max_Osci, _Goo_Deformation_MeshNormal_Offset_Max);
make_oscillator_value(_Goo_Deformation_ProceduralNormal_Size_Osci, _Goo_Deformation_ProceduralNormal_Size);
make_oscillator_value(_Goo_Drip_Size_Osci, _Goo_Drip_Size);
make_oscillator_value(_Goo_Drip_Start_Osci, _Goo_Drip_Start);
make_oscillator_value(_Goo_Drip_End_Osci, _Goo_Drip_End);
make_oscillator_value(_Goo_Drip_Amount_Osci, _Goo_Drip_Amount);
make_oscillator_color4(_CapsuleMask_1_Origin_Osci, _CapsuleMask_1_Origin);
make_oscillator_color4(_CapsuleMask_1_Axis_Osci, _CapsuleMask_1_Axis);
make_oscillator_value(_CapsuleMask_1_Radius_Osci, _CapsuleMask_1_Radius);
make_oscillator_value(_CapsuleMask_1_Height_Osci, _CapsuleMask_1_Height);
make_oscillator_value(_CapsuleMask_1_Strength_PreInversion_Osci, _CapsuleMask_1_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_1_Strength_PostInversion_Osci, _CapsuleMask_1_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_2_Origin_Osci, _CapsuleMask_2_Origin);
make_oscillator_color4(_CapsuleMask_2_Axis_Osci, _CapsuleMask_2_Axis);
make_oscillator_value(_CapsuleMask_2_Radius_Osci, _CapsuleMask_2_Radius);
make_oscillator_value(_CapsuleMask_2_Height_Osci, _CapsuleMask_2_Height);
make_oscillator_value(_CapsuleMask_2_Strength_PreInversion_Osci, _CapsuleMask_2_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_2_Strength_PostInversion_Osci, _CapsuleMask_2_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_3_Origin_Osci, _CapsuleMask_3_Origin);
make_oscillator_color4(_CapsuleMask_3_Axis_Osci, _CapsuleMask_3_Axis);
make_oscillator_value(_CapsuleMask_3_Radius_Osci, _CapsuleMask_3_Radius);
make_oscillator_value(_CapsuleMask_3_Height_Osci, _CapsuleMask_3_Height);
make_oscillator_value(_CapsuleMask_3_Strength_PreInversion_Osci, _CapsuleMask_3_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_3_Strength_PostInversion_Osci, _CapsuleMask_3_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_4_Origin_Osci, _CapsuleMask_4_Origin);
make_oscillator_color4(_CapsuleMask_4_Axis_Osci, _CapsuleMask_4_Axis);
make_oscillator_value(_CapsuleMask_4_Radius_Osci, _CapsuleMask_4_Radius);
make_oscillator_value(_CapsuleMask_4_Height_Osci, _CapsuleMask_4_Height);
make_oscillator_value(_CapsuleMask_4_Strength_PreInversion_Osci, _CapsuleMask_4_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_4_Strength_PostInversion_Osci, _CapsuleMask_4_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_5_Origin_Osci, _CapsuleMask_5_Origin);
make_oscillator_color4(_CapsuleMask_5_Axis_Osci, _CapsuleMask_5_Axis);
make_oscillator_value(_CapsuleMask_5_Radius_Osci, _CapsuleMask_5_Radius);
make_oscillator_value(_CapsuleMask_5_Height_Osci, _CapsuleMask_5_Height);
make_oscillator_value(_CapsuleMask_5_Strength_PreInversion_Osci, _CapsuleMask_5_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_5_Strength_PostInversion_Osci, _CapsuleMask_5_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_6_Origin_Osci, _CapsuleMask_6_Origin);
make_oscillator_color4(_CapsuleMask_6_Axis_Osci, _CapsuleMask_6_Axis);
make_oscillator_value(_CapsuleMask_6_Radius_Osci, _CapsuleMask_6_Radius);
make_oscillator_value(_CapsuleMask_6_Height_Osci, _CapsuleMask_6_Height);
make_oscillator_value(_CapsuleMask_6_Strength_PreInversion_Osci, _CapsuleMask_6_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_6_Strength_PostInversion_Osci, _CapsuleMask_6_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_7_Origin_Osci, _CapsuleMask_7_Origin);
make_oscillator_color4(_CapsuleMask_7_Axis_Osci, _CapsuleMask_7_Axis);
make_oscillator_value(_CapsuleMask_7_Radius_Osci, _CapsuleMask_7_Radius);
make_oscillator_value(_CapsuleMask_7_Height_Osci, _CapsuleMask_7_Height);
make_oscillator_value(_CapsuleMask_7_Strength_PreInversion_Osci, _CapsuleMask_7_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_7_Strength_PostInversion_Osci, _CapsuleMask_7_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_8_Origin_Osci, _CapsuleMask_8_Origin);
make_oscillator_color4(_CapsuleMask_8_Axis_Osci, _CapsuleMask_8_Axis);
make_oscillator_value(_CapsuleMask_8_Radius_Osci, _CapsuleMask_8_Radius);
make_oscillator_value(_CapsuleMask_8_Height_Osci, _CapsuleMask_8_Height);
make_oscillator_value(_CapsuleMask_8_Strength_PreInversion_Osci, _CapsuleMask_8_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_8_Strength_PostInversion_Osci, _CapsuleMask_8_Strength_PostInversion);
make_oscillator_value(_TF_Manual_Osci, 1);
make_oscillator_value(_TF_Time_Osci, _TF_Time);
make_oscillator_value(_LightMix_Sensitivity_Osci, _LightMix_Sensitivity);
make_oscillator_value(_UVBus_1_Distortion_Texture_Strength_Osci, _UVBus_1_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_2_Distortion_Texture_Strength_Osci, _UVBus_2_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_3_Distortion_Texture_Strength_Osci, _UVBus_3_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_4_Distortion_Texture_Strength_Osci, _UVBus_4_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_5_Distortion_Texture_Strength_Osci, _UVBus_5_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_6_Distortion_Texture_Strength_Osci, _UVBus_6_Distortion_Texture_Strength);
make_oscillator_value(_RimMask_1_Start_Osci, _RimMask_1_Start);
make_oscillator_value(_RimMask_1_End_Osci, _RimMask_1_End);
make_oscillator_value(_RimMask_1_Strength_PreInversion_Osci, _RimMask_1_Strength_PreInversion);
make_oscillator_value(_RimMask_1_Strength_PostInversion_Osci, _RimMask_1_Strength_PostInversion);
make_oscillator_value(_RimMask_1_Smoothing_Osci, _RimMask_1_Smoothing);
make_oscillator_value(_RimMask_2_Start_Osci, _RimMask_2_Start);
make_oscillator_value(_RimMask_2_End_Osci, _RimMask_2_End);
make_oscillator_value(_RimMask_2_Strength_PreInversion_Osci, _RimMask_2_Strength_PreInversion);
make_oscillator_value(_RimMask_2_Strength_PostInversion_Osci, _RimMask_2_Strength_PostInversion);
make_oscillator_value(_RimMask_2_Smoothing_Osci, _RimMask_2_Smoothing);
make_oscillator_value(_RimMask_3_Start_Osci, _RimMask_3_Start);
make_oscillator_value(_RimMask_3_End_Osci, _RimMask_3_End);
make_oscillator_value(_RimMask_3_Strength_PreInversion_Osci, _RimMask_3_Strength_PreInversion);
make_oscillator_value(_RimMask_3_Strength_PostInversion_Osci, _RimMask_3_Strength_PostInversion);
make_oscillator_value(_RimMask_3_Smoothing_Osci, _RimMask_3_Smoothing);
make_oscillator_value(_RimMask_4_Start_Osci, _RimMask_4_Start);
make_oscillator_value(_RimMask_4_End_Osci, _RimMask_4_End);
make_oscillator_value(_RimMask_4_Strength_PreInversion_Osci, _RimMask_4_Strength_PreInversion);
make_oscillator_value(_RimMask_4_Strength_PostInversion_Osci, _RimMask_4_Strength_PostInversion);
make_oscillator_value(_RimMask_4_Smoothing_Osci, _RimMask_4_Smoothing);
make_oscillator_value(_DistanceMask_1_Distance_Start_Osci, _DistanceMask_1_Distance_Start);
make_oscillator_value(_DistanceMask_1_Distance_End_Osci, _DistanceMask_1_Distance_End);
make_oscillator_value(_DistanceMask_1_Strength_PreInversion_Osci, _DistanceMask_1_Strength_PreInversion);
make_oscillator_value(_DistanceMask_1_Strength_PostInversion_Osci, _DistanceMask_1_Strength_PostInversion);
make_oscillator_value(_DistanceMask_2_Distance_Start_Osci, _DistanceMask_2_Distance_Start);
make_oscillator_value(_DistanceMask_2_Distance_End_Osci, _DistanceMask_2_Distance_End);
make_oscillator_value(_DistanceMask_2_Strength_PreInversion_Osci, _DistanceMask_2_Strength_PreInversion);
make_oscillator_value(_DistanceMask_2_Strength_PostInversion_Osci, _DistanceMask_2_Strength_PostInversion);
make_oscillator_value(_TouchReactivityInteractionMask_Intensity_Pre_Osci, _TouchReactivityInteractionMask_Intensity_Pre);
make_oscillator_value(_TouchReactivityInteractionMask_Intensity_Osci, _TouchReactivityInteractionMask_Intensity);
make_oscillator_value(_BlendMask_1_Opacity_Osci, _BlendMask_1_Opacity);
make_oscillator_value(_BlendMask_1_Strength_PreInversion_Osci, _BlendMask_1_Strength_PreInversion);
make_oscillator_value(_BlendMask_1_Strength_PostInversion_Osci, _BlendMask_1_Strength_PostInversion);
make_oscillator_value(_BlendMask_2_Opacity_Osci, _BlendMask_2_Opacity);
make_oscillator_value(_BlendMask_2_Strength_PreInversion_Osci, _BlendMask_2_Strength_PreInversion);
make_oscillator_value(_BlendMask_2_Strength_PostInversion_Osci, _BlendMask_2_Strength_PostInversion);
make_oscillator_value(_BlendMask_3_Opacity_Osci, _BlendMask_3_Opacity);
make_oscillator_value(_BlendMask_3_Strength_PreInversion_Osci, _BlendMask_3_Strength_PreInversion);
make_oscillator_value(_BlendMask_3_Strength_PostInversion_Osci, _BlendMask_3_Strength_PostInversion);
make_oscillator_value(_BlendMask_4_Opacity_Osci, _BlendMask_4_Opacity);
make_oscillator_value(_BlendMask_4_Strength_PreInversion_Osci, _BlendMask_4_Strength_PreInversion);
make_oscillator_value(_BlendMask_4_Strength_PostInversion_Osci, _BlendMask_4_Strength_PostInversion);
make_oscillator_value(_BlendMask_5_Opacity_Osci, _BlendMask_5_Opacity);
make_oscillator_value(_BlendMask_5_Strength_PreInversion_Osci, _BlendMask_5_Strength_PreInversion);
make_oscillator_value(_BlendMask_5_Strength_PostInversion_Osci, _BlendMask_5_Strength_PostInversion);
make_oscillator_value(_BlendMask_6_Opacity_Osci, _BlendMask_6_Opacity);
make_oscillator_value(_BlendMask_6_Strength_PreInversion_Osci, _BlendMask_6_Strength_PreInversion);
make_oscillator_value(_BlendMask_6_Strength_PostInversion_Osci, _BlendMask_6_Strength_PostInversion);
make_oscillator_value(_BlendMask_7_Opacity_Osci, _BlendMask_7_Opacity);
make_oscillator_value(_BlendMask_7_Strength_PreInversion_Osci, _BlendMask_7_Strength_PreInversion);
make_oscillator_value(_BlendMask_7_Strength_PostInversion_Osci, _BlendMask_7_Strength_PostInversion);
make_oscillator_value(_BlendMask_8_Opacity_Osci, _BlendMask_8_Opacity);
make_oscillator_value(_BlendMask_8_Strength_PreInversion_Osci, _BlendMask_8_Strength_PreInversion);
make_oscillator_value(_BlendMask_8_Strength_PostInversion_Osci, _BlendMask_8_Strength_PostInversion);
make_oscillator_value(_ScrollMask_1_Frequency_Osci, _ScrollMask_1_Frequency);
make_oscillator_value(_ScrollMask_1_Gap_Osci, _ScrollMask_1_Gap);
make_oscillator_value(_ScrollMask_1_Offset_Osci, _ScrollMask_1_Offset);
make_oscillator_value(_ScrollMask_1_Strength_PreInversion_Osci, _ScrollMask_1_Strength_PreInversion);
make_oscillator_value(_ScrollMask_1_Strength_PostInversion_Osci, _ScrollMask_1_Strength_PostInversion);
make_oscillator_value(_ScrollMask_2_Frequency_Osci, _ScrollMask_2_Frequency);
make_oscillator_value(_ScrollMask_2_Gap_Osci, _ScrollMask_2_Gap);
make_oscillator_value(_ScrollMask_2_Offset_Osci, _ScrollMask_2_Offset);
make_oscillator_value(_ScrollMask_2_Strength_PreInversion_Osci, _ScrollMask_2_Strength_PreInversion);
make_oscillator_value(_ScrollMask_2_Strength_PostInversion_Osci, _ScrollMask_2_Strength_PostInversion);
make_oscillator_value(_MassBlendMask_1_Strength_Osci, _MassBlendMask_1_Strength);
make_oscillator_value(_MassBlendMask_1_Strength_PostInversion_Osci, _MassBlendMask_1_Strength_PostInversion);
make_oscillator_value(_MassBlendMask_2_Strength_Osci, _MassBlendMask_2_Strength);
make_oscillator_value(_MassBlendMask_2_Strength_PostInversion_Osci, _MassBlendMask_2_Strength_PostInversion);
make_oscillator_value(_Glitter_Amount_Osci, _Glitter_Amount);
make_oscillator_color4(_Glitter_Color_Osci, _Glitter_Color);
make_oscillator_value(_Glitter_Color_FromAlbedo_Osci, _Glitter_Color_FromAlbedo);
make_oscillator_color4(_Glitter_Opacity_MinMax_Osci, _Glitter_Opacity_MinMax);
make_oscillator_color4(_Glitter_Size_MinMax_Osci, _Glitter_Size_MinMax);
make_oscillator_color4(_Glitter_Brightness_MinMax_Osci, _Glitter_Brightness_MinMax);
make_oscillator_color4(_Glitter_Texture_Zoom_MinMax_Osci, _Glitter_Texture_Zoom_MinMax);
make_oscillator_color4(_Glitter_HSV_Hue_MinMax_Osci, _Glitter_HSV_Hue_MinMax);
make_oscillator_color4(_Glitter_HSV_Saturation_MinMax_Osci, _Glitter_HSV_Saturation_MinMax);
make_oscillator_value(_Glitter_HSV_Hue_Shift_Osci, _Glitter_HSV_Hue_Shift);
make_oscillator_value(_Glitter_ManualBlink_Offset_Osci, _Glitter_ManualBlink_Offset);
make_oscillator_value(_PostProcessHSV_Hue_Shift_Osci, _PostProcessHSV_Hue_Shift);
make_oscillator_value(_PostProcessHSV_Sat_Shift_Osci, _PostProcessHSV_Sat_Shift);
make_oscillator_value(_PostProcessHSV_Value_Shift_Osci, _PostProcessHSV_Value_Shift);
make_oscillator_value(_Cutoff_Osci, _Cutoff);

/* MARKER OSCILLATOR INFO END */

#undef make_oscillator_value
#undef make_oscillator_color4


struct Mask_Info {
  int channel;
  bool inverted;
  float strength;
  float contrast;
  float brightness;
};

Mask_Info
make_mask_info(
  int channel, 
  int inverted, 
  float strength, 
  float contrast, 
  float brightness
) {
  Mask_Info ret;
  ret.channel = channel;
  ret.inverted = inverted != 0;
  ret.strength = strength;
  ret.contrast = contrast;
  ret.brightness = brightness;
  return ret;
}

#define make_mask_info_variable(_name) \
  static const Mask_Info _name = make_mask_info( \
    _name##Channel, \
    _name##Channel_Inverted, \
    _name##Channel_Strength, \
    _name##Channel_Contrast, \
    _name##Channel_Brightness \
  );

/* MARKER MASK INFO START */
make_mask_info_variable(_MainTex_Mask);
make_mask_info_variable(_Mix_MainTex_Mask);
make_mask_info_variable(_SecondaryTex_Mask);
make_mask_info_variable(_Mix_SecondaryTex_Mask);
make_mask_info_variable(_Opacity_Mask);
make_mask_info_variable(_Mix_Opacity_Mask);
make_mask_info_variable(_OcclusionMap_Mask);
make_mask_info_variable(_Mix_OcclusionMap_Mask);
make_mask_info_variable(_BumpMap_Mask);
make_mask_info_variable(_Mix_BumpMap_Mask);
make_mask_info_variable(_DetailNormalMap_Mask);
make_mask_info_variable(_Mix_DetailNormalMap_Mask);
make_mask_info_variable(_EmissionMap_Mask);
make_mask_info_variable(_Mix_EmissionMap_Mask);
make_mask_info_variable(_EmissionMap2_Mask);
make_mask_info_variable(_Mix_EmissionMap2_Mask);
make_mask_info_variable(_Matcap_1_Texture_Mask);
make_mask_info_variable(_Mix_Matcap_1_Texture_Mask);
make_mask_info_variable(_Matcap_2_Texture_Mask);
make_mask_info_variable(_Mix_Matcap_2_Texture_Mask);
make_mask_info_variable(_Matcap_3_Texture_Mask);
make_mask_info_variable(_Mix_Matcap_3_Texture_Mask);
make_mask_info_variable(_AlbedoEmissionWeight_Mask);
make_mask_info_variable(_AddedEmissionColor_Mask);
make_mask_info_variable(_Mix_AlbedoEmissionWeight_Mask);
make_mask_info_variable(_Mix_AddedEmissionColor_Mask);
make_mask_info_variable(_Glossiness_Mask);
make_mask_info_variable(_Metallic_Mask);
make_mask_info_variable(_Mix_Glossiness_Mask);
make_mask_info_variable(_Mix_Metallic_Mask);
make_mask_info_variable(_Goo_Deformation_MeshNormal_Mask);
make_mask_info_variable(_Goo_Drip_Mask);
make_mask_info_variable(_Physbone_1_Mask);
make_mask_info_variable(_Physbone_2_Mask);
make_mask_info_variable(_Physbone_3_Mask);
make_mask_info_variable(_Physbone_4_Mask);
make_mask_info_variable(_Physbone_Drip_Mask);
make_mask_info_variable(_Physbone_Body_Mask);
make_mask_info_variable(_TF_Manual_Mask);
make_mask_info_variable(_DebugVisualisation_Mask);
make_mask_info_variable(_TF_Bulging_Mask);
make_mask_info_variable(_TouchReactivity_Mask);
make_mask_info_variable(_ProximityDistortion_Mask);
make_mask_info_variable(_BlendMask_1_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_1_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_2_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_2_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_3_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_3_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_4_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_4_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_5_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_5_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_6_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_6_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_7_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_7_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_8_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_8_Mask_Back_Mask);
make_mask_info_variable(_MassBlendMask_1_1_Mask);
make_mask_info_variable(_MassBlendMask_1_2_Mask);
make_mask_info_variable(_MassBlendMask_1_3_Mask);
make_mask_info_variable(_MassBlendMask_1_4_Mask);
make_mask_info_variable(_MassBlendMask_1_5_Mask);
make_mask_info_variable(_MassBlendMask_1_6_Mask);
make_mask_info_variable(_MassBlendMask_1_7_Mask);
make_mask_info_variable(_MassBlendMask_1_8_Mask);
make_mask_info_variable(_MassBlendMask_2_1_Mask);
make_mask_info_variable(_MassBlendMask_2_2_Mask);
make_mask_info_variable(_MassBlendMask_2_3_Mask);
make_mask_info_variable(_MassBlendMask_2_4_Mask);
make_mask_info_variable(_MassBlendMask_2_5_Mask);
make_mask_info_variable(_MassBlendMask_2_6_Mask);
make_mask_info_variable(_MassBlendMask_2_7_Mask);
make_mask_info_variable(_MassBlendMask_2_8_Mask);
make_mask_info_variable(_GrabPass_Distortion_Amount_Mask);
make_mask_info_variable(_GrabPass_Blur_Weight_Mask);
make_mask_info_variable(_GrabPass_Tint_Mask);
make_mask_info_variable(_Glitter_Mask);
make_mask_info_variable(_DistanceDither_Mask);
make_mask_info_variable(_Osci_Mask_1_Mask);
make_mask_info_variable(_Osci_Mask_2_Mask);
make_mask_info_variable(_Osci_Mask_3_Mask);
make_mask_info_variable(_Osci_Mask_4_Mask);
make_mask_info_variable(_Osci_Mask_5_Mask);
make_mask_info_variable(_Osci_Mask_6_Mask);
make_mask_info_variable(_Osci_Mask_7_Mask);
make_mask_info_variable(_Osci_Mask_8_Mask);
make_mask_info_variable(_Outline_Mask);

/* MARKER MASK INFO END */

#undef make_mask_info_variable

struct Texture_Info {
  Texture2D tex;
  SamplerState samp;
  float2 tiling;
  float2 offset;
  float2 scroll;
  Mask_Info mask;
  int uv_bus;
  int time_base_slot;

  bool is_set;
  float4 default_value;

  bool alpha_is_mask;
};

Texture_Info
make_tex_info(
  Texture2D tex,
  SamplerState samp,
  float2 tiling,
  float2 offset,
  float2 scroll,
  Mask_Info mask,
  int uv_bus,
  bool is_set,
  float4 default_value,
  bool alpha_is_mask,
  int time_base_slot
) {
  Texture_Info ret;
  ret.tex = tex;
  ret.samp = samp;
  ret.tiling = tiling;
  ret.offset = offset;
  ret.scroll = scroll;
  ret.mask = mask;
  ret.uv_bus = uv_bus;
  ret.is_set = is_set;
  ret.default_value = default_value;
  ret.alpha_is_mask = alpha_is_mask;
  ret.time_base_slot = time_base_slot;
  return ret;
}

static Mask_Info MASK_INFO_NONE = make_mask_info(0,0,1,1,0);

#define make_tex_info_mask(_name, _sampler, _is_set, _default, _alpha_is_mask, _mask) \
  make_tex_info(_name, _sampler, _name##_Tiling, _name##_Offset, _name##_ScrollSpeed, _mask, _name##_UVBus, _is_set, _default, _alpha_is_mask, _name##_ScrollSpeed_TimeBase)

#define make_tex_info_standard(_name, _sampler, _is_set, _default, _alpha_is_mask) \
  make_tex_info(_name, _sampler, _name##_Tiling, _name##_Offset, _name##_ScrollSpeed, _name##_Mask, _name##_UVBus, _is_set, _default, _alpha_is_mask, _name##_ScrollSpeed_TimeBase)

#define NO_TEX_TILING float4(1,1,0,0)
#define NO_TEX_OFFSET float4(1,1,0,0)
#define NO_TEX_SCROLL float2(0,0)

static Texture_Info MainTex                     = make_tex_info_standard(_MainTex,                    _SamplerLinearRepeat, is_MainTex_set,                     float4(1,1,1,1), _MainTex_AlphaIsMask);
static Texture_Info Mix_MainTex                 = make_tex_info_standard(_Mix_MainTex,                _SamplerLinearRepeat, is_Mix_MainTex_set,                 float4(1,1,1,1), _Mix_MainTex_AlphaIsMask);

static Texture_Info SecondaryTex                = make_tex_info_standard(_SecondaryTex,               _SamplerLinearRepeat, is_SecondaryTex_set,                float4(1,1,1,1), _SecondaryTex_AlphaIsMask);
static Texture_Info Mix_SecondaryTex            = make_tex_info_standard(_Mix_SecondaryTex,           _SamplerLinearRepeat, is_Mix_SecondaryTex_set,            float4(1,1,1,1), _Mix_SecondaryTex_AlphaIsMask);

static Texture_Info OcclusionMap                = make_tex_info_standard(_OcclusionMap,               _SamplerLinearRepeat, is_OcclusionMap_set,                float4(1,1,1,1), false);
static Texture_Info Mix_OcclusionMap            = make_tex_info_standard(_Mix_OcclusionMap,           _SamplerLinearRepeat, is_Mix_OcclusionMap_set,            float4(1,1,1,1), false);

static Texture_Info BumpMap                     = make_tex_info_standard(_BumpMap,                    _SamplerLinearRepeat, is_BumpMap_set,                     float4(0,0,1,1), false);
static Texture_Info Mix_BumpMap                 = make_tex_info_standard(_Mix_BumpMap,                _SamplerLinearRepeat, is_Mix_BumpMap_set,                 float4(0,0,1,1), false);

static Texture_Info DetailNormalMap             = make_tex_info_standard(_DetailNormalMap,            _SamplerLinearRepeat, is_DetailNormalMap_set,             float4(.5,.5,1,1), false);
static Texture_Info Mix_DetailNormalMap         = make_tex_info_standard(_Mix_DetailNormalMap,        _SamplerLinearRepeat, is_Mix_DetailNormalMap_set,         float4(.5,.5,1,1), false);

static Texture_Info EmissionMap                 = make_tex_info_standard(_EmissionMap,                _SamplerLinearRepeat, is_EmissionMap_set,                 float4(0,0,0,0), _EmissionMap_AlphaIsMask);
static Texture_Info Mix_EmissionMap             = make_tex_info_standard(_Mix_EmissionMap,            _SamplerLinearRepeat, is_Mix_EmissionMap_set,             float4(0,0,0,0), _Mix_EmissionMap_AlphaIsMask);

static Texture_Info EmissionMap2                = make_tex_info_standard(_EmissionMap2,               _SamplerLinearRepeat, is_EmissionMap2_set,                float4(0,0,0,0), _EmissionMap2_AlphaIsMask);
static Texture_Info Mix_EmissionMap2            = make_tex_info_standard(_Mix_EmissionMap2,           _SamplerLinearRepeat, is_Mix_EmissionMap2_set,            float4(0,0,0,0), _Mix_EmissionMap2_AlphaIsMask);

static Texture_Info Matcap_1_Texture            = make_tex_info(_Matcap_1_Texture,      _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Matcap_1_Texture_Mask,      UV_BUS_UV0, is_Matcap_1_Texture_set,      float4(0,0,0,0), _Matcap_1_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);
static Texture_Info Mix_Matcap_1_Texture        = make_tex_info(_Mix_Matcap_1_Texture,  _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Mix_Matcap_1_Texture_Mask,  UV_BUS_UV0, is_Mix_Matcap_1_Texture_set,  float4(0,0,0,0), _Mix_Matcap_1_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);

static Texture_Info Matcap_2_Texture            = make_tex_info(_Matcap_2_Texture,      _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Matcap_2_Texture_Mask,      UV_BUS_UV0, is_Matcap_2_Texture_set,      float4(0,0,0,0), _Matcap_2_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);
static Texture_Info Mix_Matcap_2_Texture        = make_tex_info(_Mix_Matcap_2_Texture,  _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Mix_Matcap_2_Texture_Mask,  UV_BUS_UV0, is_Mix_Matcap_2_Texture_set,  float4(0,0,0,0), _Mix_Matcap_2_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);

static Texture_Info Matcap_3_Texture            = make_tex_info(_Matcap_3_Texture,      _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Matcap_3_Texture_Mask,      UV_BUS_UV0, is_Matcap_3_Texture_set,      float4(0,0,0,0), _Matcap_3_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);
static Texture_Info Mix_Matcap_3_Texture        = make_tex_info(_Mix_Matcap_3_Texture,  _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Mix_Matcap_3_Texture_Mask,  UV_BUS_UV0, is_Mix_Matcap_3_Texture_set,  float4(0,0,0,0), _Mix_Matcap_3_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);

#if defined(VFGOO_GRABPASS)
  static Texture_Info GrabPass_Tint_Texture     = make_tex_info_mask(_GrabPass_Tint_Texture,      _SamplerLinearRepeat, is_GrabPass_Tint_Texture_set,         float4(1,1,1,1), _GrabPass_Tint_Texture_AlphaIsMask, MASK_INFO_NONE);
#endif

inline 
bool can_use_audiolink() {
  if(_AudioLink_Disabled) {
    return false;
  }

  return AudioLinkIsAvailable();
}

float 
evaluate_al_time_base(
  int type,
  float strength,
  int band,
  int use_time_as_fallback,
  bool combine_with_normal_time
) {
  [branch] if(can_use_audiolink()) {
    // TIMEBASE_AL_TYPE_INCREASING             0
    // TIMEBASE_AL_TYPE_INCREASING_SMOOTHED    1
    // TIMEBASE_AL_TYPE_BACK_N_FORTH           2
    // TIMEBASE_AL_TYPE_BACK_N_FORTH_SMOOTHED  3
    float time = AudioLinkGetChronoTime(type, band);

    time *= strength;

    EDITOR_BRANCH if(combine_with_normal_time) {
      time = _Time.y + time;
    }

    return time;
  } 
  else if(use_time_as_fallback) {
    return _Time.y;
  }
  else {
    return 0;
  }
}

void 
init_time_bases() {
  TIME_BASES.slots[TIMEBASE_SLOT_BASE] = _Time.y;

  TIME_BASES.slots[TIMEBASE_SLOT_AL_1] = evaluate_al_time_base(
    _TimeBase_AL_Slot_1_Type, 
    _TimeBase_AL_Slot_1_Strength,
    _TimeBase_AL_Slot_1_Band,
    _TimeBase_AL_Slot_1_UseTimeAsFallback,
    _TimeBase_AL_Slot_1_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_2] = evaluate_al_time_base(
    _TimeBase_AL_Slot_2_Type, 
    _TimeBase_AL_Slot_2_Strength,
    _TimeBase_AL_Slot_2_Band,
    _TimeBase_AL_Slot_2_UseTimeAsFallback,
    _TimeBase_AL_Slot_2_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_3] = evaluate_al_time_base(
    _TimeBase_AL_Slot_3_Type, 
    _TimeBase_AL_Slot_3_Strength,
    _TimeBase_AL_Slot_3_Band,
    _TimeBase_AL_Slot_3_UseTimeAsFallback,
    _TimeBase_AL_Slot_3_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_4] = evaluate_al_time_base(
    _TimeBase_AL_Slot_4_Type, 
    _TimeBase_AL_Slot_4_Strength,
    _TimeBase_AL_Slot_4_Band,
    _TimeBase_AL_Slot_4_UseTimeAsFallback,
    _TimeBase_AL_Slot_4_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_5] = evaluate_al_time_base(
    _TimeBase_AL_Slot_5_Type, 
    _TimeBase_AL_Slot_5_Strength,
    _TimeBase_AL_Slot_5_Band,
    _TimeBase_AL_Slot_5_UseTimeAsFallback,
    _TimeBase_AL_Slot_5_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_6] = evaluate_al_time_base(
    _TimeBase_AL_Slot_6_Type, 
    _TimeBase_AL_Slot_6_Strength,
    _TimeBase_AL_Slot_6_Band,
    _TimeBase_AL_Slot_6_UseTimeAsFallback,
    _TimeBase_AL_Slot_6_AddTime
  );
}

float
evaluate_simple_oscillator(
  int   type,
  float speed,
  int   time_base_slot,
  float square_duty_cycle,
  int   sine_half_wave
) {
  float time = get_time(time_base_slot) * speed;

  EDITOR_BRANCH switch(type) {
    case OSCI_SIMPLE_TYPE_SIN: {
      EDITOR_BRANCH if(sine_half_wave) {
        return saturate(sin(time));
      }
      else {
        return sin(time) * .5 + .5;
      }
    }
    case OSCI_SIMPLE_TYPE_SQUARE: {
      if(frac(time) > square_duty_cycle) {
        return 1;
      }
      return 0;
    }
    case OSCI_SIMPLE_TYPE_SAW: {
      return frac(time);
    }
    case OSCI_SIMPLE_TYPE_TRIANGLE: {

      if(fmod(int(time), 2) == 0) {
        return frac(time);
      }
      else {
        return 1 - frac(time);
      }
    }
  }
  return 1;
}

float 
handle_al_fallback(
  float al_value,
  int   fallback_type,
  int   fallback_osci,
  float fallback_value
) {
  [branch] if(can_use_audiolink()) {
    return al_value;
  }

  EDITOR_BRANCH if(fallback_type == 0) {
    return fallback_value;
  }
  else {
    return OSCILLATORS.slots[fallback_osci];
  }
}

float
evaluate_al_band_oscillator(
  int   band,
  bool  use_smoothness,
  float smoothness,
  int   fallback_type,
  int   fallback_osci,
  float fallback_value
) {
  float ret;

  if(use_smoothness) {
    // NOTE(valuef): 0 is most smoothed, 15 is least so we invert the smoothness param 
    // 2023-11-12
    float x_off = 15 - smoothness;
    float y_off = band;
    float4 tap = AudioLinkData(ALPASS_FILTEREDAUDIOLINK + int2(x_off, y_off));

    ret = tap.r;
  }
  else {
    float y_off = band;
    float4 tap = AudioLinkData(ALPASS_AUDIOLINK + int2(0, y_off));

    ret = tap.r;
  }

  return handle_al_fallback(ret, fallback_type, fallback_osci, fallback_value);
}

float
evaluate_al_energy_osci(
  bool  use_smoothness,
  float smoothness,
  int   fallback_type,
  int   fallback_osci,
  float fallback_value
) {

  float4 vu_data;
  if(use_smoothness) {
    // NOTE(valuef): 0 for most smoothed, 3 is most smoothed. Editor assumes 0
    // is least and 3 is most smoothed so we have to invert the value.
    // The 0th x bin accumulates a lot of data so it's not really useful. We skip it entirely with the +1
    // 2024-01-14
    vu_data = AudioLinkData(ALPASS_FILTEREDVU + uint2(3 - smoothness + 1, 0));
  }
  else {
    vu_data = AudioLinkData(ALPASS_GENERALVU + uint2(8, 0));
  }

  // r: RMS Left
  // g: Peak Left	
  // b: RMS Right
  // a: Peak right
  float rms = (vu_data.r + vu_data.b) * .5;

  return handle_al_fallback(rms, fallback_type, fallback_osci, fallback_value);
}

void
init_oscillators() {
  OSCILLATORS.slots[OSCI_SIMPLE_1] = evaluate_simple_oscillator(
    _Osci_Slot_1_Type,
    _Osci_Slot_1_Speed,
    _Osci_Slot_1_Speed_TimeBase,
    _Osci_Slot_1_Square_DutyCycle,
    _Osci_Slot_1_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_2] = evaluate_simple_oscillator(
    _Osci_Slot_2_Type,
    _Osci_Slot_2_Speed,
    _Osci_Slot_2_Speed_TimeBase,
    _Osci_Slot_2_Square_DutyCycle,
    _Osci_Slot_2_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_3] = evaluate_simple_oscillator(
    _Osci_Slot_3_Type,
    _Osci_Slot_3_Speed,
    _Osci_Slot_3_Speed_TimeBase,
    _Osci_Slot_3_Square_DutyCycle,
    _Osci_Slot_3_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_4] = evaluate_simple_oscillator(
    _Osci_Slot_4_Type,
    _Osci_Slot_4_Speed,
    _Osci_Slot_4_Speed_TimeBase,
    _Osci_Slot_4_Square_DutyCycle,
    _Osci_Slot_4_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_5] = evaluate_simple_oscillator(
    _Osci_Slot_5_Type,
    _Osci_Slot_5_Speed,
    _Osci_Slot_5_Speed_TimeBase,
    _Osci_Slot_5_Square_DutyCycle,
    _Osci_Slot_5_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_6] = evaluate_simple_oscillator(
    _Osci_Slot_6_Type,
    _Osci_Slot_6_Speed,
    _Osci_Slot_6_Speed_TimeBase,
    _Osci_Slot_6_Square_DutyCycle,
    _Osci_Slot_6_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_IS_AL_AVAILABLE] = can_use_audiolink() ? 1 : 0;

  OSCILLATORS.slots[OSCI_AL_BAND_1] = evaluate_al_band_oscillator(
    _Osci_ALBand_1_Band,
    _Osci_ALBand_1_Smoothness_Enabled,
    _Osci_ALBand_1_Smoothness_Level,
    _Osci_ALBand_1_Fallback_Type,
    _Osci_ALBand_1_Fallback_Osci,
    _Osci_ALBand_1_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_2] = evaluate_al_band_oscillator(
    _Osci_ALBand_2_Band,
    _Osci_ALBand_2_Smoothness_Enabled,
    _Osci_ALBand_2_Smoothness_Level,
    _Osci_ALBand_2_Fallback_Type,
    _Osci_ALBand_2_Fallback_Osci,
    _Osci_ALBand_2_Fallback_Value

  );

  OSCILLATORS.slots[OSCI_AL_BAND_3] = evaluate_al_band_oscillator(
    _Osci_ALBand_3_Band,
    _Osci_ALBand_3_Smoothness_Enabled,
    _Osci_ALBand_3_Smoothness_Level,
    _Osci_ALBand_3_Fallback_Type,
    _Osci_ALBand_3_Fallback_Osci,
    _Osci_ALBand_3_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_4] = evaluate_al_band_oscillator(
    _Osci_ALBand_4_Band,
    _Osci_ALBand_4_Smoothness_Enabled,
    _Osci_ALBand_4_Smoothness_Level,
    _Osci_ALBand_4_Fallback_Type,
    _Osci_ALBand_4_Fallback_Osci,
    _Osci_ALBand_4_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_5] = evaluate_al_band_oscillator(
    _Osci_ALBand_5_Band,
    _Osci_ALBand_5_Smoothness_Enabled,
    _Osci_ALBand_5_Smoothness_Level,
    _Osci_ALBand_5_Fallback_Type,
    _Osci_ALBand_5_Fallback_Osci,
    _Osci_ALBand_5_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_6] = evaluate_al_band_oscillator(
    _Osci_ALBand_6_Band,
    _Osci_ALBand_6_Smoothness_Enabled,
    _Osci_ALBand_6_Smoothness_Level,
    _Osci_ALBand_6_Fallback_Type,
    _Osci_ALBand_6_Fallback_Osci,
    _Osci_ALBand_6_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_ENERGY_1] = evaluate_al_energy_osci(
    _Osci_ALEnergy_1_Smoothness_Enabled,
    _Osci_ALEnergy_1_Smoothness_Level,
    _Osci_ALEnergy_1_Fallback_Type,
    _Osci_ALEnergy_1_Fallback_Osci,
    _Osci_ALEnergy_1_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_ENERGY_2] = evaluate_al_energy_osci(
    _Osci_ALEnergy_2_Smoothness_Enabled,
    _Osci_ALEnergy_2_Smoothness_Level,
    _Osci_ALEnergy_2_Fallback_Type,
    _Osci_ALEnergy_2_Fallback_Osci,
    _Osci_ALEnergy_2_Fallback_Value
  );
}

float4 
get_value(Oscillator_Info info) {
  if(!info.enabled) {
    return info.default_value;
  }

  float osci = OSCILLATORS.slots[info.slot];
  return lerp(info.start, info.end, osci.rrrr);
}

#define XYZ_COMPONENT_X 0
#define XYZ_COMPONENT_Y 1
#define XYZ_COMPONENT_Z 2

#define UV_VERTEX_CHANNEL_0 0
#define UV_VERTEX_CHANNEL_1 1
#define UV_VERTEX_CHANNEL_3 2
#define UV_VERTEX_CHANNEL_4 3
#define UV_VERTEX_CHANNEL_5 4
#define UV_VERTEX_CHANNEL_6 5
#define UV_VERTEX_CHANNEL_7 6

#define UV_SPECIAL_SOURCE_VERTEX_CHANNEL  0  
#define UV_SPECIAL_SOURCE_WORLD_LOCATION  1
#define UV_SPECIAL_SOURCE_BAKED_VERTEX    2
#define UV_SPECIAL_SOURCE_SKINNED_VERTEX  3

float2
make_uv_special(
  float2 uv0,
  float2 uv1,
  float2 uv3,
  float2 uv4,
  float2 uv5,
  float2 uv6,
  float2 uv7,
  float3 world_vertex,
  float3 baked_vertex,
  float3 skinned_vertex,

  int source,
  int vertex_channel,
  int world_location_x,
  int world_location_y,
  int baked_vertex_x,
  int baked_vertex_y,
  int skinned_vertex_x,
  int skinned_vertex_y,
  Texture2D distortion_tex,
  float2 distortion_tiling,
  float2 distortion_offset,
  float2 distortion_scroll,
  int distortion_uv_bus,
  bool distortion_is_set,
  Oscillator_Info distortion_strength,
  int distortion_time_base_slot
) {
  float2 uv = float2(0,0);
  
  EDITOR_BRANCH switch(source) {
    case UV_SPECIAL_SOURCE_VERTEX_CHANNEL:
      float2 uv_channels[7] = { uv0, uv1, uv3, uv4, uv5, uv6, uv7 };
      uv = uv_channels[vertex_channel];
      break;
    case UV_SPECIAL_SOURCE_WORLD_LOCATION:
      uv.x = world_vertex[world_location_x];
      uv.y = world_vertex[world_location_y];
      break;
    case UV_SPECIAL_SOURCE_BAKED_VERTEX: 
      uv.x = baked_vertex[baked_vertex_x];
      uv.y = baked_vertex[baked_vertex_y];
      break;
    case UV_SPECIAL_SOURCE_SKINNED_VERTEX:
      uv.x = skinned_vertex[skinned_vertex_x];
      uv.y = skinned_vertex[skinned_vertex_y];
      break;
  }

  if(distortion_is_set) {
    float2 distortion = sample_texture_2d(
      distortion_tex, 
      distortion_tiling, 
      distortion_offset,
      distortion_scroll, 
      distortion_uv_bus,
      _SamplerLinearRepeat,
      distortion_time_base_slot
    );

    // NOTE(valuef): .5 to adjust for the * 2
    // 2024-01-15
    uv += .5 * (distortion * 2 - 1) * get_value(distortion_strength);
  }

  return uv;
}


void
init_uv_bus(
  float2 uv0,
  float2 uv1,
  float2 uv3,
  float2 uv4,
  float2 uv5,
  float2 uv6,
  float2 uv7,
  float3 world_vertex,
  float3 baked_pos,
  float3 skinned_vertex
) {
  UV_BUSES = (UV_Bus)0;

  UV_BUSES.uv[UV_BUS_UV0] = uv0;
  UV_BUSES.uv[UV_BUS_UV1] = uv1;
  UV_BUSES.uv[UV_BUS_UV3] = uv3;
  UV_BUSES.uv[UV_BUS_UV4] = uv4;
  UV_BUSES.uv[UV_BUS_UV5] = uv5;
  UV_BUSES.uv[UV_BUS_UV6] = uv6;
  UV_BUSES.uv[UV_BUS_UV7] = uv7;


  {
    // NOTE(valuef): Adapted poiyomi panosphere UVs. 
    // Retrieved 2023-08-28.
    //
    // MIT BEGIN
    //MIT License

    //Copyright (c) 2023 Poiyomi Inc.

    //Permission is hereby granted, free of charge, to any person obtaining a copy
    //of this software and associated documentation files (the "Software"), to deal
    //in the Software without restriction, including without limitation the rights
    //to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    //copies of the Software, and to permit persons to whom the Software is
    //furnished to do so, subject to the following conditions:

    //The above copyright notice and this permission notice shall be included in all
    //copies or substantial portions of the Software.

    //THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    //IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    //FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    //AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    //LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    //OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    //SOFTWARE.

    float3 camera;
    #ifdef USING_STEREO_MATRICES
      camera = (unity_StereoWorldSpaceCameraPos[0] + unity_StereoWorldSpaceCameraPos[1]) * .5;
    #else
      camera = _WorldSpaceCameraPos.xyz;
    #endif

    float3 normalizedCoords = normalize(world_vertex - camera);

    float latitude = acos(normalizedCoords.y);
    float longitude = atan2(normalizedCoords.z, normalizedCoords.x);
    float phi = longitude / (UNITY_PI * 2.0);
    float phi_frac = frac(phi);
    if(!IS_VERTEX_SHADER) {
      longitude = fwidth(phi) - 0.0001 < fwidth(phi_frac) ? phi : phi_frac;
    }
    longitude *= 2;
    float2 sphereCoords = float2(longitude, latitude) * float2(0.5, 1.0 / UNITY_PI);
    sphereCoords = float2(0.5, 1.0) - sphereCoords;
    sphereCoords = (sphereCoords + float4(0, 1 - unity_StereoEyeIndex, 1, 0.5).xy) * float4(0, 1 - unity_StereoEyeIndex, 1, 0.5).zw;
    // MIT END

    UV_BUSES.uv[UV_BUS_PANOSPHERE] = sphereCoords;
  }

  #define make_special(_prefix) \
    make_uv_special( \
      uv0, uv1, uv3, uv4, uv5, uv6, uv7, \
      world_vertex, baked_pos, skinned_vertex, \
      _prefix##_Source, \
      _prefix##_VertexChannel_Channel, \
      _prefix##_WorldLocation_XComponent, \
      _prefix##_WorldLocation_YComponent, \
      _prefix##_BakedVertex_XComponent, \
      _prefix##_BakedVertex_YComponent, \
      _prefix##_SkinnedVertex_XComponent, \
      _prefix##_SkinnedVertex_YComponent, \
      _prefix##_Distortion_Texture, \
      _prefix##_Distortion_Texture_Tiling, \
      _prefix##_Distortion_Texture_Offset, \
      _prefix##_Distortion_Texture_ScrollSpeed, \
      _prefix##_Distortion_Texture_UVBus, \
      is##_prefix##_Distortion_Texture_set, \
      _prefix##_Distortion_Texture_Strength_Osci, \
      _prefix##_Distortion_Texture_ScrollSpeed_TimeBase \
    )

  #if defined(VFGOO_ENABLE_UV_BUS_1)
    UV_BUSES.uv[UV_BUS_1] = make_special(_UVBus_1);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_2)
    UV_BUSES.uv[UV_BUS_2] = make_special(_UVBus_2);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_3)
    UV_BUSES.uv[UV_BUS_3] = make_special(_UVBus_3);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_4)
    UV_BUSES.uv[UV_BUS_4] = make_special(_UVBus_4);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_5)
    UV_BUSES.uv[UV_BUS_5] = make_special(_UVBus_5);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_6)
    UV_BUSES.uv[UV_BUS_6] = make_special(_UVBus_6);
  #endif

  #undef make_special
}

#define APPEARS_ON_MATERIAL_BOTH          0
#define APPEARS_ON_MATERIAL_ONLY_PRE_TF   1
#define APPEARS_ON_MATERIAL_ONLY_POST_TF  2

#define MASK_NONE                           0

#define MASK_1_R                            1
#define MASK_1_G                            2
#define MASK_1_B                            3
#define MASK_1_A                            4

#define MASK_2_R                            5
#define MASK_2_G                            6
#define MASK_2_B                            7
#define MASK_2_A                            8

#define MASK_3_R                            9
#define MASK_3_G                            10
#define MASK_3_B                            11
#define MASK_3_A                            12

#define MASK_4_R                            13
#define MASK_4_G                            14
#define MASK_4_B                            15
#define MASK_4_A                            16

#define MASK_5_R                            17
#define MASK_5_G                            18
#define MASK_5_B                            19
#define MASK_5_A                            20

#define MASK_6_R                            21
#define MASK_6_G                            22
#define MASK_6_B                            23
#define MASK_6_A                            24

#define MASK_7_R                            25
#define MASK_7_G                            26
#define MASK_7_B                            27
#define MASK_7_A                            28

#define MASK_8_R                            29
#define MASK_8_G                            30
#define MASK_8_B                            31
#define MASK_8_A                            32

#define MASK_GOO_NOISE                      33
#define MASK_GOO_DRIP                       34

#define MASK_VERTEX_COLOR_R                 35
#define MASK_VERTEX_COLOR_G                 36
#define MASK_VERTEX_COLOR_B                 37
#define MASK_VERTEX_COLOR_A                 38

#define MASK_IS_AL_AVAILABLE                39
#define MASK_RIM_4                          40
// unused 41
// unused 42

#define MASK_CAPSULE_1                      43
#define MASK_CAPSULE_2                      44
#define MASK_CAPSULE_3                      45
#define MASK_CAPSULE_4                      46

#define MASK_POINT_LIGHTS                   47

#define MASK_RIM_1                          48
#define MASK_RIM_2                          49

#define MASK_TOUCH_REACTIVITY_INTERACTION   50 

#define MASK_BLEND_1                        51
#define MASK_BLEND_2                        52
#define MASK_BLEND_3                        53
#define MASK_BLEND_4                        54
#define MASK_BLEND_5                        55
#define MASK_BLEND_6                        56
#define MASK_BLEND_7                        57
#define MASK_BLEND_8                        58

#define MASK_RIM_3                          59

#define MASK_CAPSULE_5                      60
#define MASK_CAPSULE_6                      61
#define MASK_CAPSULE_7                      62
#define MASK_CAPSULE_8                      63

#define MASK_SCROLL_1                       64
#define MASK_SCROLL_2                       65

#define MASK_MASSBLEND_1                    66
#define MASK_MASSBLEND_2                    67

#define MASK_BACKFACE                       68

#define MASK_DISTANCE_1               69
#define MASK_DISTANCE_2               70

#define MASK_MAX                            71

struct Mask_Channels {
  // NOTE(valuef): x is the normal mask, y is the inverted masks.
  // We do this because some masks have special case inversions as we can't just 1-x them due to that creating
  // an undesirable inversion due to some lossy math that we do. For those cases, we need to do the 1-x inversion as early
  // as we can in the math, and not after we've done all the math.
  // 2023-09-12
  float2 masks[MASK_MAX];
};

static Mask_Channels MASK_CHANNELS;

// @DelayedGooDripEvaluationInVS
// NOTE(valuef): We ignore the inverted mask on the MASK_GOO_DRIP mask in the VS because for
// performance reasons we evaluate it in the middle of the VS and not immediatelly. This means that
// the Mask_Channels is not fully initialized for half of the VS beacuse we pass it a bogus
// placeholder value of 0. Now it works fine until you invert the mask, then you get some incorrect
// results where the goo mask ends up being all white even when it shouldn't be (because we inverted
// the 0 to a 1, duh!) and that's not desired. So, to prevent that undesired behaviour we set the goo
// drip mask value to (0,0) and keep it that way until we have evaluated the goo drip, then we set
// the proper value.
// 2023-09-12

float
get_mask(
  Mask_Info info
) {
  EDITOR_BRANCH if(info.channel == 0) return 1;

  float2 both_masks = MASK_CHANNELS.masks[info.channel];
  
  float mask = info.inverted ? both_masks.y : both_masks.x;

  // NOTE(valuef): https://www.desmos.com/calculator/mcgtyjntlf
  // where a is contrast and b is brightness
  // 2023-10-27
  mask = info.contrast * (mask - .5) + .5 + info.brightness;

  mask = saturate(mask * info.strength);

  return mask;
}

float2
evaluate_capsule_mask(
  float3 baked_pos,
  float3 axis,
  float3 origin,
  bool flip,
  float height,
  float radius,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  float ld = dot(axis, baked_pos - origin);
  ld = clamp(ld, -height, height);
  
  float3 on_line = origin + ld * axis;

  float t = 1 - saturate(length(baked_pos - on_line) / radius);

  t = saturate(t * pre_inversion_strength);

  EDITOR_BRANCH if(flip) {
    t = 1 - t;
  }

  float2 mask = float2(t, 1-t);
  mask = saturate(mask * post_inversion_strength );

  return mask;
}

int
get_light_id(int index) {
  return (int)((unity_LightColor[index].a/0.001)*255.0);
}

float3
get_light_pos(int index) {
  float raw_x[4] = { unity_4LightPosX0.x, unity_4LightPosX0.y, unity_4LightPosX0.z, unity_4LightPosX0.w };
  float raw_y[4] = { unity_4LightPosY0.x, unity_4LightPosY0.y, unity_4LightPosY0.z, unity_4LightPosX0.w };
  float raw_z[4] = { unity_4LightPosZ0.x, unity_4LightPosZ0.y, unity_4LightPosZ0.z, unity_4LightPosZ0.w };
 
  return float3(raw_x[index], raw_y[index], raw_z[index]);
}

float
get_light_range(int index) {

  float raw[4] = { unity_4LightAtten0.x, unity_4LightAtten0.y, unity_4LightAtten0.z, unity_4LightAtten0.w };

  // https://forum.unity.com/threads/point-light-in-v-f-shader.499717/
  return 5.0 * (1.0 / sqrt(raw[index]));
}

// NOTE(valuef): Looks like the fwdadd pass will get proper vertex lights while the shadowcaster wont.
// 2023-10-02
float
vs_make_point_light_mask(
  float3 world_vertex
) {
  #if defined(VF_GOO_SHADOWCASTER)
    return 0;
  #endif

  #if !defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    return 0;
  #endif

  float mask = 0;
  for(int idx = 0; idx < 4; idx++) {

    int id = get_light_id(idx);

    EDITOR_BRANCH if(id == 10) {
      float3 light_pos = get_light_pos(idx);
      float range = get_light_range(idx);

      float3 delta = light_pos - world_vertex;
      float len = saturate(length(delta) / range);

      float t = (len - 1) / (get_value(_LightMix_Sensitivity_Osci) - 1);

      mask += t;
    }
  }

  mask = saturate(mask);

  return mask;
}

float2
make_rim_mask_channel(
  float fres,
  float start,
  float end,
  float pre_inversion_strength,
  float post_inversion_strength,
  float smoothing
) {
  float mask = saturate((fres - start) / (end - start));

  mask = pow(mask,smoothing);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

#define DIFFUSE_TYPE_PBR 0
#define DIFFUSE_TYPE_PBR_LUT 1
#define DIFFUSE_TYPE_PBR_RAMP 2
#define DIFFUSE_TYPE_NONE 3

#define BLEND_LERP              0
#define BLEND_MIN_DARKEN        1 
#define BLEND_MAX_LIGHTEN       2
#define BLEND_MULTIPLY          3
#define BLEND_SUBTRACT          4
#define BLEND_DIVIDE            5
#define BLEND_ADD_LINEAR_DODGE  6
#define BLEND_DIFFERENCE        7

float2
make_blend_mask(
  Mask_Info fore_mask,
  Mask_Info back_mask,
  float opacity,
  int blend_mode,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  // NOTE(valuef): We're mimicking the substance designer blend node behaviour here for
  // consistency sake and some people will already have a model of how that node works so
  // it's better than reinventing the wheel.
  // 2023-08-29

  float fore = get_mask(fore_mask);
  float back = get_mask(back_mask);

  EDITOR_BRANCH if(blend_mode != BLEND_LERP) {
    fore *= opacity;
  }

  float mask = 1;
  
  // NOTE(valuef): From https://www.shadertoy.com/view/XdS3RW
  // s = back, d = fore
  // 2023-08-29
  EDITOR_BRANCH switch(blend_mode) {
    case BLEND_LERP:              mask = lerp(back, fore, opacity); break; 
    case BLEND_MIN_DARKEN:        mask = min(back, fore); break;
    case BLEND_MAX_LIGHTEN:       mask = max(back, fore); break;
    case BLEND_MULTIPLY:          mask = back * fore; break;
    case BLEND_SUBTRACT:          mask = back - fore; break;
    case BLEND_DIVIDE:            mask = back / fore; break;
    case BLEND_ADD_LINEAR_DODGE:  mask = back + fore; break;
    case BLEND_DIFFERENCE:        mask = abs(fore - back); break;
  }

  mask = saturate(mask);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

#define MASSBLEND_ADD_LINEAR_DODGE  0
#define MASSBLEND_MULTIPLY          1

float2
make_mass_blend_mask(
  Mask_Info mask_1_info,
  Mask_Info mask_2_info,
  Mask_Info mask_3_info,
  Mask_Info mask_4_info,
  Mask_Info mask_5_info,
  Mask_Info mask_6_info,
  Mask_Info mask_7_info,
  Mask_Info mask_8_info,
  int massblend_mode,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  const int NUM_MASKS = 8;

  Mask_Info masks[NUM_MASKS] = {
    mask_1_info,
    mask_2_info,
    mask_3_info,
    mask_4_info,
    mask_5_info,
    mask_6_info,
    mask_7_info,
    mask_8_info,
  };

  float mask = 0;

  EDITOR_BRANCH if(massblend_mode == MASSBLEND_ADD_LINEAR_DODGE) {

    for(int i = 0; i < NUM_MASKS; i++) {
      Mask_Info info = masks[i];
      EDITOR_BRANCH if(info.channel != MASK_NONE) {
        mask += get_mask(info);
      }
    }

    mask = saturate(mask);
  }
  else EDITOR_BRANCH if(massblend_mode == MASSBLEND_MULTIPLY) {
    mask = 1;

    for(int i = 0; i < NUM_MASKS; i++) {
      Mask_Info info = masks[i];
      mask *= get_mask(info);
    }
  }

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

#define trivial_inverted_mask(_val) float2((_val), 1 - (_val))

inline
float2
make_texture_mask_channel_mask(
  float mask,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  mask = saturate(mask * pre_inversion_strength);

  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

inline
float2
evaluate_scroll_mask(
  float3 skinned_pos,
  float speed,
  int time_base_slot,
  float3 axis,
  float frequency,
  float gap,
  float offset,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  skinned_pos *= frequency;
  float time = get_time(time_base_slot) * speed;

  float d = dot(skinned_pos, axis);

  // https://www.desmos.com/calculator/etdutrzdsq
  float saw = frac(time + d + offset) / gap;
  float mask = sin(saturate(saw) * UNITY_PI);
  mask = saturate(mask);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

inline
float2
evaluate_proximity_mask(
  float world_distance,
  float start,
  float end,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  // NOTE(valuef): plus magic constant to make sure that any banding is invisible.
  // Kind of a hack but it works
  // 2023-11-10
  float near_plane = _ProjectionParams.y + 0.003;
  start += near_plane;
  end += near_plane;

  float mask = (world_distance - start) / (end - start);
  mask = saturate(mask);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

void
init_mask_channels(
  float goo_noise,
  float2 goo_drip,
  float4 vertex_colors,
  float3 baked_pos,
  float3 world_normal,
  float3 eye_vec,
  float touch_reactivity_interaction,
  float point_lights,
  float3 skinned_pos,
  float2 backface_mask,
  float world_distance
) {
  MASK_CHANNELS.masks = (Mask_Channels)0;

  MASK_CHANNELS.masks[MASK_NONE] = float2(1,1);
  MASK_CHANNELS.masks[MASK_BACKFACE] = backface_mask;
  MASK_CHANNELS.masks[MASK_IS_AL_AVAILABLE] = can_use_audiolink() ? float2(1,0) : float2(0,1);

  {
    #define scroll_mask(_prefix) \
      evaluate_scroll_mask( \
        skinned_pos, \
        _prefix##_Speed, \
        _prefix##_Speed_TimeBase, \
        _prefix##_Axis, \
        get_value(_prefix##_Frequency_Osci), \
        get_value(_prefix##_Gap_Osci), \
        get_value(_prefix##_Offset_Osci), \
        get_value(_prefix##_Strength_PreInversion_Osci), \
        get_value(_prefix##_Strength_PostInversion_Osci) \
      )

    #if defined(VFGOO_ENABLE_MASK_SCROLL_1)
      MASK_CHANNELS.masks[MASK_SCROLL_1] = scroll_mask(_ScrollMask_1);
    #endif

    #if defined(VFGOO_ENABLE_MASK_SCROLL_2)
      MASK_CHANNELS.masks[MASK_SCROLL_2] = scroll_mask(_ScrollMask_2);
    #endif
  }

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
  {
    float pre_inversion_strength = get_value(_TouchReactivityInteractionMask_Intensity_Pre_Osci);
    float post_inversion_strength = get_value(_TouchReactivityInteractionMask_Intensity_Osci);

    #define calc(_val) saturate((_val) * intensity)

    float val = saturate(touch_reactivity_interaction * pre_inversion_strength);
    float2 mask = float2(val, 1 - val);
    mask = saturate(mask * post_inversion_strength);

    MASK_CHANNELS.masks[MASK_TOUCH_REACTIVITY_INTERACTION] = mask;

    #undef calc
  }
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    MASK_CHANNELS.masks[MASK_POINT_LIGHTS] = trivial_inverted_mask(point_lights);
  #endif

  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_R] = trivial_inverted_mask(vertex_colors.r);
  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_G] = trivial_inverted_mask(vertex_colors.g);
  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_B] = trivial_inverted_mask(vertex_colors.b);
  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_A] = trivial_inverted_mask(vertex_colors.a);

  {
    float fres = dot(world_normal, -eye_vec);

    #define rim_mask_channel(_prefix) \
      make_rim_mask_channel( \
        fres, \
        get_value(_prefix##_Start_Osci), \
        get_value(_prefix##_End_Osci), \
        get_value(_prefix##_Strength_PreInversion_Osci), \
        get_value(_prefix##_Strength_PostInversion_Osci), \
        get_value(_prefix##_Smoothing_Osci) \
      )

    #if defined(VFGOO_ENABLE_MASK_RIM_1)
      MASK_CHANNELS.masks[MASK_RIM_1] = rim_mask_channel(_RimMask_1);
    #endif

    #if defined(VFGOO_ENABLE_MASK_RIM_2)
      MASK_CHANNELS.masks[MASK_RIM_2] = rim_mask_channel(_RimMask_2);
    #endif

    #if defined(VFGOO_ENABLE_MASK_RIM_3)
      MASK_CHANNELS.masks[MASK_RIM_3] = rim_mask_channel(_RimMask_3);
    #endif

    #if defined(VFGOO_ENABLE_MASK_RIM_4)
      MASK_CHANNELS.masks[MASK_RIM_4] = rim_mask_channel(_RimMask_4);
    #endif


    #undef rim_mask_channel

  }

  {
    #define calc(_val) saturate(1-((_val) *2))

    float2 value = float2(
      calc(goo_noise),
      calc(1-goo_noise)
    );

    MASK_CHANNELS.masks[MASK_GOO_NOISE] = value;

    #undef calc
  }

  MASK_CHANNELS.masks[MASK_GOO_DRIP] = goo_drip;

  #define evaluate_capsule_mask_macro(_name) \
    evaluate_capsule_mask(\
      baked_pos, \
      get_value(_name##_Axis_Osci), \
      get_value(_name##_Origin_Osci), \
      _name##_Flip, \
      get_value(_name##_Height_Osci), \
      get_value(_name##_Radius_Osci), \
      get_value(_name##_Strength_PreInversion_Osci), \
      get_value(_name##_Strength_PostInversion_Osci) \
    )

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_1)
    MASK_CHANNELS.masks[MASK_CAPSULE_1] = evaluate_capsule_mask_macro(_CapsuleMask_1);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_2)
    MASK_CHANNELS.masks[MASK_CAPSULE_2] = evaluate_capsule_mask_macro(_CapsuleMask_2);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_3)
    MASK_CHANNELS.masks[MASK_CAPSULE_3] = evaluate_capsule_mask_macro(_CapsuleMask_3);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_4)
    MASK_CHANNELS.masks[MASK_CAPSULE_4] = evaluate_capsule_mask_macro(_CapsuleMask_4);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_5)
    MASK_CHANNELS.masks[MASK_CAPSULE_5] = evaluate_capsule_mask_macro(_CapsuleMask_5);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_6)
    MASK_CHANNELS.masks[MASK_CAPSULE_6] = evaluate_capsule_mask_macro(_CapsuleMask_6);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_7)
    MASK_CHANNELS.masks[MASK_CAPSULE_7] = evaluate_capsule_mask_macro(_CapsuleMask_7);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_8)
    MASK_CHANNELS.masks[MASK_CAPSULE_8] = evaluate_capsule_mask_macro(_CapsuleMask_8);
  #endif

  #undef evaluate_capsule_mask_macro

  #define sample_mask_texture_macro(_index, _name, _sampler) \
    { \
      float4 tap = float4(1,1,1,1); \
      \
      if(is##_name##_Texture_set) { \
        tap = sample_texture_2d( \
          _name##_Texture,  \
          _name##_Texture_Tiling, \
          _name##_Texture_Offset, \
          _name##_Texture_ScrollSpeed, \
          _name##_Texture_UVBus, \
          _sampler, \
          _name##_Texture_ScrollSpeed_TimeBase \
        ); \
      } \
      \
      float pre_inversion_strength = get_value(_name##_Strength_PreInversion_Osci); \
      float post_inversion_strength = get_value(_name##_Strength_PostInversion_Osci); \
      \
      MASK_CHANNELS.masks[_index##_R] = make_texture_mask_channel_mask(tap.r, pre_inversion_strength, post_inversion_strength); \
      MASK_CHANNELS.masks[_index##_G] = make_texture_mask_channel_mask(tap.g, pre_inversion_strength, post_inversion_strength); \
      MASK_CHANNELS.masks[_index##_B] = make_texture_mask_channel_mask(tap.b, pre_inversion_strength, post_inversion_strength); \
      MASK_CHANNELS.masks[_index##_A] = make_texture_mask_channel_mask(tap.a, pre_inversion_strength, post_inversion_strength); \
    }
  
  #if defined(VFGOO_ENABLE_MASK_TEXTURE_1)
    sample_mask_texture_macro(MASK_1, _MaskChannel_1, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_2)
    sample_mask_texture_macro(MASK_2, _MaskChannel_2, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_3)
    sample_mask_texture_macro(MASK_3, _MaskChannel_3, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_4)
    sample_mask_texture_macro(MASK_4, _MaskChannel_4, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_5)
    sample_mask_texture_macro(MASK_5, _MaskChannel_5, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_6)
    sample_mask_texture_macro(MASK_6, _MaskChannel_6, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_7)
    sample_mask_texture_macro(MASK_7, _MaskChannel_7, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_8)
    sample_mask_texture_macro(MASK_8, _MaskChannel_8, _SamplerLinearRepeat);
  #endif

  #undef sample_mask_texture_macro

  #if defined(VFGOO_ENABLE_MASK_DISTANCE_1)
    MASK_CHANNELS.masks[MASK_DISTANCE_1] = evaluate_proximity_mask(
      world_distance, 
      get_value(_DistanceMask_1_Distance_Start_Osci),
      get_value(_DistanceMask_1_Distance_End_Osci),
      get_value(_DistanceMask_1_Strength_PreInversion_Osci),
      get_value(_DistanceMask_1_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_DISTANCE_2)
    MASK_CHANNELS.masks[MASK_DISTANCE_2] = evaluate_proximity_mask(
      world_distance, 
      get_value(_DistanceMask_2_Distance_Start_Osci),
      get_value(_DistanceMask_2_Distance_End_Osci),
      get_value(_DistanceMask_2_Strength_PreInversion_Osci),
      get_value(_DistanceMask_2_Strength_PostInversion_Osci)
    );
  #endif


  #if defined(VFGOO_ENABLE_MASK_MASSBLEND_1)
    MASK_CHANNELS.masks[MASK_MASSBLEND_1] = make_mass_blend_mask(
      _MassBlendMask_1_1_Mask,
      _MassBlendMask_1_2_Mask,
      _MassBlendMask_1_3_Mask,
      _MassBlendMask_1_4_Mask,
      _MassBlendMask_1_5_Mask,
      _MassBlendMask_1_6_Mask,
      _MassBlendMask_1_7_Mask,
      _MassBlendMask_1_8_Mask,
      _MassBlendMask_1_BlendMode,
      get_value(_MassBlendMask_1_Strength_Osci),
      get_value(_MassBlendMask_1_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_MASSBLEND_2)
    MASK_CHANNELS.masks[MASK_MASSBLEND_2] = make_mass_blend_mask(
      _MassBlendMask_2_1_Mask,
      _MassBlendMask_2_2_Mask,
      _MassBlendMask_2_3_Mask,
      _MassBlendMask_2_4_Mask,
      _MassBlendMask_2_5_Mask,
      _MassBlendMask_2_6_Mask,
      _MassBlendMask_2_7_Mask,
      _MassBlendMask_2_8_Mask,
      _MassBlendMask_2_BlendMode,
      get_value(_MassBlendMask_2_Strength_Osci),
      get_value(_MassBlendMask_2_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_1)
    MASK_CHANNELS.masks[MASK_BLEND_1] = make_blend_mask(
      _BlendMask_1_Mask_Fore_Mask,
      _BlendMask_1_Mask_Back_Mask,
      get_value(_BlendMask_1_Opacity_Osci),
      _BlendMask_1_BlendMode,
      get_value(_BlendMask_1_Strength_PreInversion_Osci),
      get_value(_BlendMask_1_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_2)
    MASK_CHANNELS.masks[MASK_BLEND_2] = make_blend_mask(
      _BlendMask_2_Mask_Fore_Mask,
      _BlendMask_2_Mask_Back_Mask,
      get_value(_BlendMask_2_Opacity_Osci),
      _BlendMask_2_BlendMode,
      get_value(_BlendMask_2_Strength_PreInversion_Osci),
      get_value(_BlendMask_2_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_3)
    MASK_CHANNELS.masks[MASK_BLEND_3] = make_blend_mask(
      _BlendMask_3_Mask_Fore_Mask,
      _BlendMask_3_Mask_Back_Mask,
      get_value(_BlendMask_3_Opacity_Osci),
      _BlendMask_3_BlendMode,
      get_value(_BlendMask_3_Strength_PreInversion_Osci),
      get_value(_BlendMask_3_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_4)
    MASK_CHANNELS.masks[MASK_BLEND_4] = make_blend_mask(
      _BlendMask_4_Mask_Fore_Mask,
      _BlendMask_4_Mask_Back_Mask,
      get_value(_BlendMask_4_Opacity_Osci),
      _BlendMask_4_BlendMode,
      get_value(_BlendMask_4_Strength_PreInversion_Osci),
      get_value(_BlendMask_4_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_5)
    MASK_CHANNELS.masks[MASK_BLEND_5] = make_blend_mask(
      _BlendMask_5_Mask_Fore_Mask,
      _BlendMask_5_Mask_Back_Mask,
      get_value(_BlendMask_5_Opacity_Osci),
      _BlendMask_5_BlendMode,
      get_value(_BlendMask_5_Strength_PreInversion_Osci),
      get_value(_BlendMask_5_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_6)
    MASK_CHANNELS.masks[MASK_BLEND_6] = make_blend_mask(
      _BlendMask_6_Mask_Fore_Mask,
      _BlendMask_6_Mask_Back_Mask,
      get_value(_BlendMask_6_Opacity_Osci),
      _BlendMask_6_BlendMode,
      get_value(_BlendMask_6_Strength_PreInversion_Osci),
      get_value(_BlendMask_6_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_7)
    MASK_CHANNELS.masks[MASK_BLEND_7] = make_blend_mask(
      _BlendMask_7_Mask_Fore_Mask,
      _BlendMask_7_Mask_Back_Mask,
      get_value(_BlendMask_7_Opacity_Osci),
      _BlendMask_7_BlendMode,
      get_value(_BlendMask_7_Strength_PreInversion_Osci),
      get_value(_BlendMask_7_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_8)
    MASK_CHANNELS.masks[MASK_BLEND_8] = make_blend_mask(
      _BlendMask_8_Mask_Fore_Mask,
      _BlendMask_8_Mask_Back_Mask,
      get_value(_BlendMask_8_Opacity_Osci),
      _BlendMask_8_BlendMode,
      get_value(_BlendMask_8_Strength_PreInversion_Osci),
      get_value(_BlendMask_8_Strength_PostInversion_Osci)
    );
  #endif
}

void
init_masks_as_oscillators() {
  OSCILLATORS.slots[OSCI_MASK_1] = get_mask(_Osci_Mask_1_Mask);
  OSCILLATORS.slots[OSCI_MASK_2] = get_mask(_Osci_Mask_2_Mask);
  OSCILLATORS.slots[OSCI_MASK_3] = get_mask(_Osci_Mask_3_Mask);
  OSCILLATORS.slots[OSCI_MASK_4] = get_mask(_Osci_Mask_4_Mask);
  OSCILLATORS.slots[OSCI_MASK_5] = get_mask(_Osci_Mask_5_Mask);
  OSCILLATORS.slots[OSCI_MASK_6] = get_mask(_Osci_Mask_6_Mask);
  OSCILLATORS.slots[OSCI_MASK_7] = get_mask(_Osci_Mask_7_Mask);
  OSCILLATORS.slots[OSCI_MASK_8] = get_mask(_Osci_Mask_8_Mask);
}

// NOTE(valuef): any inline of these texture samplers is marked with @InlinedTextureSampling
// 2023-08-20
float4
sample_texture_separate_mask(
  const Texture_Info info,
  out float mask
) {
  float4 tap = info.default_value;

  if(info.is_set) {
    tap = sample_texture_2d(info.tex, info.tiling, info.offset, info.scroll, info.uv_bus, info.samp, info.time_base_slot);
  }

  mask = get_mask(info.mask);

  if(info.alpha_is_mask) {
    mask *= tap.a;
  }

  return tap;
}


float4
sample_texture(
  const Texture_Info info
) {
  // @InlinedTextureSampling
  float mask;
  float4 tap = sample_texture_separate_mask(info, mask);

  tap *= mask;

  return tap;
}

#if defined(RALIV_PENETRATOR) || defined(RALIV_ORIFICE)
  #include "Assets/RalivDynamicPenetrationSystem/Plugins/RalivDPS_Functions.cginc"
#endif

#define RENDERING_MODE_OPAQUE       0
#define RENDERING_MODE_TRANSPARENT  1
#define RENDERING_MODE_FADE         2
#define RENDERING_MODE_CUTOUT       3

// _ALPHAPREMULTIPLY_ON is set
inline bool is_using_premultiplied_alpha() {
  // one oneminussrcalpha
  return _SourceBlend == 1 && _DestinationBlend == 10;
}

// fade,
// _ALPHABLEND_ON is set
inline bool is_using_postmultiplied_alpha() {
  // srcalpha oneminussrcalpha
  return _SourceBlend == 5 && _DestinationBlend == 10;
}

float3 rgb2hsv(float3 c) {
  float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
  float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
  float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

  float d = q.x - min(q.w, q.y);
  float e = 1.0e-10;
  return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

float3 hsv2rgb(float3 c) {
  float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * lerp(K.xxx, saturate(p - K.xxx), c.y);
}

// NOTE(valuef): There are some problems with TEXCOORD < 2
// If the mesh has any texcoord vertex attributes with semantic index over 2, and there are
// shaders PRESENT ON THE MESH that make use of any of them, everything is okay.
// However, if those shaders are NOT present on the mesh during upload but instead are set up to
// be swapped into using simple material swap animations, then the vertex input input layout for
// texcoord attributes above 2 will not be properly set up!
//
// Here is some renderdoc IA info:
//
// === Deuzear with UV7 data and a shader that uses it as the default shader. Works fine ===
//  Input Layouts
//    Slot	Semantic Name	  Semantic Index	Format	              Input Slot	Byte Offset	  Per Instance	Instance Data Step Rate
//    0	    POSITION	      0	              R32G32B32_FLOAT	      0	          0	            False	        0
//    1	    NORMAL	        0	              R32G32B32_FLOAT	      0	          12	          False	        0
//    2	    TANGENT	        0	              R32G32B32A32_FLOAT	  0	          24	          False	        0
//    3	    COLOR	          0	              R8G8B8A8_UNORM	      3	          4	            False	        0
//    4	    TEXCOORD	      0	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    5	    TEXCOORD	      1	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    6	    TEXCOORD	      2	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    7	    TEXCOORD	      3	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    8	    TEXCOORD	      4	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    9	    TEXCOORD	      5	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    10	  TEXCOORD	      6	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    11	  TEXCOORD	      7	              R32G32B32A32_FLOAT	  1	          16	          False	        0
//    12	  BLENDWEIGHTS	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    13	  BLENDINDICES	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//
//  Vertex Buffers
//    Slot	  Buffer	                                                                            Stride	Offset	Byte Length
//    0	      Buffer-1-1134400	                                                                  40	    0	      1134400
//    1	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    2	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    3	      Buffer-1-20	                                                                        0	      0	      20
//
//  Index Buffer
//    Buffer	                                                              Format	  Offset	  Byte Length
//    wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	R16_UINT	0	        286668
//
//  Primitive Topology
//    Triangle List
//
// === Deuzear with UV2 data, a shader that doesn't use it as a default shader and a shader that does use it as a material swap via animation. Works fine. ===
//  Input Layouts
//    Slot	Semantic Name	  Semantic Index	Format	              Input Slot	Byte Offset	  Per Instance	Instance Data Step Rate
//    0	    POSITION	      0	              R32G32B32_FLOAT	      0	          0	            False	        0
//    1	    NORMAL	        0	              R32G32B32_FLOAT	      0	          12	          False	        0
//    2	    TANGENT	        0	              R32G32B32A32_FLOAT	  0	          24	          False	        0
//    3	    COLOR	          0	              R8G8B8A8_UNORM	      3	          4	            False	        0
//    4	    TEXCOORD	      0	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    5	    TEXCOORD	      1	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    6	    TEXCOORD	      2	              R32G32B32A32_FLOAT	  1	          16	          False	        0
//    7	    TEXCOORD	      3	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    8	    TEXCOORD	      4	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    9	    TEXCOORD	      5	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    10	  TEXCOORD	      6	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    11	  TEXCOORD	      7	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    12	  BLENDWEIGHTS	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    13	  BLENDINDICES	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//
//  Vertex Buffers
//    Slot	  Buffer	                                                                            Stride	Offset	Byte Length
//    0	      Buffer-1-1134400	                                                                  40	    0	      1134400
//    1	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    2	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    3	      Buffer-1-20	                                                                        0	      0	      20
//
//  Index Buffer
//    Buffer	                                                              Format	  Offset	  Byte Length
//    wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	R16_UINT	0	        286668
//
//  Primitive Topology
//    Triangle List
//
// === Deuzear with UV3 data, a shader that doesn't use it as a default shader and a shader that does use it as a material swap via animation. Broken normals and UV3 data. ===
//  Input Layouts
//    Slot	Semantic Name	  Semantic Index	Format	              Input Slot	Byte Offset	  Per Instance	Instance Data Step Rate
//    0	    POSITION	      0	              R32G32B32_FLOAT	      0	          0	            False	        0
//    1	    NORMAL	        0	              R32G32B32_FLOAT	      0	          12	          False	        0
//    2	    TANGENT	        0	              R32G32B32A32_FLOAT	  0	          24	          False	        0
//    3	    COLOR	          0	              R8G8B8A8_UNORM	      3	          4	            False	        0
//    4	    TEXCOORD	      0	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    5	    TEXCOORD	      1	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    6	    TEXCOORD	      2	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    7	    TEXCOORD	      3	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    8	    TEXCOORD	      4	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    9	    TEXCOORD	      5	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    10	  TEXCOORD	      6	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    11	  TEXCOORD	      7	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    12	  BLENDWEIGHTS	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    13	  BLENDINDICES	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//
//  Vertex Buffers
//    Slot	  Buffer	                                                                            Stride	Offset	Byte Length
//    0	      Buffer-1-1134400	                                                                  40	    0	      1134400
//    1	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              16	    0	      453760
//    2	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    3	      Buffer-1-20	                                                                        0	      0	      20
//
//  Index Buffer
//    Buffer	                                                              Format	  Offset	  Byte Length
//    wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	R16_UINT	0	        286668
//
//  Primitive Topology
//    Triangle List
//
// It's a bit unclear as to why the normal baking breaks with UV3-7 material swaps, but it's clear
// that the UV3 data does not have the proper byte offset set whereas the UV2 version and UV7
// default version do!
// 
// I'm completely in the dark on what's going on behind the scenes here at the API level.
// 2023-03-07
//
// It's likely happening due to the mesh channel optimization step during the unity bundle build process.
// 2023-08-04
//
// Confirmed, turning of mesh optimizaton before building seems to fix it.
// 2023-08-17
struct Vertex_Input {
  float4 vertex_colors : COLOR;
  float4 vertex : POSITION;
  half3 normal : NORMAL;

  float2 uv0 : TEXCOORD0;
  float2 uv1 : TEXCOORD1; 
  float3 baked_pos : TEXCOORD2; /* NOTE(valuef): Reserved for baked goo data */
  float2 uv3 : TEXCOORD3;
  float2 uv4 : TEXCOORD4;
  float2 uv5 : TEXCOORD5;
  float2 uv6 : TEXCOORD6;
  float2 uv7 : TEXCOORD7;

  half4 tangent : TANGENT;

	uint vertex_id : SV_VertexID;

  UNITY_VERTEX_INPUT_INSTANCE_ID
};

struct Vertex_Output_Forward_Base {
  float4 pos : SV_POSITION;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  UNITY_VERTEX_OUTPUT_STEREO

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD1;
  #endif

  float3 eye_vec_unnormalized : TEXCOORD2;

  /* [3x3:tangentToWorld | 1x3:viewDirForParallax or worldPos] */
  float4 tangentToWorldAndPackedData[3] : TEXCOORD3; 

  /* SH or Lightmap UV */
  half4 ambientOrLightmapUV : TEXCOORD6; 

  UNITY_LIGHTING_COORDS(7,8)
  UNITY_FOG_COORDS(9)

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise : TEXCOORD10;
  #endif

  #if !defined(OPT_GRAB_POS_INTERPOLATOR_DISABLED)
    float4 grab_pos : TEXCOORD11;
  #endif

  float3 baked_pos : TEXCOORD12;

  #if defined(NOT_BAKED)
    float4 debug : TEXCOORD13;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD14;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD15;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD16;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD17;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD18;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD19;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD20;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD21;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD22;
  #endif
};

struct Vertex_Output_Outline {
  float4 pos : SV_POSITION;

  UNITY_VERTEX_OUTPUT_STEREO
  UNITY_FOG_COORDS(0)

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD1;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD2;
  #endif

  // TODO can this be optimized out?
  float3 baked_pos : TEXCOORD3;

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD4;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD5;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise  : TEXCOORD6;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD7;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD8;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD9;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD10;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD11;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD12;
  #endif

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    /* Only used for uv buses and panosphere */
    float3 world_pos : TEXCOORD13;            
  #endif

  // TODO optimize these out
  /* Only for rim mask & center-out tf */
  float3 eye_vec_unnormalized : TEXCOORD14; 

  /* Only for rim mask & center out tf*/
  float3 world_normal : TEXCOORD15;         

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD16;
  #endif
};

struct Vertex_Output_Early_Z {
  float4 pos : SV_POSITION;

  UNITY_VERTEX_OUTPUT_STEREO
};

struct Vertex_Output_Forward_Add {
  float4 pos : SV_POSITION;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  UNITY_VERTEX_OUTPUT_STEREO

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD1;
  #endif

  float3 eye_vec_unnormalized : TEXCOORD2;

  /* [3x3:tangentToWorld | 1x3:lightDir] */
  float4 tangentToWorldAndLightDir[3] : TEXCOORD3; 

  float3 posWorld : TEXCOORD6;

  UNITY_LIGHTING_COORDS(7, 8)
  UNITY_FOG_COORDS(9)

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise : TEXCOORD10;
  #endif

  float3 baked_pos : TEXCOORD11;

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD12;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD13;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD14;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD15;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD16;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD17;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD18;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD19;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD20;
  #endif
};

struct Vertex_Output_Shadow_Caster {
  float4 pos : SV_POSITION;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  V2F_SHADOW_CASTER_NOPOS
  UNITY_VERTEX_OUTPUT_STEREO

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD1;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD2;
  #endif

  // unused TEXCOORD3;

  float3 baked_pos : TEXCOORD4;

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD5;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD6;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise  : TEXCOORD7;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD8;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD9;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD10;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD11;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD12;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD13;
  #endif

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    /* Only used for uv buses and panosphere */
    float3 world_pos : TEXCOORD14;            
  #endif

  // TODO optimize these out
  /* Only for rim mask & center-out tf */
  float3 eye_vec_unnormalized : TEXCOORD15; 

  /* Only for rim mask & center-out tf */
  float3 world_normal : TEXCOORD16;         

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD17;
  #endif
};

half3 ShadeSHPerPixel(half3 normal, half3 ambient, float3 worldPos) {
  half3 ambient_contrib = 0.0;

  #if defined(UNITY_SAMPLE_FULL_SH_PER_PIXEL)
    // Completely per-pixel
    #if UNITY_LIGHT_PROBE_PROXY_VOLUME
      if(unity_ProbeVolumeParams.x == 1.0) {
        ambient_contrib = SHEvalLinearL0L1_SampleProbeVolume(half4(normal, 1.0), worldPos);
      }
      else {
        ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
      }
    #else
      ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
    #endif

    ambient_contrib += SHEvalLinearL2(half4(normal, 1.0));

    ambient += max(half3(0, 0, 0), ambient_contrib);

    #ifdef UNITY_COLORSPACE_GAMMA
      ambient = LinearToGammaSpace(ambient);
    #endif
  #else
    // L2 per-vertex, L0..L1 & gamma-correction per-pixel
    // Ambient in this case is expected to be always Linear, see ShadeSHPerVertex()
    #if UNITY_LIGHT_PROBE_PROXY_VOLUME
      if(unity_ProbeVolumeParams.x == 1.0) {
        ambient_contrib = SHEvalLinearL0L1_SampleProbeVolume(half4(normal, 1.0), worldPos);
      }
      else {
        ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
      }
    #else
      ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
    #endif

    // include L2 contribution in vertex shader before clamp.
    ambient = max(half3(0, 0, 0), ambient+ambient_contrib);

    #ifdef UNITY_COLORSPACE_GAMMA
      ambient = LinearToGammaSpace(ambient);
    #endif
  #endif

  return ambient;
}

half3 ShadeSHPerVertex(half3 normal, half3 ambient) {
  #if defined(UNITY_SAMPLE_FULL_SH_PER_PIXEL)
    // Completely per-pixel
    // nothing to do here
  #else
    // L2 per-vertex, L0..L1 & gamma-correction per-pixel

    // NOTE: SH data is always in Linear AND calculation is split between vertex & pixel
    // Convert ambient to Linear and do final gamma-correction at the end(per-pixel)
    #ifdef UNITY_COLORSPACE_GAMMA
      ambient = GammaToLinearSpace(ambient);
    #endif

    ambient += SHEvalLinearL2(half4(normal, 1.0));     // no max since this is only L2 contribution
  #endif

  return ambient;
}

inline half4 VertexGIForward(float3 posWorld, half3 normalWorld) {
  half4 ambientOrLightmapUV = 0;

  // NOTE(valuef): By default this keyword is a multi-compile keyword but for the sake of build times we're baking it in.
  // In rare situations with too many lights, the avatar may look like it's not receiving lights BUT for now this is okay I think.
  // Also from testing, not including this keyword still seems to upload vertex light information into the shader. 
  //
  // So, all in all, since in VRC we mostly use vertex lights for world-space positions of nearby objects, we're likely not going
  // to be using them for lights. So we should be good.
  //
  // 2023-10-31
  /*
  #ifdef VERTEXLIGHT_ON
    // Approximated illumination from non-important point lights
    ambientOrLightmapUV.rgb = Shade4PointLights(
      unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
      unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
      unity_4LightAtten0, posWorld, normalWorld
    );
  #endif
  */

  ambientOrLightmapUV.rgb = ShadeSHPerVertex(normalWorld, ambientOrLightmapUV.rgb);

  return ambientOrLightmapUV;
}

#define IN_WORLDPOS(i) half3(i.tangentToWorldAndPackedData[0].w,i.tangentToWorldAndPackedData[1].w,i.tangentToWorldAndPackedData[2].w)

struct Fragment_Common_Data {
  float3 diffColor;
  float3 specColor;

  // Note: smoothness & oneMinusReflectivity for optimization purposes, mostly for DX9 SM2.0 level.
  // Most of the math is being done on these (1-x) values, and that saves a few precious ALU slots.
  float oneMinusReflectivity;
  float smoothness;

  float3 normalWorld;
  float3 normal_world_seamless;
  float3 posWorld;

  float4 albedo;
  float3 emissive_from_albedo_source;

  float alpha;

  float3 eye_vec;

  float4 glitter;
};

inline half3 PreMultiplyAlpha(half3 diffColor, half alpha, half oneMinusReflectivity, out half outModifiedAlpha) {
  bool is_transparent = false;

  EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT) {
    // NOTE: shader relies on pre-multiply alpha-blend (_SrcBlend = One, _DstBlend = OneMinusSrcAlpha)

    // Transparency 'removes' from Diffuse component
    diffColor *= alpha;

    // Reflectivity 'removes' from the rest of components, including Transparency
    // outAlpha = 1-(1-alpha)*(1-reflectivity) = 1-(oneMinusReflectivity - alpha*oneMinusReflectivity) =
    //          = 1-oneMinusReflectivity + alpha*oneMinusReflectivity
    outModifiedAlpha = 1-oneMinusReflectivity + alpha*oneMinusReflectivity;
  }
  else {
    outModifiedAlpha = alpha;
  }

  return diffColor;
}

half3 UnpackScaleNormal(half4 packednormal, half bumpScale) {
  packednormal.x *= packednormal.w;

  half3 normal;
  normal.xy = (packednormal.xy * 2 - 1);
  normal.xy *= bumpScale;
  normal.z = sqrt(1.0 - saturate(dot(normal.xy, normal.xy)));

  return normal;
}

inline half OneMinusReflectivityFromMetallic(half metallic) {
  // We'll need oneMinusReflectivity, so
  //   1-reflectivity = 1-lerp(dielectricSpec, 1, metallic) = lerp(1-dielectricSpec, 0, metallic)
  // store (1-dielectricSpec) in unity_ColorSpaceDielectricSpec.a, then
  //   1-reflectivity = lerp(alpha, 0, metallic) = alpha + metallic*(0 - alpha) =
  //                  = alpha - metallic * alpha
  half oneMinusDielectricSpec = unity_ColorSpaceDielectricSpec.a;
  return oneMinusDielectricSpec - metallic * oneMinusDielectricSpec;
}

inline half3 DiffuseAndSpecularFromMetallic(half3 albedo, half metallic, out half3 specColor, out half oneMinusReflectivity) {
  specColor = lerp(unity_ColorSpaceDielectricSpec.rgb, albedo, metallic);
  oneMinusReflectivity = OneMinusReflectivityFromMetallic(metallic);
  return albedo * oneMinusReflectivity;
}

struct UnityLight {
  half3 color;
  half3 dir;
};

struct UnityIndirect {
  half3 diffuse;
  half3 specular;
};

struct UnityGI {
  UnityLight light;
  UnityIndirect indirect;
};

struct UnityGIInput {
  // pixel light, sent from the engine
  UnityLight light;

  float3 worldPos;
  half3 worldViewDir;
  half atten;
  half3 ambient;

  // interpolated lightmap UVs are passed as full float precision data to fragment shaders
  // so lightmapUV (which is used as a tmp inside of lightmap fragment shaders) should
  // also be full float precision to avoid data loss before sampling a texture.
  float4 lightmapUV; // .xy = static lightmap UV, .zw = dynamic lightmap UV

  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION) || defined(UNITY_ENABLE_REFLECTION_BUFFERS)
    float4 boxMin[2];
  #endif

  #ifdef UNITY_SPECCUBE_BOX_PROJECTION
    float4 boxMax[2];
    float4 probePosition[2];
  #endif

  // HDR cubemap properties, use to decompress HDR texture
  float4 probeHDR[2];
};

inline bool has_world_space_light_direction() {
  return any(_WorldSpaceLightPos0.xyz);
}

// NOTE(valuef): direction should be normalized at usage site
// 2024-01-04
inline
UnityLight
get_directional_light(float3 world_pos) {
  UnityLight ret;
  ret.color = _LightColor0.rgb;

  float3 world_space_light;
  #ifndef USING_LIGHT_MULTI_COMPILE
      ret.dir = _WorldSpaceLightPos0.xyz - world_pos * _WorldSpaceLightPos0.w;
  #else
    #ifndef USING_DIRECTIONAL_LIGHT
      ret.dir = _WorldSpaceLightPos0.xyz - world_pos;
    #else
      ret.dir = _WorldSpaceLightPos0.xyz;
    #endif
  #endif


  EDITOR_BRANCH if(_FallbackLight_Enabled) {
    [branch] if(!has_world_space_light_direction()) {
      ret.color = _FallbackLight_Color.rgb;
      ret.dir = _FallbackLight_Direction.xyz;
    }
  }

  return ret;
}

inline float pow2(float x) { return x * x; }

float SmoothnessToPerceptualRoughness(float smoothness) {
  return 1 - smoothness;
}

// GlossyEnvironment - Function to integrate the specular lighting with default sky or reflection probes
struct Unity_GlossyEnvironmentData {
  // - Deferred case have one cubemap
  // - Forward case can have two blended cubemap (unusual should be deprecated).

  // Surface properties use for cubemap integration
  half perceptual_roughness;
  half3 reflUVW;
};

Unity_GlossyEnvironmentData UnityGlossyEnvironmentSetup(half Smoothness, half3 worldViewDir, half3 Normal, half3 fresnel0) {
  Unity_GlossyEnvironmentData g;

  g.perceptual_roughness = SmoothnessToPerceptualRoughness(Smoothness);
  g.reflUVW  = reflect(-worldViewDir, Normal);

  return g;
}

inline void ResetUnityLight(out UnityLight outLight) {
  outLight.color = half3(0, 0, 0);
  outLight.dir = half3(0, 1, 0); // Irrelevant direction, just not null
}

inline void ResetUnityGI(out UnityGI outGI) {
  ResetUnityLight(outGI.light);
  outGI.indirect.diffuse = 0;
  outGI.indirect.specular = 0;
}

inline UnityGI UnityGI_Base(UnityGIInput data, half occlusion, half3 normalWorld) {
  UnityGI o_gi;
  ResetUnityGI(o_gi);

  // Base pass with Lightmap support is responsible for handling ShadowMask / blending here for performance reason
  #if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
    half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
    float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
    float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
    data.atten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
  #endif

  o_gi.light = data.light;
  o_gi.light.color *= data.atten;

  #if UNITY_SHOULD_SAMPLE_SH
    o_gi.indirect.diffuse = ShadeSHPerPixel(normalWorld, data.ambient, data.worldPos);
  #endif

  #if defined(LIGHTMAP_ON)
    // Baked lightmaps
    half4 bakedColorTex = UNITY_SAMPLE_TEX2D(unity_Lightmap, data.lightmapUV.xy);
    half3 bakedColor = DecodeLightmap(bakedColorTex);

    #ifdef DIRLIGHTMAP_COMBINED
      fixed4 bakedDirTex = UNITY_SAMPLE_TEX2D_SAMPLER(unity_LightmapInd, unity_Lightmap, data.lightmapUV.xy);
      o_gi.indirect.diffuse += DecodeDirectionalLightmap(bakedColor, bakedDirTex, normalWorld);

      #if defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN)
        ResetUnityLight(o_gi.light);
        o_gi.indirect.diffuse = SubtractMainLightWithRealtimeAttenuationFromLightmap(o_gi.indirect.diffuse, data.atten, bakedColorTex, normalWorld);
      #endif

    #else // not directional lightmap
      o_gi.indirect.diffuse += bakedColor;

      #if defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN)
        ResetUnityLight(o_gi.light);
        o_gi.indirect.diffuse = SubtractMainLightWithRealtimeAttenuationFromLightmap(o_gi.indirect.diffuse, data.atten, bakedColorTex, normalWorld);
      #endif
    #endif
  #endif

  o_gi.indirect.diffuse *= occlusion;
  return o_gi;
}


inline UnityGI UnityGlobalIllumination(UnityGIInput data, half occlusion, half3 normalWorld) {
  return UnityGI_Base(data, occlusion, normalWorld);
}

inline float3 BoxProjectedCubemapDirection(float3 worldRefl, float3 worldPos, float4 cubemapCenter, float4 boxMin, float4 boxMax) {
  // Do we have a valid reflection probe?
  UNITY_BRANCH
  if(cubemapCenter.w > 0.0) {
    float3 nrdir = normalize(worldRefl);

    #if 1
      float3 rbmax = (boxMax.xyz - worldPos) / nrdir;
      float3 rbmin = (boxMin.xyz - worldPos) / nrdir;

      float3 rbminmax = (nrdir > 0.0f) ? rbmax : rbmin;

    #else // Optimized version
      float3 rbmax = (boxMax.xyz - worldPos);
      float3 rbmin = (boxMin.xyz - worldPos);

      float3 select = step(float3(0,0,0), nrdir);
      float3 rbminmax = lerp(rbmax, rbmin, select);
      rbminmax /= nrdir;
    #endif

    float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);

    worldPos -= cubemapCenter.xyz;
    worldRefl = worldPos + nrdir * fa;
  }

  return worldRefl;
}

half perceptualRoughnessToMipmapLevel(half perceptualRoughness) {
  return perceptualRoughness * UNITY_SPECCUBE_LOD_STEPS;
}

half3 Unity_GlossyEnvironment(UNITY_ARGS_TEXCUBE(tex), half4 hdr, Unity_GlossyEnvironmentData glossIn) {

  half perceptualRoughness = glossIn.perceptual_roughness;
  perceptualRoughness = perceptualRoughness*(1.7 - 0.7*perceptualRoughness);

  half mip = perceptualRoughnessToMipmapLevel(perceptualRoughness);
  half3 R = glossIn.reflUVW;
  half4 rgbm = UNITY_SAMPLE_TEXCUBE_LOD(tex, R, mip);

  return DecodeHDR(rgbm, hdr);
}

float
get_appears_on_mask(
  int appears_on, 
  float material_mix
) {
  EDITOR_BRANCH if(appears_on == APPEARS_ON_MATERIAL_ONLY_PRE_TF) {
    return 1-material_mix;
  }
  else EDITOR_BRANCH if(appears_on == APPEARS_ON_MATERIAL_ONLY_POST_TF) {
    return material_mix;
  }
  return 1;
}

inline 
half3 
UnityGI_IndirectSpecular(
  UnityGIInput data, 
  half occlusion, 
  Unity_GlossyEnvironmentData glossIn, 
  float material_mix
) {
  half3 specular;

  half3 originalReflUVW = glossIn.reflUVW;
  #ifdef UNITY_SPECCUBE_BOX_PROJECTION
    // we will tweak reflUVW in glossIn directly (as we pass it to Unity_GlossyEnvironment twice for probe0 and probe1), so keep original to pass into BoxProjectedCubemapDirection
    glossIn.reflUVW = BoxProjectedCubemapDirection(originalReflUVW, data.worldPos, data.probePosition[0], data.boxMin[0], data.boxMax[0]);
  #endif

  EDITOR_BRANCH if(_GlossyReflections_Enabled) {
    {
      half3 env0 = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE(unity_SpecCube0), data.probeHDR[0], glossIn);

      #ifdef UNITY_SPECCUBE_BLENDING
        const float kBlendFactor = 0.99999;
        float blendLerp = data.boxMin[0].w;

        UNITY_BRANCH
        if(blendLerp < kBlendFactor) {
          #ifdef UNITY_SPECCUBE_BOX_PROJECTION
            glossIn.reflUVW = BoxProjectedCubemapDirection(
              originalReflUVW, data.worldPos, data.probePosition[1], data.boxMin[1], data.boxMax[1]
            );
          #endif

          half3 env1 = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE_SAMPLER(unity_SpecCube1,unity_SpecCube0), data.probeHDR[1], glossIn);
          specular = lerp(env1, env0, blendLerp);
        }
        else {
          specular = env0;
        }
      #else
        specular = env0;
      #endif
    }

    EDITOR_BRANCH if(_FakeCubemap_Enabled) {
      half3 fake_refl;
      if(is_FakeCubemap_Texture_set) {
        {
          half3 old = glossIn.reflUVW;
          glossIn.reflUVW = originalReflUVW;
          fake_refl = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE(_FakeCubemap_Texture), _FakeCubemap_Texture_HDR, glossIn);
          glossIn.reflUVW = old;
        }

        fake_refl = fake_refl * _FakeCubemap_Tint2.rgb;
        fake_refl *= _FakeCubemap_Exposure;
      }
      else {
        // NOTE(valuef): This is 0.5^2.2 as the default value of cubemaps (0.5, 0.5, 0.5, 1).
        // The 2.2 pow is an educated guess to match the value we get by sampling the unset texture.
        // 2022-10-21
        fake_refl = 0.21763764082.rrr;
      }

      float appears_on = get_appears_on_mask(_FakeCubemap_AppearsOnMaterial, material_mix);

      fake_refl = lerp(specular, fake_refl, appears_on);
      specular = lerp(specular, fake_refl, _FakeCubemap_Blend);
    }
  }
  else {
    specular = unity_IndirectSpecColor.rgb;
  }

  return specular * occlusion;
}

inline 
UnityGI 
UnityGlobalIllumination(
  UnityGIInput data, 
  half occlusion, 
  half3 normalWorld, 
  Unity_GlossyEnvironmentData glossIn,
  float material_mix
) {
  UnityGI o_gi = UnityGI_Base(data, occlusion, normalWorld);
  o_gi.indirect.specular = UnityGI_IndirectSpecular(data, occlusion, glossIn, material_mix);
  return o_gi;
}

inline 
UnityGI 
FragmentGI(
  Fragment_Common_Data s, 
  float3 eyeVec,
  half occlusion, 
  half4 i_ambientOrLightmapUV, 
  half atten, 
  UnityLight light,
  float material_mix
) {
  UnityGIInput d;
  d.light = light;
  d.worldPos = s.posWorld;
  d.worldViewDir = -eyeVec;
  d.atten = atten;

  d.ambient = i_ambientOrLightmapUV.rgb;
  d.lightmapUV = 0;

  d.probeHDR[0] = unity_SpecCube0_HDR;
  d.probeHDR[1] = unity_SpecCube1_HDR;

  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
    d.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
  #endif

  #ifdef UNITY_SPECCUBE_BOX_PROJECTION
    d.boxMax[0] = unity_SpecCube0_BoxMax;
    d.probePosition[0] = unity_SpecCube0_ProbePosition;
    d.boxMax[1] = unity_SpecCube1_BoxMax;
    d.boxMin[1] = unity_SpecCube1_BoxMin;
    d.probePosition[1] = unity_SpecCube1_ProbePosition;
  #endif

  Unity_GlossyEnvironmentData g = UnityGlossyEnvironmentSetup(s.smoothness, -eyeVec, s.normalWorld, s.specColor);
  UnityGI gi = UnityGlobalIllumination(d, occlusion, s.normalWorld, g, material_mix);

  return gi;
}

inline float2 Unity_SafeNormalize(float2 inVec) {
  float dp2 = max(0.001f, dot(inVec, inVec));
  return inVec * rsqrt(dp2);
}

inline float3 Unity_SafeNormalize(float3 inVec) {
  float dp3 = max(0.001f, dot(inVec, inVec));
  return inVec * rsqrt(dp3);
}

// Pow5 uses the same amount of instructions as generic pow(), but has 2 advantages:
// 1) better instruction pipelining
// 2) no need to worry about NaNs
inline half Pow5(half x) {
  return x*x * x*x * x;
}

inline half2 Pow5(half2 x) {
  return x*x * x*x * x;
}

inline half3 Pow5(half3 x) {
  return x*x * x*x * x;
}

inline half4 Pow5(half4 x) {
  return x*x * x*x * x;
}


// Note: Disney diffuse must be multiply by diffuseAlbedo / PI. This is done outside of this function.
half DisneyDiffuse(half NdotV, half NdotL, half LdotH, half perceptualRoughness) {
  half fd90 = 0.5 + 2 * LdotH * LdotH * perceptualRoughness;

  // Two schlick fresnel term
  half lightScatter   = (1 + (fd90 - 1) * Pow5(1 - NdotL));
  half viewScatter    = (1 + (fd90 - 1) * Pow5(1 - NdotV));

  return lightScatter * viewScatter;
}

float PerceptualRoughnessToRoughness(float perceptualRoughness) {
  return perceptualRoughness * perceptualRoughness;
}

inline half PerceptualRoughnessToSpecPower(half perceptualRoughness) {
  half m = PerceptualRoughnessToRoughness(perceptualRoughness);   // m is the true academic roughness.
  half sq = max(1e-4f, m*m);

  // https://dl.dropboxusercontent.com/u/55891920/papers/mm_brdf.pdf
  half n = (2.0 / sq) - 2.0;                          

  // prevent possible cases of pow(0,0), which could happen when roughness is 1.0 and NdotH is zero
  n = max(n, 1e-4f);                                  
  return n;
}

inline half3 FresnelTerm(half3 F0, half cosA) {
  half t = Pow5(1 - cosA);   // ala Schlick interpoliation
  return F0 + (1-F0) * t;
}

inline half3 FresnelLerp(half3 F0, half3 F90, half cosA) {
  // ala Schlick interpoliation
  half t = Pow5(1 - cosA);   
  return lerp(F0, F90, t);
}

// Ref: http://jcgt.org/published/0003/02/03/paper.pdf
inline float SmithJointGGXVisibilityTerm(float NdotL, float NdotV, float roughness) {
  #if 0
    // Original formulation:
    //  lambda_v    = (-1 + sqrt(a2 * (1 - NdotL2) / NdotL2 + 1)) * 0.5f;
    //  lambda_l    = (-1 + sqrt(a2 * (1 - NdotV2) / NdotV2 + 1)) * 0.5f;
    //  G           = 1 / (1 + lambda_v + lambda_l);

    // Reorder code to be more optimal
    half a          = roughness;
    half a2         = a * a;

    half lambdaV    = NdotL * sqrt((-NdotV * a2 + NdotV) * NdotV + a2);
    half lambdaL    = NdotV * sqrt((-NdotL * a2 + NdotL) * NdotL + a2);

    // Simplify visibility term: (2.0f * NdotL * NdotV) /  ((4.0f * NdotL * NdotV) * (lambda_v + lambda_l + 1e-5f));
    return 0.5f / (lambdaV + lambdaL + 1e-5f);  // This function is not intended to be running on Mobile,
                                                // therefore epsilon is smaller than can be represented by half
  #else
    // Approximation of the above formulation (simplify the sqrt, not mathematically correct but close enough)
    float a = roughness;
    float lambdaV = NdotL * (NdotV * (1 - a) + a);
    float lambdaL = NdotV * (NdotL * (1 - a) + a);

    return 0.5f / (lambdaV + lambdaL + 1e-5f);
  #endif
}

inline float GGXTerm(float NdotH, float roughness) {
  float a2 = roughness * roughness;
  float d = (NdotH * a2 - NdotH) * NdotH + 1.0f; // 2 mad

  // This function is not intended to be running on Mobile,
  // therefore epsilon is smaller than what can be represented by half
  return UNITY_INV_PI * a2 / (d * d + 1e-7f); 
}

struct TF_And_Material_Mix {
  // NOTE(valuef): May be combined with built_in_tf, use this to lerp between material data
  // 2023-09-11
  float material_mix;

  float bulge_t;
};

float3
sample_matcap(
  const Texture_Info matcap,
  float3 color,
  float size,
  bool use_world_lighting,
  float3 world_normal,
  float3 eye_vec,
  float3 pbr_diffuse_tint,
  float3 pbr_specular_light_term,
  float3 pbr_specular_indirect_term
) {
  if(!matcap.is_set) {
    return float3(0,0,0);
  }

  if(IS_FORWARD_ADD && !use_world_lighting) {
    // NOTE(valuef): No need to evaluate matcaps twice in the forwardadd pass if they aren't affected by lighting
    // 2023-11-10
    return float3(0,0,0);
  }

  // NOTE(valuef): Adapted poiyomi double sided matcap.
  // Retrieved 2023-11-09
  //
  // MIT BEGIN
  //MIT License

  //Copyright (c) 2023 Poiyomi Inc.

  //Permission is hereby granted, free of charge, to any person obtaining a copy
  //of this software and associated documentation files (the "Software"), to deal
  //in the Software without restriction, including without limitation the rights
  //to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  //copies of the Software, and to permit persons to whom the Software is
  //furnished to do so, subject to the following conditions:

  //The above copyright notice and this permission notice shall be included in all
  //copies or substantial portions of the Software.

  //THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  //IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  //FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  //AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  //LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  //OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  //SOFTWARE.

  float3 reflection = reflect(eye_vec, world_normal);
  float2 uv = float2(dot(reflection, float3(1, 0, 0)), dot(reflection, float3(0, 1, 0)));
  uv = (uv * size) + float2(.5,.5);
  // MIT END

  // @InlinedTextureSampling
  float4 tap = matcap.tex.Sample(matcap.samp, uv);
  float3 col = tap.rgb * color;

  col *= get_mask(matcap.mask);

  if(matcap.alpha_is_mask) {
    col *= tap.a;
  }

  if(use_world_lighting) {
    col.rgb = (col.rgb * pbr_diffuse_tint) + (col.rgb * pbr_specular_light_term) + (col.rgb * pbr_specular_indirect_term);
  }

  return col;
}

#define apply_mat_mix(_target, _mix_value, _base_value, _condition, _material_mix) \
    EDITOR_BRANCH if(_condition && _TF_Enabled)  _target = lerp(_mix_value, _base_value, _material_mix); \
    else            _target = _base_value;


// Main Physically Based BRDF
// Derived from Disney work and based on Torrance-Sparrow micro-facet model
//   BRDF = kD / pi + kS * (D * V * F) / 4
//   I = BRDF * NdotL
//
// * GGX NDF
// * Smith for Visiblity term
// * Schlick approximation for Fresnel
half4 
BRDF1_Unity_PBS(
  half3 diffColor, 
  half3 specColor, 
  half oneMinusReflectivity, 
  half smoothness,
  float3 normal, 
  float3 viewDir,
  UnityLight light, 
  UnityIndirect indirect,
  TF_And_Material_Mix mix_info
) {
  float perceptualRoughness = SmoothnessToPerceptualRoughness(smoothness);
  float3 halfDir = Unity_SafeNormalize(float3(light.dir) + viewDir);

  // NdotV should not be negative for visible pixels, but it can happen due to perspective projection and normal mapping
  // In this case normal should be modified to become valid (i.e facing camera) and not cause weird artifacts.
  // but this operation adds few ALU and users may not want it. Alternative is to simply take the abs of NdotV (less correct but works too).
  // Following define allow to control this. Set it to 0 if ALU is critical on your platform.
  // This correction is interesting for GGX with SmithJoint visibility function because artifacts are more visible in this case due to highlight edge of rough surface
  // The amount we shift the normal toward the view vector is defined by the dot product.
  half shiftAmount = dot(normal, viewDir);
  normal = shiftAmount < 0.0f ? normal + viewDir * (-shiftAmount + 1e-5f) : normal;
  // A re-normalization should be applied here but as the shift is small we don't do it to save ALU.
  //normal = normalize(normal);

  float nv = dot(normal, viewDir); // this saturate should no be necessary here

  float nl = saturate(dot(normal, light.dir));
  float nh = saturate(dot(normal, halfDir));

  half lv = saturate(dot(light.dir, viewDir));
  half lh = saturate(dot(light.dir, halfDir));

  half diffuseTerm = DisneyDiffuse(nv, nl, lh, perceptualRoughness) * nl;

  EDITOR_BRANCH if(_Diffuse_Type == DIFFUSE_TYPE_PBR_LUT) {
    diffuseTerm = _Diffuse_LUT_Texture.Sample(_SamplerLinearClamp, diffuseTerm).r;
  }
  else EDITOR_BRANCH if(_Diffuse_Type == DIFFUSE_TYPE_PBR_RAMP) {
    float ramp_1 = saturate(((diffuseTerm - _Diffuse_Ramp_1_Offset) - _Diffuse_Ramp_1_Start) / (_Diffuse_Ramp_1_End - _Diffuse_Ramp_1_Start));
    float ramp_2 = saturate(((diffuseTerm - _Diffuse_Ramp_2_Offset) - _Diffuse_Ramp_2_Start) / (_Diffuse_Ramp_2_End - _Diffuse_Ramp_2_Start));
    
    diffuseTerm = lerp(ramp_1, ramp_2, _Diffuse_Ramp_Blend);
  }
  else EDITOR_BRANCH if(_Diffuse_Type == DIFFUSE_TYPE_NONE) {
    diffuseTerm = 1;
  }
  
  // Specular term
  // HACK: theoretically we should divide diffuseTerm by Pi and not multiply specularTerm!
  // BUT 1) that will make shader look significantly darker than Legacy ones
  // and 2) on engine side "Non-important" lights have to be divided by Pi too in cases when they are injected into ambient SH
  float roughness = PerceptualRoughnessToRoughness(perceptualRoughness);
  roughness = max(roughness, 0.002);

  float V = SmithJointGGXVisibilityTerm(nl, nv, roughness);
  float D = GGXTerm(nh, roughness);

  // Torrance-Sparrow model, Fresnel is applied later
  float specularTerm = V*D * UNITY_PI; 

  #ifdef UNITY_COLORSPACE_GAMMA
    specularTerm = sqrt(max(1e-4h, specularTerm));
  #endif

  // specularTerm * nl can be NaN on Metal in some cases, use max() to make sure it's a sane value
  specularTerm = max(0, specularTerm * nl);

  // surfaceReduction = Int D(NdotH) * NdotH * Id(NdotL>0) dH = 1/(roughness^2+1)
  half surfaceReduction;
  #ifdef UNITY_COLORSPACE_GAMMA
    // 1-0.28*x^3 as approximation for (1/(x^4+1))^(1/2.2) on the domain [0;1]
    surfaceReduction = 1.0-0.28*roughness*perceptualRoughness;
  #else
    // fade in [0.5;1]
    surfaceReduction = 1.0 / (roughness*roughness + 1.0);           
  #endif

  EDITOR_BRANCH if(!_SpecularHightlights_Enabled) {
    specularTerm = 0.0;
  }
  else {
    // To provide true Lambert lighting, we need to be able to kill specular completely.
    specularTerm *= any(specColor) ? 1.0 : 0.0;
  }

  half grazingTerm = saturate(smoothness + (1-oneMinusReflectivity));

  float3 light_color_term = lerp(float3(1,1,1), light.color, _LightColor_Weight);

  // NOTE(valuef): Bias the shadows toward the tint color based off of the lack of diffuse term.
  // 2023-01-08
  float3 tinted_diffuse = lerp(_Diffuse_Shadow_Tint_Color.rgb, 1, diffuseTerm);
  float3 tinted_indirect_diffuse = lerp(_LightProbe_Shadow_Tint_Color.rgb, 1, indirect.diffuse);

  float3 light_probes = _LightProbeWeight * tinted_indirect_diffuse;
  float3 direct_light = light_color_term * tinted_diffuse;

  float3 diffuse_tint = light_probes + direct_light;
  float3 specular_light_term = specularTerm * light_color_term * FresnelTerm(specColor * _Specular_Tint, lh);
  float3 specular_indirect_term = _World_ReflectionProbe_Tint.rgb * (surfaceReduction * indirect.specular * FresnelLerp(specColor, grazingTerm, nv)) * _IndirectLighting_Amount;

  

  float3 color = float3(0,0,0);

  color += diffColor * diffuse_tint;
  color += specular_light_term;
  color += specular_indirect_term;

  {
    float3 matcaps = float3(0,0,0);

    {
      float3 base = sample_matcap(
        Matcap_1_Texture, 
        get_value(_Matcap_1_Color_Osci), 
        _Matcap_1_Size,
        _Matcap_1_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 mix = sample_matcap(
        Mix_Matcap_1_Texture, 
        get_value(_Mix_Matcap_1_Color_Osci), 
        _Mix_Matcap_1_Size,
        _Mix_Matcap_1_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 matcap;
      apply_mat_mix(matcap, mix, base, _Mix_Separate_Matcap_1, mix_info.material_mix.rrr);
      matcaps += matcap;
    }

    {
      float3 base = sample_matcap(
        Matcap_2_Texture, 
        get_value(_Matcap_2_Color_Osci), 
        _Matcap_2_Size,
        _Matcap_2_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 mix = sample_matcap(
        Mix_Matcap_2_Texture, 
        get_value(_Mix_Matcap_2_Color_Osci), 
        _Mix_Matcap_2_Size,
        _Mix_Matcap_2_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 matcap;
      apply_mat_mix(matcap, mix, base, _Mix_Separate_Matcap_2, mix_info.material_mix.rrr);
      matcaps += matcap;
    }

    {
      float3 base = sample_matcap(
        Matcap_3_Texture, 
        get_value(_Matcap_3_Color_Osci), 
        _Matcap_3_Size,
        _Matcap_3_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 mix = sample_matcap(
        Mix_Matcap_3_Texture, 
        get_value(_Mix_Matcap_3_Color_Osci), 
        _Mix_Matcap_3_Size,
        _Mix_Matcap_3_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 matcap;
      apply_mat_mix(matcap, mix, base, _Mix_Separate_Matcap_3, mix_info.material_mix.rrr);
      matcaps += matcap;
    }


    color += matcaps;

  }

  return half4(color, 1);
}

// TANOISE START
// tanoise.cginc - Retrieved 2023-03-07 
// Original source
//  https://github.com/cnlohr/shadertrixx/blob/main/Assets/cnlohr/Shaders/tanoise/tanoise.cginc
// 
// tanoise -> Extremely fast noise that does repeat, but "feels" like
// perlin noise... Ok, not perlin but smooth noise.  It can be used like
// perlin noise in many applications. Rewritten to avoid license issues.
//
//  Usage:
//    * For normal (not 1D) lookups, just use any white noise map.
//    * For 1D Output textures, you will need an offset texture map.
//    * For 4D->1D and 3D->2D Lookups, you will need to make sure SRGB on
//      your tex is OFF!
//    * For 3D->1D Lookups, it only uses the .r and .g channels of the texture.
//    * There is a possible benefit to using tanoise2,3,4 on an 1-channel
//      texture in that you could make it larger to support less repeating. 
//
//  float4 tanoise4( in float4 x )    //4 Texture Lookups
//  float tanoise4_1d( in float4 x )  //1 Texture Lookup
//  float4 tanoise3( in float3 x )    //2 Texture Lookups
//  float tanoise3_1d( in float3 x )  //1 Texture Lookup
//	float tanoise3_1d_fast( in float3 x ) //1 Texture Lookup, No matrix scramble (Slightly poorer quality)
//  float2 tanoise3_2d( in float3 x ) //1 Texture Lookup
//  float4 tanoise2( in float2 x )    //1 Texture Lookup
//  float4 tanoise2_hq( in float2 x ) //4 Texture Lookup (For when hardware interpreters aren't good enough)
//  float4 tanoise4_hq( in float4 x ) //12 texture lookups
//
//  The texture should be the noise texture bound. i.e. add this to properties
//  Properties {
//		_TANoiseTex ("TANoise", 2D) = "white" {}
//        ...
//  }
//
//  NOTE: You must:
//    * Disable compression (unless you want it muted)
//    * Use bilinear filtering. 
//    * Use repeat wrapping.
//    * If you are using the single-texel lookups, disable sRGB.
//
//  Map Generation:
//    * The C rand() function is insufficient for generation of this texture.
//      (It has obvious patterns).
//    * Recommended use an LFSR.
//    * See appendix at end.
//
//  TODO: Improve matrix for non-ordinal-direction viewing.  It should be
//    possible to make the noise resistant to 90-degree angle artifacts even
//    when viewerd from other axes.
//
// The original version of this noise is restrictively licensed.  Code was
// re-written for HLSL 2020 <>< CNLohr, code henseforth may be liberally
// licensed under MIT-X11, NewBSD or Any Creative Commons License including
// CC0.
//
// This is a included in shadertrixx https://github.com/cnlohr/shadertrixx
//
// There was also a bug in the version by stubbe which caused a migration in
// x/y/z when there was an applied w value.  The matrix undoes the migration
// in this version.
//
// The absolutely key idea here is by permuting the input by a matrix, the 
// artifacts from a gridded noise source can be decimated.  At least in most
// applications!  This was loosely referenced in this page here:
//   http://devmag.org.za/2009/04/25/perlin-noise/
//
// The specific tactic for arbitrary noise was mentioned here, though this
// does not give the noise a perlinesque feel.
//   https://shadertoyunofficial.wordpress.com/2016/07/21/usual-tricks-in-shadertoyglsl/
//
// Original concepts behind this algorithm are from: 
//   https://www.shadertoy.com/view/XslGRr
// The modified version is here:
//   https://www.shadertoy.com/view/XltSWj 
//
// The original noise came with this header.
//
// Created by inigo quilez - iq/2013
// Adapted for 4d by stubbe in 2016
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
//
// Fast 3D (value) noise by using two cubic-smooth bilinear interpolations in a LUT, 
// which is much faster than its hash based (purely procedural) counterpart.
//
// Note that instead of fetching from a grey scale texture twice at an offset of (37,17)
// pixels, the green channel of the texture is a copy of the red channel offset that amount
// (thx Dave Hoskins for the suggestion to try this)
//
// Adaped by stubbe for 4d: By applying the same trick again we can copy red and green into 
// blue and alpha with an offset for w and effectively sample a 4d noise by sampling and
// blending two 3d noises.
//
//  C. Lohr notes:
// Originally, they used zOffset 37,17 and wOffset 59.0, 83.0
// This was the original matrix.
//   const mat4 m = mat4( 0.00,  0.80,  0.60, -0.4,
//                       -0.80,  0.36, -0.48, -0.5,
//                       -0.60, -0.48,  0.64,  0.2,
//                        0.40,  0.30,  0.20,  0.4);
// We have adapted this to use a pure-hexagonal move in the upper left.
// And appropriate shifts outside that.
//
// I experimentally found this combination to work better, and it seems to
// cause less repeating when applied to a sphere and a cube.  Selection of
// noise offset values is critical to avoid apparent repeating patterns.
// 

#define tanoiseZOff float2(37,17)
//#define tanoiseZOff float2(51,111)

Texture2D _TANoiseTex;
uniform half4 _TANoiseTex_TexelSize; 

static const float4x4 tanoiseM = 
{
  -0.071301, 0.494967, -0.757557, 0.372699,
  0.494967, 0.388720, 0.303345, 0.701985,
  -0.757557, 0.303345, 0.497523, -0.290552,
  0.372699, 0.701985, -0.290552, -0.532815
};


// NOTE(valuef): Adapted to use the original zoff (37, 17) as (51, 111) was causing some sort of
// quantization artifact likely to do with improper sampling.
//
// 2023-03-09
float4 tanoise3( in float3 x ) {
  float3 c = mul(tanoiseM,x);
	float3 p = floor(c);
	float3 f = frac(c);

	// First level smoothing for nice interpolation between levels. This
	// gets rid of the sharp artifacts that will come from the bilinear
	// interpolation.
	f = f * f * ( 3.0 - 2.0 * f );

	// Compute a u,v coordinateback in
	float2 uv = ( p.xy + p.z*tanoiseZOff ) + f.xy;

	fixed4 r = _TANoiseTex.SampleLevel(_SamplerLinearRepeat, (uv+0.5)*_TANoiseTex_TexelSize, 0.0 );
	fixed4 g = _TANoiseTex.SampleLevel(_SamplerLinearRepeat, (uv+0.5 + tanoiseZOff)*_TANoiseTex_TexelSize, 0.0 );
	return lerp( r, g, f.z );
}

// TANOISE END


half3x3 CreateTangentToWorldPerVertex(half3 normal, half3 tangent, half tangentSign) {
  // For odd-negative scale transforms we need to flip the sign
  half sign = tangentSign * unity_WorldTransformParams.w;
  half3 binormal = cross(normal, tangent) * sign;
  return half3x3(tangent, binormal, normal);
}

UnityLight AdditiveLight(half3 lightDir, half atten) {
  UnityLight l;

  l.color = _LightColor0.rgb;
  l.dir = lightDir;

  #ifndef USING_DIRECTIONAL_LIGHT
    l.dir = normalize(l.dir);
  #endif

  // shadow the light
  l.color *= atten;

  return l;
}

UnityIndirect ZeroIndirect() {
  UnityIndirect ind;
  ind.diffuse = 0;
  ind.specular = 0;
  return ind;
}

inline
float
calculate_built_in_tf_animation(
  float3 baked_pos,
  float3 world_normal,
  float3 eye_vec,
  out float unclamped_tf
) {
 
  float noise = 0;
  EDITOR_BRANCH if(is_TF_AnimationMap_set) {
    float mip = _TF_AnimationMap_Mip;

    if(_TF_AnimationMap_UseUVBus) {
      // @InlinedTextureSampling
      float2 uv = resolve_uv_bus(_TF_AnimationMap_UVBus);

      float2 off = _TF_AnimationMap_Offset.xy;
      float2 scale = _TF_AnimationMap_Scale.xy;

      uv = apply_uv_tiling_offset_and_scroll(uv, scale, off, float2(0,0), _Time.y);

      if(IS_VERTEX_SHADER) {
        noise = _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv, mip);
      }
      else {
        noise = _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv);
      }
    }
    else {
      float3 off = _TF_AnimationMap_Offset.xyz;
      float3 scale = _TF_AnimationMap_Scale.xyz;

      float2 uv_x = float2(off.x + scale.x * baked_pos.yz);
      float2 uv_y = float2(off.y + scale.y * baked_pos.zx);
      float2 uv_z = float2(off.z + scale.z * baked_pos.xy);

      float3 noise3;
      
      if(IS_VERTEX_SHADER) {
        noise3 = float3(
          _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv_x, mip).r,
          _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv_y, mip).r,
          _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv_z, mip).r
        );
      }
      else {
        noise3 = float3(
          _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv_x).r,
          _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv_y).r,
          _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv_z).r
        );
      }

      noise = (noise3.x + noise3.y + noise3.z) * (1.0/3.0);
    }
  }
  else {
    noise = 0;
  }

  float tf_slider = get_value(_TF_Time_Osci).r;

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_TF_Visualisation_Enabled) {
      tf_slider = frac(_Time.y * _TF_Visualisation_Speed);
    }
  #endif

  float margin;
  if(IS_VERTEX_SHADER) {
    margin = _TF_Animation_Blur_VS;
  }
  else {
    margin = _TF_Animation_Blur_PS;
  }
  margin = abs(margin);

  EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_VERY_SIMPLE) {
    unclamped_tf = tf_slider;
    return tf_slider;
  }
  else EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_SIMPLE_WITH_NOISE) {
    // NOTE(valuef): https://www.desmos.com/calculator/f4py5sok4x
    // 2022-10-11
    float t2 = tf_slider * (1 + margin);

    float start = 0 - margin + t2;
    float end = 0 + t2;

    float tf = (noise - start) / (end - start);

    unclamped_tf = tf;

    tf = saturate(tf);

    return 1-tf;
  }
  else EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_RADIAL) {
    float radius = tf_slider * _TF_Animation_Radial_Radius;

    float tf = length(baked_pos - _TF_Animation_Radial_Origin);
    tf /= radius;

    if(_TF_Animation_Radial_LegacyNoise_Enabled) {
      tf /= 2;
      tf += noise;
    }
    else {
      tf -= noise * .5;
    }
    tf = 1-tf;

    float start = 0;
    float end = 0 + margin;

    tf = (tf - start) / (end - start);

    unclamped_tf = tf;

    tf = saturate(tf);

    return tf;
  }
  else EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_CENTER_OUT) {
    float tf = dot(world_normal, -eye_vec);

    tf -= noise * .5;
    tf = saturate(tf);
    EDITOR_BRANCH if(!_TF_Animation_CenterOut_Invert) {
      tf = 1 - tf;
    }

    float t2 = tf_slider * (1 + margin);
    float start = 0 - margin + t2;
    float end = 0 + t2;

    tf = (tf - start) / (end - start);

    unclamped_tf = tf;
    if(!_TF_Animation_CenterOut_Invert) {
      unclamped_tf = 1-unclamped_tf;
    }

    tf = 1-saturate(tf);

    return tf;
  }

  unclamped_tf = 0;
  return 0;
}

float _VRChatMirrorMode;

// NOTE(valuef): VRC Mirrors seem to have a lot of trouble with the _CameraDepthTexture. By default
// it seems like that value is set to be some kind of constant black or constant white. But it
// seems like what texture is bound to that sampler is undefined. I've had instanced where the depth
// texture of the mirror is set to some bizzare texture that's loaded in VRAM.
// So we want to guard any _CameraDepthTexture samples with a mirror check to make sure we don't
// read garbage.
// 2022-09-20
inline
bool
is_rendering_for_mirror() {
  // NOTE(valuef):
  // As of VRChat 2022.3.1 (2022-10-19)
  // 0 - Rendering normally, not in a mirror
  // 1 - Rendering in a mirror viewed in VR
  // 2 - Rendering in a mirror viewed in desktop mode

  #if defined(NOT_BAKED)
    return _PreviewMirror != 0;
  #endif

  return _VRChatMirrorMode != 0;
}

inline
bool
can_use_camera_depth() {
  return !is_rendering_for_mirror() && is_depth_texture_available();
}

TF_And_Material_Mix
calculate_tf_and_material_mix(
  float3 baked_pos,
  float3 world_normal,
  float3 view_dir
) {
  TF_And_Material_Mix ret;

  EDITOR_BRANCH if(!_TF_Enabled) {
    ret.material_mix = 1;
    ret.bulge_t = 1;
    return ret;
  }

  bool is_manual_enabled = (_TF_Manual_Mask.channel != MASK_NONE) || _TF_Manual_Osci_Enabled;
  bool is_builtin_enabled = _TF_Mode != TF_ANIMATION_NONE;

  float manual = 0;
  float builtin = 0;
  float builtin_unclamped_tf = 0;

  EDITOR_BRANCH if(is_manual_enabled) {
    manual = get_mask(_TF_Manual_Mask);
    manual *= saturate(get_value(_TF_Manual_Osci).r);
  }

  EDITOR_BRANCH if(is_builtin_enabled) {
    builtin = calculate_built_in_tf_animation(baked_pos, world_normal, view_dir, builtin_unclamped_tf);
  }

  EDITOR_BRANCH if(is_manual_enabled && is_builtin_enabled) {
    EDITOR_BRANCH if(_TF_ManualBuiltin_BlendMode == 0) { // mul
      ret.material_mix = (manual * builtin);
      ret.bulge_t = manual * (saturate(builtin_unclamped_tf + _TF_Animation_Bulging_Offset + .5));
    }
    else { // add
      ret.material_mix = saturate(manual + builtin);
      ret.bulge_t = saturate(manual + (saturate(builtin_unclamped_tf + _TF_Animation_Bulging_Offset + .5)));
    }
  }
  else EDITOR_BRANCH if(is_manual_enabled) {
    ret.material_mix = manual;
    ret.bulge_t = manual;
  }
  else EDITOR_BRANCH if(is_builtin_enabled) {
    ret.material_mix = builtin;
    ret.bulge_t = saturate(builtin_unclamped_tf + _TF_Animation_Bulging_Offset + .5);
  }
  else {
    ret.material_mix = _TF_Enabled ? 0 : 1;
    ret.bulge_t = ret.material_mix;
  }

  return ret;
}

struct Distortion_Result {
  float goo_noise;
  float goo_drip;

  float3 world_normal;
  float4 world_position;
  float4 local_vertex;
  float4 clip_vertex;
  float4 grab_pos;

  float4 debug;

  float light_mask;

  float touch_reactivity_interaction;
};

float
sample_depth_for_touch_reactivity(
  float our_depth,
  float4 clip_vertex,
  float2 offset
) {
  float4 sample_clip = clip_vertex;
  sample_clip.xy += offset;

  // NOTE(valuef): Not going to be correct for mirrors
  // 2023-09-13
  float4 screen = ComputeGrabScreenPos(sample_clip);
  float tap = SAMPLE_DEPTH(screen.xy / screen.w);

  float depth = LinearEyeDepth(tap);
  return 1-saturate(abs(our_depth - depth) / _TouchReactivity_Remap_End);
}

inline
void
normalize_eye_vec(
  float3 eye_vec_unnormalized,
  out float3 eye_vec,
  out float world_distance
) {
  world_distance = length(eye_vec_unnormalized);
  eye_vec = eye_vec_unnormalized / max(.001, world_distance);
}

inline
Distortion_Result
do_distortion(
  float3  input_baked_pos,
  float3  input_normal,
  float4  input_vertex,
  float4  input_color,
  float4  input_tangent,
  uint    input_vertex_id,
  float3  input_early_world_position,
  const bool apply_depth_distortion
) {
  input_vertex.xyz -= input_normal.xyz * _NormalOffset_Amount;

  #if defined(RALIV_PENETRATOR)
    PenetratorReshape(input_vertex, input_normal);
  #elif defined(RALIV_ORIFICE)
    OrificeReshape(input_vertex, input_normal, input_tangent.xyz, input_vertex_id);
  #endif

  float3 early_eye_vec;
  float early_world_distance;
  normalize_eye_vec(
    input_early_world_position - _WorldSpaceCameraPos.xyz,
    /* out */ early_eye_vec, 
    /* out */ early_world_distance
  );

  // NOTE(valuef): So it appears that the Unity mesh skinning algorithm scales the normals along
  // with the scale of the armature. I do not understand why it does this or even if it's useful,
  // but it's something that, in order to be correct, we have to deal with in the shader.
  // Behind the scenes, UnityObjectToWorldNormal does a normalize after the coordinate system
  // change, so we get good direction vectors.
  // As an aside, it's interesting to note how the input POSITION vertex data is the position of the
  // skinned vertex and it appears that the scale of a skinned mesh is not encoded in the model
  // matrix but instead it's applied during skinning! So from what I can tell, taking the length of
  // the skinned normal is one way of getting an approximation of the scale of a skinned mesh
  // without setting any extra uniforms or input vertex data.
  // 2022-09-18

  float3 world_normal = UnityObjectToWorldNormal(input_normal);

  Distortion_Result ret;
  ret.debug = 0.0.rrrr;
  ret.local_vertex = input_vertex;
  ret.goo_noise = 0;

  float3 noise_normal = float3(0,0,0);

  {
    float3 noise_uv = get_value(_Goo_Size_Osci) * input_baked_pos;
    noise_uv -= get_time(_Goo_Speed_TimeBase) * _Goo_Speed.xyz + get_value(_Goo_Offset_Osci).xyz;

    EDITOR_BRANCH if(_Goo_Enabled) {
      float4 tap = tanoise3(noise_uv);
      ret.goo_noise = tap.w;
      noise_normal = normalize(tap.xyz * 2 - 1);
    }
  }

  float light_mask = vs_make_point_light_mask(input_early_world_position);

  init_mask_channels(
    ret.goo_noise, 
    float2(0,0), // @DelayedGooDripEvaluationInVS
    input_color, 
    input_baked_pos, 
    world_normal, 
    early_eye_vec,
    0, // @TouchReactivityInteractionMaskUnavailableInVS
    light_mask,
    input_vertex,
    float2(0,0),
    early_world_distance
  );

  init_masks_as_oscillators();
  
  TF_And_Material_Mix mix_info = calculate_tf_and_material_mix(input_baked_pos, world_normal, early_eye_vec);

  float droop = 0;
  float drip_mask = get_mask(_Goo_Drip_Mask);

  const int NUM_PHYSBONES = 4;
  Capsule_Physbone_Data cap_pb[NUM_PHYSBONES];

  {
    int i = 0;
    cap_pb[i].is_enabled  = _Physbone_1_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_1_Proximity_X, _Physbone_1_Proximity_Y, _Physbone_1_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_1_Mask);
  }
  {
    int i = 1;
    cap_pb[i].is_enabled  = _Physbone_2_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_2_Proximity_X, _Physbone_2_Proximity_Y, _Physbone_2_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_2_Mask);
  }
  {
    int i = 2;
    cap_pb[i].is_enabled  = _Physbone_3_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_3_Proximity_X, _Physbone_3_Proximity_Y, _Physbone_3_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_3_Mask);
  }
  {
    int i = 3;
    cap_pb[i].is_enabled  = _Physbone_4_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_4_Proximity_X, _Physbone_4_Proximity_Y, _Physbone_4_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_4_Mask);
  }

  // NOTE(valuef): Up until this point, local_vertex was canonical vertex position data. To save on
  // matrix multiplies during the drip & physics deformation calculations, we let world_position be
  // the canonical. This way we don't have to convert world_x/y/z and world gravity to local space.
  // :CanonicalVertexPositionSwitch
  // 2023-03-22
  float4 world_position = mul(unity_ObjectToWorld, ret.local_vertex);

  float3 world_x = float3(1,0,0);
  float3 world_y = float3(0,1,0);
  float3 world_z = float3(0,0,1);
  float3 world_gravity = normalize(_Goo_Drip_Gravity_Vector.xyz);

  float3 drag_force = float3(0,0,0);

  {for(int i = 0; i < NUM_PHYSBONES; i++) {
    EDITOR_BRANCH if(!cap_pb[i].is_enabled) {
      continue;
    }

    drag_force += (
      world_x * cap_pb[i].proximity.x + 
      world_y * cap_pb[i].proximity.y + 
      world_z * cap_pb[i].proximity.z
    ) * cap_pb[i].mask;
  }}

  EDITOR_BRANCH if(_Goo_Enabled && _Goo_Drip_Enabled) {	

    float physbone_drip_strength = _Physbone_Drip_DragForce_Strength;
    physbone_drip_strength *= get_mask(_Physbone_Drip_Mask);

    float3 drip_drag_force = drag_force * physbone_drip_strength;

    float3 total_force = world_gravity + drip_drag_force;

    float3 force_direction = Unity_SafeNormalize(total_force);

    float d = max(0, dot(force_direction, world_normal));

    float drip_start = get_value(_Goo_Drip_Start_Osci);
    float drip_end = get_value(_Goo_Drip_End_Osci);
    d = saturate((d - drip_start) / (drip_end - drip_start));	
    d *= drip_mask;

    EDITOR_BRANCH if(!_Goo_Drip_ApplyOnMaterialMix) {
      d *= mix_info.material_mix;
    }

    float physics_drip = d;

    float drip_amount = get_value(_Goo_Drip_Amount_Osci);
    d *= (1 - drip_amount) + ret.goo_noise * drip_amount;

    float drip_size = get_value(_Goo_Drip_Size_Osci);
    float3 force_offset = (world_gravity + drip_drag_force) * d * drip_size;

    world_position.xyz += force_offset;

    droop = d;
  }

  EDITOR_BRANCH if(_TF_Bulging_Enabled) {

    float bulge_edge_mask = 1-pow2(2 * mix_info.bulge_t - 1);

    bulge_edge_mask *= get_mask(_TF_Bulging_Mask);
    
    float bulge_size = _TF_Bulging_Size / 100;
    world_position.xyz += world_normal.xyz * bulge_edge_mask * bulge_size;
  }

  float goo_deformation_mask = get_mask(_Goo_Deformation_MeshNormal_Mask);

  EDITOR_BRANCH if(_Goo_Enabled && _Goo_Deformation_Enabled) {

    float weight = ret.goo_noise;

    float mesh_offset_min = get_value(_Goo_Deformation_MeshNormal_Offset_Min_Osci);
    float mesh_offset_max = get_value(_Goo_Deformation_MeshNormal_Offset_Max_Osci);
    float mesh_normal_t = lerp(mesh_offset_min, mesh_offset_max, weight);
    float3 mesh_normal_offset = world_normal.xyz * (mesh_normal_t / 100);

    float3 world_noise_normal = UnityObjectToWorldNormal(noise_normal);

    float procedural_normal_size = get_value(_Goo_Deformation_ProceduralNormal_Size_Osci);
    float3 procedural_normal_offset = weight * world_noise_normal * (procedural_normal_size / 100);

    float3 offset = 0.0.rrr;
    offset += mesh_normal_offset;
    offset += procedural_normal_offset;

    offset *= goo_deformation_mask;

    EDITOR_BRANCH if(!_Goo_Deformation_ApplyOnMaterialMix) {
      offset *= mix_info.material_mix;
    }

    world_position.xyz += offset;
  }

  // NOTE(valuef): The correct way of doing this is to do it after we do the drip toggle as that
  // one needs to work off of normal unmodified world normals, but we save a
  // UnityObjectToWorldNormal (4 dp3 1 rsq 1 mul) call if we do it before hand as only have to
  // calculate the world normal once.
  // 2022-08-16
  EDITOR_BRANCH if(_Goo_Enabled && _Goo_Deformation_Enabled) {
    const float DEG_TO_RAD = UNITY_PI / 180.0;

    float xy = lerp(_Goo_Normal_Offset_Min_Degrees, _Goo_Normal_Offset_Max_Degrees, ret.goo_noise);
    float yz = lerp(_Goo_Normal_Offset_Min_Degrees, _Goo_Normal_Offset_Max_Degrees, ret.goo_noise);

    xy *= goo_deformation_mask;
    yz *= goo_deformation_mask;

    EDITOR_BRANCH if(!_Goo_Deformation_ApplyOnMaterialMix) {
      xy *= mix_info.material_mix;
      yz *= mix_info.material_mix;
    }

    world_normal.xy = mul(rot2x2(xy * DEG_TO_RAD), world_normal.xy);
    world_normal.yz = mul(rot2x2(yz * DEG_TO_RAD), world_normal.yz);
  }

  // @DelayedGooDripEvaluationInVS
  MASK_CHANNELS.masks[MASK_GOO_DRIP] = float2(droop, 1-droop);

  {
    float3 force_offset = drag_force;
    force_offset *= _Physbone_Body_DragForce_Strength;
    force_offset *= get_mask(_Physbone_Body_Mask);

    EDITOR_BRANCH if(!_Physics_Body_ApplyOnMaterialMix) {
      force_offset *= mix_info.material_mix;
    }

    world_position.xyz += force_offset;
  }

  EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_TOTAL_DRAG_FORCE) {
    ret.debug.rgb = abs(drag_force) * .2;
    ret.debug.w = 1; 
  }
  
  ret.clip_vertex = UnityWorldToClipPos(world_position);

  ret.touch_reactivity_interaction = 0;

  bool do_touch_reactivity = apply_depth_distortion && _TouchReactivity_Mode == TOUCH_REACTIVITY_MODE_ENABLED;

  if(_TouchReactivity_Bypassed) {
    do_touch_reactivity = false;
  }

  EDITOR_BRANCH if(do_touch_reactivity) {

    // NOTE(valuef): we use ComputeGrabScreenPos in case the depth buffer is flipped.
    // 2022-08-16
    float4 screen_uv = ComputeGrabScreenPos(ret.clip_vertex);

    [branch] if(can_use_camera_depth()) {
      // NOTE(valeuf): should be the same as -UnityObjectToViewPos(input_vertex).z;
      // 2022-08-16
      float our_depth = screen_uv.w;
      float t = 0;
      {
        float sz = .005 * _TouchReactivity_Dispersion;
        float2 clip_sz = mul((float2x2)UNITY_MATRIX_P, sz.rr);

        // NOTE(valuef): Sampling pattern:
        //   .  
        //  . . 
        // . X .
        //  . . 
        //   .  
        // Picked this one over a simple box as we the +x -x +y -y poles that
        // have been offset by an extra 1 give us a small bit of extra visual
        // smoothness for free.
        // 2022-12-21
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(0,2));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(-1,1));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(1,1));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(-2,0));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(0,0));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(2,0));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(-1,-1));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(1,-1));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(0,-2));

        t /= 9.0;
      }

      EDITOR_BRANCH if(_ProximityDistortion_Enabled) {
        float near_plane = _ProjectionParams.y;
        float delta = our_depth - near_plane;

        // NOTE(valuef): start and end are swapped to save on a (1 - t) instruction
        // 2022-09-18
        float start = _ProximityDistortion_Depth_End;
        float end = _ProximityDistortion_Depth_Start;
        float close_t = saturate((delta - start) / (end - start));

        float proximity_distorion_mask = get_mask(_ProximityDistortion_Mask);
        close_t *= proximity_distorion_mask;

        t = saturate(t+close_t);
      }

      EDITOR_BRANCH if(!_TouchReactivity_And_PD_ApplyOnMaterialMix) {
        t *= mix_info.material_mix;
      }

      float touch_reactivity =  t * _TouchReactivity_Strength;

      touch_reactivity *= get_mask(_TouchReactivity_Mask);

      // NOTE(valuef): Touch reactivity in the VS won't have much use due to how late we evaluate it,
      // so we're marking it as unavailable in the VS and only available in the PS.
      // @TouchReactivityInteractionMaskUnavailableInVS
      // 2023-08-29
      ret.touch_reactivity_interaction = abs(touch_reactivity);

      world_position.xyz += world_normal * touch_reactivity;
    }

    ret.clip_vertex = UnityWorldToClipPos(world_position);
  }

  ret.grab_pos = ComputeGrabScreenPos(ret.clip_vertex);

  // NOTE(valuef): Propagate the canonical vertex information to local_vertex in case any macro in
  // a stack above us uses it.
  // 2023-03-22
  // :CanonicalVertexPositionSwitch
  ret.local_vertex = mul(unity_WorldToObject, world_position);

  ret.world_position = world_position;
  ret.world_normal = world_normal;

  ret.goo_drip = droop;
  ret.light_mask = light_mask;

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_NORMAL) {
      ret.debug.xyz = input_normal;
      ret.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_VS) {
      ret.debug.xyz = pow(get_mask(_DebugVisualisation_Mask),2.2);
      ret.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_TF_VS) {
      ret.debug.xyz = pow(mix_info.material_mix,2.2);
      ret.debug.w = 1;
    }
  #endif

  return ret;
}

const static float dither_pattern[8][8] = {
  { 0.0/64.0, 32.0/64.0,  8.0/64.0, 40.0/64.0, 02.0/64.0, 34.0/64.0, 10.0/64.0, 42.0/64.0}, 
  {48.0/64.0, 16.0/64.0, 56.0/64.0, 24.0/64.0, 50.0/64.0, 18.0/64.0, 58.0/64.0, 26.0/64.0}, 
  {12.0/64.0, 44.0/64.0, 04.0/64.0, 36.0/64.0, 14.0/64.0, 46.0/64.0, 06.0/64.0, 38.0/64.0}, 
  {60.0/64.0, 28.0/64.0, 52.0/64.0, 20.0/64.0, 62.0/64.0, 30.0/64.0, 54.0/64.0, 22.0/64.0}, 
  { 3.0/64.0, 35.0/64.0, 11.0/64.0, 43.0/64.0, 01.0/64.0, 33.0/64.0,  9.0/64.0, 41.0/64.0}, 
  {51.0/64.0, 19.0/64.0, 59.0/64.0, 27.0/64.0, 49.0/64.0, 17.0/64.0, 57.0/64.0, 25.0/64.0},
  {15.0/64.0, 47.0/64.0, 07.0/64.0, 39.0/64.0, 13.0/64.0, 45.0/64.0, 05.0/64.0, 37.0/64.0},
  {63.0/64.0, 31.0/64.0, 55.0/64.0, 23.0/64.0, 61.0/64.0, 29.0/64.0, 53.0/64.0, 21.0/64.0} 
};

Vertex_Output_Outline
vertex_outline(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;

  EDITOR_BRANCH if(!_Outline_Enabled) {
    return (Vertex_Output_Outline)0;
  }

  Vertex_Output_Outline o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Outline, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  float3 world_pos = dist.world_position + dist.world_normal * _Outline_Size;

  o.pos = UnityWorldToClipPos(world_pos);
  o.world_normal = dist.world_normal;

  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = world_pos - _WorldSpaceCameraPos.xyz;

  o.baked_pos = v.baked_pos;

  UNITY_TRANSFER_FOG(o, o.pos);

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    o.world_pos = world_pos;
  #endif

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  return o;
}

Vertex_Output_Early_Z
vertex_early_z(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;

  EDITOR_BRANCH if(!_EarlyZ_Enabled) {
    return (Vertex_Output_Early_Z)0;
  }

  Vertex_Output_Early_Z o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Early_Z, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  o.pos = dist.clip_vertex;

  return o;
}

Vertex_Output_Forward_Base 
vertex_base(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;
  IS_FORWARD_BASE = true;

  Vertex_Output_Forward_Base o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Forward_Base, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  o.baked_pos = v.baked_pos;

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  #if defined(NOT_BAKED)
    o.debug = dist.debug;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GRAB_POS_INTERPOLATOR_DISABLED)
    o.grab_pos = dist.grab_pos;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  o.pos = dist.clip_vertex;

  // NOTE(valuef): UNITY_TRANSFER_LIGHTING uses v.vertex so we want to reflect changes to it here.
  // 2022-08-18
  v.vertex = dist.local_vertex;

  o.tangentToWorldAndPackedData[0].w = dist.world_position.x;
  o.tangentToWorldAndPackedData[1].w = dist.world_position.y;
  o.tangentToWorldAndPackedData[2].w = dist.world_position.z;

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  // NOTE(valuef): We normalize the eye vec later on in the PS
  // 2023-11-09
  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = dist.world_position.xyz - _WorldSpaceCameraPos.xyz;

  float4 tangentWorld = float4(UnityObjectToWorldDir(v.tangent.xyz), v.tangent.w);

  float3x3 tangentToWorld = CreateTangentToWorldPerVertex(
    dist.world_normal, tangentWorld.xyz, tangentWorld.w
  );

  o.tangentToWorldAndPackedData[0].xyz = tangentToWorld[0];
  o.tangentToWorldAndPackedData[1].xyz = tangentToWorld[1];
  o.tangentToWorldAndPackedData[2].xyz = tangentToWorld[2];

  // NOTE(valuef): From what I can tell, the mesh would store its lightmap uv in UV2 if it had the
  // lightmap lighting baked in. However this shader is designed to be an avatar shader. You're not
  // really going to bake lightmap info into an avatar that can appear on any world, so we use UV2
  // for our own data.
  // This macro still is important for lighting (from the looks of it in the Unity cginc code), so
  // we still use it but we pass in float2(0,0) in cases where it might want the lightmap uvs.
  // @LightmapUVHack
  // 2023-09-13
  UNITY_TRANSFER_LIGHTING(o, float2(0,0)); 

  o.ambientOrLightmapUV = VertexGIForward(dist.world_position, dist.world_normal);

  UNITY_TRANSFER_FOG(o, o.pos);

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  return o;
}

float3
sample_emission_constant(
  float3 albedo,
  float albedo_emission_weight,
  Mask_Info albedo_emission_weight_mask,
  float3 added_emission_color,
  Mask_Info added_emission_color_mask
) {
  float3 emission = float3(0,0,0);

  emission += albedo.rgb * albedo_emission_weight * get_mask(albedo_emission_weight_mask);
  emission += added_emission_color * get_mask(added_emission_color_mask);

  return emission;
}

float3
sample_emission(
  const Texture_Info emission,
  float3 color
) {
  float3 col = sample_texture(emission);
  col *= color;
  return col;
}

float3
sample_detail_normal(
  const Texture_Info tex,
  float scale
) {
  // @InlinedTextureSampling
  if(!tex.is_set) {
    return float3(0,0,1);
  }

  float mask;
  float4 tap = sample_texture_separate_mask(tex, mask);

  float3 detail_normal = UnpackScaleNormal(tap, scale);

  detail_normal.xy *= mask;

  return detail_normal;
}

float3 
sample_normal(
  const Texture_Info tex,
  float scale
) {
  // @InlinedTextureSampling
  if(!tex.is_set) {
    return float3(0,0,1);
  }

  float mask;
  float4 tap = sample_texture_separate_mask(tex, mask);

  float3 normal = UnpackScaleNormal(tap, scale);
  normal.xy *= mask;

  return normal;
}

struct Metallic_Glossiness {
  float metallic;
  float glossiness;
};

Metallic_Glossiness
sample_metallic_glossiness(
  float constant_metal,
  Mask_Info constant_metal_mask,
  float constant_gloss,
  Mask_Info constant_gloss_mask
) {
  Metallic_Glossiness ret;

  ret.metallic = constant_metal * get_mask(constant_metal_mask);
  ret.glossiness = constant_gloss * get_mask(constant_gloss_mask);

  return ret;
}

float
sample_fresnel_opacity(
  bool enabled,
  float start,
  float end,
  float intensity,
  Mask_Info mask_info,
  float3 world_normal,
  float3 eye_vec
) {
  EDITOR_BRANCH if(!enabled) {
    return 1;
  }

  float fres = dot(world_normal, -eye_vec);

  fres = saturate((fres - start) / (end - start));
  fres = (1 - intensity) + fres * intensity;
  fres *= get_mask(mask_info);

  return fres;
}

float
sample_opacity(
  float opacity,
  Mask_Info mask_info
) {
  opacity *= get_mask(mask_info);
  return opacity;
}

// NOTE(valuef): 
// https://www.shadertoy.com/view/4djSRW
//
// Hash without Sine
// MIT License BEGIN
/* Copyright (c)2014 David Hoskins.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.*/

// Retrieved 2024-03-20
float hash12(float2 p) {
	float3 p3  = frac(float3(p.xyx) * .1031);
  p3 += dot(p3, p3.yzx + 33.33);
  return frac((p3.x + p3.y) * p3.z);
}

// Retrieved 2024-03-20
float2 hash22(float2 p) {
	float3 p3 = frac(float3(p.xyx) * float3(.1031, .1030, .0973));
  p3 += dot(p3, p3.yzx+33.33);
  return frac((p3.xx+p3.yz)*p3.zy);
}
// MIT License END


inline
void
pixel_init(
  float2  uv0,
  float2  uv1,
  float2  uv3,
  float2  uv4,
  float2  uv5,
  float2  uv6,
  float2  uv7,
  float3  pos_world,
  float3  baked_pos,
  float3  skinned_vertex,
  float   goo_noise,
  float   goo_drip,
  float4  vertex_colors,
  float3  world_normal,
  float3  eye_vec_unnormalized,
  float   touch_reactivity_interaction,
  float   light_mask,
  float4  tbn_vecs[3],
  float4  pixel_pos,
  bool    is_frontface,
  float4  grab_pos,
  out     TF_And_Material_Mix   out_mix_info,
  out     Fragment_Common_Data  out_s
) {

  // @EyeVecNormalization */
  float3 eye_vec;
  float world_distance_to_pixel;
  normalize_eye_vec(eye_vec_unnormalized, /* out */ eye_vec, /* out */ world_distance_to_pixel);
  out_s.eye_vec = eye_vec;

  init_time_bases();
  init_oscillators();

  init_uv_bus(uv0, uv1, uv3, uv4, uv5, uv6, uv7, pos_world, baked_pos, skinned_vertex);

  init_mask_channels(
    goo_noise, 
    float2(goo_drip, 1 - goo_drip),
    vertex_colors, 
    baked_pos, 
    world_normal, 
    eye_vec,
    touch_reactivity_interaction,
    light_mask,
    skinned_vertex,
    float2(1 - is_frontface, is_frontface),
    world_distance_to_pixel
  );

  init_masks_as_oscillators();
  
  EDITOR_BRANCH if(_DistanceDither_Enabled) {
    bool use_front_face_values = false;
    EDITOR_BRANCH if(_DistanceDither_Separate_Faces) {
      use_front_face_values = is_frontface;
    }
  
    // NOTE(valuef): start and end here are swapped on purpose as in the UI, the 'start' is the distance at which the dither starts
    // to eat away at the material, and end is where it's fully eaten it.
    // Here is's the other way around: start is the distance at which the material STARTS to show up, end is where it's fully shown.
    // 2023-11-10
    float start = use_front_face_values ? _DistanceDither_Front_Distance_End    : _DistanceDither_Back_Distance_End;
    float end   = use_front_face_values ? _DistanceDither_Front_Distance_Start  : _DistanceDither_Back_Distance_Start;
    float bias  = use_front_face_values ? _DistanceDither_Front_Bias            : _DistanceDither_Back_Bias;

    // NOTE(valuef): plus magic constant to make sure that any banding is invisible.
    // Kind of a hack but it works
    // 2023-11-10
    float near_plane = _ProjectionParams.y + 0.003;
    start += near_plane;
    end += near_plane;

    float t = (world_distance_to_pixel - start) / (end - start);

    float mask = get_mask(_DistanceDither_Mask);
    t += (1-mask);

    t = saturate(t);
    t -= bias;

    float dither = dither_pattern[uint(pixel_pos.y) % 8][uint(pixel_pos.x) % 8];
    if(dither >= t) {
      discard;
    }
  }

  // NOTE(valuef): We recalculate the tf value here so that we quanitize that value to the pixel
  // grid instead of per-vertex, which lets us get a sharper and more detailed tf animation.
  // 2022-10-20
  out_mix_info = calculate_tf_and_material_mix(baked_pos, world_normal, eye_vec);

  {
    float3 base = sample_texture(MainTex) * get_value(_Color_Osci).rgb;
    float3 mix  = sample_texture(Mix_MainTex) * get_value(_Mix_Color_Osci).rgb;

    float4 base_secondary = sample_texture(SecondaryTex) * get_value(_SecondaryTex_Color_Osci).rgba;
    float4 mix_secondary  = sample_texture(Mix_SecondaryTex) * get_value(_Mix_SecondaryTex_Color_Osci).rgba;

    float base_opacity  = sample_opacity(get_value(_Opacity_Osci).r, _Opacity_Mask);
    float mix_opacity   = sample_opacity(get_value(_Mix_Opacity_Osci).r, _Mix_Opacity_Mask);

    if(!IS_SHADOWCASTER) {

      [branch] if(can_use_camera_depth()) {
        float4 depth_uv = grab_pos;
        depth_uv.xy /= depth_uv.w;

        float depth_tap = SAMPLE_DEPTH(depth_uv);
        float view_depth = LinearEyeDepth(depth_tap);
        
        float our_depth = grab_pos.w;
        float depth_delta = view_depth - our_depth;

        float t;
        {
          // NOTE(valuef): start and end are swapped to save on a 1-t. 
          // 2022-09-21
          float start = _IntersectionModulation_Depth_End;
          float end = _IntersectionModulation_Depth_Start;
          t = saturate((depth_delta - start) / (end - start));
        }

        EDITOR_BRANCH if(_IntersectionModulation_Color_Enabled) {
          base.rgb            = lerp(base,            _IntersectionModulation_Color_Target.rgb, t);
          base_secondary.rgb  = lerp(base_secondary,  _IntersectionModulation_Color_Target.rgb, t);
        }

        EDITOR_BRANCH if(_IntersectionModulation_Opacity_Enabled) {
          base_opacity = saturate(base_opacity + t * _IntersectionModulation_Opacity_Amount);
        }

        EDITOR_BRANCH if(_IntersectionModulation_HSV_Enabled) {
          {
            base.rgb = rgb2hsv(base.rgb);

            base.r += _IntersectionModulation_HSV_Hue_Amount * t;
            base.g += _IntersectionModulation_HSV_Saturation_Amount * t;
            base.b += _IntersectionModulation_HSV_Value_Amount * t;

            base.rgb = hsv2rgb(base.rgb);
          }

          {
            base_secondary.rgb = rgb2hsv(base_secondary.rgb);

            base_secondary.r += _IntersectionModulation_HSV_Hue_Amount * t;
            base_secondary.g += _IntersectionModulation_HSV_Saturation_Amount * t;
            base_secondary.b += _IntersectionModulation_HSV_Value_Amount * t;

            base_secondary.rgb = hsv2rgb(base_secondary.rgb);
          }
        }
      }
    }

    apply_mat_mix(out_s.albedo.rgb,   mix,          base,         _Mix_Separate_MainTex, out_mix_info.material_mix.rrr);
    apply_mat_mix(out_s.albedo.a,     mix_opacity,  base_opacity, _Mix_Separate_Opacity, out_mix_info.material_mix);

    // NOTE(valuef): before we apply the secondary color texture.
    out_s.emissive_from_albedo_source = out_s.albedo.rgb;

    {
      float4 final_secondary;
      apply_mat_mix(final_secondary, mix_secondary, base_secondary, _Mix_Separate_SecondaryTex, out_mix_info.material_mix.rrrr);

      if(_SecondaryTex_BlendMode == 1) {
        out_s.albedo.rgb = lerp(out_s.albedo.rgb, final_secondary.rgb, final_secondary.a);
      }
      else {
        out_s.albedo.rgb += final_secondary;
      }
    }
  }

  out_s.glitter = float4(0,0,0,0);

  #if defined(VFGOO_ENABLE_GLITTER)
    if(IS_FORWARD_BASE || IS_FORWARD_ADD) {
      float2 uv_scroll_time = get_time(_Glitter_UV_Scroll_Speed_TimeBase);

      float2 base_uv = resolve_uv_bus(_Glitter_UVBus) * _Glitter_Density + uv_scroll_time * _Glitter_UV_Scroll_Speed;

      float tile_sq_dist = 9999;
      float2 tile_uv = float2(0,0);
      float2 tile_index = float2(0,0);
      float2 tile_rng = float2(0,0); 

      EDITOR_BRANCH if(_Glitter_Disorder > 0) {
        
        // NOTE(valuef): Without the unroll, the compiler makes the assumption
        // that frac(tile_rng) == 0 at every usage site. It's clearly incorrect
        // and somehow the unroll breaks this assumption.
        // So we keep this.
        // 2024-03-26
        [unroll] for(float xoff = -1; xoff <= 1; xoff++) {
          for(float yoff = -1; yoff <= 1; yoff++) {
            float2 tile_offset = float2(xoff, yoff);
            float2 tile_offset_rng = hash22(floor(base_uv) + tile_offset);

            float2 voronoi_factor = tile_offset_rng * _Glitter_Disorder;

            float2 final_uv = frac(base_uv) - tile_offset - voronoi_factor;

            float candidate_sq_dist = dot(final_uv, final_uv);

            if(tile_sq_dist > candidate_sq_dist) {
              tile_sq_dist = candidate_sq_dist;
              tile_uv = final_uv;
              tile_index = tile_offset + floor(base_uv);
              tile_rng = tile_offset_rng;
            }
          }
        }
      }
      else {
        tile_uv = frac(base_uv) - .5;
        tile_index = floor(base_uv);
        tile_rng = hash22(tile_index);
        tile_sq_dist = dot(tile_uv, tile_uv);
      }

      float rng = hash12(tile_index);

      float phase;
      {
        float blink_randomness = _Glitter_AutoBlink_Randomness * rng;
        float blink_time_offset = get_time(_Glitter_AutoBlink_Speed_TimeBase) * _Glitter_AutoBlink_Speed;

        float auto_phase = cos(blink_randomness + blink_time_offset);

        phase = auto_phase;

        EDITOR_BRANCH if(_Glitter_ManualBlink_Enabled) {
          float blink_manual_offset = get_value(_Glitter_ManualBlink_Offset_Osci);
          float blink_manual_randomness = _Glitter_ManualBlink_Offset_Randomness * rng;

          // NOTE(valuef): manual_phase needs to be large enough (in turn,
          // 'blink_manual_randomness' needs to be large ) so that when we do
          // the amplitude modulation with 'phase', we get enough aliasing in
          // the signal that the moire pattern of manual_phase created by the
          // relatively low sampling rate of our framerate re-creates the
          // randomness instead of a consistent pulsing.
          //
          // It's a weird way of doing this but can't think of anything else
          // that won't introduce some kind of regular pattern into the
          // blinking.
          //
          // We put manual blinking under a toggle so that people don't have to
          // think about these variables unless they want manual blink control
          // for real.
          // 2024-03-28
          float manual_phase = cos(blink_manual_randomness + blink_manual_offset);

          phase *= manual_phase;
        }
      
        phase = max(0, phase);
      }

      out_s.glitter = get_value(_Glitter_Color_Osci);
      out_s.glitter.rgb *= lerp(float3(1,1,1), out_s.albedo.rgb, get_value(_Glitter_Color_FromAlbedo_Osci).rrr);

      EDITOR_BRANCH if(_Glitter_Texture_Enabled) {
        if(is_Glitter_Texture_Map_set) {

          float2 uv = tile_uv;

          float2 size_minmax = get_value(_Glitter_Texture_Zoom_MinMax_Osci);
          float size = lerp(size_minmax.x, size_minmax.y, frac(rng + tile_rng.y));

          EDITOR_BRANCH if(_Glitter_Texture_Rotation_Random_Enabled || _Glitter_Texture_Rotation_Speed != 0) {
            float rotation = rng * UNITY_PI * 2 * _Glitter_Texture_Rotation_Random_Enabled;
            rotation += get_time(_Glitter_Texture_Rotation_Speed_TimeBase) * _Glitter_Texture_Rotation_Speed;

            uv = mul(rot2x2(rotation), uv);
          }

          uv *= size;
          uv += .5.rr;

          uv = uv * _Glitter_Texture_Map_Tiling + _Glitter_Texture_Map_Offset;

          // NOTE(valuef): We have discontinuities in the space-repeated UVs so we
          // resort to using the tiled base uv for derivatives. That alone does
          // help but in cases where we have A LOT of glitter that's shown, mip
          // transition artifacts become VERY obvious. So we combat this problem by
          // using a trilinear sampler to blend between mips.
          // 2024-03-21
          float4 tap = _Glitter_Texture_Map.SampleGrad(_SamplerTrilinearClamp, uv, ddx(base_uv), ddy(base_uv));

          out_s.glitter.rgb *= tap.rgb;

          EDITOR_BRANCH if(_Glitter_Texture_Map_AlphaIsMask) {
            out_s.glitter.a *= tap.a;
          }
        }
      }

      float2 circle_size_minmax = get_value(_Glitter_Size_MinMax_Osci).xy;
      float circle_size = lerp(circle_size_minmax.x, circle_size_minmax.y, frac(tile_rng.y - rng * 13));

      float dist = sqrt(tile_sq_dist);
      float circle = saturate((circle_size - dist) / fwidth(dist));

      EDITOR_BRANCH if(_Glitter_HSV_Enabled) {
        out_s.glitter.rgb = rgb2hsv(out_s.glitter.rgb);

        float2 hue_minmax = get_value(_Glitter_HSV_Hue_MinMax_Osci);
        float hue_random = lerp(hue_minmax.x, hue_minmax.y, (tile_rng.x + tile_rng.y + rng)/3);

        float2 sat_minmax = get_value(_Glitter_HSV_Saturation_MinMax_Osci);
        float sat_random = lerp(sat_minmax.x, sat_minmax.y, frac(tile_rng.x - tile_rng.y));

        float hue_shift_speed = get_time(_Glitter_HSV_Hue_Speed_TimeBase) * _Glitter_HSV_Hue_Speed;

        float hue_shift = get_value(_Glitter_HSV_Hue_Shift_Osci);

        out_s.glitter.x = frac(out_s.glitter.x + hue_random + hue_shift_speed + hue_shift);
        out_s.glitter.y = saturate(out_s.glitter.y + sat_random);

        out_s.glitter.rgb = hsv2rgb(out_s.glitter.rgb);
      }

      float amount_mask = 1;
      float amount = get_value(_Glitter_Amount_Osci);

      if(rng >= amount) {
        amount_mask = 0;
      }

      {
        float brightness = circle * phase * amount_mask;
        float2 brightness_minmax = get_value(_Glitter_Brightness_MinMax_Osci);
        brightness = max(0, brightness * (brightness_minmax.y - brightness_minmax.x) + brightness_minmax.x);
        out_s.glitter.a *= brightness;
      }

      {
        float mask = get_mask(_Glitter_Mask);
        out_s.glitter.a *= mask;
      }

      EDITOR_BRANCH if(_Glitter_AppearsOnMaterial != APPEARS_ON_MATERIAL_BOTH) {
        float appears_on = get_appears_on_mask(_Glitter_AppearsOnMaterial, out_mix_info.material_mix);
        out_s.glitter.a *= appears_on;
      }

      {
        float2 opacity_minmax = get_value(_Glitter_Opacity_MinMax_Osci);
        float opacity_random = lerp(opacity_minmax.x, opacity_minmax.y, frac(tile_rng.y - rng));
        out_s.glitter.a *= opacity_random;
      }
    }
  #endif
  
  EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_CUTOUT) {
    clip(out_s.albedo.a - get_value(_Cutoff_Osci) + out_s.glitter.a);
  }

  // NOTE(valuef): smoothness is 1 minus the square root of real roughness m.
  float metallic;
  {
    {
      Metallic_Glossiness base = sample_metallic_glossiness(
        _Metallic,
        _Metallic_Mask,
        _Glossiness,
        _Glossiness_Mask
      );

      Metallic_Glossiness mix = sample_metallic_glossiness(
        _Mix_Metallic,
        _Mix_Metallic_Mask,
        _Mix_Glossiness,
        _Mix_Glossiness_Mask
      );

      apply_mat_mix(metallic,         mix.metallic,    base.metallic,   _Mix_Separate_MetallicGlossiness, out_mix_info.material_mix);
      apply_mat_mix(out_s.smoothness, mix.glossiness,  base.glossiness, _Mix_Separate_MetallicGlossiness, out_mix_info.material_mix);
    }
  }

  out_s.diffColor = DiffuseAndSpecularFromMetallic(
    out_s.albedo, metallic, 
    /*out*/ out_s.specColor, 
    /*out*/ out_s.oneMinusReflectivity
  );

  {
    float3 tangent = tbn_vecs[0].xyz;
    float3 binormal = tbn_vecs[1].xyz;
    float3 normal = tbn_vecs[2].xyz;

    float3 seamless_tangent = normalize(cross(float3(0,-1,0), normal));
    // TODO : bitangent sign
    float3 seamless_binormal = cross(normal, seamless_tangent);

    #if UNITY_TANGENT_ORTHONORMALIZE
      normal = normalize(normal);

      // ortho-normalize Tangent
      tangent = normalize(tangent - normal * dot(tangent, normal));

      // recalculate Binormal
      half3 newB = cross(normal, tangent);
      binormal = newB * sign(dot(newB, binormal));
    #endif

    float3 normal_tangent;
    {
      float3 normal;
      {
        float3 base = sample_normal(BumpMap, get_value(_BumpScale_Osci).r);
        float3 mix = sample_normal(Mix_BumpMap, get_value(_Mix_BumpScale_Osci).r);

        apply_mat_mix(normal, mix, base, _Mix_Separate_BumpMap, out_mix_info.material_mix);

      }
  
      float3 detail;
      {
        float3 base = sample_detail_normal(DetailNormalMap, get_value(_DetailBumpScale_Osci).r);
        float3 mix = sample_detail_normal(Mix_DetailNormalMap, get_value(_Mix_DetailBumpScale_Osci).r);

        apply_mat_mix(detail, mix, base, _Mix_Separate_DetailNormalMap, out_mix_info.material_mix);
      }

      // NOTE(valuef): Technically it'd be a good idea to normalize both the normal and detail as apply_mat_mix will
      // perform a lerp between the base and mix, but from testing, it seems like there's no perceptible difference
      // between a normalized and non-normalized detail & normal textures during a blend with all (4 in total) detail
      // and normal textures set and a basic blend between them with some blur.
      // 2023-08-20

      // NOTE(valuef): RNM from https://blog.selfshadow.com/publications/blending-in-detail/
      // 2022-08-17
      normal.z += 1;
      detail.xy *= -1;
      normal_tangent = normal * dot(normal, detail) / normal.z - detail;
    }

    out_s.normalWorld = normalize(
      tangent * normal_tangent.x + 
      binormal * normal_tangent.y + 
      normal * normal_tangent.z
    );

    out_s.normal_world_seamless = normalize(
      seamless_tangent * normal_tangent.x + 
      seamless_binormal * normal_tangent.y + 
      normal * normal_tangent.z
    );
  }

  if(_GSAA_Enabled) {
    // NOTE(valuef): Valve's GSAA 
    // https://media.steampowered.com/apps/valve/2015/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf
    // pg. 43
    float3 normal = out_s.normalWorld;

    float3 nddx = ddx_fine(normal);
    float3 nddy = ddy_fine(normal);

    float geometric_roughness_term = pow(saturate(max(dot(nddx, nddx), dot(nddy, nddy))), .333);

    out_s.smoothness = min(out_s.smoothness, 1 - geometric_roughness_term);
  }

  out_s.posWorld = pos_world;

  if(!IS_SHADOWCASTER) {
    out_s.diffColor = PreMultiplyAlpha(
      out_s.diffColor, 
      out_s.albedo.a, 
      out_s.oneMinusReflectivity, 
      /*out*/ out_s.alpha
    );
  }
  else {
    out_s.alpha = 1;
  }
}

float
sample_occlusion(
  const Texture_Info tex,
  float strength
) {
  float occlusion = sample_texture(tex).g;
  if(tex.is_set || tex.mask.channel != 0) {
    // :LerpOneTo
    // NOTE(valuef): This is pretty much just a (occ * _OcclusionStrength) but the hinge of where
    // the curve rotates is (1,1) instead of (0,0)
    // 2023-04-28
    occlusion = (1.0 - strength) + occlusion * strength;
  }
  return occlusion;
}

const static float2 grabpass_blur_locations[21] = {
  float2(0.809017, 0.587785),
  float2(-0.309017, 0.951056),
  float2(-1, -0),
  float2(-0.309016, -0.951057),
  float2(0.809017, -0.587785),
  float2(0.618034, 1.902112),
  float2(-1.101794, 1.669146),
  float2(-1.991948, 0.179278),
  float2(-1.382124, -1.44559),
  float2(0.268468, -1.9819),
  float2(1.716898, -1.025798),
  float2(1.87247, 0.70275),
  float2(-0.927051, 2.853168),
  float2(-2.544144, 1.5897571),
  float2(-2.970804, -0.417519),
  float2(-2.00739, -2.229435),
  float2(-0.104697004, -2.998173),
  float2(1.8469859, -2.36403),
  float2(2.934444, -0.623733),
  float2(2.6488411, 1.408416),
  float2(1.123818, 2.7815518),
};

float3
do_hsv_postprocessing(
  float3 col
) {
  col = rgb2hsv(col);

  col.x = frac(col.x + get_value(_PostProcessHSV_Hue_Shift_Osci) + _PostProcessHSV_Hue_Speed * get_time(_PostProcessHSV_Hue_Speed_TimeBase));
  col.y = (col.y + get_value(_PostProcessHSV_Sat_Shift_Osci));
  col.z = (col.z + get_value(_PostProcessHSV_Value_Shift_Osci));

  col = hsv2rgb(col);

  return col;
}


float4
pixel_early_z(
  Vertex_Output_Early_Z i
) : SV_Target {

  EDITOR_BRANCH if(!_EarlyZ_Enabled) {
    discard;
  }

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  return float4(1,1,1,1);
}

float4 
pixel_outline(
  Vertex_Output_Outline i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {

  EDITOR_BRANCH if(!_Outline_Enabled) {
    discard;
  }

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  float4 unused_tangent_to_world[3] = {0.0.rrr,0.0.rrr,0.0.rrr,0.0.rrr};

  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
      i.world_pos,                    /* pos_world */
    #else
      float3(0,0,0),
    #endif

    i.baked_pos,                    /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif

    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                    /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                     /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.world_normal,                 /* world_normal */
    i.eye_vec_unnormalized.xyz,     /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction, /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                   /* light_mask */
    #else
      0,
    #endif

    unused_tangent_to_world,        /* tbn_vecs       @Unused */
    pixel_pos,                      /* pixel_pos */
    is_front_face,                  /* is_front_face  */
    1.0.rrrr,                       /* grab_pos       @Unused */
    mix_info,                       /* out_mix_info */
    s                               /* out_s        */
  );

  // TODO advanced outline colors like gradients, al etc?
  // TODO some kind of transparency/dither support in the future so we don't just cut off the outline?
  float3 color = _Outline_Color;

  float appears_on = get_appears_on_mask(_Outline_AppearsOnMaterial, mix_info.material_mix);
  clip(appears_on - .5);

  float mask = get_mask(_Outline_Mask);
  clip(mask - _Outline_Mask_Cutoff);

  UNITY_EXTRACT_FOG(i);
  UNITY_APPLY_FOG(_unity_fogCoord, color);

  #if defined(VFGOO_ENABLE_HSV_POSTPROCESSING)
    color.rgb = do_hsv_postprocessing(color.rgb);
  #endif

  return float4(color.rgb, 1);
}

float4 
pixel_base(
  Vertex_Output_Forward_Base i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {
  IS_FORWARD_BASE = true;

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
  
  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  // NOTE(valuef): Use any variables in s over the ones in i after this, including stuff like
  // world pos, material_mix etc
  // 2023-08-26
  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    IN_WORLDPOS(i),                         /* pos_world */
    i.baked_pos,                            /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif

    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                            /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                             /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.tangentToWorldAndPackedData[2].xyz,   /* world_normal */
    i.eye_vec_unnormalized.xyz,             /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction,         /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                           /* light_mask */
    #else
      0,
    #endif

    i.tangentToWorldAndPackedData,          /* tbn_vecs */
    pixel_pos,                              /* pixel_pos */
    is_front_face,                          /* is_front_face */

    #if !defined(OPT_GRAB_POS_INTERPOLATOR_DISABLED)
      i.grab_pos,                             /* grab_pos */
    #else
      float4(0,0,0,1),
    #endif

    mix_info,                               /* out_mix_info */
    s                                       /* out_s */
  );

  if(_BackfaceFill_Enabled && !is_front_face) {
    return _BackfaceFill_Color;
  }

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_PS) {
      i.debug.xyz = pow(get_mask(_DebugVisualisation_Mask),2.2);
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_TF_PS) {
      i.debug.xyz = pow(mix_info.material_mix,2.2);
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_UV) {
      i.debug.xy = resolve_uv_bus(_DebugVisualisation_UVBus);
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_UV2_CHANNEL) {
      i.debug.xyz = i.baked_pos.xyz;
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_SKINNED_VERTICES) {
      i.debug.xyz = i.skinned_vertex;
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_IS_CAMERA_DEPTH_TEXTURE_AVAILABLE) {
      i.debug.xyz = (is_depth_texture_available() ? 1 : 0).rrr;
      i.debug.w = 1;
    }
       
    EDITOR_BRANCH if(i.debug.w > 0) {
      return i.debug;
    }
  #endif


  EDITOR_BRANCH if(_FlipNormalsOnBackFacingTris) {
    if(!is_front_face) {
      s.normalWorld = -s.normalWorld;
    }
  }

  UnityLight mainLight = get_directional_light(s.posWorld);
  UNITY_LIGHT_ATTENUATION(atten, i, s.posWorld);

  float occlusion;
  {
    float base  = sample_occlusion(OcclusionMap, _OcclusionStrength);
    float mix   = sample_occlusion(Mix_OcclusionMap, _Mix_OcclusionStrength);

    apply_mat_mix(occlusion, mix, base, _Mix_Separate_Occlusion, mix_info.material_mix);
  }

  UnityGI gi = FragmentGI(s, s.eye_vec.xyz, occlusion, i.ambientOrLightmapUV, atten, mainLight, mix_info.material_mix);

  half4 c = BRDF1_Unity_PBS(
    s.diffColor, s.specColor, 
    s.oneMinusReflectivity, s.smoothness, 
    s.normalWorld, -s.eye_vec.xyz, 
    gi.light, gi.indirect,
    mix_info  /* mix_info */
  );

  float3 emissive = float3(0,0,0);
  {
    float3 emission1;
    {
      float3 base = sample_emission(EmissionMap,      get_value(_EmissionColor_Osci).rgb);
      float3 mix  = sample_emission(Mix_EmissionMap,  get_value(_Mix_EmissionColor_Osci).rgb);

      apply_mat_mix(emission1, mix, base, _Mix_Separate_Emission_1, mix_info.material_mix.rrr);
    }

    float3 emission2;
    {
      float3 base = sample_emission(EmissionMap2, get_value(_EmissionColor2_Osci).rgb);
      float3 mix = sample_emission(Mix_EmissionMap2, get_value(_Mix_EmissionColor2_Osci).rgb);

      apply_mat_mix(emission2, mix, base, _Mix_Separate_Emission_2, mix_info.material_mix.rrr);
    }

    float3 emission_constant;
    {
      float3 base = sample_emission_constant(
        s.emissive_from_albedo_source,
        get_value(_AlbedoEmissionWeight_Osci).r,
        _AlbedoEmissionWeight_Mask,
        get_value(_AddedEmissionColor_Osci).rgb,
        _AddedEmissionColor_Mask
      );

      float3 mix = sample_emission_constant(
        s.emissive_from_albedo_source,
        get_value(_Mix_AlbedoEmissionWeight_Osci).r,
        _Mix_AlbedoEmissionWeight_Mask,
        get_value(_Mix_AddedEmissionColor_Osci).rgb,
        _Mix_AddedEmissionColor_Mask
      );

      apply_mat_mix(emission_constant, mix, base, _Mix_Separate_Emission_Const, mix_info.material_mix.rrr);
    }

    emissive += emission1;
    emissive += emission2;
    emissive += emission_constant;
  }

  #if defined(LTCGI) 
  {
    float3 ltcgi_diff = 0;
    float3 ltcgi_spec = 0;
    float2 light_map_uv = float2(0,0);

    float ltcgi_total_spec_intensity;
    float ltcgi_total_diff_intensity;
    
    LTCGI_Contribution(
      s.posWorld,
      s.normalWorld,
      -s.eye_vec.xyz,
      1 - s.smoothness,
      light_map_uv,
      /* inout */ ltcgi_diff,
      /* inout */ ltcgi_spec,
      /* out */ ltcgi_total_spec_intensity,
      /* out */ ltcgi_total_diff_intensity
    );

    emissive += ltcgi_diff;
    emissive += ltcgi_spec;
  }
  #endif

  // TODO(valuef): To properly add the glitter on top of a faded out material, we need to do stuff in the following order:
  // 1. Normal light calculations
  // 2. Apply transparency.
  // 3. Apply glitter and the transparency of glitter.
  //
  // We can do this in the transparent rendering preset as the premultiplied alpha nature of it gives us enough control to
  // do this.
  // However, in fade, we do step 2 outside the shader via our blend mode.
  // Because of that, we can't really 'add' the glitter 'on top' of a transparent material in fade without also adding
  // black glitter, which is undesired.
  // So in a future breaking update, we should consider switching to a premul workflow and drop postmul support.
  // 2024-03-25
  //
  // NOTE(valuef): Sparkles don't 'emit' light, they reflect it. So fog should
  // affect them whereas emission shouldn't be affected by fog.
  // 2024-03-25
  #if defined(VFGOO_ENABLE_GLITTER)
    // NOTE(valuef): We've already done the alpha cutoff earlier on, so no need
    // to blend here or else we'll have color bleed. BUT we still need to apply
    // the mask here so the bleed is just going to be something we have to live
    // with.
    // 2024-03-25
    c.rgb += s.glitter.rgb * s.glitter.a;
  #endif

  UNITY_EXTRACT_FOG(i);
  UNITY_APPLY_FOG(_unity_fogCoord, c.rgb);

  EDITOR_BRANCH if(is_using_postmultiplied_alpha() || is_using_premultiplied_alpha()) {
    c.a = s.alpha;
  }
  else {
    c.a = 1.0;
  }

  c.rgb += emissive * c.a;

  #if defined(VFGOO_GRABPASS)
  {
    float3 view_normal = normalize(mul((float3x3)UNITY_MATRIX_IT_MV, s.normalWorld));
    view_normal.xy = Unity_SafeNormalize(view_normal.xy);

    float2 uv = i.grab_pos.xy;
    {
      {
        float t = _GrabPass_Distortion_Amount;
        t *= get_mask(_GrabPass_Distortion_Amount_Mask);

        uv += view_normal.xy * t;
      }

      uv /= i.grab_pos.w;

      {
        uv -= float2(.5, .5);
        uv *= _GrabPass_Zoom_Amount;
        uv += float2(.5, .5);
      }
    }

    float4 grab = _GrabPass.SampleLevel(_SamplerLinearMirror, uv, 0);

    EDITOR_BRANCH if(_GrabPass_Blur_Enabled) {
      float4 blurred = grab;

      float dispersion = _GrabPass_Blur_Dispersion;

      float size_x, size_y;
      _GrabPass.GetDimensions(size_x, size_y);
      for(uint i = 0; i < 21; ++i) {
        float2 offset = grabpass_blur_locations[i];
        float2 tap_uv = uv + (offset / float2(size_x,size_y)) * dispersion;
        float4 tap = _GrabPass.SampleLevel(_SamplerLinearMirror, tap_uv, 0);

        blurred += tap;
      }
      blurred /= 22;

      {
        float t = get_mask(_GrabPass_Blur_Weight_Mask);
        grab = lerp(grab, blurred, t);
      }
    }

    {
      float mask;
      float4 tint = sample_texture_separate_mask(GrabPass_Tint_Texture, mask);
      tint.rgb *= _GrabPass_Tint_Color.rgb;

      float3 tinted = grab.rgb * tint;

      float t = mask * get_mask(_GrabPass_Tint_Mask) * _GrabPass_Tint_Color.a;
      grab.rgb = lerp(grab.rgb, tinted.rgb, t);
    }

    EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT) {
      c.rgb += grab.rgb * (1-s.alpha);
    }
    else EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_FADE) {
      c.rgb = lerp(grab.rgb, c.rgb, s.alpha);
    }

    c.a = 1;
  }
  #endif

  #if defined(VFGOO_ENABLE_HSV_POSTPROCESSING)
    c.rgb = do_hsv_postprocessing(c.rgb);
  #endif

  return c;
}

Vertex_Output_Forward_Add 
vertex_add(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;
  IS_FORWARD_ADD = true;

  Vertex_Output_Forward_Add o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Forward_Add, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  o.baked_pos = v.baked_pos;

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  o.pos = dist.clip_vertex;

  // NOTE(valuef): TRANSFER_VERTEX_TO_FRAGMENT and UNITY_TRANSFER_LIGHTING uses v.vertex so we want
  // to reflect changes to it here.
  // 2022-08-18
  v.vertex = dist.local_vertex;

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = dist.world_position.xyz - _WorldSpaceCameraPos; 
  o.posWorld = dist.world_position.xyz;

  {
    float4 tangentWorld = float4(UnityObjectToWorldDir(v.tangent.xyz), v.tangent.w);

    float3x3 tangentToWorld = CreateTangentToWorldPerVertex(
      dist.world_normal, tangentWorld.xyz, tangentWorld.w
    );

    o.tangentToWorldAndLightDir[0].xyz = tangentToWorld[0];
    o.tangentToWorldAndLightDir[1].xyz = tangentToWorld[1];
    o.tangentToWorldAndLightDir[2].xyz = tangentToWorld[2];
  }

  // @LightmapUVHack
  UNITY_TRANSFER_LIGHTING(o, float2(0,0)); 

  {
    // NOTE(valuef): This is normalized in the pixel shader
    // 2022-09-18
    float3 lightDir = get_directional_light(dist.world_position.xyz).dir;

    o.tangentToWorldAndLightDir[0].w = lightDir.x;
    o.tangentToWorldAndLightDir[1].w = lightDir.y;
    o.tangentToWorldAndLightDir[2].w = lightDir.z;
  }

  UNITY_TRANSFER_FOG(o, o.pos);

  TRANSFER_VERTEX_TO_FRAGMENT(o);

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  return o;
}

float4
pixel_add(
  Vertex_Output_Forward_Add i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {

  IS_FORWARD_ADD = true;

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_TF_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_UV ||
       _DebugVisualisation_Type == DEBUG_VIS_UV2_CHANNEL ||
       _DebugVisualisation_Type == DEBUG_VIS_SKINNED_VERTICES
    ) {
      discard;
    }
  #endif

  if(_BackfaceFill_Enabled && !is_front_face) {
    discard;
  }

  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    i.posWorld,                         /* pos_world */
    i.baked_pos,                        /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif


    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                        /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                         /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.tangentToWorldAndLightDir[2].xyz, /* world_normal */
    i.eye_vec_unnormalized.xyz,         /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction,     /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                       /* light_mask */
    #else
      0,
    #endif

    i.tangentToWorldAndLightDir,        /* tbn_vecs */
    pixel_pos,                          /* pixel_pos */
    is_front_face,                      /* is_front_face */
    1.0.rrrr,                           /* grab_pos     @Unused*/
    mix_info,                           /* out_mix_info */
    s                                   /* out_s */
  );

  UNITY_LIGHT_ATTENUATION(atten, i, s.posWorld)

  half3 light_dir = half3(
    i.tangentToWorldAndLightDir[0].w, 
    i.tangentToWorldAndLightDir[1].w, 
    i.tangentToWorldAndLightDir[2].w
  );
  UnityLight light = AdditiveLight(light_dir, atten);

  UnityIndirect noIndirect = ZeroIndirect();

  half4 c = BRDF1_Unity_PBS(
    s.diffColor, s.specColor, 
    s.oneMinusReflectivity, s.smoothness, 
    s.normalWorld, -s.eye_vec, 
    light, noIndirect,
    mix_info  /* mix_info */
  );

  #if defined(VFGOO_ENABLE_GLITTER)
    c.rgb += s.glitter.rgb * s.glitter.a * light.color;
  #endif

  // fog towards black in additive pass
  UNITY_EXTRACT_FOG(i);
  UNITY_APPLY_FOG_COLOR(_unity_fogCoord, c.rgb, half4(0,0,0,0));

  EDITOR_BRANCH if(is_using_postmultiplied_alpha() || is_using_premultiplied_alpha()) {
    c.a = s.alpha;
  }
  else {
    c.a = 1.0;
  }

  #if defined(VFGOO_ENABLE_HSV_POSTPROCESSING)
    c.rgb = do_hsv_postprocessing(c.rgb);
  #endif

  return c;
}

Vertex_Output_Shadow_Caster
vertex_shadow_caster(
  Vertex_Input v
) {
  IS_SHADOWCASTER = true;
  IS_VERTEX_SHADER = true;

  Vertex_Output_Shadow_Caster o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Shadow_Caster, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  init_time_bases();
  init_oscillators();
  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    false                   /* apply depth distortion */
  );

  o.baked_pos = v.baked_pos;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  //TRANSFER_SHADOW_CASTER_NOPOS(o,o.pos)
  // NOTE(valuef): TRANSFER_SHADOW_CASTER_NOPOS expansion
  #if defined(SHADOWS_CUBE) && !defined(SHADOWS_CUBE_IN_DEPTH_TEX)
    o.vec = dist.world_position.xyz - _LightPositionRange.xyz; 
    o.pos = dist.clip_vertex;
  #else
    // NOTE(valuef): UnityClipSpaceShadowCasterPos expanstion
    float4 world_position = dist.world_position;
    if(unity_LightShadowBias.z != 0.0) {
      float3 wLight = normalize(get_directional_light(world_position).dir);

      // apply normal offset bias (inset position along the normal)
      // bias needs to be scaled by sine between normal and light direction
      // (http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/)
      //
      // unity_LightShadowBias.z contains user-specified normal offset amount
      // scaled by world space texel size.

      float shadowCos = dot(dist.world_normal, wLight);
      float shadowSine = sqrt(1-shadowCos*shadowCos);
      float normalBias = unity_LightShadowBias.z * shadowSine;

      world_position.xyz -= dist.world_normal * normalBias;
    }
    o.pos = mul(UNITY_MATRIX_VP, world_position);
    o.pos = UnityApplyLinearShadowBias(o.pos);
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    o.world_pos = dist.world_position;
  #endif

  o.world_normal = dist.world_normal;

  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = dist.world_position.xyz - _WorldSpaceCameraPos.xyz;

  return o;
}

#if defined(UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS)
  sampler3D _DitherMaskLOD;
#endif

float4
pixel_shadow_caster(
  Vertex_Output_Shadow_Caster i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {
  IS_SHADOWCASTER = true;

  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_TF_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_UV ||
       _DebugVisualisation_Type == DEBUG_VIS_UV2_CHANNEL ||
       _DebugVisualisation_Type == DEBUG_VIS_SKINNED_VERTICES
    ) {
      discard;
    }
  #endif

  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  float4 unused_tangent_to_world[3] = {0.0.rrr,0.0.rrr,0.0.rrr,0.0.rrr};
  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
      i.world_pos,                    /* pos_world */
    #else
      float3(0,0,0),
    #endif

    i.baked_pos,                    /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif

    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                    /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                     /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.world_normal,                 /* world_normal */
    i.eye_vec_unnormalized.xyz,     /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction, /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                   /* light_mask */
    #else
      0,
    #endif

    unused_tangent_to_world,        /* tbn_vecs       @Unused */
    pixel_pos,                      /* pixel_pos */
    is_front_face,                  /* is_front_face  */
    1.0.rrrr,                       /* grab_pos       @Unused */
    mix_info,                       /* out_mix_info */
    s                               /* out_s        */
  );

  float alpha = s.albedo.a;

  EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT || _RenderingMode == RENDERING_MODE_FADE) {

    EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT) {
      PreMultiplyAlpha(
        half3(0, 0, 0), 
        alpha, 
        s.oneMinusReflectivity, 
        /* out */ alpha
      );
    }

    #if defined(UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS)
      // Use dither mask for alpha blended shadows, based on pixel position xy
      // and alpha level. Our dither texture is 4x4x16.
      half alphaRef = tex3D(_DitherMaskLOD, float3(i.pos.xy*0.25,alpha*0.9375)).a;
      clip(alphaRef - 0.01);
    #else
      clip(alpha - _Cutoff);
    #endif
  }

  SHADOW_CASTER_FRAGMENT(i)
}


      ENDCG
    }

    Pass {
      Name "FORWARD_DELTA"
      Tags { "LightMode" = "ForwardAdd" }

      Blend [_SourceBlend] One
      ZWrite Off
      ZTest [_ZTest]

      // in additive pass fog should be black
      Fog { Color (0,0,0,0) } 

      CGPROGRAM
      #pragma vertex vertex_add
      #pragma fragment pixel_add

      

      #pragma target 5.0

      #pragma multi_compile_fwdadd_fullshadows
      #pragma multi_compile_fog
      #pragma skip_variants LIGHTMAP_ON DIRLIGHTMAP_COMBINED DYNAMICLIGHTMAP_ON SHADOWS_SHADOWMASK LIGHTMAP_SHADOW_MIXING 
      #pragma skip_variants VERTEXLIGHT_ON
      #pragma skip_variants LIGHTPROBE_SH
      /*SHADOWS_SCREEN SKIP*/

      
      #pragma shader_feature_local LTCGI

      #pragma shader_feature_local VFGOO_SHADOWCASTER_DISABLED

      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_1
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_2
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_3
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_4
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_5
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_6

      #pragma shader_feature_local VFGOO_ENABLE_MASK_SCROLL_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_SCROLL_2

      #pragma shader_feature_local VFGOO_ENABLE_MASK_TOUCH_REACTIVITY

      #pragma shader_feature_local VFGOO_ENABLE_MASK_POINT_LIGHTS

      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_4

      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_4
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_5
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_6
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_7
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_8

      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_4
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_5
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_6
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_7
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_8

      #pragma shader_feature_local VFGOO_ENABLE_MASK_DISTANCE_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_DISTANCE_2

      #pragma shader_feature_local VFGOO_ENABLE_MASK_MASSBLEND_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_MASSBLEND_2

      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_4
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_5
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_6
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_7
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_8

      #pragma shader_feature_local VFGOO_ENABLE_GLITTER
      #pragma shader_feature_local VFGOO_ENABLE_HSV_POSTPROCESSING
    

      /*VARIANT GEN MARKER*/
      #define VFGOO_ENABLE_MASK_TEXTURE_2
#define VFGOO_ENABLE_MASK_TEXTURE_3
#define OPT_GOO_NOISE_INTERPOLATOR_DISABLED
#define OPT_GOO_DRIP_INTERPOLATOR_DISABLED
#define OPT_UV1_INTERPOLATOR_DISABLED
#define OPT_UV3_INTERPOLATOR_DISABLED
#define OPT_UV4_INTERPOLATOR_DISABLED
#define OPT_UV5_INTERPOLATOR_DISABLED
#define OPT_UV6_INTERPOLATOR_DISABLED
#define OPT_UV7_INTERPOLATOR_DISABLED
#define OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED
#define OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED
#define OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED
#define OPT_GRAB_POS_INTERPOLATOR_DISABLED
// ValueFactory Goo Shader for VRChat avatars.
// Please see TERMS_OF_USE.txt
// (c) 2024 ValueFactory shader.gay
// https://shader.gay

// This file conatins Unity PBS shader code licensed under the following license:
//   Copyright (c) 2016 Unity Technologies
// 
//   Permission is hereby granted, free of charge, to any person obtaining a copy of
//   this software and associated documentation files (the "Software"), to deal in
//   the Software without restriction, including without limitation the rights to
//   use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
//   of the Software, and to permit persons to whom the Software is furnished to do
//   so, subject to the following conditions:
//   
//   The above copyright notice and this permission notice shall be included in all
//   copies or substantial portions of the Software.
//   
//   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
//   FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
//   COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
//   IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#define _Temp 0.00000000
#define _BakedAtVersion 7.00000000
#define _RenderingMode 0.00000000
#define is_TANoiseTex_set true
#define _CullMode 0.00000000
#define _SourceBlend 1.00000000
#define _DestinationBlend 0.00000000
#define _ZTest 4.00000000
#define _ZWrite 1.00000000
#define _Stencil_Ref 0.00000000
#define _Stencil_ReadMask 255.00000000
#define _Stencil_WriteMask 255.00000000
#define _Stencil_Comparison 8.00000000
#define _Stencil_Pass 0.00000000
#define _Stencil_Fail 0.00000000
#define _Stencil_ZFail 0.00000000
#define _Stencil_ComparisonBack 8.00000000
#define _Stencil_PassBack 0.00000000
#define _Stencil_FailBack 0.00000000
#define _Stencil_ZFailBack 0.00000000
#define _Stencil_ComparisonFront 8.00000000
#define _Stencil_PassFront 0.00000000
#define _Stencil_FailFront 0.00000000
#define _Stencil_ZFailFront 0.00000000
#define _OutlineStencil_Ref 0.00000000
#define _OutlineStencil_ReadMask 255.00000000
#define _OutlineStencil_WriteMask 255.00000000
#define _OutlineStencil_Comparison 8.00000000
#define _OutlineStencil_Pass 0.00000000
#define _OutlineStencil_Fail 0.00000000
#define _OutlineStencil_ZFail 0.00000000
#define _OutlineStencil_ComparisonBack 8.00000000
#define _OutlineStencil_PassBack 0.00000000
#define _OutlineStencil_FailBack 0.00000000
#define _OutlineStencil_ZFailBack 0.00000000
#define _OutlineStencil_ComparisonFront 8.00000000
#define _OutlineStencil_PassFront 0.00000000
#define _OutlineStencil_FailFront 0.00000000
#define _OutlineStencil_ZFailFront 0.00000000
#define is_MaskChannel_1_Texture_set false
#define _MaskChannel_1_Texture_UVBus 0.00000000
#define _MaskChannel_1_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_1_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_1_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_1_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_1_Strength_PreInversion 1.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_1_Strength_PostInversion 1.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_2_Texture_set false
#define _MaskChannel_2_Texture_UVBus 0.00000000
#define _MaskChannel_2_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_2_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_2_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_2_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_2_Strength_PreInversion 1.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_2_Strength_PostInversion 1.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_3_Texture_set false
#define _MaskChannel_3_Texture_UVBus 0.00000000
#define _MaskChannel_3_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_3_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_3_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_3_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_3_Strength_PreInversion 1.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_3_Strength_PostInversion 1.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_4_Texture_set false
#define _MaskChannel_4_Texture_UVBus 0.00000000
#define _MaskChannel_4_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_4_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_4_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_4_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_4_Strength_PreInversion 1.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_4_Strength_PostInversion 1.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_5_Texture_set false
#define _MaskChannel_5_Texture_UVBus 0.00000000
#define _MaskChannel_5_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_5_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_5_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_5_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_5_Strength_PreInversion 1.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_5_Strength_PostInversion 1.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_6_Texture_set false
#define _MaskChannel_6_Texture_UVBus 0.00000000
#define _MaskChannel_6_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_6_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_6_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_6_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_6_Strength_PreInversion 1.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_6_Strength_PostInversion 1.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_7_Texture_set false
#define _MaskChannel_7_Texture_UVBus 0.00000000
#define _MaskChannel_7_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_7_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_7_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_7_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_7_Strength_PreInversion 1.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_7_Strength_PostInversion 1.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_8_Texture_set false
#define _MaskChannel_8_Texture_UVBus 0.00000000
#define _MaskChannel_8_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_8_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_8_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_8_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_8_Strength_PreInversion 1.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_8_Strength_PostInversion 1.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MainTex_set false
#define _MainTex_AlphaIsMask 0.00000000
#define _MainTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MainTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MainTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MainTex_ScrollSpeed_TimeBase 0.00000000
#define _MainTex_UVBus 0.00000000
#define _MainTex_MaskChannel 0.00000000
#define _MainTex_MaskChannel_Inverted 0.00000000
#define _MainTex_MaskChannel_Strength 1.00000000
#define _MainTex_MaskChannel_Contrast 1.00000000
#define _MainTex_MaskChannel_Brightness 0.00000000
#define _Color float4(0.00000000, 0.04817181, 0.52099570, 1.00000000)
#define _Color_Osci_Enabled 0.00000000
#define _Color_Osci_Slot 0.00000000
#define _Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define is_Mix_MainTex_set false
#define _Mix_MainTex_AlphaIsMask 0.00000000
#define _Mix_MainTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_MainTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_MainTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_MainTex_ScrollSpeed_TimeBase 0.00000000
#define _Mix_MainTex_UVBus 0.00000000
#define _Mix_MainTex_MaskChannel 0.00000000
#define _Mix_MainTex_MaskChannel_Inverted 0.00000000
#define _Mix_MainTex_MaskChannel_Strength 1.00000000
#define _Mix_MainTex_MaskChannel_Contrast 1.00000000
#define _Mix_MainTex_MaskChannel_Brightness 0.00000000
#define _Mix_Color float4(0.52099570, 0.10224170, 0.52099570, 1.00000000)
#define _Mix_Color_Osci_Enabled 0.00000000
#define _Mix_Color_Osci_Slot 0.00000000
#define _Mix_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Separate_MainTex 1.00000000
#define is_SecondaryTex_set false
#define _SecondaryTex_AlphaIsMask 0.00000000
#define _SecondaryTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_ScrollSpeed_TimeBase 0.00000000
#define _SecondaryTex_UVBus 0.00000000
#define _SecondaryTex_MaskChannel 0.00000000
#define _SecondaryTex_MaskChannel_Inverted 0.00000000
#define _SecondaryTex_MaskChannel_Strength 1.00000000
#define _SecondaryTex_MaskChannel_Contrast 1.00000000
#define _SecondaryTex_MaskChannel_Brightness 0.00000000
#define _SecondaryTex_BlendMode 0.00000000
#define _SecondaryTex_Color float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_Color_Osci_Enabled 0.00000000
#define _SecondaryTex_Color_Osci_Slot 0.00000000
#define _SecondaryTex_Color_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_Color_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define is_Mix_SecondaryTex_set false
#define _Mix_SecondaryTex_AlphaIsMask 0.00000000
#define _Mix_SecondaryTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_ScrollSpeed_TimeBase 0.00000000
#define _Mix_SecondaryTex_UVBus 0.00000000
#define _Mix_SecondaryTex_MaskChannel 0.00000000
#define _Mix_SecondaryTex_MaskChannel_Inverted 0.00000000
#define _Mix_SecondaryTex_MaskChannel_Strength 1.00000000
#define _Mix_SecondaryTex_MaskChannel_Contrast 1.00000000
#define _Mix_SecondaryTex_MaskChannel_Brightness 0.00000000
#define _Mix_SecondaryTex_BlendMode 0.00000000
#define _Mix_SecondaryTex_Color float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_Color_Osci_Enabled 0.00000000
#define _Mix_SecondaryTex_Color_Osci_Slot 0.00000000
#define _Mix_SecondaryTex_Color_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_Color_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_Separate_SecondaryTex 0.00000000
#define _Opacity 0.98000000
#define _Opacity_MaskChannel 0.00000000
#define _Opacity_MaskChannel_Inverted 0.00000000
#define _Opacity_MaskChannel_Strength 1.00000000
#define _Opacity_MaskChannel_Contrast 1.00000000
#define _Opacity_MaskChannel_Brightness 0.00000000
#define _Opacity_Osci_Enabled 0.00000000
#define _Opacity_Osci_Slot 0.00000000
#define _Opacity_Osci_Value_Start 1.00000000
#define _Opacity_Osci_Value_End 1.00000000
#define _Mix_Opacity 1.00000000
#define _Mix_Opacity_MaskChannel 0.00000000
#define _Mix_Opacity_MaskChannel_Inverted 0.00000000
#define _Mix_Opacity_MaskChannel_Strength 1.00000000
#define _Mix_Opacity_MaskChannel_Contrast 1.00000000
#define _Mix_Opacity_MaskChannel_Brightness 0.00000000
#define _Mix_Opacity_Osci_Enabled 0.00000000
#define _Mix_Opacity_Osci_Slot 0.00000000
#define _Mix_Opacity_Osci_Value_Start 1.00000000
#define _Mix_Opacity_Osci_Value_End 1.00000000
#define _Mix_Separate_Opacity 0.00000000
#define is_OcclusionMap_set false
#define _OcclusionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _OcclusionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _OcclusionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _OcclusionMap_ScrollSpeed_TimeBase 0.00000000
#define _OcclusionMap_UVBus 0.00000000
#define _OcclusionMap_MaskChannel 0.00000000
#define _OcclusionMap_MaskChannel_Inverted 0.00000000
#define _OcclusionMap_MaskChannel_Strength 1.00000000
#define _OcclusionMap_MaskChannel_Contrast 1.00000000
#define _OcclusionMap_MaskChannel_Brightness 0.00000000
#define _OcclusionStrength 1.00000000
#define is_Mix_OcclusionMap_set false
#define _Mix_OcclusionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_OcclusionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_OcclusionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_OcclusionMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_OcclusionMap_UVBus 0.00000000
#define _Mix_OcclusionMap_MaskChannel 0.00000000
#define _Mix_OcclusionMap_MaskChannel_Inverted 0.00000000
#define _Mix_OcclusionMap_MaskChannel_Strength 1.00000000
#define _Mix_OcclusionMap_MaskChannel_Contrast 1.00000000
#define _Mix_OcclusionMap_MaskChannel_Brightness 0.00000000
#define _Mix_OcclusionStrength 1.00000000
#define _Mix_Separate_Occlusion 0.00000000
#define is_BumpMap_set false
#define _BumpMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _BumpMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _BumpMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _BumpMap_ScrollSpeed_TimeBase 0.00000000
#define _BumpMap_UVBus 0.00000000
#define _BumpMap_MaskChannel 0.00000000
#define _BumpMap_MaskChannel_Inverted 0.00000000
#define _BumpMap_MaskChannel_Strength 1.00000000
#define _BumpMap_MaskChannel_Contrast 1.00000000
#define _BumpMap_MaskChannel_Brightness 0.00000000
#define _BumpScale 1.00000000
#define _BumpScale_Osci_Enabled 0.00000000
#define _BumpScale_Osci_Slot 0.00000000
#define _BumpScale_Osci_Value_Start 1.00000000
#define _BumpScale_Osci_Value_End 1.00000000
#define is_Mix_BumpMap_set false
#define _Mix_BumpMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_BumpMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_BumpMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_BumpMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_BumpMap_UVBus 0.00000000
#define _Mix_BumpMap_MaskChannel 0.00000000
#define _Mix_BumpMap_MaskChannel_Inverted 0.00000000
#define _Mix_BumpMap_MaskChannel_Strength 1.00000000
#define _Mix_BumpMap_MaskChannel_Contrast 1.00000000
#define _Mix_BumpMap_MaskChannel_Brightness 0.00000000
#define _Mix_BumpScale 1.00000000
#define _Mix_BumpScale_Osci_Enabled 0.00000000
#define _Mix_BumpScale_Osci_Slot 0.00000000
#define _Mix_BumpScale_Osci_Value_Start 1.00000000
#define _Mix_BumpScale_Osci_Value_End 1.00000000
#define _Mix_Separate_BumpMap 0.00000000
#define is_DetailNormalMap_set false
#define _DetailNormalMap_Tiling float4(3.20000000, 3.20000000, 0.00000000, 0.00000000)
#define _DetailNormalMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _DetailNormalMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _DetailNormalMap_ScrollSpeed_TimeBase 0.00000000
#define _DetailNormalMap_UVBus 0.00000000
#define _DetailNormalMap_MaskChannel 0.00000000
#define _DetailNormalMap_MaskChannel_Inverted 0.00000000
#define _DetailNormalMap_MaskChannel_Strength 1.00000000
#define _DetailNormalMap_MaskChannel_Contrast 1.00000000
#define _DetailNormalMap_MaskChannel_Brightness 0.00000000
#define _DetailBumpScale 1.00000000
#define _DetailBumpScale_Osci_Enabled 0.00000000
#define _DetailBumpScale_Osci_Slot 0.00000000
#define _DetailBumpScale_Osci_Value_Start 1.00000000
#define _DetailBumpScale_Osci_Value_End 1.00000000
#define is_Mix_DetailNormalMap_set false
#define _Mix_DetailNormalMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_DetailNormalMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_DetailNormalMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_DetailNormalMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_DetailNormalMap_UVBus 0.00000000
#define _Mix_DetailNormalMap_MaskChannel 0.00000000
#define _Mix_DetailNormalMap_MaskChannel_Inverted 0.00000000
#define _Mix_DetailNormalMap_MaskChannel_Strength 1.00000000
#define _Mix_DetailNormalMap_MaskChannel_Contrast 1.00000000
#define _Mix_DetailNormalMap_MaskChannel_Brightness 0.00000000
#define _Mix_DetailBumpScale 1.00000000
#define _Mix_DetailBumpScale_Osci_Enabled 0.00000000
#define _Mix_DetailBumpScale_Osci_Slot 0.00000000
#define _Mix_DetailBumpScale_Osci_Value_Start 1.00000000
#define _Mix_DetailBumpScale_Osci_Value_End 1.00000000
#define _Mix_Separate_DetailNormalMap 0.00000000
#define is_EmissionMap_set false
#define _EmissionMap_AlphaIsMask 0.00000000
#define _EmissionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _EmissionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap_ScrollSpeed_TimeBase 0.00000000
#define _EmissionMap_UVBus 0.00000000
#define _EmissionMap_MaskChannel 0.00000000
#define _EmissionMap_MaskChannel_Inverted 0.00000000
#define _EmissionMap_MaskChannel_Strength 1.00000000
#define _EmissionMap_MaskChannel_Contrast 1.00000000
#define _EmissionMap_MaskChannel_Brightness 0.00000000
#define _EmissionColor float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _EmissionColor_Osci_Enabled 0.00000000
#define _EmissionColor_Osci_Slot 0.00000000
#define _EmissionColor_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _EmissionColor_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define is_Mix_EmissionMap_set false
#define _Mix_EmissionMap_AlphaIsMask 0.00000000
#define _Mix_EmissionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_EmissionMap_UVBus 0.00000000
#define _Mix_EmissionMap_MaskChannel 0.00000000
#define _Mix_EmissionMap_MaskChannel_Inverted 0.00000000
#define _Mix_EmissionMap_MaskChannel_Strength 1.00000000
#define _Mix_EmissionMap_MaskChannel_Contrast 1.00000000
#define _Mix_EmissionMap_MaskChannel_Brightness 0.00000000
#define _Mix_EmissionColor float4(0.00000000, 1.35320800, 5.65685400, 1.00000000)
#define _Mix_EmissionColor_Osci_Enabled 0.00000000
#define _Mix_EmissionColor_Osci_Slot 0.00000000
#define _Mix_EmissionColor_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_EmissionColor_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Separate_Emission_1 0.00000000
#define is_EmissionMap2_set false
#define _EmissionMap2_AlphaIsMask 0.00000000
#define _EmissionMap2_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _EmissionMap2_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap2_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap2_ScrollSpeed_TimeBase 0.00000000
#define _EmissionMap2_UVBus 0.00000000
#define _EmissionMap2_MaskChannel 0.00000000
#define _EmissionMap2_MaskChannel_Inverted 0.00000000
#define _EmissionMap2_MaskChannel_Strength 1.00000000
#define _EmissionMap2_MaskChannel_Contrast 1.00000000
#define _EmissionMap2_MaskChannel_Brightness 0.00000000
#define _EmissionColor2 float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _EmissionColor2_Osci_Enabled 0.00000000
#define _EmissionColor2_Osci_Slot 0.00000000
#define _EmissionColor2_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _EmissionColor2_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define is_Mix_EmissionMap2_set false
#define _Mix_EmissionMap2_AlphaIsMask 0.00000000
#define _Mix_EmissionMap2_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap2_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap2_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap2_ScrollSpeed_TimeBase 0.00000000
#define _Mix_EmissionMap2_UVBus 0.00000000
#define _Mix_EmissionMap2_MaskChannel 0.00000000
#define _Mix_EmissionMap2_MaskChannel_Inverted 0.00000000
#define _Mix_EmissionMap2_MaskChannel_Strength 1.00000000
#define _Mix_EmissionMap2_MaskChannel_Contrast 1.00000000
#define _Mix_EmissionMap2_MaskChannel_Brightness 0.00000000
#define _Mix_EmissionColor2 float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_EmissionColor2_Osci_Enabled 0.00000000
#define _Mix_EmissionColor2_Osci_Slot 0.00000000
#define _Mix_EmissionColor2_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_EmissionColor2_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Separate_Emission_2 0.00000000
#define is_Matcap_1_Texture_set false
#define _Matcap_1_Texture_AlphaIsMask 0.00000000
#define _Matcap_1_Texture_MaskChannel 0.00000000
#define _Matcap_1_Texture_MaskChannel_Inverted 0.00000000
#define _Matcap_1_Texture_MaskChannel_Strength 1.00000000
#define _Matcap_1_Texture_MaskChannel_Contrast 1.00000000
#define _Matcap_1_Texture_MaskChannel_Brightness 0.00000000
#define _Matcap_1_Color float4(0.13687000, 0.13550940, 0.13550940, 1.00000000)
#define _Matcap_1_Color_Osci_Enabled 0.00000000
#define _Matcap_1_Color_Osci_Slot 0.00000000
#define _Matcap_1_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_1_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_1_Lighting_Enabled 1.00000000
#define _Matcap_1_Size 0.43000000
#define is_Mix_Matcap_1_Texture_set false
#define _Mix_Matcap_1_Texture_AlphaIsMask 0.00000000
#define _Mix_Matcap_1_Texture_MaskChannel 1.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Inverted 0.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Strength 1.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Contrast 1.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Brightness 0.00000000
#define _Mix_Matcap_1_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_1_Color_Osci_Enabled 0.00000000
#define _Mix_Matcap_1_Color_Osci_Slot 0.00000000
#define _Mix_Matcap_1_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_1_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_1_Lighting_Enabled 1.00000000
#define _Mix_Matcap_1_Size 0.00000000
#define _Mix_Separate_Matcap_1 0.00000000
#define is_Matcap_2_Texture_set false
#define _Matcap_2_Texture_AlphaIsMask 0.00000000
#define _Matcap_2_Texture_MaskChannel 0.00000000
#define _Matcap_2_Texture_MaskChannel_Inverted 0.00000000
#define _Matcap_2_Texture_MaskChannel_Strength 1.00000000
#define _Matcap_2_Texture_MaskChannel_Contrast 1.00000000
#define _Matcap_2_Texture_MaskChannel_Brightness 0.00000000
#define _Matcap_2_Color float4(0.13687000, 0.13281220, 0.13281220, 1.00000000)
#define _Matcap_2_Color_Osci_Enabled 0.00000000
#define _Matcap_2_Color_Osci_Slot 0.00000000
#define _Matcap_2_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_2_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_2_Lighting_Enabled 1.00000000
#define _Matcap_2_Size 0.43000000
#define is_Mix_Matcap_2_Texture_set false
#define _Mix_Matcap_2_Texture_AlphaIsMask 0.00000000
#define _Mix_Matcap_2_Texture_MaskChannel 0.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Inverted 0.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Strength 1.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Contrast 1.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Brightness 0.00000000
#define _Mix_Matcap_2_Color float4(0.03864443, 0.03864443, 0.03864443, 1.00000000)
#define _Mix_Matcap_2_Color_Osci_Enabled 0.00000000
#define _Mix_Matcap_2_Color_Osci_Slot 0.00000000
#define _Mix_Matcap_2_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_2_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_2_Lighting_Enabled 1.00000000
#define _Mix_Matcap_2_Size 0.00000000
#define _Mix_Separate_Matcap_2 0.00000000
#define is_Matcap_3_Texture_set false
#define _Matcap_3_Texture_AlphaIsMask 0.00000000
#define _Matcap_3_Texture_MaskChannel 0.00000000
#define _Matcap_3_Texture_MaskChannel_Inverted 0.00000000
#define _Matcap_3_Texture_MaskChannel_Strength 1.00000000
#define _Matcap_3_Texture_MaskChannel_Contrast 1.00000000
#define _Matcap_3_Texture_MaskChannel_Brightness 0.00000000
#define _Matcap_3_Color float4(0.15792650, 0.15320800, 0.15320800, 1.00000000)
#define _Matcap_3_Color_Osci_Enabled 0.00000000
#define _Matcap_3_Color_Osci_Slot 0.00000000
#define _Matcap_3_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_3_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_3_Lighting_Enabled 1.00000000
#define _Matcap_3_Size 0.43000000
#define is_Mix_Matcap_3_Texture_set false
#define _Mix_Matcap_3_Texture_AlphaIsMask 0.00000000
#define _Mix_Matcap_3_Texture_MaskChannel 5.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Inverted 0.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Strength 1.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Contrast 1.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Brightness 0.00000000
#define _Mix_Matcap_3_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_3_Color_Osci_Enabled 0.00000000
#define _Mix_Matcap_3_Color_Osci_Slot 0.00000000
#define _Mix_Matcap_3_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_3_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_3_Lighting_Enabled 1.00000000
#define _Mix_Matcap_3_Size 0.00000000
#define _Mix_Separate_Matcap_3 0.00000000
#define _AlbedoEmissionWeight 0.00000000
#define _AlbedoEmissionWeight_MaskChannel 0.00000000
#define _AlbedoEmissionWeight_MaskChannel_Inverted 0.00000000
#define _AlbedoEmissionWeight_MaskChannel_Strength 1.00000000
#define _AlbedoEmissionWeight_MaskChannel_Contrast 1.00000000
#define _AlbedoEmissionWeight_MaskChannel_Brightness 0.00000000
#define _AlbedoEmissionWeight_Osci_Enabled 0.00000000
#define _AlbedoEmissionWeight_Osci_Slot 0.00000000
#define _AlbedoEmissionWeight_Osci_Value_Start 0.00000000
#define _AlbedoEmissionWeight_Osci_Value_End 0.00000000
#define _AddedEmissionColor float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _AddedEmissionColor_MaskChannel 0.00000000
#define _AddedEmissionColor_MaskChannel_Inverted 0.00000000
#define _AddedEmissionColor_MaskChannel_Strength 1.00000000
#define _AddedEmissionColor_MaskChannel_Contrast 1.00000000
#define _AddedEmissionColor_MaskChannel_Brightness 0.00000000
#define _AddedEmissionColor_Osci_Enabled 0.00000000
#define _AddedEmissionColor_Osci_Slot 0.00000000
#define _AddedEmissionColor_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _AddedEmissionColor_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Mix_AlbedoEmissionWeight 0.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel 0.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Inverted 0.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Strength 1.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Contrast 1.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Brightness 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Enabled 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Slot 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Value_Start 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Value_End 0.00000000
#define _Mix_AddedEmissionColor float4(0.00000000, 1.35320800, 5.65685400, 1.00000000)
#define _Mix_AddedEmissionColor_MaskChannel 0.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Inverted 0.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Strength 1.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Contrast 1.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Brightness 0.00000000
#define _Mix_AddedEmissionColor_Osci_Enabled 0.00000000
#define _Mix_AddedEmissionColor_Osci_Slot 0.00000000
#define _Mix_AddedEmissionColor_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Mix_AddedEmissionColor_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Mix_Separate_Emission_Const 0.00000000
#define _Glossiness 1.00000000
#define _Glossiness_MaskChannel 0.00000000
#define _Glossiness_MaskChannel_Inverted 0.00000000
#define _Glossiness_MaskChannel_Strength 1.00000000
#define _Glossiness_MaskChannel_Contrast 1.00000000
#define _Glossiness_MaskChannel_Brightness 0.00000000
#define _Metallic 0.00000000
#define _Metallic_MaskChannel 0.00000000
#define _Metallic_MaskChannel_Inverted 0.00000000
#define _Metallic_MaskChannel_Strength 1.00000000
#define _Metallic_MaskChannel_Contrast 1.00000000
#define _Metallic_MaskChannel_Brightness 0.00000000
#define _Mix_Glossiness 1.00000000
#define _Mix_Glossiness_MaskChannel 9.00000000
#define _Mix_Glossiness_MaskChannel_Inverted 0.00000000
#define _Mix_Glossiness_MaskChannel_Strength 1.00000000
#define _Mix_Glossiness_MaskChannel_Contrast 1.00000000
#define _Mix_Glossiness_MaskChannel_Brightness 0.00000000
#define _Mix_Metallic 0.00000000
#define _Mix_Metallic_MaskChannel 9.00000000
#define _Mix_Metallic_MaskChannel_Inverted 0.00000000
#define _Mix_Metallic_MaskChannel_Strength 1.00000000
#define _Mix_Metallic_MaskChannel_Contrast 1.00000000
#define _Mix_Metallic_MaskChannel_Brightness 0.00000000
#define _Mix_Separate_MetallicGlossiness 0.00000000
#define _GSAA_Enabled 1.00000000
#define _Goo_Enabled 0.00000000
#define _Goo_Size 7.50000000
#define _Goo_Size_Osci_Enabled 0.00000000
#define _Goo_Size_Osci_Slot 0.00000000
#define _Goo_Size_Osci_Value_Start 7.50000000
#define _Goo_Size_Osci_Value_End 7.50000000
#define _Goo_Speed float4(0.00000000, 0.50000000, 0.50000000, 0.00000000)
#define _Goo_Speed_TimeBase 0.00000000
#define _Goo_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Goo_Offset_Osci_Enabled 0.00000000
#define _Goo_Offset_Osci_Slot 0.00000000
#define _Goo_Offset_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Goo_Offset_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Goo_Normal_Offset_Min_Degrees -10.00000000
#define _Goo_Normal_Offset_Max_Degrees 10.00000000
#define _Goo_Deformation_Enabled 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Enabled 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Slot 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_Start 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_End 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Enabled 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Slot 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_Start 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_End 0.00000000
#define _Goo_Deformation_ProceduralNormal_Size 1.50000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Enabled 0.00000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Slot 0.00000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Value_Start 1.50000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Value_End 1.50000000
#define _Goo_Deformation_ApplyOnMaterialMix 0.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel 0.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Inverted 0.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Strength 1.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Contrast 1.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Brightness 0.00000000
#define _Goo_Drip_Enabled 0.00000000
#define _Goo_Drip_Size 0.20000000
#define _Goo_Drip_Size_Osci_Enabled 0.00000000
#define _Goo_Drip_Size_Osci_Slot 0.00000000
#define _Goo_Drip_Size_Osci_Value_Start 0.20000000
#define _Goo_Drip_Size_Osci_Value_End 0.20000000
#define _Goo_Drip_Start 0.60000000
#define _Goo_Drip_Start_Osci_Enabled 0.00000000
#define _Goo_Drip_Start_Osci_Slot 0.00000000
#define _Goo_Drip_Start_Osci_Value_Start 0.60000000
#define _Goo_Drip_Start_Osci_Value_End 0.60000000
#define _Goo_Drip_End 1.00000000
#define _Goo_Drip_End_Osci_Enabled 0.00000000
#define _Goo_Drip_End_Osci_Slot 0.00000000
#define _Goo_Drip_End_Osci_Value_Start 1.00000000
#define _Goo_Drip_End_Osci_Value_End 1.00000000
#define _Goo_Drip_Amount 1.00000000
#define _Goo_Drip_Amount_Osci_Enabled 0.00000000
#define _Goo_Drip_Amount_Osci_Slot 0.00000000
#define _Goo_Drip_Amount_Osci_Value_Start 1.00000000
#define _Goo_Drip_Amount_Osci_Value_End 1.00000000
#define _Goo_Drip_MaskChannel 0.00000000
#define _Goo_Drip_MaskChannel_Inverted 0.00000000
#define _Goo_Drip_MaskChannel_Strength 1.00000000
#define _Goo_Drip_MaskChannel_Contrast 1.00000000
#define _Goo_Drip_MaskChannel_Brightness 0.00000000
#define _Goo_Drip_ApplyOnMaterialMix 0.00000000
#define _Goo_Drip_Gravity_Vector float4(0.00000000, -1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_1_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_1_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Flip 0.00000000
#define _CapsuleMask_1_Radius 0.12500000
#define _CapsuleMask_1_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_1_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_1_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_1_Height 0.25000000
#define _CapsuleMask_1_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Height_Osci_Slot 0.00000000
#define _CapsuleMask_1_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_1_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_1_Strength_PreInversion 1.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_1_Strength_PostInversion 1.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_2_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_2_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_2_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Flip 0.00000000
#define _CapsuleMask_2_Radius 0.12500000
#define _CapsuleMask_2_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_2_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_2_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_2_Height 0.25000000
#define _CapsuleMask_2_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Height_Osci_Slot 0.00000000
#define _CapsuleMask_2_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_2_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_2_Strength_PreInversion 1.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_2_Strength_PostInversion 1.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_3_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_3_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_3_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Flip 0.00000000
#define _CapsuleMask_3_Radius 0.12500000
#define _CapsuleMask_3_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_3_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_3_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_3_Height 0.25000000
#define _CapsuleMask_3_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Height_Osci_Slot 0.00000000
#define _CapsuleMask_3_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_3_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_3_Strength_PreInversion 1.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_3_Strength_PostInversion 1.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_4_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_4_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_4_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Flip 0.00000000
#define _CapsuleMask_4_Radius 0.12500000
#define _CapsuleMask_4_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_4_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_4_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_4_Height 0.25000000
#define _CapsuleMask_4_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Height_Osci_Slot 0.00000000
#define _CapsuleMask_4_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_4_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_4_Strength_PreInversion 1.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_4_Strength_PostInversion 1.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_5_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_5_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_5_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Flip 0.00000000
#define _CapsuleMask_5_Radius 0.12500000
#define _CapsuleMask_5_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_5_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_5_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_5_Height 0.25000000
#define _CapsuleMask_5_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Height_Osci_Slot 0.00000000
#define _CapsuleMask_5_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_5_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_5_Strength_PreInversion 1.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_5_Strength_PostInversion 1.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_6_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_6_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_6_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Flip 0.00000000
#define _CapsuleMask_6_Radius 0.12500000
#define _CapsuleMask_6_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_6_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_6_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_6_Height 0.25000000
#define _CapsuleMask_6_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Height_Osci_Slot 0.00000000
#define _CapsuleMask_6_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_6_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_6_Strength_PreInversion 1.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_6_Strength_PostInversion 1.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_7_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_7_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_7_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Flip 0.00000000
#define _CapsuleMask_7_Radius 0.12500000
#define _CapsuleMask_7_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_7_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_7_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_7_Height 0.25000000
#define _CapsuleMask_7_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Height_Osci_Slot 0.00000000
#define _CapsuleMask_7_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_7_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_7_Strength_PreInversion 1.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_7_Strength_PostInversion 1.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_8_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_8_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_8_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Flip 0.00000000
#define _CapsuleMask_8_Radius 0.12500000
#define _CapsuleMask_8_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_8_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_8_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_8_Height 0.25000000
#define _CapsuleMask_8_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Height_Osci_Slot 0.00000000
#define _CapsuleMask_8_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_8_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_8_Strength_PreInversion 1.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_8_Strength_PostInversion 1.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Value_End 1.00000000
#define _Physbone_1_Enabled 0.00000000
#define _Physbone_1_MaskChannel 0.00000000
#define _Physbone_1_MaskChannel_Inverted 0.00000000
#define _Physbone_1_MaskChannel_Strength 1.00000000
#define _Physbone_1_MaskChannel_Contrast 1.00000000
#define _Physbone_1_MaskChannel_Brightness 0.00000000
#define _Physbone_1_Proximity_X 0.00000000
#define _Physbone_1_Proximity_Y 0.00000000
#define _Physbone_1_Proximity_Z 0.00000000
#define _Physbone_2_Enabled 0.00000000
#define _Physbone_2_MaskChannel 0.00000000
#define _Physbone_2_MaskChannel_Inverted 0.00000000
#define _Physbone_2_MaskChannel_Strength 1.00000000
#define _Physbone_2_MaskChannel_Contrast 1.00000000
#define _Physbone_2_MaskChannel_Brightness 0.00000000
#define _Physbone_2_Proximity_X 0.00000000
#define _Physbone_2_Proximity_Y 0.00000000
#define _Physbone_2_Proximity_Z 0.00000000
#define _Physbone_3_Enabled 0.00000000
#define _Physbone_3_MaskChannel 0.00000000
#define _Physbone_3_MaskChannel_Inverted 0.00000000
#define _Physbone_3_MaskChannel_Strength 1.00000000
#define _Physbone_3_MaskChannel_Contrast 1.00000000
#define _Physbone_3_MaskChannel_Brightness 0.00000000
#define _Physbone_3_Proximity_X 0.00000000
#define _Physbone_3_Proximity_Y 0.00000000
#define _Physbone_3_Proximity_Z 0.00000000
#define _Physbone_4_Enabled 0.00000000
#define _Physbone_4_MaskChannel 0.00000000
#define _Physbone_4_MaskChannel_Inverted 0.00000000
#define _Physbone_4_MaskChannel_Strength 1.00000000
#define _Physbone_4_MaskChannel_Contrast 1.00000000
#define _Physbone_4_MaskChannel_Brightness 0.00000000
#define _Physbone_4_Proximity_X 0.00000000
#define _Physbone_4_Proximity_Y 0.00000000
#define _Physbone_4_Proximity_Z 0.00000000
#define _Physics_Body_ApplyOnMaterialMix 0.00000000
#define _Physbone_Drip_DragForce_Strength 4.00000000
#define _Physbone_Drip_MaskChannel 0.00000000
#define _Physbone_Drip_MaskChannel_Inverted 0.00000000
#define _Physbone_Drip_MaskChannel_Strength 1.00000000
#define _Physbone_Drip_MaskChannel_Contrast 1.00000000
#define _Physbone_Drip_MaskChannel_Brightness 0.00000000
#define _Physbone_Body_DragForce_Strength 0.05000000
#define _Physbone_Body_MaskChannel 0.00000000
#define _Physbone_Body_MaskChannel_Inverted 0.00000000
#define _Physbone_Body_MaskChannel_Strength 1.00000000
#define _Physbone_Body_MaskChannel_Contrast 1.00000000
#define _Physbone_Body_MaskChannel_Brightness 0.00000000
#define _TF_Enabled 1.00000000
#define _TF_Manual_MaskChannel 0.00000000
#define _TF_Manual_MaskChannel_Inverted 0.00000000
#define _TF_Manual_MaskChannel_Strength 1.00000000
#define _TF_Manual_MaskChannel_Contrast 1.00000000
#define _TF_Manual_MaskChannel_Brightness 0.00000000
#define _TF_Manual_Osci_Enabled 0.00000000
#define _TF_Manual_Osci_Slot 0.00000000
#define _TF_Manual_Osci_Value_Start 0.00000000
#define _TF_Manual_Osci_Value_End 0.00000000
#define _TF_ManualBuiltin_BlendMode 0.00000000
#define _DebugVisualisation_Type 0.00000000
#define _DebugVisualisation_MaskChannel 9.00000000
#define _DebugVisualisation_MaskChannel_Inverted 0.00000000
#define _DebugVisualisation_MaskChannel_Strength 1.00000000
#define _DebugVisualisation_MaskChannel_Contrast 1.00000000
#define _DebugVisualisation_MaskChannel_Brightness 0.00000000
#define _DebugVisualisation_UVBus 0.00000000
#define _TF_Bulging_Enabled 0.00000000
#define _TF_Bulging_MaskChannel 0.00000000
#define _TF_Bulging_MaskChannel_Inverted 0.00000000
#define _TF_Bulging_MaskChannel_Strength 1.00000000
#define _TF_Bulging_MaskChannel_Contrast 1.00000000
#define _TF_Bulging_MaskChannel_Brightness 0.00000000
#define _TF_Bulging_Size 5.00000000
#define _TF_Animation_Bulging_Offset 0.00000000
#define _FakeCubemap_Enabled 0.00000000
#define _FakeCubemap_Blend 1.00000000
#define is_FakeCubemap_Texture_set false
#define _FakeCubemap_Exposure 1.00000000
#define _FakeCubemap_Tint2 float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _FakeCubemap_AppearsOnMaterial 0.00000000
#define _World_ReflectionProbe_Tint float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Specular_Tint float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _TouchReactivity_Mode 0.00000000
#define _TouchReactivity_Strength 0.03500000
#define _TouchReactivity_MaskChannel 0.00000000
#define _TouchReactivity_MaskChannel_Inverted 0.00000000
#define _TouchReactivity_MaskChannel_Strength 1.00000000
#define _TouchReactivity_MaskChannel_Contrast 1.00000000
#define _TouchReactivity_MaskChannel_Brightness 0.00000000
#define _TouchReactivity_And_PD_ApplyOnMaterialMix 0.00000000
#define _TouchReactivity_Remap_End 0.10000000
#define _TouchReactivity_Bypassed 0.00000000
#define _TouchReactivity_SafeMode4000 0.00000000
#define _TouchReactivity_Dispersion 1.00000000
#define _ProximityDistortion_Enabled 0.00000000
#define _ProximityDistortion_MaskChannel 0.00000000
#define _ProximityDistortion_MaskChannel_Inverted 0.00000000
#define _ProximityDistortion_MaskChannel_Strength 1.00000000
#define _ProximityDistortion_MaskChannel_Contrast 1.00000000
#define _ProximityDistortion_MaskChannel_Brightness 0.00000000
#define _ProximityDistortion_Depth_Start 0.05000000
#define _ProximityDistortion_Depth_End 0.22500000
#define _TF_Mode 3.00000000
#define is_TF_AnimationMap_set false
#define _TF_AnimationMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _TF_AnimationMap_Scale float4(6.00000000, 6.00000000, 6.00000000, 0.00000000)
#define _TF_AnimationMap_Mip 3.00000000
#define _TF_AnimationMap_UseUVBus 1.00000000
#define _TF_AnimationMap_UVBus 0.00000000
float _TF_Time;
#define _TF_Time_Osci_Enabled 0.00000000
#define _TF_Time_Osci_Slot 0.00000000
#define _TF_Time_Osci_Value_Start 0.00000000
#define _TF_Time_Osci_Value_End 0.00000000
#define _TF_Visualisation_Enabled 0.00000000
#define _TF_Visualisation_Speed 1.00000000
#define _TF_Animation_Blur_PS 0.09339190
#define _TF_Animation_Blur_VS 0.16535040
#define _TF_Animation_Radial_Radius 0.25461320
#define _TF_Animation_Radial_Origin float4(0.00000000, 0.86484320, 0.16653480, 0.00000000)
#define _TF_Animation_Radial_LegacyNoise_Enabled 0.00000000
#define _TF_Animation_CenterOut_Invert 0.00000000
#define _GlossyReflections_Enabled 1.00000000
#define _SpecularHightlights_Enabled 1.00000000
#define _IndirectLighting_Amount 1.00000000
#define _LightMix_Sensitivity 0.50000000
#define _LightMix_Sensitivity_Osci_Enabled 0.00000000
#define _LightMix_Sensitivity_Osci_Slot 0.00000000
#define _LightMix_Sensitivity_Osci_Value_Start 0.50000000
#define _LightMix_Sensitivity_Osci_Value_End 0.50000000
#define _IntersectionModulation_HSV_Enabled 0.00000000
#define _IntersectionModulation_HSV_Hue_Amount 0.50000000
#define _IntersectionModulation_HSV_Saturation_Amount 0.00000000
#define _IntersectionModulation_HSV_Value_Amount 0.00000000
#define _IntersectionModulation_Color_Enabled 0.00000000
#define _IntersectionModulation_Color_Target float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _IntersectionModulation_Opacity_Enabled 0.00000000
#define _IntersectionModulation_Opacity_Amount 1.00000000
#define _IntersectionModulation_Depth_Start 0.00000000
#define _IntersectionModulation_Depth_End 0.20000000
#define _NormalOffset_Amount 0.00000000
#define _UVBus_1_Source 0.00000000
#define _UVBus_1_VertexChannel_Channel 0.00000000
#define _UVBus_1_WorldLocation_XComponent 0.00000000
#define _UVBus_1_WorldLocation_YComponent 2.00000000
#define _UVBus_1_BakedVertex_XComponent 0.00000000
#define _UVBus_1_BakedVertex_YComponent 2.00000000
#define _UVBus_1_SkinnedVertex_XComponent 0.00000000
#define _UVBus_1_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_1_Distortion_Texture_set false
#define _UVBus_1_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_1_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_1_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_1_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_1_Distortion_Texture_Strength 0.10000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_1_Distortion_Texture_UVBus 0.00000000
#define _UVBus_2_Source 0.00000000
#define _UVBus_2_VertexChannel_Channel 0.00000000
#define _UVBus_2_WorldLocation_XComponent 0.00000000
#define _UVBus_2_WorldLocation_YComponent 2.00000000
#define _UVBus_2_BakedVertex_XComponent 0.00000000
#define _UVBus_2_BakedVertex_YComponent 2.00000000
#define _UVBus_2_SkinnedVertex_XComponent 0.00000000
#define _UVBus_2_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_2_Distortion_Texture_set false
#define _UVBus_2_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_2_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_2_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_2_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_2_Distortion_Texture_Strength 0.10000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_2_Distortion_Texture_UVBus 0.00000000
#define _UVBus_3_Source 0.00000000
#define _UVBus_3_VertexChannel_Channel 0.00000000
#define _UVBus_3_WorldLocation_XComponent 0.00000000
#define _UVBus_3_WorldLocation_YComponent 2.00000000
#define _UVBus_3_BakedVertex_XComponent 0.00000000
#define _UVBus_3_BakedVertex_YComponent 2.00000000
#define _UVBus_3_SkinnedVertex_XComponent 0.00000000
#define _UVBus_3_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_3_Distortion_Texture_set false
#define _UVBus_3_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_3_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_3_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_3_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_3_Distortion_Texture_Strength 0.10000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_3_Distortion_Texture_UVBus 0.00000000
#define _UVBus_4_Source 0.00000000
#define _UVBus_4_VertexChannel_Channel 0.00000000
#define _UVBus_4_WorldLocation_XComponent 0.00000000
#define _UVBus_4_WorldLocation_YComponent 2.00000000
#define _UVBus_4_BakedVertex_XComponent 0.00000000
#define _UVBus_4_BakedVertex_YComponent 2.00000000
#define _UVBus_4_SkinnedVertex_XComponent 0.00000000
#define _UVBus_4_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_4_Distortion_Texture_set false
#define _UVBus_4_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_4_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_4_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_4_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_4_Distortion_Texture_Strength 0.10000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_4_Distortion_Texture_UVBus 0.00000000
#define _UVBus_5_Source 0.00000000
#define _UVBus_5_VertexChannel_Channel 0.00000000
#define _UVBus_5_WorldLocation_XComponent 0.00000000
#define _UVBus_5_WorldLocation_YComponent 2.00000000
#define _UVBus_5_BakedVertex_XComponent 0.00000000
#define _UVBus_5_BakedVertex_YComponent 2.00000000
#define _UVBus_5_SkinnedVertex_XComponent 0.00000000
#define _UVBus_5_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_5_Distortion_Texture_set false
#define _UVBus_5_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_5_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_5_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_5_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_5_Distortion_Texture_Strength 0.10000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_5_Distortion_Texture_UVBus 0.00000000
#define _UVBus_6_Source 0.00000000
#define _UVBus_6_VertexChannel_Channel 0.00000000
#define _UVBus_6_WorldLocation_XComponent 0.00000000
#define _UVBus_6_WorldLocation_YComponent 2.00000000
#define _UVBus_6_BakedVertex_XComponent 0.00000000
#define _UVBus_6_BakedVertex_YComponent 2.00000000
#define _UVBus_6_SkinnedVertex_XComponent 0.00000000
#define _UVBus_6_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_6_Distortion_Texture_set false
#define _UVBus_6_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_6_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_6_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_6_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_6_Distortion_Texture_Strength 0.10000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_6_Distortion_Texture_UVBus 0.00000000
#define _RimMask_1_Start 1.00000000
#define _RimMask_1_Start_Osci_Enabled 0.00000000
#define _RimMask_1_Start_Osci_Slot 0.00000000
#define _RimMask_1_Start_Osci_Value_Start 1.00000000
#define _RimMask_1_Start_Osci_Value_End 1.00000000
#define _RimMask_1_End 0.50000000
#define _RimMask_1_End_Osci_Enabled 0.00000000
#define _RimMask_1_End_Osci_Slot 0.00000000
#define _RimMask_1_End_Osci_Value_Start 0.50000000
#define _RimMask_1_End_Osci_Value_End 0.50000000
#define _RimMask_1_Strength_PreInversion 1.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_1_Strength_PostInversion 1.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_1_Smoothing 1.00000000
#define _RimMask_1_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_1_Smoothing_Osci_Slot 0.00000000
#define _RimMask_1_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_1_Smoothing_Osci_Value_End 1.00000000
#define _RimMask_2_Start 1.00000000
#define _RimMask_2_Start_Osci_Enabled 0.00000000
#define _RimMask_2_Start_Osci_Slot 0.00000000
#define _RimMask_2_Start_Osci_Value_Start 1.00000000
#define _RimMask_2_Start_Osci_Value_End 1.00000000
#define _RimMask_2_End 0.50000000
#define _RimMask_2_End_Osci_Enabled 0.00000000
#define _RimMask_2_End_Osci_Slot 0.00000000
#define _RimMask_2_End_Osci_Value_Start 0.50000000
#define _RimMask_2_End_Osci_Value_End 0.50000000
#define _RimMask_2_Strength_PreInversion 1.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_2_Strength_PostInversion 1.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_2_Smoothing 1.00000000
#define _RimMask_2_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_2_Smoothing_Osci_Slot 0.00000000
#define _RimMask_2_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_2_Smoothing_Osci_Value_End 1.00000000
#define _RimMask_3_Start 1.00000000
#define _RimMask_3_Start_Osci_Enabled 0.00000000
#define _RimMask_3_Start_Osci_Slot 0.00000000
#define _RimMask_3_Start_Osci_Value_Start 1.00000000
#define _RimMask_3_Start_Osci_Value_End 1.00000000
#define _RimMask_3_End 0.50000000
#define _RimMask_3_End_Osci_Enabled 0.00000000
#define _RimMask_3_End_Osci_Slot 0.00000000
#define _RimMask_3_End_Osci_Value_Start 0.50000000
#define _RimMask_3_End_Osci_Value_End 0.50000000
#define _RimMask_3_Strength_PreInversion 1.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_3_Strength_PostInversion 1.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_3_Smoothing 1.00000000
#define _RimMask_3_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_3_Smoothing_Osci_Slot 0.00000000
#define _RimMask_3_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_3_Smoothing_Osci_Value_End 1.00000000
#define _RimMask_4_Start 1.00000000
#define _RimMask_4_Start_Osci_Enabled 0.00000000
#define _RimMask_4_Start_Osci_Slot 0.00000000
#define _RimMask_4_Start_Osci_Value_Start 1.00000000
#define _RimMask_4_Start_Osci_Value_End 1.00000000
#define _RimMask_4_End 0.50000000
#define _RimMask_4_End_Osci_Enabled 0.00000000
#define _RimMask_4_End_Osci_Slot 0.00000000
#define _RimMask_4_End_Osci_Value_Start 0.50000000
#define _RimMask_4_End_Osci_Value_End 0.50000000
#define _RimMask_4_Strength_PreInversion 1.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_4_Strength_PostInversion 1.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_4_Smoothing 1.00000000
#define _RimMask_4_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_4_Smoothing_Osci_Slot 0.00000000
#define _RimMask_4_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_4_Smoothing_Osci_Value_End 1.00000000
#define _DistanceMask_1_Distance_Start 1.00000000
#define _DistanceMask_1_Distance_Start_Osci_Enabled 0.00000000
#define _DistanceMask_1_Distance_Start_Osci_Slot 0.00000000
#define _DistanceMask_1_Distance_Start_Osci_Value_Start 1.00000000
#define _DistanceMask_1_Distance_Start_Osci_Value_End 1.00000000
#define _DistanceMask_1_Distance_End 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Enabled 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Slot 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Value_Start 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Value_End 0.00000000
#define _DistanceMask_1_Strength_PreInversion 1.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _DistanceMask_1_Strength_PostInversion 1.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _DistanceMask_2_Distance_Start 1.00000000
#define _DistanceMask_2_Distance_Start_Osci_Enabled 0.00000000
#define _DistanceMask_2_Distance_Start_Osci_Slot 0.00000000
#define _DistanceMask_2_Distance_Start_Osci_Value_Start 1.00000000
#define _DistanceMask_2_Distance_Start_Osci_Value_End 1.00000000
#define _DistanceMask_2_Distance_End 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Enabled 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Slot 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Value_Start 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Value_End 0.00000000
#define _DistanceMask_2_Strength_PreInversion 1.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _DistanceMask_2_Strength_PostInversion 1.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre 20.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Enabled 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Slot 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_Start 20.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_End 20.00000000
#define _TouchReactivityInteractionMask_Intensity 1.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Enabled 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Slot 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Value_Start 1.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Value_End 1.00000000
#define _BlendMask_1_BlendMode 0.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_1_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_1_Opacity 1.00000000
#define _BlendMask_1_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_1_Opacity_Osci_Slot 0.00000000
#define _BlendMask_1_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_1_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_1_Strength_PreInversion 1.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_1_Strength_PostInversion 1.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_2_BlendMode 0.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_2_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_2_Opacity 1.00000000
#define _BlendMask_2_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_2_Opacity_Osci_Slot 0.00000000
#define _BlendMask_2_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_2_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_2_Strength_PreInversion 1.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_2_Strength_PostInversion 1.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_3_BlendMode 0.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_3_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_3_Opacity 1.00000000
#define _BlendMask_3_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_3_Opacity_Osci_Slot 0.00000000
#define _BlendMask_3_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_3_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_3_Strength_PreInversion 1.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_3_Strength_PostInversion 1.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_4_BlendMode 0.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_4_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_4_Opacity 1.00000000
#define _BlendMask_4_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_4_Opacity_Osci_Slot 0.00000000
#define _BlendMask_4_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_4_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_4_Strength_PreInversion 1.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_4_Strength_PostInversion 1.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_5_BlendMode 0.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_5_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_5_Opacity 1.00000000
#define _BlendMask_5_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_5_Opacity_Osci_Slot 0.00000000
#define _BlendMask_5_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_5_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_5_Strength_PreInversion 1.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_5_Strength_PostInversion 1.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_6_BlendMode 0.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_6_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_6_Opacity 1.00000000
#define _BlendMask_6_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_6_Opacity_Osci_Slot 0.00000000
#define _BlendMask_6_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_6_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_6_Strength_PreInversion 1.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_6_Strength_PostInversion 1.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_7_BlendMode 0.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_7_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_7_Opacity 1.00000000
#define _BlendMask_7_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_7_Opacity_Osci_Slot 0.00000000
#define _BlendMask_7_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_7_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_7_Strength_PreInversion 1.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_7_Strength_PostInversion 1.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_8_BlendMode 0.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_8_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_8_Opacity 1.00000000
#define _BlendMask_8_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_8_Opacity_Osci_Slot 0.00000000
#define _BlendMask_8_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_8_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_8_Strength_PreInversion 1.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_8_Strength_PostInversion 1.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Value_End 1.00000000
#define _ScrollMask_1_Speed 1.00000000
#define _ScrollMask_1_Speed_TimeBase 0.00000000
#define _ScrollMask_1_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _ScrollMask_1_Frequency 1.00000000
#define _ScrollMask_1_Frequency_Osci_Enabled 0.00000000
#define _ScrollMask_1_Frequency_Osci_Slot 0.00000000
#define _ScrollMask_1_Frequency_Osci_Value_Start 1.00000000
#define _ScrollMask_1_Frequency_Osci_Value_End 1.00000000
#define _ScrollMask_1_Gap 0.50000000
#define _ScrollMask_1_Gap_Osci_Enabled 0.00000000
#define _ScrollMask_1_Gap_Osci_Slot 0.00000000
#define _ScrollMask_1_Gap_Osci_Value_Start 0.50000000
#define _ScrollMask_1_Gap_Osci_Value_End 0.50000000
#define _ScrollMask_1_Offset 0.00000000
#define _ScrollMask_1_Offset_Osci_Enabled 0.00000000
#define _ScrollMask_1_Offset_Osci_Slot 0.00000000
#define _ScrollMask_1_Offset_Osci_Value_Start 0.00000000
#define _ScrollMask_1_Offset_Osci_Value_End 0.00000000
#define _ScrollMask_1_Strength_PreInversion 1.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _ScrollMask_1_Strength_PostInversion 1.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _ScrollMask_2_Speed 1.00000000
#define _ScrollMask_2_Speed_TimeBase 0.00000000
#define _ScrollMask_2_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _ScrollMask_2_Frequency 1.00000000
#define _ScrollMask_2_Frequency_Osci_Enabled 0.00000000
#define _ScrollMask_2_Frequency_Osci_Slot 0.00000000
#define _ScrollMask_2_Frequency_Osci_Value_Start 1.00000000
#define _ScrollMask_2_Frequency_Osci_Value_End 1.00000000
#define _ScrollMask_2_Gap 0.50000000
#define _ScrollMask_2_Gap_Osci_Enabled 0.00000000
#define _ScrollMask_2_Gap_Osci_Slot 0.00000000
#define _ScrollMask_2_Gap_Osci_Value_Start 0.50000000
#define _ScrollMask_2_Gap_Osci_Value_End 0.50000000
#define _ScrollMask_2_Offset 0.00000000
#define _ScrollMask_2_Offset_Osci_Enabled 0.00000000
#define _ScrollMask_2_Offset_Osci_Slot 0.00000000
#define _ScrollMask_2_Offset_Osci_Value_Start 0.00000000
#define _ScrollMask_2_Offset_Osci_Value_End 0.00000000
#define _ScrollMask_2_Strength_PreInversion 1.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _ScrollMask_2_Strength_PostInversion 1.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _MassBlendMask_1_BlendMode 0.00000000
#define _MassBlendMask_1_Strength 1.00000000
#define _MassBlendMask_1_Strength_Osci_Enabled 0.00000000
#define _MassBlendMask_1_Strength_Osci_Slot 0.00000000
#define _MassBlendMask_1_Strength_Osci_Value_Start 1.00000000
#define _MassBlendMask_1_Strength_Osci_Value_End 1.00000000
#define _MassBlendMask_1_Strength_PostInversion 1.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _MassBlendMask_1_1_MaskChannel 0.00000000
#define _MassBlendMask_1_1_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_1_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_1_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_1_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_2_MaskChannel 0.00000000
#define _MassBlendMask_1_2_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_2_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_2_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_2_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_3_MaskChannel 0.00000000
#define _MassBlendMask_1_3_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_3_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_3_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_3_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_4_MaskChannel 0.00000000
#define _MassBlendMask_1_4_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_4_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_4_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_4_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_5_MaskChannel 0.00000000
#define _MassBlendMask_1_5_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_5_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_5_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_5_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_6_MaskChannel 0.00000000
#define _MassBlendMask_1_6_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_6_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_6_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_6_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_7_MaskChannel 0.00000000
#define _MassBlendMask_1_7_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_7_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_7_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_7_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_8_MaskChannel 0.00000000
#define _MassBlendMask_1_8_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_8_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_8_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_8_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_BlendMode 0.00000000
#define _MassBlendMask_2_Strength 1.00000000
#define _MassBlendMask_2_Strength_Osci_Enabled 0.00000000
#define _MassBlendMask_2_Strength_Osci_Slot 0.00000000
#define _MassBlendMask_2_Strength_Osci_Value_Start 1.00000000
#define _MassBlendMask_2_Strength_Osci_Value_End 1.00000000
#define _MassBlendMask_2_Strength_PostInversion 1.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _MassBlendMask_2_1_MaskChannel 0.00000000
#define _MassBlendMask_2_1_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_1_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_1_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_1_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_2_MaskChannel 0.00000000
#define _MassBlendMask_2_2_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_2_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_2_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_2_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_3_MaskChannel 0.00000000
#define _MassBlendMask_2_3_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_3_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_3_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_3_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_4_MaskChannel 0.00000000
#define _MassBlendMask_2_4_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_4_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_4_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_4_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_5_MaskChannel 0.00000000
#define _MassBlendMask_2_5_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_5_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_5_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_5_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_6_MaskChannel 0.00000000
#define _MassBlendMask_2_6_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_6_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_6_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_6_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_7_MaskChannel 0.00000000
#define _MassBlendMask_2_7_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_7_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_7_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_7_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_8_MaskChannel 0.00000000
#define _MassBlendMask_2_8_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_8_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_8_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_8_MaskChannel_Brightness 0.00000000
#define _LTCGI 0.00000000
#define _GrabPass_Distortion_Amount 0.01000000
#define _GrabPass_Distortion_Amount_MaskChannel 0.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Inverted 0.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Strength 1.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Contrast 1.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Brightness 0.00000000
#define _GrabPass_Zoom_Amount 1.00000000
#define _GrabPass_Blur_Enabled 0.00000000
#define _GrabPass_Blur_Dispersion 2.00000000
#define _GrabPass_Blur_Weight_MaskChannel 0.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Inverted 0.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Strength 1.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Contrast 1.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Brightness 0.00000000
#define is_GrabPass_Tint_Texture_set false
#define _GrabPass_Tint_Texture_AlphaIsMask 0.00000000
#define _GrabPass_Tint_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _GrabPass_Tint_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _GrabPass_Tint_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _GrabPass_Tint_Texture_ScrollSpeed_TimeBase 0.00000000
#define _GrabPass_Tint_Texture_UVBus 0.00000000
#define _GrabPass_Tint_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _GrabPass_Tint_MaskChannel 0.00000000
#define _GrabPass_Tint_MaskChannel_Inverted 0.00000000
#define _GrabPass_Tint_MaskChannel_Strength 1.00000000
#define _GrabPass_Tint_MaskChannel_Contrast 1.00000000
#define _GrabPass_Tint_MaskChannel_Brightness 0.00000000
#define _Glitter_UVBus 0.00000000
#define _Glitter_Density 700.00000000
#define _Glitter_Amount 0.50000000
#define _Glitter_Amount_Osci_Enabled 0.00000000
#define _Glitter_Amount_Osci_Slot 0.00000000
#define _Glitter_Amount_Osci_Value_Start 0.50000000
#define _Glitter_Amount_Osci_Value_End 0.50000000
#define _Glitter_Disorder 1.00000000
#define _Glitter_AppearsOnMaterial 0.00000000
#define _Glitter_MaskChannel 0.00000000
#define _Glitter_MaskChannel_Inverted 0.00000000
#define _Glitter_MaskChannel_Strength 1.00000000
#define _Glitter_MaskChannel_Contrast 1.00000000
#define _Glitter_MaskChannel_Brightness 0.00000000
#define _Glitter_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Glitter_Color_Osci_Enabled 0.00000000
#define _Glitter_Color_Osci_Slot 0.00000000
#define _Glitter_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Glitter_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Glitter_Color_FromAlbedo 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Enabled 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Slot 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Value_Start 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Value_End 0.00000000
#define _Glitter_Opacity_MinMax float4(0.50000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Opacity_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Opacity_MinMax_Osci_Slot 0.00000000
#define _Glitter_Opacity_MinMax_Osci_Color_Start float4(0.50000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Opacity_MinMax_Osci_Color_End float4(0.50000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Size_MinMax float4(0.25000000, 0.50000000, 0.00000000, 0.00000000)
#define _Glitter_Size_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Size_MinMax_Osci_Slot 0.00000000
#define _Glitter_Size_MinMax_Osci_Color_Start float4(0.25000000, 0.50000000, 0.00000000, 0.00000000)
#define _Glitter_Size_MinMax_Osci_Color_End float4(0.25000000, 0.50000000, 0.00000000, 0.00000000)
#define _Glitter_Brightness_MinMax float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Brightness_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Brightness_MinMax_Osci_Slot 0.00000000
#define _Glitter_Brightness_MinMax_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Brightness_MinMax_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Enabled 0.00000000
#define is_Glitter_Texture_Map_set false
#define _Glitter_Texture_Map_AlphaIsMask 1.00000000
#define _Glitter_Texture_Map_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Map_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Zoom_MinMax float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Zoom_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Texture_Zoom_MinMax_Osci_Slot 0.00000000
#define _Glitter_Texture_Zoom_MinMax_Osci_Color_Start float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Zoom_MinMax_Osci_Color_End float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Rotation_Random_Enabled 1.00000000
#define _Glitter_Texture_Rotation_Speed 0.00000000
#define _Glitter_Texture_Rotation_Speed_TimeBase 0.00000000
#define _Glitter_HSV_Enabled 0.00000000
#define _Glitter_HSV_Hue_MinMax float4(0.00000000, 0.20000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Hue_MinMax_Osci_Enabled 0.00000000
#define _Glitter_HSV_Hue_MinMax_Osci_Slot 0.00000000
#define _Glitter_HSV_Hue_MinMax_Osci_Color_Start float4(0.00000000, 0.20000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Hue_MinMax_Osci_Color_End float4(0.00000000, 0.20000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Saturation_MinMax float4(-0.10000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Saturation_MinMax_Osci_Enabled 0.00000000
#define _Glitter_HSV_Saturation_MinMax_Osci_Slot 0.00000000
#define _Glitter_HSV_Saturation_MinMax_Osci_Color_Start float4(-0.10000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Saturation_MinMax_Osci_Color_End float4(-0.10000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Hue_Speed 0.00000000
#define _Glitter_HSV_Hue_Speed_TimeBase 0.00000000
#define _Glitter_HSV_Hue_Shift 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Enabled 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Slot 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Value_Start 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Value_End 0.00000000
#define _Glitter_AutoBlink_Speed 3.00000000
#define _Glitter_AutoBlink_Speed_TimeBase 0.00000000
#define _Glitter_AutoBlink_Randomness 1000.00000000
#define _Glitter_ManualBlink_Enabled 0.00000000
#define _Glitter_ManualBlink_Offset 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Enabled 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Slot 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Value_Start 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Value_End 0.00000000
#define _Glitter_ManualBlink_Offset_Randomness 20000.00000000
#define _Glitter_UV_Scroll_Speed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Glitter_UV_Scroll_Speed_TimeBase 0.00000000
#define _PostProcessHSV_Hue_Shift 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Enabled 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Slot 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Value_Start 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Value_End 0.00000000
#define _PostProcessHSV_Sat_Shift 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Enabled 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Slot 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Value_Start 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Value_End 0.00000000
#define _PostProcessHSV_Value_Shift 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Enabled 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Slot 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Value_Start 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Value_End 0.00000000
#define _PostProcessHSV_Hue_Speed 0.00000000
#define _PostProcessHSV_Hue_Speed_TimeBase 0.00000000
#define _DistanceDither_Enabled 0.00000000
#define _DistanceDither_Separate_Faces 1.00000000
#define _DistanceDither_Front_Distance_Start 0.10000000
#define _DistanceDither_Front_Distance_End 0.00000000
#define _DistanceDither_Back_Distance_Start 0.01000000
#define _DistanceDither_Back_Distance_End 0.00000000
#define _DistanceDither_Front_Bias 0.00000000
#define _DistanceDither_Back_Bias 0.00000000
#define _DistanceDither_MaskChannel 0.00000000
#define _DistanceDither_MaskChannel_Inverted 0.00000000
#define _DistanceDither_MaskChannel_Strength 1.00000000
#define _DistanceDither_MaskChannel_Contrast 1.00000000
#define _DistanceDither_MaskChannel_Brightness 0.00000000
#define _BackfaceFill_Enabled 0.00000000
#define _BackfaceFill_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _PreviewMirror 0.00000000
#define _Cutoff 0.50000000
#define _Cutoff_Osci_Enabled 0.00000000
#define _Cutoff_Osci_Slot 0.00000000
#define _Cutoff_Osci_Value_Start 0.50000000
#define _Cutoff_Osci_Value_End 0.50000000
#define _FlipNormalsOnBackFacingTris 1.00000000
#define _Osci_Slot_1_Type 0.00000000
#define _Osci_Slot_1_Speed 1.00000000
#define _Osci_Slot_1_Speed_TimeBase 0.00000000
#define _Osci_Slot_1_Square_DutyCycle 0.50000000
#define _Osci_Slot_1_Sine_HalfWave 0.00000000
#define _Osci_Slot_2_Type 0.00000000
#define _Osci_Slot_2_Speed 1.00000000
#define _Osci_Slot_2_Speed_TimeBase 0.00000000
#define _Osci_Slot_2_Square_DutyCycle 0.50000000
#define _Osci_Slot_2_Sine_HalfWave 0.00000000
#define _Osci_Slot_3_Type 0.00000000
#define _Osci_Slot_3_Speed 1.00000000
#define _Osci_Slot_3_Speed_TimeBase 0.00000000
#define _Osci_Slot_3_Square_DutyCycle 0.50000000
#define _Osci_Slot_3_Sine_HalfWave 0.00000000
#define _Osci_Slot_4_Type 0.00000000
#define _Osci_Slot_4_Speed 1.00000000
#define _Osci_Slot_4_Speed_TimeBase 0.00000000
#define _Osci_Slot_4_Square_DutyCycle 0.50000000
#define _Osci_Slot_4_Sine_HalfWave 0.00000000
#define _Osci_Slot_5_Type 0.00000000
#define _Osci_Slot_5_Speed 1.00000000
#define _Osci_Slot_5_Speed_TimeBase 0.00000000
#define _Osci_Slot_5_Square_DutyCycle 0.50000000
#define _Osci_Slot_5_Sine_HalfWave 0.00000000
#define _Osci_Slot_6_Type 0.00000000
#define _Osci_Slot_6_Speed 1.00000000
#define _Osci_Slot_6_Speed_TimeBase 0.00000000
#define _Osci_Slot_6_Square_DutyCycle 0.50000000
#define _Osci_Slot_6_Sine_HalfWave 0.00000000
#define _Osci_ALBand_1_Band 0.00000000
#define _Osci_ALBand_1_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_1_Smoothness_Level 0.00000000
#define _Osci_ALBand_1_Fallback_Type 0.00000000
#define _Osci_ALBand_1_Fallback_Osci 0.00000000
#define _Osci_ALBand_1_Fallback_Value 0.00000000
#define _Osci_ALBand_2_Band 0.00000000
#define _Osci_ALBand_2_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_2_Smoothness_Level 0.00000000
#define _Osci_ALBand_2_Fallback_Type 0.00000000
#define _Osci_ALBand_2_Fallback_Osci 0.00000000
#define _Osci_ALBand_2_Fallback_Value 0.00000000
#define _Osci_ALBand_3_Band 0.00000000
#define _Osci_ALBand_3_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_3_Smoothness_Level 0.00000000
#define _Osci_ALBand_3_Fallback_Type 0.00000000
#define _Osci_ALBand_3_Fallback_Osci 0.00000000
#define _Osci_ALBand_3_Fallback_Value 0.00000000
#define _Osci_ALBand_4_Band 0.00000000
#define _Osci_ALBand_4_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_4_Smoothness_Level 0.00000000
#define _Osci_ALBand_4_Fallback_Type 0.00000000
#define _Osci_ALBand_4_Fallback_Osci 0.00000000
#define _Osci_ALBand_4_Fallback_Value 0.00000000
#define _Osci_ALBand_5_Band 0.00000000
#define _Osci_ALBand_5_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_5_Smoothness_Level 0.00000000
#define _Osci_ALBand_5_Fallback_Type 0.00000000
#define _Osci_ALBand_5_Fallback_Osci 0.00000000
#define _Osci_ALBand_5_Fallback_Value 0.00000000
#define _Osci_ALBand_6_Band 0.00000000
#define _Osci_ALBand_6_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_6_Smoothness_Level 0.00000000
#define _Osci_ALBand_6_Fallback_Type 0.00000000
#define _Osci_ALBand_6_Fallback_Osci 0.00000000
#define _Osci_ALBand_6_Fallback_Value 0.00000000
#define _Osci_ALEnergy_1_Smoothness_Enabled 1.00000000
#define _Osci_ALEnergy_1_Smoothness_Level 1.00000000
#define _Osci_ALEnergy_1_Fallback_Type 0.00000000
#define _Osci_ALEnergy_1_Fallback_Osci 0.00000000
#define _Osci_ALEnergy_1_Fallback_Value 0.00000000
#define _Osci_ALEnergy_2_Smoothness_Enabled 1.00000000
#define _Osci_ALEnergy_2_Smoothness_Level 1.00000000
#define _Osci_ALEnergy_2_Fallback_Type 0.00000000
#define _Osci_ALEnergy_2_Fallback_Osci 0.00000000
#define _Osci_ALEnergy_2_Fallback_Value 0.00000000
#define _Osci_Mask_1_MaskChannel 0.00000000
#define _Osci_Mask_1_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_1_MaskChannel_Strength 1.00000000
#define _Osci_Mask_1_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_1_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_2_MaskChannel 0.00000000
#define _Osci_Mask_2_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_2_MaskChannel_Strength 1.00000000
#define _Osci_Mask_2_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_2_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_3_MaskChannel 0.00000000
#define _Osci_Mask_3_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_3_MaskChannel_Strength 1.00000000
#define _Osci_Mask_3_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_3_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_4_MaskChannel 0.00000000
#define _Osci_Mask_4_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_4_MaskChannel_Strength 1.00000000
#define _Osci_Mask_4_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_4_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_5_MaskChannel 0.00000000
#define _Osci_Mask_5_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_5_MaskChannel_Strength 1.00000000
#define _Osci_Mask_5_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_5_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_6_MaskChannel 0.00000000
#define _Osci_Mask_6_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_6_MaskChannel_Strength 1.00000000
#define _Osci_Mask_6_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_6_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_7_MaskChannel 0.00000000
#define _Osci_Mask_7_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_7_MaskChannel_Strength 1.00000000
#define _Osci_Mask_7_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_7_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_8_MaskChannel 0.00000000
#define _Osci_Mask_8_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_8_MaskChannel_Strength 1.00000000
#define _Osci_Mask_8_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_8_MaskChannel_Brightness 0.00000000
#define _TimeBase_AL_Slot_1_Type 0.00000000
#define _TimeBase_AL_Slot_1_Band 0.00000000
#define _TimeBase_AL_Slot_1_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_1_AddTime 0.00000000
#define _TimeBase_AL_Slot_1_Strength 1.00000000
#define _TimeBase_AL_Slot_2_Type 0.00000000
#define _TimeBase_AL_Slot_2_Band 0.00000000
#define _TimeBase_AL_Slot_2_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_2_AddTime 0.00000000
#define _TimeBase_AL_Slot_2_Strength 1.00000000
#define _TimeBase_AL_Slot_3_Type 0.00000000
#define _TimeBase_AL_Slot_3_Band 0.00000000
#define _TimeBase_AL_Slot_3_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_3_AddTime 0.00000000
#define _TimeBase_AL_Slot_3_Strength 1.00000000
#define _TimeBase_AL_Slot_4_Type 0.00000000
#define _TimeBase_AL_Slot_4_Band 0.00000000
#define _TimeBase_AL_Slot_4_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_4_AddTime 0.00000000
#define _TimeBase_AL_Slot_4_Strength 1.00000000
#define _TimeBase_AL_Slot_5_Type 0.00000000
#define _TimeBase_AL_Slot_5_Band 0.00000000
#define _TimeBase_AL_Slot_5_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_5_AddTime 0.00000000
#define _TimeBase_AL_Slot_5_Strength 1.00000000
#define _TimeBase_AL_Slot_6_Type 0.00000000
#define _TimeBase_AL_Slot_6_Band 0.00000000
#define _TimeBase_AL_Slot_6_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_6_AddTime 0.00000000
#define _TimeBase_AL_Slot_6_Strength 1.00000000
#define _Diffuse_Type 0.00000000
#define _Diffuse_Ramp_1_Start 0.00000000
#define _Diffuse_Ramp_1_End 1.00000000
#define _Diffuse_Ramp_1_Offset 0.00000000
#define _Diffuse_Ramp_2_Start 0.00000000
#define _Diffuse_Ramp_2_End 1.00000000
#define _Diffuse_Ramp_2_Offset 0.00000000
#define _Diffuse_Ramp_Blend 0.00000000
#define is_Diffuse_LUT_Texture_set false
#define _Diffuse_Shadow_Tint_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _LightProbeWeight 1.00000000
#define _LightProbe_Shadow_Tint_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _LightColor_Weight 1.00000000
#define _FallbackLight_Enabled 0.00000000
#define _FallbackLight_Direction float4(0.57735030, 0.57735030, 0.57735030, 1.00000000)
#define _FallbackLight_Color float4(1.00000000, 0.90466110, 0.67244320, 1.00000000)
#define _Outline_Enabled 0.00000000
#define _Outline_Size 0.01000000
#define _Outline_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Outline_Mask_Cutoff 0.50000000
#define _Outline_MaskChannel 0.00000000
#define _Outline_MaskChannel_Inverted 0.00000000
#define _Outline_MaskChannel_Strength 1.00000000
#define _Outline_MaskChannel_Contrast 1.00000000
#define _Outline_MaskChannel_Brightness 0.00000000
#define _Outline_AppearsOnMaterial 0.00000000
#define _EarlyZ_Enabled 0.00000000
#define _AudioLink_Disabled 0.00000000
#define _VFGOO_SHADOWCASTER_DISABLED 0.00000000
#define _VFGOO_ENABLE_UV_BUS_1 0.00000000
#define _VFGOO_ENABLE_UV_BUS_2 0.00000000
#define _VFGOO_ENABLE_UV_BUS_3 0.00000000
#define _VFGOO_ENABLE_UV_BUS_4 0.00000000
#define _VFGOO_ENABLE_UV_BUS_5 0.00000000
#define _VFGOO_ENABLE_UV_BUS_6 0.00000000
#define _VFGOO_ENABLE_MASK_SCROLL_1 0.00000000
#define _VFGOO_ENABLE_MASK_SCROLL_2 0.00000000
#define _VFGOO_ENABLE_MASK_TOUCH_REACTIVITY 0.00000000
#define _VFGOO_ENABLE_MASK_POINT_LIGHTS 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_1 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_2 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_3 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_4 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_1 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_2 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_3 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_4 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_5 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_6 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_7 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_8 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_1 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_2 1.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_3 1.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_4 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_5 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_6 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_7 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_8 0.00000000
#define _VFGOO_ENABLE_MASK_DISTANCE_1 0.00000000
#define _VFGOO_ENABLE_MASK_DISTANCE_2 0.00000000
#define _VFGOO_ENABLE_MASK_MASSBLEND_1 0.00000000
#define _VFGOO_ENABLE_MASK_MASSBLEND_2 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_1 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_2 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_3 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_4 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_5 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_6 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_7 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_8 0.00000000
#define _VFGOO_ENABLE_GLITTER 0.00000000
#define _VFGOO_ENABLE_HSV_POSTPROCESSING 0.00000000

#define EDITOR_BRANCH

// NOTE(valuef):
// @LightprobeExperiment
// For over a year I've been running a shader that _always_ samples SH in the PS and doesn't care about the 
// LIGHTPROBE_SH keyword - it acts as if it's always enabled.
// So why not try this on the goo shader as well? We'd save on a multi compile keyword resulting in faster build
// times!
// 2023-10-31
#define LIGHTPROBE_SH
#define UNITY_SAMPLE_FULL_SH_PER_PIXEL

static bool IS_VERTEX_SHADER = false;
static bool IS_SHADOWCASTER = false;
static bool IS_FORWARD_ADD = false;
static bool IS_FORWARD_BASE = false;

#define UNITY_SPECCUBE_LOD_STEPS 6

/*
// @LightprobeExperiment
#ifndef UNITY_SAMPLE_FULL_SH_PER_PIXEL
  // Lightmap UVs and ambient color from SHL2 are shared in the vertex to pixel interpolators. Do
  // full SH evaluation in the pixel shader when static lightmap and LIGHTPROBE_SH is enabled.
  #define UNITY_SAMPLE_FULL_SH_PER_PIXEL (LIGHTMAP_ON && LIGHTPROBE_SH)
#endif
*/

#ifndef UNITY_BRDF_GGX
  #define UNITY_BRDF_GGX 1
#endif

// Orthnormalize Tangent Space basis per-pixel Necessary to support high-quality normal-maps.
// Compatible with Maya and Marmoset.  However xNormal expects oldschool non-orthnormalized basis -
// essentially preventing good looking normal-maps :( Due to the fact that xNormal is probably _the
// most used tool to bake out normal-maps today_ we have to stick to old ways for now.
//
// Disabled by default, until xNormal has an option to bake proper normal-maps.
#ifndef UNITY_TANGENT_ORTHONORMALIZE
  #define UNITY_TANGENT_ORTHONORMALIZE 0
#endif

#include "UnityCG.cginc"

// NOTE(valuef): Inlined AudioLink.cginc 1.2.0 header.
// Originally was #include "Packages/com.llealloo.audiolink/Runtime/Shaders/AudioLink.cginc"
// Retrieved 2023-11-14
#ifndef AUDIOLINK_CGINC_INCLUDED
    #define AUDIOLINK_CGINC_INCLUDED

    // Map of where features in AudioLink are.
    #define ALPASS_DFT                      uint2(0,4)  //Size: 128, 2
    #define ALPASS_WAVEFORM                 uint2(0,6)  //Size: 128, 16
    #define ALPASS_AUDIOLINK                uint2(0,0)  //Size: 128, 4
    #define ALPASS_AUDIOBASS                uint2(0,0)  //Size: 128, 1
    #define ALPASS_AUDIOLOWMIDS             uint2(0,1)  //Size: 128, 1
    #define ALPASS_AUDIOHIGHMIDS            uint2(0,2)  //Size: 128, 1
    #define ALPASS_AUDIOTREBLE              uint2(0,3)  //Size: 128, 1
    #define ALPASS_AUDIOLINKHISTORY         uint2(1,0)  //Size: 127, 4
    #define ALPASS_GENERALVU                uint2(0,22) //Size: 12, 1
    #define ALPASS_GENERALVU_INSTANCE_TIME  uint2(2,22)
    #define ALPASS_GENERALVU_LOCAL_TIME     uint2(3,22)
    #define ALPASS_GENERALVU_NETWORK_TIME   uint2(4,22)
    #define ALPASS_GENERALVU_PLAYERINFO     uint2(6,22)
    #define ALPASS_THEME_COLOR0             uint2(0,23)
    #define ALPASS_THEME_COLOR1             uint2(1,23)
    #define ALPASS_THEME_COLOR2             uint2(2,23)
    #define ALPASS_THEME_COLOR3             uint2(3,23)
    #define ALPASS_GENERALVU_UNIX_DAYS      uint2(5,23)
    #define ALPASS_GENERALVU_UNIX_SECONDS   uint2(6,23)
    #define ALPASS_GENERALVU_SOURCE_POS     uint2(7,23)
    #define ALPASS_MEDIASTATE               uint2(5,22)

    #define ALPASS_CCINTERNAL               uint2(12,22) //Size: 12, 2
    #define ALPASS_CCCOLORS                 uint2(25,22) //Size: 12, 1 (Note Color #0 is always black, Colors start at 1)
    #define ALPASS_CCSTRIP                  uint2(0,24)  //Size: 128, 1
    #define ALPASS_CCLIGHTS                 uint2(0,25)  //Size: 128, 2
    #define ALPASS_AUTOCORRELATOR           uint2(0,27)  //Size: 128, 1
    #define ALPASS_FILTEREDAUDIOLINK        uint2(0,28)  //Size: 16, 4
    #define ALPASS_CHRONOTENSITY            uint2(16,28) //Size: 8, 4
    #define ALPASS_FILTEREDVU               uint2(23,28) //Size: 4, 4
    #define ALPASS_FILTEREDVU_INTENSITY     uint2(24,28) //Size: 4, 1
    #define ALPASS_FILTEREDVU_MARKER        uint2(24,29) //Size: 4, 1
    #define ALPASS_GLOBAL_STRINGS           uint2(40,28) //Size: 8, 4

    // Some basic constants to use (Note, these should be compatible with
    // future version of AudioLink, but may change.
    #define AUDIOLINK_SAMPHIST              3069        // Internal use for algos, do not change.
    #define AUDIOLINK_SAMPLEDATA24          2046
    #define AUDIOLINK_EXPBINS               24
    #define AUDIOLINK_EXPOCT                10
    #define AUDIOLINK_ETOTALBINS            (AUDIOLINK_EXPBINS * AUDIOLINK_EXPOCT)
    #define AUDIOLINK_WIDTH                 128
    #define AUDIOLINK_SPS                   48000       // Samples per second
    #define AUDIOLINK_ROOTNOTE              0
    #define AUDIOLINK_4BAND_FREQFLOOR       0.123
    #define AUDIOLINK_4BAND_FREQCEILING     1
    #define AUDIOLINK_BOTTOM_FREQUENCY      13.75
    #define AUDIOLINK_BASE_AMPLITUDE        2.5
    #define AUDIOLINK_DELAY_COEFFICIENT_MIN 0.3
    #define AUDIOLINK_DELAY_COEFFICIENT_MAX 0.9
    #define AUDIOLINK_DFT_Q                 4.0
    #define AUDIOLINK_TREBLE_CORRECTION     5.0
    #define AUDIOLINK_4BAND_TARGET_RATE     90.0

    // Text constants
    #define AUDIOLINK_STRING_MAX_CHARS      32
    #define AUDIOLINK_STRING_LOCALPLAYER    0
    #define AUDIOLINK_STRING_MASTER         1
    #define AUDIOLINK_STRING_CUSTOM1        2
    #define AUDIOLINK_STRING_CUSTOM2        3

    // ColorChord constants
    #define COLORCHORD_EMAXBIN              192
    #define COLORCHORD_NOTE_CLOSEST         3.0
    #define COLORCHORD_NEW_NOTE_GAIN        8.0
    #define COLORCHORD_MAX_NOTES            10

    // We use glsl_mod for most calculations because it behaves better
    // on negative numbers, and in some situations actually outperforms
    // HLSL's modf().
    #ifndef glsl_mod
        #define glsl_mod(x,y) (((x)-(y)*floor((x)/(y))))
    #endif

    uniform float4               _AudioTexture_TexelSize;

    #ifdef SHADER_TARGET_SURFACE_ANALYSIS
        #define AUDIOLINK_STANDARD_INDEXING
    #endif

    // Mechanism to index into texture.
    #ifdef AUDIOLINK_STANDARD_INDEXING
        sampler2D _AudioTexture;
        #define AudioLinkData(xycoord) tex2Dlod(_AudioTexture, float4(uint2(xycoord) * _AudioTexture_TexelSize.xy, 0, 0))
    #else
        uniform Texture2D<float4>   _AudioTexture;
        #define AudioLinkData(xycoord) _AudioTexture[uint2(xycoord)]
    #endif

    // Convenient mechanism to read from the AudioLink texture that handles reading off the end of one line and onto the next above it.
    float4 AudioLinkDataMultiline(uint2 xycoord) { return AudioLinkData(uint2(xycoord.x % AUDIOLINK_WIDTH, xycoord.y + xycoord.x/AUDIOLINK_WIDTH)); }

    // Mechanism to sample between two adjacent pixels and lerp between them, like "linear" supesampling
    float4 AudioLinkLerp(float2 xy) { return lerp( AudioLinkData(xy), AudioLinkData(xy+int2(1,0)), frac( xy.x ) ); }

    // Same as AudioLinkLerp but properly handles multiline reading.
    float4 AudioLinkLerpMultiline(float2 xy) { return lerp(AudioLinkDataMultiline(xy), AudioLinkDataMultiline(xy+float2(1,0)), frac(xy.x)); }

    //Tests to see if Audio Link texture is available
    bool AudioLinkIsAvailable()
    {
        #if !defined(AUDIOLINK_STANDARD_INDEXING)
            int width, height;
            _AudioTexture.GetDimensions(width, height);
            return width > 16;
        #else
            return _AudioTexture_TexelSize.z > 16;
        #endif
    }

    // DEPRECATED! Use AudioLinkGetVersionMajor and AudioLinkGetVersionMinor() instead.
    //Get version of audiolink present in the world, 0 if no audiolink is present
    float AudioLinkGetVersion()
    {
        int2 dims;
        #if !defined(AUDIOLINK_STANDARD_INDEXING)
            _AudioTexture.GetDimensions(dims.x, dims.y);
        #else
            dims = _AudioTexture_TexelSize.zw;
        #endif

        if (dims.x >= 128)
            return AudioLinkData(ALPASS_GENERALVU).x;
        else if (dims.x > 16)
            return 1;
        else
            return 0;
    }

    float AudioLinkGetVersionMajor()
    {
        return AudioLinkData(ALPASS_GENERALVU).y;
    }

    float AudioLinkGetVersionMinor()
    {
        // If the major version is 1 or greater, we are using the new versioning system.
        if (AudioLinkGetVersionMajor() > 0)
        {
            return AudioLinkData(ALPASS_GENERALVU).w;
        }
        // Otherwise, defer to the old logic for determining version.
        else
        {
            int2 dims;
            #if !defined(AUDIOLINK_STANDARD_INDEXING)
                _AudioTexture.GetDimensions(dims.x, dims.y);
            #else
                dims = _AudioTexture_TexelSize.zw;
            #endif

            if (dims.x >= 128)
                return AudioLinkData(ALPASS_GENERALVU).x;
            else if (dims.x > 16)
                return 1;
            else
                return 0;
        }
    }

    // This pulls data from this texture.
    #define AudioLinkGetSelfPixelData(xy) _SelfTexture2D[xy]

    // Extra utility functions for time.
    uint AudioLinkDecodeDataAsUInt(uint2 indexloc)
    {
        uint4 rpx = AudioLinkData(indexloc);
        return rpx.x + rpx.y*1024 + rpx.z * 1048576 + rpx.w * 1073741824;
    }

    //Note: This will truncate time to every 134,217.728 seconds (~1.5 days of an instance being up) to prevent floating point aliasing.
    // if your code will alias sooner, you will need to use a different function.  It should be safe to use this on all times.
    float AudioLinkDecodeDataAsSeconds(uint2 indexloc)
    {
        uint time = AudioLinkDecodeDataAsUInt(indexloc) & 0x7ffffff;
        //Can't just divide by float.  Bug in Unity's HLSL compiler.
        return float(time / 1000) + float( time % 1000 ) / 1000.; 
    }

    #define ALDecodeDataAsSeconds( x ) AudioLinkDecodeDataAsSeconds( x )
    #define ALDecodeDataAsUInt( x ) AudioLinkDecodeDataAsUInt( x )

    float AudioLinkRemap(float t, float a, float b, float u, float v) { return ((t-a) / (b-a)) * (v-u) + u; }

    float3 AudioLinkHSVtoRGB(float3 HSV)
    {
        float3 RGB = 0;
        float C = HSV.z * HSV.y;
        float H = HSV.x * 6;
        float X = C * (1 - abs(fmod(H, 2) - 1));
        if (HSV.y != 0)
        {
            float I = floor(H);
            if (I == 0) { RGB = float3(C, X, 0); }
            else if (I == 1) { RGB = float3(X, C, 0); }
            else if (I == 2) { RGB = float3(0, C, X); }
            else if (I == 3) { RGB = float3(0, X, C); }
            else if (I == 4) { RGB = float3(X, 0, C); }
            else { RGB = float3(C, 0, X); }
        }
        float M = HSV.z - C;
        return RGB + M;
    }

    float3 AudioLinkCCtoRGB(float bin, float intensity, int rootNote)
    {
        float note = bin / AUDIOLINK_EXPBINS;

        float hue = 0.0;
        note *= 12.0;
        note = glsl_mod(4. - note + rootNote, 12.0);
        {
            if(note < 4.0)
            {
                //Needs to be YELLOW->RED
                hue = (note) / 24.0;
            }
            else if(note < 8.0)
            {
                //            [4]  [8]
                //Needs to be RED->BLUE
                hue = (note-2.0) / 12.0;
            }
            else
            {
                //             [8] [12]
                //Needs to be BLUE->YELLOW
                hue = (note - 4.0) / 8.0;
            }
        }
        float val = intensity - 0.1;
        return AudioLinkHSVtoRGB(float3(fmod(hue, 1.0), 1.0, clamp(val, 0.0, 1.0)));
    }

    // Sample the amplitude of a given frequency in the DFT, supports frequencies in [13.75; 14080].
    float4 AudioLinkGetAmplitudeAtFrequency(float hertz)
    {
        float note = AUDIOLINK_EXPBINS * log2(hertz / AUDIOLINK_BOTTOM_FREQUENCY);
        return AudioLinkLerpMultiline(ALPASS_DFT + float2(note, 0));
    }

    // Sample the amplitude of a given quartertone in an octave. Octave is in [0; 9] while quarter is [0; 23].
    float4 AudioLinkGetAmplitudeAtQuarterNote(float octave, float quarter)
    {
        return AudioLinkLerpMultiline(ALPASS_DFT + float2(octave * AUDIOLINK_EXPBINS + quarter, 0));
    }

    // Sample the amplitude of a given semitone in an octave. Octave is in [0; 9] while note is [0; 11].
    float4 AudioLinkGetAmplitudeAtNote(float octave, float note)
    {
        float quarter = note * 2.0;
        return AudioLinkGetAmplitudeAtQuarterNote(octave, quarter);
    }

    // Sample the amplitude of a given quartertone across all octaves. Quarter is [0; 23].
    float4 AudioLinkGetAmplitudesAtQuarterNote(float quarter)
    {
        float amplitude = 0;
        UNITY_UNROLL
        for (int i = 0; i < AUDIOLINK_EXPOCT; i++)
        {
            amplitude += AudioLinkGetAmplitudeAtQuarterNote(i,quarter);
        }
        return amplitude;
    }

    // Sample the amplitude of a given semitone across all octaves. Note is [0; 11].
    float4 AudioLinkGetAmplitudesAtNote(float note)
    {
        float quarter = note * 2.0;
        return AudioLinkGetAmplitudesAtQuarterNote(quarter);
    }

    // Get a reasonable drop-in replacement time value for _Time.y with the
    // given chronotensity index [0; 7] and AudioLink band [0; 3].
    float AudioLinkGetChronoTime(uint index, uint band)
    {
        return (AudioLinkDecodeDataAsUInt(ALPASS_CHRONOTENSITY + uint2(index, band))) / 100000.0;
    }

    // Get a chronotensity value in the interval [0; 1], modulated by the speed input, 
    // with the given chronotensity index [0; 7] and AudioLink band [0; 3].
    float AudioLinkGetChronoTimeNormalized(uint index, uint band, float speed)
    {
        return frac(AudioLinkGetChronoTime(index, band) * speed);
    }

    // Get a chronotensity value in the interval [0; interval], modulated by the speed input, 
    // with the given chronotensity index [0; 7] and AudioLink band [0; 3].
    float AudioLinkGetChronoTimeInterval(uint index, uint band, float speed, float interval)
    {
        return AudioLinkGetChronoTimeNormalized(index, band, speed) * interval;
    }

    // Get time of day. The return value is a float4 with the values float3(hour, minute, second).
    float3 AudioLinkGetTimeOfDay()
    {
        float value = AudioLinkDecodeDataAsSeconds(ALPASS_GENERALVU_UNIX_SECONDS);
        float hour = floor(value / 3600.0);
        float minute = floor(value / 60.0) % 60.0;
        float second = value % 60.0;
        return float3(hour, minute, second);
    }

    // Get a character from a globally synced string, given an index of string in range [0; 3], and
    // a character index in range [0; 31]. The string at the 0th index is the local player name.
    // The 1st index is the master name, and index 2 and 3 are custom strings.
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetGlobalStringChar(uint stringIndex, uint charIndex)
    {
        uint4 fourChars = asuint(AudioLinkData(ALPASS_GLOBAL_STRINGS + uint2(charIndex / 4, stringIndex)));
        return fourChars[charIndex % 4];
    }

    // Get a character from the local player name given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetLocalPlayerNameChar(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_LOCALPLAYER, charIndex);
    }

    // Get a character from the master player name given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetMasterNameChar(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_MASTER, charIndex);
    }

    // Get a character from the first custom string given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetCustomString1Char(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_CUSTOM1, charIndex);
    }

    // Get a character from the second custom string given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetCustomString2Char(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_CUSTOM2, charIndex);
    }

    // Returns the position of the AudioLink AudioSource in world space.
    float4 AudioLinkGetAudioSourcePosition()
    {
        return float4(AudioLinkData(ALPASS_GENERALVU_SOURCE_POS).xyz,1);
    }
#endif

#include "AutoLight.cginc"

#if defined(LTCGI)
  #define LTCGI_AVATAR_MODE
  #include "Packages/at.pimaker.ltcgi/Shaders/LTCGI.cginc"
#endif

#define rot2x2(x) float2x2(cos(x),-sin(x),sin(x),cos(x))

struct Capsule_Physbone_Data {
  bool is_enabled;
  float3 proximity;
  float mask;
};

float4 _LightColor0;

//Texture2D _AuxTexture;	
Texture2D _Diffuse_LUT_Texture;	

#define TOUCH_REACTIVITY_MODE_NONE                                  0
#define TOUCH_REACTIVITY_MODE_DONT_INTERACT_WITH_OTHER_TR_MATERIALS 1
#define TOUCH_REACTIVITY_MODE_ENABLED                               2

#define DEBUG_VIS_NONE                              0
#define DEBUG_VIS_MASK_VS                           1
#define DEBUG_VIS_MASK_PS                           2
#define DEBUG_VIS_UV                                3
#define DEBUG_VIS_NORMAL                            4
#define DEBUG_VIS_TOTAL_DRAG_FORCE                  5
#define DEBUG_VIS_TF_VS                             6
#define DEBUG_VIS_TF_PS                             7
#define DEBUG_VIS_UV2_CHANNEL                       8
#define DEBUG_VIS_SKINNED_VERTICES                  9
#define DEBUG_VIS_IS_CAMERA_DEPTH_TEXTURE_AVAILABLE 10

#define UV_BUS_UV0            0
#define UV_BUS_UV1            1
#define UV_BUS_UV3            2
#define UV_BUS_UV4            3
#define UV_BUS_UV5            4
#define UV_BUS_UV6            5
#define UV_BUS_UV7            6
#define UV_BUS_PANOSPHERE     7
#define UV_BUS_1              8
#define UV_BUS_2              9
#define UV_BUS_3              10
#define UV_BUS_4              11
#define UV_BUS_5              12
#define UV_BUS_6              13
#define UV_MAX                14

#define TF_ANIMATION_NONE                 0
#define TF_ANIMATION_VERY_SIMPLE          1
#define TF_ANIMATION_SIMPLE_WITH_NOISE    2
#define TF_ANIMATION_RADIAL               3
#define TF_ANIMATION_CENTER_OUT           4

#define OSCI_SIMPLE_1                 0
#define OSCI_SIMPLE_2                 1
#define OSCI_SIMPLE_3                 2
#define OSCI_SIMPLE_4                 3
#define OSCI_SIMPLE_5                 4
#define OSCI_SIMPLE_6                 5
#define OSCI_SIMPLE_IS_AL_AVAILABLE   6
#define OSCI_AL_BAND_1                7
#define OSCI_AL_BAND_2                8
#define OSCI_AL_BAND_3                9
#define OSCI_AL_BAND_4                10
#define OSCI_AL_BAND_5                11
#define OSCI_AL_BAND_6                12
#define OSCI_AL_ENERGY_1              13
#define OSCI_AL_ENERGY_2              14
#define OSCI_MASK_1                   15
#define OSCI_MASK_2                   16
#define OSCI_MASK_3                   17
#define OSCI_MASK_4                   18
#define OSCI_MASK_5                   19
#define OSCI_MASK_6                   20
#define OSCI_MASK_7                   21
#define OSCI_MASK_8                   22
#define OSCI_MAX                      23

#define OSCI_SIMPLE_TYPE_SIN          0
#define OSCI_SIMPLE_TYPE_SQUARE       1
#define OSCI_SIMPLE_TYPE_SAW          2
#define OSCI_SIMPLE_TYPE_TRIANGLE     3

#define TIMEBASE_SLOT_BASE    0
#define TIMEBASE_SLOT_AL_1    1
#define TIMEBASE_SLOT_AL_2    2
#define TIMEBASE_SLOT_AL_3    3
#define TIMEBASE_SLOT_AL_4    4
#define TIMEBASE_SLOT_AL_5    5
#define TIMEBASE_SLOT_AL_6    6
#define TIMEBASE_SLOT_MAX     7

#define TIMEBASE_AL_TYPE_INCREASING             0
#define TIMEBASE_AL_TYPE_INCREASING_SMOOTHED    1
#define TIMEBASE_AL_TYPE_BACK_N_FORTH           2
#define TIMEBASE_AL_TYPE_BACK_N_FORTH_SMOOTHED  3

struct Time_Bases {
  float slots[TIMEBASE_SLOT_MAX];
};

static Time_Bases TIME_BASES;

#define get_time(_time_base_slot) TIME_BASES.slots[_time_base_slot]

struct Oscillators {
  float slots[OSCI_MAX];
};

static Oscillators OSCILLATORS;

struct UV_Bus {
  float2 uv[UV_MAX]; 
};

static UV_Bus UV_BUSES;

#define resolve_uv_bus(_uv_bus_to_use) UV_BUSES.uv[_uv_bus_to_use]

float2 apply_uv_tiling_offset_and_scroll(
  float2 uv,
  float2 tiling,
  float2 offset,
  float2 scroll,
  float time_base
) {
  uv = uv * tiling + offset;

  uv += scroll * time_base.xx;

  return uv;
}

float4 
sample_texture_2d(
  const Texture2D tex,
  const float2 tiling,
  const float2 offset,
  const float2 scroll,
  const int uv_bus_to_use,
  const SamplerState samp,
  int time_base_slot
) {
  // @InlinedTextureSampling
  float2 uv = resolve_uv_bus(uv_bus_to_use);

  float time_base = get_time(time_base_slot);
  uv = apply_uv_tiling_offset_and_scroll(uv, tiling, offset, scroll, time_base);
  
  float4 tap;
  if(IS_VERTEX_SHADER) {
    tap = tex.SampleLevel(samp, uv, 0);
  }
  else {
    tap = tex.Sample(samp, uv);
  }

  return tap;
}

#if defined(NOT_BAKED)

  //
  // @CustomProperty
  // Add your custom property fields in this define block here!
  // When you do this, baking them into the shader will be automatically handled during material baking.
  //

  float   _AuxFloat;
  float   _AuxFloat2;
  float4  _AuxColor;
  int     _AuxToggle;
  int     _AuxToggle2;

  int     _RenderingMode;
  int     _SourceBlend;
  int     _DestinationBlend;

  /* MARKER VARIABLES START */
int    _MaskChannel_1_Texture_UVBus;
float4 _MaskChannel_1_Texture_Tiling;
float4 _MaskChannel_1_Texture_Offset;
float4 _MaskChannel_1_Texture_ScrollSpeed;
int    _MaskChannel_1_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_1_Strength_PreInversion;
int    _MaskChannel_1_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_1_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_1_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_1_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_1_Strength_PostInversion;
int    _MaskChannel_1_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_1_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_1_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_1_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_2_Texture_UVBus;
float4 _MaskChannel_2_Texture_Tiling;
float4 _MaskChannel_2_Texture_Offset;
float4 _MaskChannel_2_Texture_ScrollSpeed;
int    _MaskChannel_2_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_2_Strength_PreInversion;
int    _MaskChannel_2_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_2_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_2_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_2_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_2_Strength_PostInversion;
int    _MaskChannel_2_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_2_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_2_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_2_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_3_Texture_UVBus;
float4 _MaskChannel_3_Texture_Tiling;
float4 _MaskChannel_3_Texture_Offset;
float4 _MaskChannel_3_Texture_ScrollSpeed;
int    _MaskChannel_3_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_3_Strength_PreInversion;
int    _MaskChannel_3_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_3_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_3_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_3_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_3_Strength_PostInversion;
int    _MaskChannel_3_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_3_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_3_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_3_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_4_Texture_UVBus;
float4 _MaskChannel_4_Texture_Tiling;
float4 _MaskChannel_4_Texture_Offset;
float4 _MaskChannel_4_Texture_ScrollSpeed;
int    _MaskChannel_4_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_4_Strength_PreInversion;
int    _MaskChannel_4_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_4_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_4_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_4_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_4_Strength_PostInversion;
int    _MaskChannel_4_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_4_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_4_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_4_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_5_Texture_UVBus;
float4 _MaskChannel_5_Texture_Tiling;
float4 _MaskChannel_5_Texture_Offset;
float4 _MaskChannel_5_Texture_ScrollSpeed;
int    _MaskChannel_5_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_5_Strength_PreInversion;
int    _MaskChannel_5_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_5_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_5_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_5_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_5_Strength_PostInversion;
int    _MaskChannel_5_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_5_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_5_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_5_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_6_Texture_UVBus;
float4 _MaskChannel_6_Texture_Tiling;
float4 _MaskChannel_6_Texture_Offset;
float4 _MaskChannel_6_Texture_ScrollSpeed;
int    _MaskChannel_6_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_6_Strength_PreInversion;
int    _MaskChannel_6_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_6_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_6_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_6_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_6_Strength_PostInversion;
int    _MaskChannel_6_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_6_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_6_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_6_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_7_Texture_UVBus;
float4 _MaskChannel_7_Texture_Tiling;
float4 _MaskChannel_7_Texture_Offset;
float4 _MaskChannel_7_Texture_ScrollSpeed;
int    _MaskChannel_7_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_7_Strength_PreInversion;
int    _MaskChannel_7_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_7_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_7_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_7_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_7_Strength_PostInversion;
int    _MaskChannel_7_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_7_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_7_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_7_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_8_Texture_UVBus;
float4 _MaskChannel_8_Texture_Tiling;
float4 _MaskChannel_8_Texture_Offset;
float4 _MaskChannel_8_Texture_ScrollSpeed;
int    _MaskChannel_8_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_8_Strength_PreInversion;
int    _MaskChannel_8_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_8_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_8_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_8_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_8_Strength_PostInversion;
int    _MaskChannel_8_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_8_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_8_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_8_Strength_PostInversion_Osci_Value_End;
int    _MainTex_AlphaIsMask;
float4 _MainTex_Tiling;
float4 _MainTex_Offset;
float4 _MainTex_ScrollSpeed;
int    _MainTex_ScrollSpeed_TimeBase;
int    _MainTex_UVBus;
int    _MainTex_MaskChannel;
int    _MainTex_MaskChannel_Inverted;
float  _MainTex_MaskChannel_Strength;
float  _MainTex_MaskChannel_Contrast;
float  _MainTex_MaskChannel_Brightness;
float4 _Color;
int    _Color_Osci_Enabled;
int    _Color_Osci_Slot;
float4 _Color_Osci_Color_Start;
float4 _Color_Osci_Color_End;
int    _Mix_MainTex_AlphaIsMask;
float4 _Mix_MainTex_Tiling;
float4 _Mix_MainTex_Offset;
float4 _Mix_MainTex_ScrollSpeed;
int    _Mix_MainTex_ScrollSpeed_TimeBase;
int    _Mix_MainTex_UVBus;
int    _Mix_MainTex_MaskChannel;
int    _Mix_MainTex_MaskChannel_Inverted;
float  _Mix_MainTex_MaskChannel_Strength;
float  _Mix_MainTex_MaskChannel_Contrast;
float  _Mix_MainTex_MaskChannel_Brightness;
float4 _Mix_Color;
int    _Mix_Color_Osci_Enabled;
int    _Mix_Color_Osci_Slot;
float4 _Mix_Color_Osci_Color_Start;
float4 _Mix_Color_Osci_Color_End;
int    _Mix_Separate_MainTex;
int    _SecondaryTex_AlphaIsMask;
float4 _SecondaryTex_Tiling;
float4 _SecondaryTex_Offset;
float4 _SecondaryTex_ScrollSpeed;
int    _SecondaryTex_ScrollSpeed_TimeBase;
int    _SecondaryTex_UVBus;
int    _SecondaryTex_MaskChannel;
int    _SecondaryTex_MaskChannel_Inverted;
float  _SecondaryTex_MaskChannel_Strength;
float  _SecondaryTex_MaskChannel_Contrast;
float  _SecondaryTex_MaskChannel_Brightness;
int    _SecondaryTex_BlendMode;
float4 _SecondaryTex_Color;
int    _SecondaryTex_Color_Osci_Enabled;
int    _SecondaryTex_Color_Osci_Slot;
float4 _SecondaryTex_Color_Osci_Color_Start;
float4 _SecondaryTex_Color_Osci_Color_End;
int    _Mix_SecondaryTex_AlphaIsMask;
float4 _Mix_SecondaryTex_Tiling;
float4 _Mix_SecondaryTex_Offset;
float4 _Mix_SecondaryTex_ScrollSpeed;
int    _Mix_SecondaryTex_ScrollSpeed_TimeBase;
int    _Mix_SecondaryTex_UVBus;
int    _Mix_SecondaryTex_MaskChannel;
int    _Mix_SecondaryTex_MaskChannel_Inverted;
float  _Mix_SecondaryTex_MaskChannel_Strength;
float  _Mix_SecondaryTex_MaskChannel_Contrast;
float  _Mix_SecondaryTex_MaskChannel_Brightness;
int    _Mix_SecondaryTex_BlendMode;
float4 _Mix_SecondaryTex_Color;
int    _Mix_SecondaryTex_Color_Osci_Enabled;
int    _Mix_SecondaryTex_Color_Osci_Slot;
float4 _Mix_SecondaryTex_Color_Osci_Color_Start;
float4 _Mix_SecondaryTex_Color_Osci_Color_End;
int    _Mix_Separate_SecondaryTex;
float  _Opacity;
int    _Opacity_MaskChannel;
int    _Opacity_MaskChannel_Inverted;
float  _Opacity_MaskChannel_Strength;
float  _Opacity_MaskChannel_Contrast;
float  _Opacity_MaskChannel_Brightness;
int    _Opacity_Osci_Enabled;
int    _Opacity_Osci_Slot;
float  _Opacity_Osci_Value_Start;
float  _Opacity_Osci_Value_End;
float  _Mix_Opacity;
int    _Mix_Opacity_MaskChannel;
int    _Mix_Opacity_MaskChannel_Inverted;
float  _Mix_Opacity_MaskChannel_Strength;
float  _Mix_Opacity_MaskChannel_Contrast;
float  _Mix_Opacity_MaskChannel_Brightness;
int    _Mix_Opacity_Osci_Enabled;
int    _Mix_Opacity_Osci_Slot;
float  _Mix_Opacity_Osci_Value_Start;
float  _Mix_Opacity_Osci_Value_End;
int    _Mix_Separate_Opacity;
float4 _OcclusionMap_Tiling;
float4 _OcclusionMap_Offset;
float4 _OcclusionMap_ScrollSpeed;
int    _OcclusionMap_ScrollSpeed_TimeBase;
int    _OcclusionMap_UVBus;
int    _OcclusionMap_MaskChannel;
int    _OcclusionMap_MaskChannel_Inverted;
float  _OcclusionMap_MaskChannel_Strength;
float  _OcclusionMap_MaskChannel_Contrast;
float  _OcclusionMap_MaskChannel_Brightness;
float  _OcclusionStrength;
float4 _Mix_OcclusionMap_Tiling;
float4 _Mix_OcclusionMap_Offset;
float4 _Mix_OcclusionMap_ScrollSpeed;
int    _Mix_OcclusionMap_ScrollSpeed_TimeBase;
int    _Mix_OcclusionMap_UVBus;
int    _Mix_OcclusionMap_MaskChannel;
int    _Mix_OcclusionMap_MaskChannel_Inverted;
float  _Mix_OcclusionMap_MaskChannel_Strength;
float  _Mix_OcclusionMap_MaskChannel_Contrast;
float  _Mix_OcclusionMap_MaskChannel_Brightness;
float  _Mix_OcclusionStrength;
int    _Mix_Separate_Occlusion;
float4 _BumpMap_Tiling;
float4 _BumpMap_Offset;
float4 _BumpMap_ScrollSpeed;
int    _BumpMap_ScrollSpeed_TimeBase;
int    _BumpMap_UVBus;
int    _BumpMap_MaskChannel;
int    _BumpMap_MaskChannel_Inverted;
float  _BumpMap_MaskChannel_Strength;
float  _BumpMap_MaskChannel_Contrast;
float  _BumpMap_MaskChannel_Brightness;
float  _BumpScale;
int    _BumpScale_Osci_Enabled;
int    _BumpScale_Osci_Slot;
float  _BumpScale_Osci_Value_Start;
float  _BumpScale_Osci_Value_End;
float4 _Mix_BumpMap_Tiling;
float4 _Mix_BumpMap_Offset;
float4 _Mix_BumpMap_ScrollSpeed;
int    _Mix_BumpMap_ScrollSpeed_TimeBase;
int    _Mix_BumpMap_UVBus;
int    _Mix_BumpMap_MaskChannel;
int    _Mix_BumpMap_MaskChannel_Inverted;
float  _Mix_BumpMap_MaskChannel_Strength;
float  _Mix_BumpMap_MaskChannel_Contrast;
float  _Mix_BumpMap_MaskChannel_Brightness;
float  _Mix_BumpScale;
int    _Mix_BumpScale_Osci_Enabled;
int    _Mix_BumpScale_Osci_Slot;
float  _Mix_BumpScale_Osci_Value_Start;
float  _Mix_BumpScale_Osci_Value_End;
int    _Mix_Separate_BumpMap;
float4 _DetailNormalMap_Tiling;
float4 _DetailNormalMap_Offset;
float4 _DetailNormalMap_ScrollSpeed;
int    _DetailNormalMap_ScrollSpeed_TimeBase;
int    _DetailNormalMap_UVBus;
int    _DetailNormalMap_MaskChannel;
int    _DetailNormalMap_MaskChannel_Inverted;
float  _DetailNormalMap_MaskChannel_Strength;
float  _DetailNormalMap_MaskChannel_Contrast;
float  _DetailNormalMap_MaskChannel_Brightness;
float  _DetailBumpScale;
int    _DetailBumpScale_Osci_Enabled;
int    _DetailBumpScale_Osci_Slot;
float  _DetailBumpScale_Osci_Value_Start;
float  _DetailBumpScale_Osci_Value_End;
float4 _Mix_DetailNormalMap_Tiling;
float4 _Mix_DetailNormalMap_Offset;
float4 _Mix_DetailNormalMap_ScrollSpeed;
int    _Mix_DetailNormalMap_ScrollSpeed_TimeBase;
int    _Mix_DetailNormalMap_UVBus;
int    _Mix_DetailNormalMap_MaskChannel;
int    _Mix_DetailNormalMap_MaskChannel_Inverted;
float  _Mix_DetailNormalMap_MaskChannel_Strength;
float  _Mix_DetailNormalMap_MaskChannel_Contrast;
float  _Mix_DetailNormalMap_MaskChannel_Brightness;
float  _Mix_DetailBumpScale;
int    _Mix_DetailBumpScale_Osci_Enabled;
int    _Mix_DetailBumpScale_Osci_Slot;
float  _Mix_DetailBumpScale_Osci_Value_Start;
float  _Mix_DetailBumpScale_Osci_Value_End;
int    _Mix_Separate_DetailNormalMap;
int    _EmissionMap_AlphaIsMask;
float4 _EmissionMap_Tiling;
float4 _EmissionMap_Offset;
float4 _EmissionMap_ScrollSpeed;
int    _EmissionMap_ScrollSpeed_TimeBase;
int    _EmissionMap_UVBus;
int    _EmissionMap_MaskChannel;
int    _EmissionMap_MaskChannel_Inverted;
float  _EmissionMap_MaskChannel_Strength;
float  _EmissionMap_MaskChannel_Contrast;
float  _EmissionMap_MaskChannel_Brightness;
float4 _EmissionColor;
int    _EmissionColor_Osci_Enabled;
int    _EmissionColor_Osci_Slot;
float4 _EmissionColor_Osci_Color_Start;
float4 _EmissionColor_Osci_Color_End;
int    _Mix_EmissionMap_AlphaIsMask;
float4 _Mix_EmissionMap_Tiling;
float4 _Mix_EmissionMap_Offset;
float4 _Mix_EmissionMap_ScrollSpeed;
int    _Mix_EmissionMap_ScrollSpeed_TimeBase;
int    _Mix_EmissionMap_UVBus;
int    _Mix_EmissionMap_MaskChannel;
int    _Mix_EmissionMap_MaskChannel_Inverted;
float  _Mix_EmissionMap_MaskChannel_Strength;
float  _Mix_EmissionMap_MaskChannel_Contrast;
float  _Mix_EmissionMap_MaskChannel_Brightness;
float4 _Mix_EmissionColor;
int    _Mix_EmissionColor_Osci_Enabled;
int    _Mix_EmissionColor_Osci_Slot;
float4 _Mix_EmissionColor_Osci_Color_Start;
float4 _Mix_EmissionColor_Osci_Color_End;
int    _Mix_Separate_Emission_1;
int    _EmissionMap2_AlphaIsMask;
float4 _EmissionMap2_Tiling;
float4 _EmissionMap2_Offset;
float4 _EmissionMap2_ScrollSpeed;
int    _EmissionMap2_ScrollSpeed_TimeBase;
int    _EmissionMap2_UVBus;
int    _EmissionMap2_MaskChannel;
int    _EmissionMap2_MaskChannel_Inverted;
float  _EmissionMap2_MaskChannel_Strength;
float  _EmissionMap2_MaskChannel_Contrast;
float  _EmissionMap2_MaskChannel_Brightness;
float4 _EmissionColor2;
int    _EmissionColor2_Osci_Enabled;
int    _EmissionColor2_Osci_Slot;
float4 _EmissionColor2_Osci_Color_Start;
float4 _EmissionColor2_Osci_Color_End;
int    _Mix_EmissionMap2_AlphaIsMask;
float4 _Mix_EmissionMap2_Tiling;
float4 _Mix_EmissionMap2_Offset;
float4 _Mix_EmissionMap2_ScrollSpeed;
int    _Mix_EmissionMap2_ScrollSpeed_TimeBase;
int    _Mix_EmissionMap2_UVBus;
int    _Mix_EmissionMap2_MaskChannel;
int    _Mix_EmissionMap2_MaskChannel_Inverted;
float  _Mix_EmissionMap2_MaskChannel_Strength;
float  _Mix_EmissionMap2_MaskChannel_Contrast;
float  _Mix_EmissionMap2_MaskChannel_Brightness;
float4 _Mix_EmissionColor2;
int    _Mix_EmissionColor2_Osci_Enabled;
int    _Mix_EmissionColor2_Osci_Slot;
float4 _Mix_EmissionColor2_Osci_Color_Start;
float4 _Mix_EmissionColor2_Osci_Color_End;
int    _Mix_Separate_Emission_2;
int    _Matcap_1_Texture_AlphaIsMask;
int    _Matcap_1_Texture_MaskChannel;
int    _Matcap_1_Texture_MaskChannel_Inverted;
float  _Matcap_1_Texture_MaskChannel_Strength;
float  _Matcap_1_Texture_MaskChannel_Contrast;
float  _Matcap_1_Texture_MaskChannel_Brightness;
float4 _Matcap_1_Color;
int    _Matcap_1_Color_Osci_Enabled;
int    _Matcap_1_Color_Osci_Slot;
float4 _Matcap_1_Color_Osci_Color_Start;
float4 _Matcap_1_Color_Osci_Color_End;
int    _Matcap_1_Lighting_Enabled;
float  _Matcap_1_Size;
int    _Mix_Matcap_1_Texture_AlphaIsMask;
int    _Mix_Matcap_1_Texture_MaskChannel;
int    _Mix_Matcap_1_Texture_MaskChannel_Inverted;
float  _Mix_Matcap_1_Texture_MaskChannel_Strength;
float  _Mix_Matcap_1_Texture_MaskChannel_Contrast;
float  _Mix_Matcap_1_Texture_MaskChannel_Brightness;
float4 _Mix_Matcap_1_Color;
int    _Mix_Matcap_1_Color_Osci_Enabled;
int    _Mix_Matcap_1_Color_Osci_Slot;
float4 _Mix_Matcap_1_Color_Osci_Color_Start;
float4 _Mix_Matcap_1_Color_Osci_Color_End;
int    _Mix_Matcap_1_Lighting_Enabled;
float  _Mix_Matcap_1_Size;
int    _Mix_Separate_Matcap_1;
int    _Matcap_2_Texture_AlphaIsMask;
int    _Matcap_2_Texture_MaskChannel;
int    _Matcap_2_Texture_MaskChannel_Inverted;
float  _Matcap_2_Texture_MaskChannel_Strength;
float  _Matcap_2_Texture_MaskChannel_Contrast;
float  _Matcap_2_Texture_MaskChannel_Brightness;
float4 _Matcap_2_Color;
int    _Matcap_2_Color_Osci_Enabled;
int    _Matcap_2_Color_Osci_Slot;
float4 _Matcap_2_Color_Osci_Color_Start;
float4 _Matcap_2_Color_Osci_Color_End;
int    _Matcap_2_Lighting_Enabled;
float  _Matcap_2_Size;
int    _Mix_Matcap_2_Texture_AlphaIsMask;
int    _Mix_Matcap_2_Texture_MaskChannel;
int    _Mix_Matcap_2_Texture_MaskChannel_Inverted;
float  _Mix_Matcap_2_Texture_MaskChannel_Strength;
float  _Mix_Matcap_2_Texture_MaskChannel_Contrast;
float  _Mix_Matcap_2_Texture_MaskChannel_Brightness;
float4 _Mix_Matcap_2_Color;
int    _Mix_Matcap_2_Color_Osci_Enabled;
int    _Mix_Matcap_2_Color_Osci_Slot;
float4 _Mix_Matcap_2_Color_Osci_Color_Start;
float4 _Mix_Matcap_2_Color_Osci_Color_End;
int    _Mix_Matcap_2_Lighting_Enabled;
float  _Mix_Matcap_2_Size;
int    _Mix_Separate_Matcap_2;
int    _Matcap_3_Texture_AlphaIsMask;
int    _Matcap_3_Texture_MaskChannel;
int    _Matcap_3_Texture_MaskChannel_Inverted;
float  _Matcap_3_Texture_MaskChannel_Strength;
float  _Matcap_3_Texture_MaskChannel_Contrast;
float  _Matcap_3_Texture_MaskChannel_Brightness;
float4 _Matcap_3_Color;
int    _Matcap_3_Color_Osci_Enabled;
int    _Matcap_3_Color_Osci_Slot;
float4 _Matcap_3_Color_Osci_Color_Start;
float4 _Matcap_3_Color_Osci_Color_End;
int    _Matcap_3_Lighting_Enabled;
float  _Matcap_3_Size;
int    _Mix_Matcap_3_Texture_AlphaIsMask;
int    _Mix_Matcap_3_Texture_MaskChannel;
int    _Mix_Matcap_3_Texture_MaskChannel_Inverted;
float  _Mix_Matcap_3_Texture_MaskChannel_Strength;
float  _Mix_Matcap_3_Texture_MaskChannel_Contrast;
float  _Mix_Matcap_3_Texture_MaskChannel_Brightness;
float4 _Mix_Matcap_3_Color;
int    _Mix_Matcap_3_Color_Osci_Enabled;
int    _Mix_Matcap_3_Color_Osci_Slot;
float4 _Mix_Matcap_3_Color_Osci_Color_Start;
float4 _Mix_Matcap_3_Color_Osci_Color_End;
int    _Mix_Matcap_3_Lighting_Enabled;
float  _Mix_Matcap_3_Size;
int    _Mix_Separate_Matcap_3;
float  _AlbedoEmissionWeight;
int    _AlbedoEmissionWeight_MaskChannel;
int    _AlbedoEmissionWeight_MaskChannel_Inverted;
float  _AlbedoEmissionWeight_MaskChannel_Strength;
float  _AlbedoEmissionWeight_MaskChannel_Contrast;
float  _AlbedoEmissionWeight_MaskChannel_Brightness;
int    _AlbedoEmissionWeight_Osci_Enabled;
int    _AlbedoEmissionWeight_Osci_Slot;
float  _AlbedoEmissionWeight_Osci_Value_Start;
float  _AlbedoEmissionWeight_Osci_Value_End;
float4 _AddedEmissionColor;
int    _AddedEmissionColor_MaskChannel;
int    _AddedEmissionColor_MaskChannel_Inverted;
float  _AddedEmissionColor_MaskChannel_Strength;
float  _AddedEmissionColor_MaskChannel_Contrast;
float  _AddedEmissionColor_MaskChannel_Brightness;
int    _AddedEmissionColor_Osci_Enabled;
int    _AddedEmissionColor_Osci_Slot;
float4 _AddedEmissionColor_Osci_Color_Start;
float4 _AddedEmissionColor_Osci_Color_End;
float  _Mix_AlbedoEmissionWeight;
int    _Mix_AlbedoEmissionWeight_MaskChannel;
int    _Mix_AlbedoEmissionWeight_MaskChannel_Inverted;
float  _Mix_AlbedoEmissionWeight_MaskChannel_Strength;
float  _Mix_AlbedoEmissionWeight_MaskChannel_Contrast;
float  _Mix_AlbedoEmissionWeight_MaskChannel_Brightness;
int    _Mix_AlbedoEmissionWeight_Osci_Enabled;
int    _Mix_AlbedoEmissionWeight_Osci_Slot;
float  _Mix_AlbedoEmissionWeight_Osci_Value_Start;
float  _Mix_AlbedoEmissionWeight_Osci_Value_End;
float4 _Mix_AddedEmissionColor;
int    _Mix_AddedEmissionColor_MaskChannel;
int    _Mix_AddedEmissionColor_MaskChannel_Inverted;
float  _Mix_AddedEmissionColor_MaskChannel_Strength;
float  _Mix_AddedEmissionColor_MaskChannel_Contrast;
float  _Mix_AddedEmissionColor_MaskChannel_Brightness;
int    _Mix_AddedEmissionColor_Osci_Enabled;
int    _Mix_AddedEmissionColor_Osci_Slot;
float4 _Mix_AddedEmissionColor_Osci_Color_Start;
float4 _Mix_AddedEmissionColor_Osci_Color_End;
int    _Mix_Separate_Emission_Const;
float  _Glossiness;
int    _Glossiness_MaskChannel;
int    _Glossiness_MaskChannel_Inverted;
float  _Glossiness_MaskChannel_Strength;
float  _Glossiness_MaskChannel_Contrast;
float  _Glossiness_MaskChannel_Brightness;
float  _Metallic;
int    _Metallic_MaskChannel;
int    _Metallic_MaskChannel_Inverted;
float  _Metallic_MaskChannel_Strength;
float  _Metallic_MaskChannel_Contrast;
float  _Metallic_MaskChannel_Brightness;
float  _Mix_Glossiness;
int    _Mix_Glossiness_MaskChannel;
int    _Mix_Glossiness_MaskChannel_Inverted;
float  _Mix_Glossiness_MaskChannel_Strength;
float  _Mix_Glossiness_MaskChannel_Contrast;
float  _Mix_Glossiness_MaskChannel_Brightness;
float  _Mix_Metallic;
int    _Mix_Metallic_MaskChannel;
int    _Mix_Metallic_MaskChannel_Inverted;
float  _Mix_Metallic_MaskChannel_Strength;
float  _Mix_Metallic_MaskChannel_Contrast;
float  _Mix_Metallic_MaskChannel_Brightness;
int    _Mix_Separate_MetallicGlossiness;
int    _GSAA_Enabled;
int    _Goo_Enabled;
float  _Goo_Size;
int    _Goo_Size_Osci_Enabled;
int    _Goo_Size_Osci_Slot;
float  _Goo_Size_Osci_Value_Start;
float  _Goo_Size_Osci_Value_End;
float4 _Goo_Speed;
int    _Goo_Speed_TimeBase;
float4 _Goo_Offset;
int    _Goo_Offset_Osci_Enabled;
int    _Goo_Offset_Osci_Slot;
float4 _Goo_Offset_Osci_Color_Start;
float4 _Goo_Offset_Osci_Color_End;
float  _Goo_Normal_Offset_Min_Degrees;
float  _Goo_Normal_Offset_Max_Degrees;
int    _Goo_Deformation_Enabled;
float  _Goo_Deformation_MeshNormal_Offset_Min;
int    _Goo_Deformation_MeshNormal_Offset_Min_Osci_Enabled;
int    _Goo_Deformation_MeshNormal_Offset_Min_Osci_Slot;
float  _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_Start;
float  _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_End;
float  _Goo_Deformation_MeshNormal_Offset_Max;
int    _Goo_Deformation_MeshNormal_Offset_Max_Osci_Enabled;
int    _Goo_Deformation_MeshNormal_Offset_Max_Osci_Slot;
float  _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_Start;
float  _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_End;
float  _Goo_Deformation_ProceduralNormal_Size;
int    _Goo_Deformation_ProceduralNormal_Size_Osci_Enabled;
int    _Goo_Deformation_ProceduralNormal_Size_Osci_Slot;
float  _Goo_Deformation_ProceduralNormal_Size_Osci_Value_Start;
float  _Goo_Deformation_ProceduralNormal_Size_Osci_Value_End;
int    _Goo_Deformation_ApplyOnMaterialMix;
int    _Goo_Deformation_MeshNormal_MaskChannel;
int    _Goo_Deformation_MeshNormal_MaskChannel_Inverted;
float  _Goo_Deformation_MeshNormal_MaskChannel_Strength;
float  _Goo_Deformation_MeshNormal_MaskChannel_Contrast;
float  _Goo_Deformation_MeshNormal_MaskChannel_Brightness;
int    _Goo_Drip_Enabled;
float  _Goo_Drip_Size;
int    _Goo_Drip_Size_Osci_Enabled;
int    _Goo_Drip_Size_Osci_Slot;
float  _Goo_Drip_Size_Osci_Value_Start;
float  _Goo_Drip_Size_Osci_Value_End;
float  _Goo_Drip_Start;
int    _Goo_Drip_Start_Osci_Enabled;
int    _Goo_Drip_Start_Osci_Slot;
float  _Goo_Drip_Start_Osci_Value_Start;
float  _Goo_Drip_Start_Osci_Value_End;
float  _Goo_Drip_End;
int    _Goo_Drip_End_Osci_Enabled;
int    _Goo_Drip_End_Osci_Slot;
float  _Goo_Drip_End_Osci_Value_Start;
float  _Goo_Drip_End_Osci_Value_End;
float  _Goo_Drip_Amount;
int    _Goo_Drip_Amount_Osci_Enabled;
int    _Goo_Drip_Amount_Osci_Slot;
float  _Goo_Drip_Amount_Osci_Value_Start;
float  _Goo_Drip_Amount_Osci_Value_End;
int    _Goo_Drip_MaskChannel;
int    _Goo_Drip_MaskChannel_Inverted;
float  _Goo_Drip_MaskChannel_Strength;
float  _Goo_Drip_MaskChannel_Contrast;
float  _Goo_Drip_MaskChannel_Brightness;
int    _Goo_Drip_ApplyOnMaterialMix;
float4 _Goo_Drip_Gravity_Vector;
float4 _CapsuleMask_1_Origin;
int    _CapsuleMask_1_Origin_Osci_Enabled;
int    _CapsuleMask_1_Origin_Osci_Slot;
float4 _CapsuleMask_1_Origin_Osci_Color_Start;
float4 _CapsuleMask_1_Origin_Osci_Color_End;
float4 _CapsuleMask_1_Axis;
int    _CapsuleMask_1_Axis_Osci_Enabled;
int    _CapsuleMask_1_Axis_Osci_Slot;
float4 _CapsuleMask_1_Axis_Osci_Color_Start;
float4 _CapsuleMask_1_Axis_Osci_Color_End;
int    _CapsuleMask_1_Flip;
float  _CapsuleMask_1_Radius;
int    _CapsuleMask_1_Radius_Osci_Enabled;
int    _CapsuleMask_1_Radius_Osci_Slot;
float  _CapsuleMask_1_Radius_Osci_Value_Start;
float  _CapsuleMask_1_Radius_Osci_Value_End;
float  _CapsuleMask_1_Height;
int    _CapsuleMask_1_Height_Osci_Enabled;
int    _CapsuleMask_1_Height_Osci_Slot;
float  _CapsuleMask_1_Height_Osci_Value_Start;
float  _CapsuleMask_1_Height_Osci_Value_End;
float  _CapsuleMask_1_Strength_PreInversion;
int    _CapsuleMask_1_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_1_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_1_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_1_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_1_Strength_PostInversion;
int    _CapsuleMask_1_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_1_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_1_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_1_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_2_Origin;
int    _CapsuleMask_2_Origin_Osci_Enabled;
int    _CapsuleMask_2_Origin_Osci_Slot;
float4 _CapsuleMask_2_Origin_Osci_Color_Start;
float4 _CapsuleMask_2_Origin_Osci_Color_End;
float4 _CapsuleMask_2_Axis;
int    _CapsuleMask_2_Axis_Osci_Enabled;
int    _CapsuleMask_2_Axis_Osci_Slot;
float4 _CapsuleMask_2_Axis_Osci_Color_Start;
float4 _CapsuleMask_2_Axis_Osci_Color_End;
int    _CapsuleMask_2_Flip;
float  _CapsuleMask_2_Radius;
int    _CapsuleMask_2_Radius_Osci_Enabled;
int    _CapsuleMask_2_Radius_Osci_Slot;
float  _CapsuleMask_2_Radius_Osci_Value_Start;
float  _CapsuleMask_2_Radius_Osci_Value_End;
float  _CapsuleMask_2_Height;
int    _CapsuleMask_2_Height_Osci_Enabled;
int    _CapsuleMask_2_Height_Osci_Slot;
float  _CapsuleMask_2_Height_Osci_Value_Start;
float  _CapsuleMask_2_Height_Osci_Value_End;
float  _CapsuleMask_2_Strength_PreInversion;
int    _CapsuleMask_2_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_2_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_2_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_2_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_2_Strength_PostInversion;
int    _CapsuleMask_2_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_2_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_2_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_2_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_3_Origin;
int    _CapsuleMask_3_Origin_Osci_Enabled;
int    _CapsuleMask_3_Origin_Osci_Slot;
float4 _CapsuleMask_3_Origin_Osci_Color_Start;
float4 _CapsuleMask_3_Origin_Osci_Color_End;
float4 _CapsuleMask_3_Axis;
int    _CapsuleMask_3_Axis_Osci_Enabled;
int    _CapsuleMask_3_Axis_Osci_Slot;
float4 _CapsuleMask_3_Axis_Osci_Color_Start;
float4 _CapsuleMask_3_Axis_Osci_Color_End;
int    _CapsuleMask_3_Flip;
float  _CapsuleMask_3_Radius;
int    _CapsuleMask_3_Radius_Osci_Enabled;
int    _CapsuleMask_3_Radius_Osci_Slot;
float  _CapsuleMask_3_Radius_Osci_Value_Start;
float  _CapsuleMask_3_Radius_Osci_Value_End;
float  _CapsuleMask_3_Height;
int    _CapsuleMask_3_Height_Osci_Enabled;
int    _CapsuleMask_3_Height_Osci_Slot;
float  _CapsuleMask_3_Height_Osci_Value_Start;
float  _CapsuleMask_3_Height_Osci_Value_End;
float  _CapsuleMask_3_Strength_PreInversion;
int    _CapsuleMask_3_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_3_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_3_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_3_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_3_Strength_PostInversion;
int    _CapsuleMask_3_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_3_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_3_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_3_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_4_Origin;
int    _CapsuleMask_4_Origin_Osci_Enabled;
int    _CapsuleMask_4_Origin_Osci_Slot;
float4 _CapsuleMask_4_Origin_Osci_Color_Start;
float4 _CapsuleMask_4_Origin_Osci_Color_End;
float4 _CapsuleMask_4_Axis;
int    _CapsuleMask_4_Axis_Osci_Enabled;
int    _CapsuleMask_4_Axis_Osci_Slot;
float4 _CapsuleMask_4_Axis_Osci_Color_Start;
float4 _CapsuleMask_4_Axis_Osci_Color_End;
int    _CapsuleMask_4_Flip;
float  _CapsuleMask_4_Radius;
int    _CapsuleMask_4_Radius_Osci_Enabled;
int    _CapsuleMask_4_Radius_Osci_Slot;
float  _CapsuleMask_4_Radius_Osci_Value_Start;
float  _CapsuleMask_4_Radius_Osci_Value_End;
float  _CapsuleMask_4_Height;
int    _CapsuleMask_4_Height_Osci_Enabled;
int    _CapsuleMask_4_Height_Osci_Slot;
float  _CapsuleMask_4_Height_Osci_Value_Start;
float  _CapsuleMask_4_Height_Osci_Value_End;
float  _CapsuleMask_4_Strength_PreInversion;
int    _CapsuleMask_4_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_4_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_4_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_4_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_4_Strength_PostInversion;
int    _CapsuleMask_4_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_4_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_4_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_4_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_5_Origin;
int    _CapsuleMask_5_Origin_Osci_Enabled;
int    _CapsuleMask_5_Origin_Osci_Slot;
float4 _CapsuleMask_5_Origin_Osci_Color_Start;
float4 _CapsuleMask_5_Origin_Osci_Color_End;
float4 _CapsuleMask_5_Axis;
int    _CapsuleMask_5_Axis_Osci_Enabled;
int    _CapsuleMask_5_Axis_Osci_Slot;
float4 _CapsuleMask_5_Axis_Osci_Color_Start;
float4 _CapsuleMask_5_Axis_Osci_Color_End;
int    _CapsuleMask_5_Flip;
float  _CapsuleMask_5_Radius;
int    _CapsuleMask_5_Radius_Osci_Enabled;
int    _CapsuleMask_5_Radius_Osci_Slot;
float  _CapsuleMask_5_Radius_Osci_Value_Start;
float  _CapsuleMask_5_Radius_Osci_Value_End;
float  _CapsuleMask_5_Height;
int    _CapsuleMask_5_Height_Osci_Enabled;
int    _CapsuleMask_5_Height_Osci_Slot;
float  _CapsuleMask_5_Height_Osci_Value_Start;
float  _CapsuleMask_5_Height_Osci_Value_End;
float  _CapsuleMask_5_Strength_PreInversion;
int    _CapsuleMask_5_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_5_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_5_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_5_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_5_Strength_PostInversion;
int    _CapsuleMask_5_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_5_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_5_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_5_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_6_Origin;
int    _CapsuleMask_6_Origin_Osci_Enabled;
int    _CapsuleMask_6_Origin_Osci_Slot;
float4 _CapsuleMask_6_Origin_Osci_Color_Start;
float4 _CapsuleMask_6_Origin_Osci_Color_End;
float4 _CapsuleMask_6_Axis;
int    _CapsuleMask_6_Axis_Osci_Enabled;
int    _CapsuleMask_6_Axis_Osci_Slot;
float4 _CapsuleMask_6_Axis_Osci_Color_Start;
float4 _CapsuleMask_6_Axis_Osci_Color_End;
int    _CapsuleMask_6_Flip;
float  _CapsuleMask_6_Radius;
int    _CapsuleMask_6_Radius_Osci_Enabled;
int    _CapsuleMask_6_Radius_Osci_Slot;
float  _CapsuleMask_6_Radius_Osci_Value_Start;
float  _CapsuleMask_6_Radius_Osci_Value_End;
float  _CapsuleMask_6_Height;
int    _CapsuleMask_6_Height_Osci_Enabled;
int    _CapsuleMask_6_Height_Osci_Slot;
float  _CapsuleMask_6_Height_Osci_Value_Start;
float  _CapsuleMask_6_Height_Osci_Value_End;
float  _CapsuleMask_6_Strength_PreInversion;
int    _CapsuleMask_6_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_6_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_6_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_6_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_6_Strength_PostInversion;
int    _CapsuleMask_6_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_6_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_6_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_6_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_7_Origin;
int    _CapsuleMask_7_Origin_Osci_Enabled;
int    _CapsuleMask_7_Origin_Osci_Slot;
float4 _CapsuleMask_7_Origin_Osci_Color_Start;
float4 _CapsuleMask_7_Origin_Osci_Color_End;
float4 _CapsuleMask_7_Axis;
int    _CapsuleMask_7_Axis_Osci_Enabled;
int    _CapsuleMask_7_Axis_Osci_Slot;
float4 _CapsuleMask_7_Axis_Osci_Color_Start;
float4 _CapsuleMask_7_Axis_Osci_Color_End;
int    _CapsuleMask_7_Flip;
float  _CapsuleMask_7_Radius;
int    _CapsuleMask_7_Radius_Osci_Enabled;
int    _CapsuleMask_7_Radius_Osci_Slot;
float  _CapsuleMask_7_Radius_Osci_Value_Start;
float  _CapsuleMask_7_Radius_Osci_Value_End;
float  _CapsuleMask_7_Height;
int    _CapsuleMask_7_Height_Osci_Enabled;
int    _CapsuleMask_7_Height_Osci_Slot;
float  _CapsuleMask_7_Height_Osci_Value_Start;
float  _CapsuleMask_7_Height_Osci_Value_End;
float  _CapsuleMask_7_Strength_PreInversion;
int    _CapsuleMask_7_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_7_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_7_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_7_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_7_Strength_PostInversion;
int    _CapsuleMask_7_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_7_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_7_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_7_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_8_Origin;
int    _CapsuleMask_8_Origin_Osci_Enabled;
int    _CapsuleMask_8_Origin_Osci_Slot;
float4 _CapsuleMask_8_Origin_Osci_Color_Start;
float4 _CapsuleMask_8_Origin_Osci_Color_End;
float4 _CapsuleMask_8_Axis;
int    _CapsuleMask_8_Axis_Osci_Enabled;
int    _CapsuleMask_8_Axis_Osci_Slot;
float4 _CapsuleMask_8_Axis_Osci_Color_Start;
float4 _CapsuleMask_8_Axis_Osci_Color_End;
int    _CapsuleMask_8_Flip;
float  _CapsuleMask_8_Radius;
int    _CapsuleMask_8_Radius_Osci_Enabled;
int    _CapsuleMask_8_Radius_Osci_Slot;
float  _CapsuleMask_8_Radius_Osci_Value_Start;
float  _CapsuleMask_8_Radius_Osci_Value_End;
float  _CapsuleMask_8_Height;
int    _CapsuleMask_8_Height_Osci_Enabled;
int    _CapsuleMask_8_Height_Osci_Slot;
float  _CapsuleMask_8_Height_Osci_Value_Start;
float  _CapsuleMask_8_Height_Osci_Value_End;
float  _CapsuleMask_8_Strength_PreInversion;
int    _CapsuleMask_8_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_8_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_8_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_8_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_8_Strength_PostInversion;
int    _CapsuleMask_8_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_8_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_8_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_8_Strength_PostInversion_Osci_Value_End;
int    _Physbone_1_Enabled;
int    _Physbone_1_MaskChannel;
int    _Physbone_1_MaskChannel_Inverted;
float  _Physbone_1_MaskChannel_Strength;
float  _Physbone_1_MaskChannel_Contrast;
float  _Physbone_1_MaskChannel_Brightness;
float  _Physbone_1_Proximity_X;
float  _Physbone_1_Proximity_Y;
float  _Physbone_1_Proximity_Z;
int    _Physbone_2_Enabled;
int    _Physbone_2_MaskChannel;
int    _Physbone_2_MaskChannel_Inverted;
float  _Physbone_2_MaskChannel_Strength;
float  _Physbone_2_MaskChannel_Contrast;
float  _Physbone_2_MaskChannel_Brightness;
float  _Physbone_2_Proximity_X;
float  _Physbone_2_Proximity_Y;
float  _Physbone_2_Proximity_Z;
int    _Physbone_3_Enabled;
int    _Physbone_3_MaskChannel;
int    _Physbone_3_MaskChannel_Inverted;
float  _Physbone_3_MaskChannel_Strength;
float  _Physbone_3_MaskChannel_Contrast;
float  _Physbone_3_MaskChannel_Brightness;
float  _Physbone_3_Proximity_X;
float  _Physbone_3_Proximity_Y;
float  _Physbone_3_Proximity_Z;
int    _Physbone_4_Enabled;
int    _Physbone_4_MaskChannel;
int    _Physbone_4_MaskChannel_Inverted;
float  _Physbone_4_MaskChannel_Strength;
float  _Physbone_4_MaskChannel_Contrast;
float  _Physbone_4_MaskChannel_Brightness;
float  _Physbone_4_Proximity_X;
float  _Physbone_4_Proximity_Y;
float  _Physbone_4_Proximity_Z;
int    _Physics_Body_ApplyOnMaterialMix;
float  _Physbone_Drip_DragForce_Strength;
int    _Physbone_Drip_MaskChannel;
int    _Physbone_Drip_MaskChannel_Inverted;
float  _Physbone_Drip_MaskChannel_Strength;
float  _Physbone_Drip_MaskChannel_Contrast;
float  _Physbone_Drip_MaskChannel_Brightness;
float  _Physbone_Body_DragForce_Strength;
int    _Physbone_Body_MaskChannel;
int    _Physbone_Body_MaskChannel_Inverted;
float  _Physbone_Body_MaskChannel_Strength;
float  _Physbone_Body_MaskChannel_Contrast;
float  _Physbone_Body_MaskChannel_Brightness;
int    _TF_Enabled;
int    _TF_Manual_MaskChannel;
int    _TF_Manual_MaskChannel_Inverted;
float  _TF_Manual_MaskChannel_Strength;
float  _TF_Manual_MaskChannel_Contrast;
float  _TF_Manual_MaskChannel_Brightness;
int    _TF_Manual_Osci_Enabled;
int    _TF_Manual_Osci_Slot;
float  _TF_Manual_Osci_Value_Start;
float  _TF_Manual_Osci_Value_End;
int    _TF_ManualBuiltin_BlendMode;
int    _DebugVisualisation_Type;
int    _DebugVisualisation_MaskChannel;
int    _DebugVisualisation_MaskChannel_Inverted;
float  _DebugVisualisation_MaskChannel_Strength;
float  _DebugVisualisation_MaskChannel_Contrast;
float  _DebugVisualisation_MaskChannel_Brightness;
int    _DebugVisualisation_UVBus;
int    _TF_Bulging_Enabled;
int    _TF_Bulging_MaskChannel;
int    _TF_Bulging_MaskChannel_Inverted;
float  _TF_Bulging_MaskChannel_Strength;
float  _TF_Bulging_MaskChannel_Contrast;
float  _TF_Bulging_MaskChannel_Brightness;
float  _TF_Bulging_Size;
float  _TF_Animation_Bulging_Offset;
int    _FakeCubemap_Enabled;
float  _FakeCubemap_Blend;
float  _FakeCubemap_Exposure;
float4 _FakeCubemap_Tint2;
int    _FakeCubemap_AppearsOnMaterial;
float4 _World_ReflectionProbe_Tint;
float4 _Specular_Tint;
int    _TouchReactivity_Mode;
float  _TouchReactivity_Strength;
int    _TouchReactivity_MaskChannel;
int    _TouchReactivity_MaskChannel_Inverted;
float  _TouchReactivity_MaskChannel_Strength;
float  _TouchReactivity_MaskChannel_Contrast;
float  _TouchReactivity_MaskChannel_Brightness;
int    _TouchReactivity_And_PD_ApplyOnMaterialMix;
float  _TouchReactivity_Remap_End;
int    _TouchReactivity_Bypassed;
int    _TouchReactivity_SafeMode4000;
float  _TouchReactivity_Dispersion;
int    _ProximityDistortion_Enabled;
int    _ProximityDistortion_MaskChannel;
int    _ProximityDistortion_MaskChannel_Inverted;
float  _ProximityDistortion_MaskChannel_Strength;
float  _ProximityDistortion_MaskChannel_Contrast;
float  _ProximityDistortion_MaskChannel_Brightness;
float  _ProximityDistortion_Depth_Start;
float  _ProximityDistortion_Depth_End;
int    _TF_Mode;
float4 _TF_AnimationMap_Offset;
float4 _TF_AnimationMap_Scale;
float  _TF_AnimationMap_Mip;
int    _TF_AnimationMap_UseUVBus;
int    _TF_AnimationMap_UVBus;
float  _TF_Time;
int    _TF_Time_Osci_Enabled;
int    _TF_Time_Osci_Slot;
float  _TF_Time_Osci_Value_Start;
float  _TF_Time_Osci_Value_End;
int    _TF_Visualisation_Enabled;
float  _TF_Visualisation_Speed;
float  _TF_Animation_Blur_PS;
float  _TF_Animation_Blur_VS;
float  _TF_Animation_Radial_Radius;
float4 _TF_Animation_Radial_Origin;
int    _TF_Animation_Radial_LegacyNoise_Enabled;
int    _TF_Animation_CenterOut_Invert;
int    _GlossyReflections_Enabled;
int    _SpecularHightlights_Enabled;
float  _IndirectLighting_Amount;
float  _LightMix_Sensitivity;
int    _LightMix_Sensitivity_Osci_Enabled;
int    _LightMix_Sensitivity_Osci_Slot;
float  _LightMix_Sensitivity_Osci_Value_Start;
float  _LightMix_Sensitivity_Osci_Value_End;
int    _IntersectionModulation_HSV_Enabled;
float  _IntersectionModulation_HSV_Hue_Amount;
float  _IntersectionModulation_HSV_Saturation_Amount;
float  _IntersectionModulation_HSV_Value_Amount;
int    _IntersectionModulation_Color_Enabled;
float4 _IntersectionModulation_Color_Target;
int    _IntersectionModulation_Opacity_Enabled;
float  _IntersectionModulation_Opacity_Amount;
float  _IntersectionModulation_Depth_Start;
float  _IntersectionModulation_Depth_End;
float  _NormalOffset_Amount;
int    _UVBus_1_Source;
int    _UVBus_1_VertexChannel_Channel;
int    _UVBus_1_WorldLocation_XComponent;
int    _UVBus_1_WorldLocation_YComponent;
int    _UVBus_1_BakedVertex_XComponent;
int    _UVBus_1_BakedVertex_YComponent;
int    _UVBus_1_SkinnedVertex_XComponent;
int    _UVBus_1_SkinnedVertex_YComponent;
float4 _UVBus_1_Distortion_Texture_ScrollSpeed;
int    _UVBus_1_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_1_Distortion_Texture_Tiling;
float4 _UVBus_1_Distortion_Texture_Offset;
float  _UVBus_1_Distortion_Texture_Strength;
int    _UVBus_1_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_1_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_1_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_1_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_1_Distortion_Texture_UVBus;
int    _UVBus_2_Source;
int    _UVBus_2_VertexChannel_Channel;
int    _UVBus_2_WorldLocation_XComponent;
int    _UVBus_2_WorldLocation_YComponent;
int    _UVBus_2_BakedVertex_XComponent;
int    _UVBus_2_BakedVertex_YComponent;
int    _UVBus_2_SkinnedVertex_XComponent;
int    _UVBus_2_SkinnedVertex_YComponent;
float4 _UVBus_2_Distortion_Texture_ScrollSpeed;
int    _UVBus_2_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_2_Distortion_Texture_Tiling;
float4 _UVBus_2_Distortion_Texture_Offset;
float  _UVBus_2_Distortion_Texture_Strength;
int    _UVBus_2_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_2_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_2_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_2_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_2_Distortion_Texture_UVBus;
int    _UVBus_3_Source;
int    _UVBus_3_VertexChannel_Channel;
int    _UVBus_3_WorldLocation_XComponent;
int    _UVBus_3_WorldLocation_YComponent;
int    _UVBus_3_BakedVertex_XComponent;
int    _UVBus_3_BakedVertex_YComponent;
int    _UVBus_3_SkinnedVertex_XComponent;
int    _UVBus_3_SkinnedVertex_YComponent;
float4 _UVBus_3_Distortion_Texture_ScrollSpeed;
int    _UVBus_3_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_3_Distortion_Texture_Tiling;
float4 _UVBus_3_Distortion_Texture_Offset;
float  _UVBus_3_Distortion_Texture_Strength;
int    _UVBus_3_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_3_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_3_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_3_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_3_Distortion_Texture_UVBus;
int    _UVBus_4_Source;
int    _UVBus_4_VertexChannel_Channel;
int    _UVBus_4_WorldLocation_XComponent;
int    _UVBus_4_WorldLocation_YComponent;
int    _UVBus_4_BakedVertex_XComponent;
int    _UVBus_4_BakedVertex_YComponent;
int    _UVBus_4_SkinnedVertex_XComponent;
int    _UVBus_4_SkinnedVertex_YComponent;
float4 _UVBus_4_Distortion_Texture_ScrollSpeed;
int    _UVBus_4_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_4_Distortion_Texture_Tiling;
float4 _UVBus_4_Distortion_Texture_Offset;
float  _UVBus_4_Distortion_Texture_Strength;
int    _UVBus_4_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_4_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_4_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_4_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_4_Distortion_Texture_UVBus;
int    _UVBus_5_Source;
int    _UVBus_5_VertexChannel_Channel;
int    _UVBus_5_WorldLocation_XComponent;
int    _UVBus_5_WorldLocation_YComponent;
int    _UVBus_5_BakedVertex_XComponent;
int    _UVBus_5_BakedVertex_YComponent;
int    _UVBus_5_SkinnedVertex_XComponent;
int    _UVBus_5_SkinnedVertex_YComponent;
float4 _UVBus_5_Distortion_Texture_ScrollSpeed;
int    _UVBus_5_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_5_Distortion_Texture_Tiling;
float4 _UVBus_5_Distortion_Texture_Offset;
float  _UVBus_5_Distortion_Texture_Strength;
int    _UVBus_5_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_5_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_5_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_5_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_5_Distortion_Texture_UVBus;
int    _UVBus_6_Source;
int    _UVBus_6_VertexChannel_Channel;
int    _UVBus_6_WorldLocation_XComponent;
int    _UVBus_6_WorldLocation_YComponent;
int    _UVBus_6_BakedVertex_XComponent;
int    _UVBus_6_BakedVertex_YComponent;
int    _UVBus_6_SkinnedVertex_XComponent;
int    _UVBus_6_SkinnedVertex_YComponent;
float4 _UVBus_6_Distortion_Texture_ScrollSpeed;
int    _UVBus_6_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_6_Distortion_Texture_Tiling;
float4 _UVBus_6_Distortion_Texture_Offset;
float  _UVBus_6_Distortion_Texture_Strength;
int    _UVBus_6_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_6_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_6_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_6_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_6_Distortion_Texture_UVBus;
float  _RimMask_1_Start;
int    _RimMask_1_Start_Osci_Enabled;
int    _RimMask_1_Start_Osci_Slot;
float  _RimMask_1_Start_Osci_Value_Start;
float  _RimMask_1_Start_Osci_Value_End;
float  _RimMask_1_End;
int    _RimMask_1_End_Osci_Enabled;
int    _RimMask_1_End_Osci_Slot;
float  _RimMask_1_End_Osci_Value_Start;
float  _RimMask_1_End_Osci_Value_End;
float  _RimMask_1_Strength_PreInversion;
int    _RimMask_1_Strength_PreInversion_Osci_Enabled;
int    _RimMask_1_Strength_PreInversion_Osci_Slot;
float  _RimMask_1_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_1_Strength_PreInversion_Osci_Value_End;
float  _RimMask_1_Strength_PostInversion;
int    _RimMask_1_Strength_PostInversion_Osci_Enabled;
int    _RimMask_1_Strength_PostInversion_Osci_Slot;
float  _RimMask_1_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_1_Strength_PostInversion_Osci_Value_End;
float  _RimMask_1_Smoothing;
int    _RimMask_1_Smoothing_Osci_Enabled;
int    _RimMask_1_Smoothing_Osci_Slot;
float  _RimMask_1_Smoothing_Osci_Value_Start;
float  _RimMask_1_Smoothing_Osci_Value_End;
float  _RimMask_2_Start;
int    _RimMask_2_Start_Osci_Enabled;
int    _RimMask_2_Start_Osci_Slot;
float  _RimMask_2_Start_Osci_Value_Start;
float  _RimMask_2_Start_Osci_Value_End;
float  _RimMask_2_End;
int    _RimMask_2_End_Osci_Enabled;
int    _RimMask_2_End_Osci_Slot;
float  _RimMask_2_End_Osci_Value_Start;
float  _RimMask_2_End_Osci_Value_End;
float  _RimMask_2_Strength_PreInversion;
int    _RimMask_2_Strength_PreInversion_Osci_Enabled;
int    _RimMask_2_Strength_PreInversion_Osci_Slot;
float  _RimMask_2_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_2_Strength_PreInversion_Osci_Value_End;
float  _RimMask_2_Strength_PostInversion;
int    _RimMask_2_Strength_PostInversion_Osci_Enabled;
int    _RimMask_2_Strength_PostInversion_Osci_Slot;
float  _RimMask_2_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_2_Strength_PostInversion_Osci_Value_End;
float  _RimMask_2_Smoothing;
int    _RimMask_2_Smoothing_Osci_Enabled;
int    _RimMask_2_Smoothing_Osci_Slot;
float  _RimMask_2_Smoothing_Osci_Value_Start;
float  _RimMask_2_Smoothing_Osci_Value_End;
float  _RimMask_3_Start;
int    _RimMask_3_Start_Osci_Enabled;
int    _RimMask_3_Start_Osci_Slot;
float  _RimMask_3_Start_Osci_Value_Start;
float  _RimMask_3_Start_Osci_Value_End;
float  _RimMask_3_End;
int    _RimMask_3_End_Osci_Enabled;
int    _RimMask_3_End_Osci_Slot;
float  _RimMask_3_End_Osci_Value_Start;
float  _RimMask_3_End_Osci_Value_End;
float  _RimMask_3_Strength_PreInversion;
int    _RimMask_3_Strength_PreInversion_Osci_Enabled;
int    _RimMask_3_Strength_PreInversion_Osci_Slot;
float  _RimMask_3_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_3_Strength_PreInversion_Osci_Value_End;
float  _RimMask_3_Strength_PostInversion;
int    _RimMask_3_Strength_PostInversion_Osci_Enabled;
int    _RimMask_3_Strength_PostInversion_Osci_Slot;
float  _RimMask_3_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_3_Strength_PostInversion_Osci_Value_End;
float  _RimMask_3_Smoothing;
int    _RimMask_3_Smoothing_Osci_Enabled;
int    _RimMask_3_Smoothing_Osci_Slot;
float  _RimMask_3_Smoothing_Osci_Value_Start;
float  _RimMask_3_Smoothing_Osci_Value_End;
float  _RimMask_4_Start;
int    _RimMask_4_Start_Osci_Enabled;
int    _RimMask_4_Start_Osci_Slot;
float  _RimMask_4_Start_Osci_Value_Start;
float  _RimMask_4_Start_Osci_Value_End;
float  _RimMask_4_End;
int    _RimMask_4_End_Osci_Enabled;
int    _RimMask_4_End_Osci_Slot;
float  _RimMask_4_End_Osci_Value_Start;
float  _RimMask_4_End_Osci_Value_End;
float  _RimMask_4_Strength_PreInversion;
int    _RimMask_4_Strength_PreInversion_Osci_Enabled;
int    _RimMask_4_Strength_PreInversion_Osci_Slot;
float  _RimMask_4_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_4_Strength_PreInversion_Osci_Value_End;
float  _RimMask_4_Strength_PostInversion;
int    _RimMask_4_Strength_PostInversion_Osci_Enabled;
int    _RimMask_4_Strength_PostInversion_Osci_Slot;
float  _RimMask_4_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_4_Strength_PostInversion_Osci_Value_End;
float  _RimMask_4_Smoothing;
int    _RimMask_4_Smoothing_Osci_Enabled;
int    _RimMask_4_Smoothing_Osci_Slot;
float  _RimMask_4_Smoothing_Osci_Value_Start;
float  _RimMask_4_Smoothing_Osci_Value_End;
float  _DistanceMask_1_Distance_Start;
int    _DistanceMask_1_Distance_Start_Osci_Enabled;
int    _DistanceMask_1_Distance_Start_Osci_Slot;
float  _DistanceMask_1_Distance_Start_Osci_Value_Start;
float  _DistanceMask_1_Distance_Start_Osci_Value_End;
float  _DistanceMask_1_Distance_End;
int    _DistanceMask_1_Distance_End_Osci_Enabled;
int    _DistanceMask_1_Distance_End_Osci_Slot;
float  _DistanceMask_1_Distance_End_Osci_Value_Start;
float  _DistanceMask_1_Distance_End_Osci_Value_End;
float  _DistanceMask_1_Strength_PreInversion;
int    _DistanceMask_1_Strength_PreInversion_Osci_Enabled;
int    _DistanceMask_1_Strength_PreInversion_Osci_Slot;
float  _DistanceMask_1_Strength_PreInversion_Osci_Value_Start;
float  _DistanceMask_1_Strength_PreInversion_Osci_Value_End;
float  _DistanceMask_1_Strength_PostInversion;
int    _DistanceMask_1_Strength_PostInversion_Osci_Enabled;
int    _DistanceMask_1_Strength_PostInversion_Osci_Slot;
float  _DistanceMask_1_Strength_PostInversion_Osci_Value_Start;
float  _DistanceMask_1_Strength_PostInversion_Osci_Value_End;
float  _DistanceMask_2_Distance_Start;
int    _DistanceMask_2_Distance_Start_Osci_Enabled;
int    _DistanceMask_2_Distance_Start_Osci_Slot;
float  _DistanceMask_2_Distance_Start_Osci_Value_Start;
float  _DistanceMask_2_Distance_Start_Osci_Value_End;
float  _DistanceMask_2_Distance_End;
int    _DistanceMask_2_Distance_End_Osci_Enabled;
int    _DistanceMask_2_Distance_End_Osci_Slot;
float  _DistanceMask_2_Distance_End_Osci_Value_Start;
float  _DistanceMask_2_Distance_End_Osci_Value_End;
float  _DistanceMask_2_Strength_PreInversion;
int    _DistanceMask_2_Strength_PreInversion_Osci_Enabled;
int    _DistanceMask_2_Strength_PreInversion_Osci_Slot;
float  _DistanceMask_2_Strength_PreInversion_Osci_Value_Start;
float  _DistanceMask_2_Strength_PreInversion_Osci_Value_End;
float  _DistanceMask_2_Strength_PostInversion;
int    _DistanceMask_2_Strength_PostInversion_Osci_Enabled;
int    _DistanceMask_2_Strength_PostInversion_Osci_Slot;
float  _DistanceMask_2_Strength_PostInversion_Osci_Value_Start;
float  _DistanceMask_2_Strength_PostInversion_Osci_Value_End;
float  _TouchReactivityInteractionMask_Intensity_Pre;
int    _TouchReactivityInteractionMask_Intensity_Pre_Osci_Enabled;
int    _TouchReactivityInteractionMask_Intensity_Pre_Osci_Slot;
float  _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_Start;
float  _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_End;
float  _TouchReactivityInteractionMask_Intensity;
int    _TouchReactivityInteractionMask_Intensity_Osci_Enabled;
int    _TouchReactivityInteractionMask_Intensity_Osci_Slot;
float  _TouchReactivityInteractionMask_Intensity_Osci_Value_Start;
float  _TouchReactivityInteractionMask_Intensity_Osci_Value_End;
int    _BlendMask_1_BlendMode;
int    _BlendMask_1_Mask_Fore_MaskChannel;
int    _BlendMask_1_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_1_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_1_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_1_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_1_Mask_Back_MaskChannel;
int    _BlendMask_1_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_1_Mask_Back_MaskChannel_Strength;
float  _BlendMask_1_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_1_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_1_Opacity;
int    _BlendMask_1_Opacity_Osci_Enabled;
int    _BlendMask_1_Opacity_Osci_Slot;
float  _BlendMask_1_Opacity_Osci_Value_Start;
float  _BlendMask_1_Opacity_Osci_Value_End;
float  _BlendMask_1_Strength_PreInversion;
int    _BlendMask_1_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_1_Strength_PreInversion_Osci_Slot;
float  _BlendMask_1_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_1_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_1_Strength_PostInversion;
int    _BlendMask_1_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_1_Strength_PostInversion_Osci_Slot;
float  _BlendMask_1_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_1_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_2_BlendMode;
int    _BlendMask_2_Mask_Fore_MaskChannel;
int    _BlendMask_2_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_2_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_2_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_2_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_2_Mask_Back_MaskChannel;
int    _BlendMask_2_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_2_Mask_Back_MaskChannel_Strength;
float  _BlendMask_2_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_2_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_2_Opacity;
int    _BlendMask_2_Opacity_Osci_Enabled;
int    _BlendMask_2_Opacity_Osci_Slot;
float  _BlendMask_2_Opacity_Osci_Value_Start;
float  _BlendMask_2_Opacity_Osci_Value_End;
float  _BlendMask_2_Strength_PreInversion;
int    _BlendMask_2_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_2_Strength_PreInversion_Osci_Slot;
float  _BlendMask_2_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_2_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_2_Strength_PostInversion;
int    _BlendMask_2_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_2_Strength_PostInversion_Osci_Slot;
float  _BlendMask_2_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_2_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_3_BlendMode;
int    _BlendMask_3_Mask_Fore_MaskChannel;
int    _BlendMask_3_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_3_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_3_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_3_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_3_Mask_Back_MaskChannel;
int    _BlendMask_3_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_3_Mask_Back_MaskChannel_Strength;
float  _BlendMask_3_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_3_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_3_Opacity;
int    _BlendMask_3_Opacity_Osci_Enabled;
int    _BlendMask_3_Opacity_Osci_Slot;
float  _BlendMask_3_Opacity_Osci_Value_Start;
float  _BlendMask_3_Opacity_Osci_Value_End;
float  _BlendMask_3_Strength_PreInversion;
int    _BlendMask_3_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_3_Strength_PreInversion_Osci_Slot;
float  _BlendMask_3_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_3_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_3_Strength_PostInversion;
int    _BlendMask_3_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_3_Strength_PostInversion_Osci_Slot;
float  _BlendMask_3_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_3_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_4_BlendMode;
int    _BlendMask_4_Mask_Fore_MaskChannel;
int    _BlendMask_4_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_4_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_4_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_4_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_4_Mask_Back_MaskChannel;
int    _BlendMask_4_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_4_Mask_Back_MaskChannel_Strength;
float  _BlendMask_4_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_4_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_4_Opacity;
int    _BlendMask_4_Opacity_Osci_Enabled;
int    _BlendMask_4_Opacity_Osci_Slot;
float  _BlendMask_4_Opacity_Osci_Value_Start;
float  _BlendMask_4_Opacity_Osci_Value_End;
float  _BlendMask_4_Strength_PreInversion;
int    _BlendMask_4_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_4_Strength_PreInversion_Osci_Slot;
float  _BlendMask_4_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_4_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_4_Strength_PostInversion;
int    _BlendMask_4_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_4_Strength_PostInversion_Osci_Slot;
float  _BlendMask_4_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_4_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_5_BlendMode;
int    _BlendMask_5_Mask_Fore_MaskChannel;
int    _BlendMask_5_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_5_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_5_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_5_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_5_Mask_Back_MaskChannel;
int    _BlendMask_5_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_5_Mask_Back_MaskChannel_Strength;
float  _BlendMask_5_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_5_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_5_Opacity;
int    _BlendMask_5_Opacity_Osci_Enabled;
int    _BlendMask_5_Opacity_Osci_Slot;
float  _BlendMask_5_Opacity_Osci_Value_Start;
float  _BlendMask_5_Opacity_Osci_Value_End;
float  _BlendMask_5_Strength_PreInversion;
int    _BlendMask_5_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_5_Strength_PreInversion_Osci_Slot;
float  _BlendMask_5_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_5_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_5_Strength_PostInversion;
int    _BlendMask_5_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_5_Strength_PostInversion_Osci_Slot;
float  _BlendMask_5_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_5_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_6_BlendMode;
int    _BlendMask_6_Mask_Fore_MaskChannel;
int    _BlendMask_6_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_6_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_6_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_6_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_6_Mask_Back_MaskChannel;
int    _BlendMask_6_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_6_Mask_Back_MaskChannel_Strength;
float  _BlendMask_6_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_6_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_6_Opacity;
int    _BlendMask_6_Opacity_Osci_Enabled;
int    _BlendMask_6_Opacity_Osci_Slot;
float  _BlendMask_6_Opacity_Osci_Value_Start;
float  _BlendMask_6_Opacity_Osci_Value_End;
float  _BlendMask_6_Strength_PreInversion;
int    _BlendMask_6_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_6_Strength_PreInversion_Osci_Slot;
float  _BlendMask_6_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_6_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_6_Strength_PostInversion;
int    _BlendMask_6_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_6_Strength_PostInversion_Osci_Slot;
float  _BlendMask_6_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_6_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_7_BlendMode;
int    _BlendMask_7_Mask_Fore_MaskChannel;
int    _BlendMask_7_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_7_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_7_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_7_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_7_Mask_Back_MaskChannel;
int    _BlendMask_7_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_7_Mask_Back_MaskChannel_Strength;
float  _BlendMask_7_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_7_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_7_Opacity;
int    _BlendMask_7_Opacity_Osci_Enabled;
int    _BlendMask_7_Opacity_Osci_Slot;
float  _BlendMask_7_Opacity_Osci_Value_Start;
float  _BlendMask_7_Opacity_Osci_Value_End;
float  _BlendMask_7_Strength_PreInversion;
int    _BlendMask_7_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_7_Strength_PreInversion_Osci_Slot;
float  _BlendMask_7_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_7_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_7_Strength_PostInversion;
int    _BlendMask_7_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_7_Strength_PostInversion_Osci_Slot;
float  _BlendMask_7_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_7_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_8_BlendMode;
int    _BlendMask_8_Mask_Fore_MaskChannel;
int    _BlendMask_8_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_8_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_8_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_8_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_8_Mask_Back_MaskChannel;
int    _BlendMask_8_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_8_Mask_Back_MaskChannel_Strength;
float  _BlendMask_8_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_8_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_8_Opacity;
int    _BlendMask_8_Opacity_Osci_Enabled;
int    _BlendMask_8_Opacity_Osci_Slot;
float  _BlendMask_8_Opacity_Osci_Value_Start;
float  _BlendMask_8_Opacity_Osci_Value_End;
float  _BlendMask_8_Strength_PreInversion;
int    _BlendMask_8_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_8_Strength_PreInversion_Osci_Slot;
float  _BlendMask_8_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_8_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_8_Strength_PostInversion;
int    _BlendMask_8_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_8_Strength_PostInversion_Osci_Slot;
float  _BlendMask_8_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_8_Strength_PostInversion_Osci_Value_End;
float  _ScrollMask_1_Speed;
int    _ScrollMask_1_Speed_TimeBase;
float4 _ScrollMask_1_Axis;
float  _ScrollMask_1_Frequency;
int    _ScrollMask_1_Frequency_Osci_Enabled;
int    _ScrollMask_1_Frequency_Osci_Slot;
float  _ScrollMask_1_Frequency_Osci_Value_Start;
float  _ScrollMask_1_Frequency_Osci_Value_End;
float  _ScrollMask_1_Gap;
int    _ScrollMask_1_Gap_Osci_Enabled;
int    _ScrollMask_1_Gap_Osci_Slot;
float  _ScrollMask_1_Gap_Osci_Value_Start;
float  _ScrollMask_1_Gap_Osci_Value_End;
float  _ScrollMask_1_Offset;
int    _ScrollMask_1_Offset_Osci_Enabled;
int    _ScrollMask_1_Offset_Osci_Slot;
float  _ScrollMask_1_Offset_Osci_Value_Start;
float  _ScrollMask_1_Offset_Osci_Value_End;
float  _ScrollMask_1_Strength_PreInversion;
int    _ScrollMask_1_Strength_PreInversion_Osci_Enabled;
int    _ScrollMask_1_Strength_PreInversion_Osci_Slot;
float  _ScrollMask_1_Strength_PreInversion_Osci_Value_Start;
float  _ScrollMask_1_Strength_PreInversion_Osci_Value_End;
float  _ScrollMask_1_Strength_PostInversion;
int    _ScrollMask_1_Strength_PostInversion_Osci_Enabled;
int    _ScrollMask_1_Strength_PostInversion_Osci_Slot;
float  _ScrollMask_1_Strength_PostInversion_Osci_Value_Start;
float  _ScrollMask_1_Strength_PostInversion_Osci_Value_End;
float  _ScrollMask_2_Speed;
int    _ScrollMask_2_Speed_TimeBase;
float4 _ScrollMask_2_Axis;
float  _ScrollMask_2_Frequency;
int    _ScrollMask_2_Frequency_Osci_Enabled;
int    _ScrollMask_2_Frequency_Osci_Slot;
float  _ScrollMask_2_Frequency_Osci_Value_Start;
float  _ScrollMask_2_Frequency_Osci_Value_End;
float  _ScrollMask_2_Gap;
int    _ScrollMask_2_Gap_Osci_Enabled;
int    _ScrollMask_2_Gap_Osci_Slot;
float  _ScrollMask_2_Gap_Osci_Value_Start;
float  _ScrollMask_2_Gap_Osci_Value_End;
float  _ScrollMask_2_Offset;
int    _ScrollMask_2_Offset_Osci_Enabled;
int    _ScrollMask_2_Offset_Osci_Slot;
float  _ScrollMask_2_Offset_Osci_Value_Start;
float  _ScrollMask_2_Offset_Osci_Value_End;
float  _ScrollMask_2_Strength_PreInversion;
int    _ScrollMask_2_Strength_PreInversion_Osci_Enabled;
int    _ScrollMask_2_Strength_PreInversion_Osci_Slot;
float  _ScrollMask_2_Strength_PreInversion_Osci_Value_Start;
float  _ScrollMask_2_Strength_PreInversion_Osci_Value_End;
float  _ScrollMask_2_Strength_PostInversion;
int    _ScrollMask_2_Strength_PostInversion_Osci_Enabled;
int    _ScrollMask_2_Strength_PostInversion_Osci_Slot;
float  _ScrollMask_2_Strength_PostInversion_Osci_Value_Start;
float  _ScrollMask_2_Strength_PostInversion_Osci_Value_End;
int    _MassBlendMask_1_BlendMode;
float  _MassBlendMask_1_Strength;
int    _MassBlendMask_1_Strength_Osci_Enabled;
int    _MassBlendMask_1_Strength_Osci_Slot;
float  _MassBlendMask_1_Strength_Osci_Value_Start;
float  _MassBlendMask_1_Strength_Osci_Value_End;
float  _MassBlendMask_1_Strength_PostInversion;
int    _MassBlendMask_1_Strength_PostInversion_Osci_Enabled;
int    _MassBlendMask_1_Strength_PostInversion_Osci_Slot;
float  _MassBlendMask_1_Strength_PostInversion_Osci_Value_Start;
float  _MassBlendMask_1_Strength_PostInversion_Osci_Value_End;
int    _MassBlendMask_1_1_MaskChannel;
int    _MassBlendMask_1_1_MaskChannel_Inverted;
float  _MassBlendMask_1_1_MaskChannel_Strength;
float  _MassBlendMask_1_1_MaskChannel_Contrast;
float  _MassBlendMask_1_1_MaskChannel_Brightness;
int    _MassBlendMask_1_2_MaskChannel;
int    _MassBlendMask_1_2_MaskChannel_Inverted;
float  _MassBlendMask_1_2_MaskChannel_Strength;
float  _MassBlendMask_1_2_MaskChannel_Contrast;
float  _MassBlendMask_1_2_MaskChannel_Brightness;
int    _MassBlendMask_1_3_MaskChannel;
int    _MassBlendMask_1_3_MaskChannel_Inverted;
float  _MassBlendMask_1_3_MaskChannel_Strength;
float  _MassBlendMask_1_3_MaskChannel_Contrast;
float  _MassBlendMask_1_3_MaskChannel_Brightness;
int    _MassBlendMask_1_4_MaskChannel;
int    _MassBlendMask_1_4_MaskChannel_Inverted;
float  _MassBlendMask_1_4_MaskChannel_Strength;
float  _MassBlendMask_1_4_MaskChannel_Contrast;
float  _MassBlendMask_1_4_MaskChannel_Brightness;
int    _MassBlendMask_1_5_MaskChannel;
int    _MassBlendMask_1_5_MaskChannel_Inverted;
float  _MassBlendMask_1_5_MaskChannel_Strength;
float  _MassBlendMask_1_5_MaskChannel_Contrast;
float  _MassBlendMask_1_5_MaskChannel_Brightness;
int    _MassBlendMask_1_6_MaskChannel;
int    _MassBlendMask_1_6_MaskChannel_Inverted;
float  _MassBlendMask_1_6_MaskChannel_Strength;
float  _MassBlendMask_1_6_MaskChannel_Contrast;
float  _MassBlendMask_1_6_MaskChannel_Brightness;
int    _MassBlendMask_1_7_MaskChannel;
int    _MassBlendMask_1_7_MaskChannel_Inverted;
float  _MassBlendMask_1_7_MaskChannel_Strength;
float  _MassBlendMask_1_7_MaskChannel_Contrast;
float  _MassBlendMask_1_7_MaskChannel_Brightness;
int    _MassBlendMask_1_8_MaskChannel;
int    _MassBlendMask_1_8_MaskChannel_Inverted;
float  _MassBlendMask_1_8_MaskChannel_Strength;
float  _MassBlendMask_1_8_MaskChannel_Contrast;
float  _MassBlendMask_1_8_MaskChannel_Brightness;
int    _MassBlendMask_2_BlendMode;
float  _MassBlendMask_2_Strength;
int    _MassBlendMask_2_Strength_Osci_Enabled;
int    _MassBlendMask_2_Strength_Osci_Slot;
float  _MassBlendMask_2_Strength_Osci_Value_Start;
float  _MassBlendMask_2_Strength_Osci_Value_End;
float  _MassBlendMask_2_Strength_PostInversion;
int    _MassBlendMask_2_Strength_PostInversion_Osci_Enabled;
int    _MassBlendMask_2_Strength_PostInversion_Osci_Slot;
float  _MassBlendMask_2_Strength_PostInversion_Osci_Value_Start;
float  _MassBlendMask_2_Strength_PostInversion_Osci_Value_End;
int    _MassBlendMask_2_1_MaskChannel;
int    _MassBlendMask_2_1_MaskChannel_Inverted;
float  _MassBlendMask_2_1_MaskChannel_Strength;
float  _MassBlendMask_2_1_MaskChannel_Contrast;
float  _MassBlendMask_2_1_MaskChannel_Brightness;
int    _MassBlendMask_2_2_MaskChannel;
int    _MassBlendMask_2_2_MaskChannel_Inverted;
float  _MassBlendMask_2_2_MaskChannel_Strength;
float  _MassBlendMask_2_2_MaskChannel_Contrast;
float  _MassBlendMask_2_2_MaskChannel_Brightness;
int    _MassBlendMask_2_3_MaskChannel;
int    _MassBlendMask_2_3_MaskChannel_Inverted;
float  _MassBlendMask_2_3_MaskChannel_Strength;
float  _MassBlendMask_2_3_MaskChannel_Contrast;
float  _MassBlendMask_2_3_MaskChannel_Brightness;
int    _MassBlendMask_2_4_MaskChannel;
int    _MassBlendMask_2_4_MaskChannel_Inverted;
float  _MassBlendMask_2_4_MaskChannel_Strength;
float  _MassBlendMask_2_4_MaskChannel_Contrast;
float  _MassBlendMask_2_4_MaskChannel_Brightness;
int    _MassBlendMask_2_5_MaskChannel;
int    _MassBlendMask_2_5_MaskChannel_Inverted;
float  _MassBlendMask_2_5_MaskChannel_Strength;
float  _MassBlendMask_2_5_MaskChannel_Contrast;
float  _MassBlendMask_2_5_MaskChannel_Brightness;
int    _MassBlendMask_2_6_MaskChannel;
int    _MassBlendMask_2_6_MaskChannel_Inverted;
float  _MassBlendMask_2_6_MaskChannel_Strength;
float  _MassBlendMask_2_6_MaskChannel_Contrast;
float  _MassBlendMask_2_6_MaskChannel_Brightness;
int    _MassBlendMask_2_7_MaskChannel;
int    _MassBlendMask_2_7_MaskChannel_Inverted;
float  _MassBlendMask_2_7_MaskChannel_Strength;
float  _MassBlendMask_2_7_MaskChannel_Contrast;
float  _MassBlendMask_2_7_MaskChannel_Brightness;
int    _MassBlendMask_2_8_MaskChannel;
int    _MassBlendMask_2_8_MaskChannel_Inverted;
float  _MassBlendMask_2_8_MaskChannel_Strength;
float  _MassBlendMask_2_8_MaskChannel_Contrast;
float  _MassBlendMask_2_8_MaskChannel_Brightness;
int    _LTCGI;
float  _GrabPass_Distortion_Amount;
int    _GrabPass_Distortion_Amount_MaskChannel;
int    _GrabPass_Distortion_Amount_MaskChannel_Inverted;
float  _GrabPass_Distortion_Amount_MaskChannel_Strength;
float  _GrabPass_Distortion_Amount_MaskChannel_Contrast;
float  _GrabPass_Distortion_Amount_MaskChannel_Brightness;
float  _GrabPass_Zoom_Amount;
int    _GrabPass_Blur_Enabled;
int    _GrabPass_Blur_Dispersion;
int    _GrabPass_Blur_Weight_MaskChannel;
int    _GrabPass_Blur_Weight_MaskChannel_Inverted;
float  _GrabPass_Blur_Weight_MaskChannel_Strength;
float  _GrabPass_Blur_Weight_MaskChannel_Contrast;
float  _GrabPass_Blur_Weight_MaskChannel_Brightness;
int    _GrabPass_Tint_Texture_AlphaIsMask;
float4 _GrabPass_Tint_Texture_Tiling;
float4 _GrabPass_Tint_Texture_Offset;
float4 _GrabPass_Tint_Texture_ScrollSpeed;
int    _GrabPass_Tint_Texture_ScrollSpeed_TimeBase;
int    _GrabPass_Tint_Texture_UVBus;
float4 _GrabPass_Tint_Color;
int    _GrabPass_Tint_MaskChannel;
int    _GrabPass_Tint_MaskChannel_Inverted;
float  _GrabPass_Tint_MaskChannel_Strength;
float  _GrabPass_Tint_MaskChannel_Contrast;
float  _GrabPass_Tint_MaskChannel_Brightness;
int    _Glitter_UVBus;
float  _Glitter_Density;
float  _Glitter_Amount;
int    _Glitter_Amount_Osci_Enabled;
int    _Glitter_Amount_Osci_Slot;
float  _Glitter_Amount_Osci_Value_Start;
float  _Glitter_Amount_Osci_Value_End;
float  _Glitter_Disorder;
int    _Glitter_AppearsOnMaterial;
int    _Glitter_MaskChannel;
int    _Glitter_MaskChannel_Inverted;
float  _Glitter_MaskChannel_Strength;
float  _Glitter_MaskChannel_Contrast;
float  _Glitter_MaskChannel_Brightness;
float4 _Glitter_Color;
int    _Glitter_Color_Osci_Enabled;
int    _Glitter_Color_Osci_Slot;
float4 _Glitter_Color_Osci_Color_Start;
float4 _Glitter_Color_Osci_Color_End;
float  _Glitter_Color_FromAlbedo;
int    _Glitter_Color_FromAlbedo_Osci_Enabled;
int    _Glitter_Color_FromAlbedo_Osci_Slot;
float  _Glitter_Color_FromAlbedo_Osci_Value_Start;
float  _Glitter_Color_FromAlbedo_Osci_Value_End;
float4 _Glitter_Opacity_MinMax;
int    _Glitter_Opacity_MinMax_Osci_Enabled;
int    _Glitter_Opacity_MinMax_Osci_Slot;
float4 _Glitter_Opacity_MinMax_Osci_Color_Start;
float4 _Glitter_Opacity_MinMax_Osci_Color_End;
float4 _Glitter_Size_MinMax;
int    _Glitter_Size_MinMax_Osci_Enabled;
int    _Glitter_Size_MinMax_Osci_Slot;
float4 _Glitter_Size_MinMax_Osci_Color_Start;
float4 _Glitter_Size_MinMax_Osci_Color_End;
float4 _Glitter_Brightness_MinMax;
int    _Glitter_Brightness_MinMax_Osci_Enabled;
int    _Glitter_Brightness_MinMax_Osci_Slot;
float4 _Glitter_Brightness_MinMax_Osci_Color_Start;
float4 _Glitter_Brightness_MinMax_Osci_Color_End;
int    _Glitter_Texture_Enabled;
int    _Glitter_Texture_Map_AlphaIsMask;
float4 _Glitter_Texture_Map_Tiling;
float4 _Glitter_Texture_Map_Offset;
float4 _Glitter_Texture_Zoom_MinMax;
int    _Glitter_Texture_Zoom_MinMax_Osci_Enabled;
int    _Glitter_Texture_Zoom_MinMax_Osci_Slot;
float4 _Glitter_Texture_Zoom_MinMax_Osci_Color_Start;
float4 _Glitter_Texture_Zoom_MinMax_Osci_Color_End;
int    _Glitter_Texture_Rotation_Random_Enabled;
float  _Glitter_Texture_Rotation_Speed;
int    _Glitter_Texture_Rotation_Speed_TimeBase;
int    _Glitter_HSV_Enabled;
float4 _Glitter_HSV_Hue_MinMax;
int    _Glitter_HSV_Hue_MinMax_Osci_Enabled;
int    _Glitter_HSV_Hue_MinMax_Osci_Slot;
float4 _Glitter_HSV_Hue_MinMax_Osci_Color_Start;
float4 _Glitter_HSV_Hue_MinMax_Osci_Color_End;
float4 _Glitter_HSV_Saturation_MinMax;
int    _Glitter_HSV_Saturation_MinMax_Osci_Enabled;
int    _Glitter_HSV_Saturation_MinMax_Osci_Slot;
float4 _Glitter_HSV_Saturation_MinMax_Osci_Color_Start;
float4 _Glitter_HSV_Saturation_MinMax_Osci_Color_End;
float  _Glitter_HSV_Hue_Speed;
int    _Glitter_HSV_Hue_Speed_TimeBase;
float  _Glitter_HSV_Hue_Shift;
int    _Glitter_HSV_Hue_Shift_Osci_Enabled;
int    _Glitter_HSV_Hue_Shift_Osci_Slot;
float  _Glitter_HSV_Hue_Shift_Osci_Value_Start;
float  _Glitter_HSV_Hue_Shift_Osci_Value_End;
float  _Glitter_AutoBlink_Speed;
int    _Glitter_AutoBlink_Speed_TimeBase;
float  _Glitter_AutoBlink_Randomness;
int    _Glitter_ManualBlink_Enabled;
float  _Glitter_ManualBlink_Offset;
int    _Glitter_ManualBlink_Offset_Osci_Enabled;
int    _Glitter_ManualBlink_Offset_Osci_Slot;
float  _Glitter_ManualBlink_Offset_Osci_Value_Start;
float  _Glitter_ManualBlink_Offset_Osci_Value_End;
float  _Glitter_ManualBlink_Offset_Randomness;
float4 _Glitter_UV_Scroll_Speed;
int    _Glitter_UV_Scroll_Speed_TimeBase;
float  _PostProcessHSV_Hue_Shift;
int    _PostProcessHSV_Hue_Shift_Osci_Enabled;
int    _PostProcessHSV_Hue_Shift_Osci_Slot;
float  _PostProcessHSV_Hue_Shift_Osci_Value_Start;
float  _PostProcessHSV_Hue_Shift_Osci_Value_End;
float  _PostProcessHSV_Sat_Shift;
int    _PostProcessHSV_Sat_Shift_Osci_Enabled;
int    _PostProcessHSV_Sat_Shift_Osci_Slot;
float  _PostProcessHSV_Sat_Shift_Osci_Value_Start;
float  _PostProcessHSV_Sat_Shift_Osci_Value_End;
float  _PostProcessHSV_Value_Shift;
int    _PostProcessHSV_Value_Shift_Osci_Enabled;
int    _PostProcessHSV_Value_Shift_Osci_Slot;
float  _PostProcessHSV_Value_Shift_Osci_Value_Start;
float  _PostProcessHSV_Value_Shift_Osci_Value_End;
float  _PostProcessHSV_Hue_Speed;
int    _PostProcessHSV_Hue_Speed_TimeBase;
int    _DistanceDither_Enabled;
int    _DistanceDither_Separate_Faces;
float  _DistanceDither_Front_Distance_Start;
float  _DistanceDither_Front_Distance_End;
float  _DistanceDither_Back_Distance_Start;
float  _DistanceDither_Back_Distance_End;
float  _DistanceDither_Front_Bias;
float  _DistanceDither_Back_Bias;
int    _DistanceDither_MaskChannel;
int    _DistanceDither_MaskChannel_Inverted;
float  _DistanceDither_MaskChannel_Strength;
float  _DistanceDither_MaskChannel_Contrast;
float  _DistanceDither_MaskChannel_Brightness;
int    _BackfaceFill_Enabled;
float4 _BackfaceFill_Color;
int    _PreviewMirror;
float  _Cutoff;
int    _Cutoff_Osci_Enabled;
int    _Cutoff_Osci_Slot;
float  _Cutoff_Osci_Value_Start;
float  _Cutoff_Osci_Value_End;
int    _FlipNormalsOnBackFacingTris;
int    _Osci_Slot_1_Type;
float  _Osci_Slot_1_Speed;
int    _Osci_Slot_1_Speed_TimeBase;
float  _Osci_Slot_1_Square_DutyCycle;
int    _Osci_Slot_1_Sine_HalfWave;
int    _Osci_Slot_2_Type;
float  _Osci_Slot_2_Speed;
int    _Osci_Slot_2_Speed_TimeBase;
float  _Osci_Slot_2_Square_DutyCycle;
int    _Osci_Slot_2_Sine_HalfWave;
int    _Osci_Slot_3_Type;
float  _Osci_Slot_3_Speed;
int    _Osci_Slot_3_Speed_TimeBase;
float  _Osci_Slot_3_Square_DutyCycle;
int    _Osci_Slot_3_Sine_HalfWave;
int    _Osci_Slot_4_Type;
float  _Osci_Slot_4_Speed;
int    _Osci_Slot_4_Speed_TimeBase;
float  _Osci_Slot_4_Square_DutyCycle;
int    _Osci_Slot_4_Sine_HalfWave;
int    _Osci_Slot_5_Type;
float  _Osci_Slot_5_Speed;
int    _Osci_Slot_5_Speed_TimeBase;
float  _Osci_Slot_5_Square_DutyCycle;
int    _Osci_Slot_5_Sine_HalfWave;
int    _Osci_Slot_6_Type;
float  _Osci_Slot_6_Speed;
int    _Osci_Slot_6_Speed_TimeBase;
float  _Osci_Slot_6_Square_DutyCycle;
int    _Osci_Slot_6_Sine_HalfWave;
int    _Osci_ALBand_1_Band;
int    _Osci_ALBand_1_Smoothness_Enabled;
float  _Osci_ALBand_1_Smoothness_Level;
float  _Osci_ALBand_1_Fallback_Type;
float  _Osci_ALBand_1_Fallback_Osci;
float  _Osci_ALBand_1_Fallback_Value;
int    _Osci_ALBand_2_Band;
int    _Osci_ALBand_2_Smoothness_Enabled;
float  _Osci_ALBand_2_Smoothness_Level;
float  _Osci_ALBand_2_Fallback_Type;
float  _Osci_ALBand_2_Fallback_Osci;
float  _Osci_ALBand_2_Fallback_Value;
int    _Osci_ALBand_3_Band;
int    _Osci_ALBand_3_Smoothness_Enabled;
float  _Osci_ALBand_3_Smoothness_Level;
float  _Osci_ALBand_3_Fallback_Type;
float  _Osci_ALBand_3_Fallback_Osci;
float  _Osci_ALBand_3_Fallback_Value;
int    _Osci_ALBand_4_Band;
int    _Osci_ALBand_4_Smoothness_Enabled;
float  _Osci_ALBand_4_Smoothness_Level;
float  _Osci_ALBand_4_Fallback_Type;
float  _Osci_ALBand_4_Fallback_Osci;
float  _Osci_ALBand_4_Fallback_Value;
int    _Osci_ALBand_5_Band;
int    _Osci_ALBand_5_Smoothness_Enabled;
float  _Osci_ALBand_5_Smoothness_Level;
float  _Osci_ALBand_5_Fallback_Type;
float  _Osci_ALBand_5_Fallback_Osci;
float  _Osci_ALBand_5_Fallback_Value;
int    _Osci_ALBand_6_Band;
int    _Osci_ALBand_6_Smoothness_Enabled;
float  _Osci_ALBand_6_Smoothness_Level;
float  _Osci_ALBand_6_Fallback_Type;
float  _Osci_ALBand_6_Fallback_Osci;
float  _Osci_ALBand_6_Fallback_Value;
int    _Osci_ALEnergy_1_Smoothness_Enabled;
float  _Osci_ALEnergy_1_Smoothness_Level;
float  _Osci_ALEnergy_1_Fallback_Type;
float  _Osci_ALEnergy_1_Fallback_Osci;
float  _Osci_ALEnergy_1_Fallback_Value;
int    _Osci_ALEnergy_2_Smoothness_Enabled;
float  _Osci_ALEnergy_2_Smoothness_Level;
float  _Osci_ALEnergy_2_Fallback_Type;
float  _Osci_ALEnergy_2_Fallback_Osci;
float  _Osci_ALEnergy_2_Fallback_Value;
int    _Osci_Mask_1_MaskChannel;
int    _Osci_Mask_1_MaskChannel_Inverted;
float  _Osci_Mask_1_MaskChannel_Strength;
float  _Osci_Mask_1_MaskChannel_Contrast;
float  _Osci_Mask_1_MaskChannel_Brightness;
int    _Osci_Mask_2_MaskChannel;
int    _Osci_Mask_2_MaskChannel_Inverted;
float  _Osci_Mask_2_MaskChannel_Strength;
float  _Osci_Mask_2_MaskChannel_Contrast;
float  _Osci_Mask_2_MaskChannel_Brightness;
int    _Osci_Mask_3_MaskChannel;
int    _Osci_Mask_3_MaskChannel_Inverted;
float  _Osci_Mask_3_MaskChannel_Strength;
float  _Osci_Mask_3_MaskChannel_Contrast;
float  _Osci_Mask_3_MaskChannel_Brightness;
int    _Osci_Mask_4_MaskChannel;
int    _Osci_Mask_4_MaskChannel_Inverted;
float  _Osci_Mask_4_MaskChannel_Strength;
float  _Osci_Mask_4_MaskChannel_Contrast;
float  _Osci_Mask_4_MaskChannel_Brightness;
int    _Osci_Mask_5_MaskChannel;
int    _Osci_Mask_5_MaskChannel_Inverted;
float  _Osci_Mask_5_MaskChannel_Strength;
float  _Osci_Mask_5_MaskChannel_Contrast;
float  _Osci_Mask_5_MaskChannel_Brightness;
int    _Osci_Mask_6_MaskChannel;
int    _Osci_Mask_6_MaskChannel_Inverted;
float  _Osci_Mask_6_MaskChannel_Strength;
float  _Osci_Mask_6_MaskChannel_Contrast;
float  _Osci_Mask_6_MaskChannel_Brightness;
int    _Osci_Mask_7_MaskChannel;
int    _Osci_Mask_7_MaskChannel_Inverted;
float  _Osci_Mask_7_MaskChannel_Strength;
float  _Osci_Mask_7_MaskChannel_Contrast;
float  _Osci_Mask_7_MaskChannel_Brightness;
int    _Osci_Mask_8_MaskChannel;
int    _Osci_Mask_8_MaskChannel_Inverted;
float  _Osci_Mask_8_MaskChannel_Strength;
float  _Osci_Mask_8_MaskChannel_Contrast;
float  _Osci_Mask_8_MaskChannel_Brightness;
int    _TimeBase_AL_Slot_1_Type;
int    _TimeBase_AL_Slot_1_Band;
int    _TimeBase_AL_Slot_1_UseTimeAsFallback;
int    _TimeBase_AL_Slot_1_AddTime;
float  _TimeBase_AL_Slot_1_Strength;
int    _TimeBase_AL_Slot_2_Type;
int    _TimeBase_AL_Slot_2_Band;
int    _TimeBase_AL_Slot_2_UseTimeAsFallback;
int    _TimeBase_AL_Slot_2_AddTime;
float  _TimeBase_AL_Slot_2_Strength;
int    _TimeBase_AL_Slot_3_Type;
int    _TimeBase_AL_Slot_3_Band;
int    _TimeBase_AL_Slot_3_UseTimeAsFallback;
int    _TimeBase_AL_Slot_3_AddTime;
float  _TimeBase_AL_Slot_3_Strength;
int    _TimeBase_AL_Slot_4_Type;
int    _TimeBase_AL_Slot_4_Band;
int    _TimeBase_AL_Slot_4_UseTimeAsFallback;
int    _TimeBase_AL_Slot_4_AddTime;
float  _TimeBase_AL_Slot_4_Strength;
int    _TimeBase_AL_Slot_5_Type;
int    _TimeBase_AL_Slot_5_Band;
int    _TimeBase_AL_Slot_5_UseTimeAsFallback;
int    _TimeBase_AL_Slot_5_AddTime;
float  _TimeBase_AL_Slot_5_Strength;
int    _TimeBase_AL_Slot_6_Type;
int    _TimeBase_AL_Slot_6_Band;
int    _TimeBase_AL_Slot_6_UseTimeAsFallback;
int    _TimeBase_AL_Slot_6_AddTime;
float  _TimeBase_AL_Slot_6_Strength;
int    _Diffuse_Type;
float  _Diffuse_Ramp_1_Start;
float  _Diffuse_Ramp_1_End;
float  _Diffuse_Ramp_1_Offset;
float  _Diffuse_Ramp_2_Start;
float  _Diffuse_Ramp_2_End;
float  _Diffuse_Ramp_2_Offset;
float  _Diffuse_Ramp_Blend;
float4 _Diffuse_Shadow_Tint_Color;
float  _LightProbeWeight;
float4 _LightProbe_Shadow_Tint_Color;
float  _LightColor_Weight;
int    _FallbackLight_Enabled;
float4 _FallbackLight_Direction;
float4 _FallbackLight_Color;
int    _Outline_Enabled;
float  _Outline_Size;
float4 _Outline_Color;
float  _Outline_Mask_Cutoff;
int    _Outline_MaskChannel;
int    _Outline_MaskChannel_Inverted;
float  _Outline_MaskChannel_Strength;
float  _Outline_MaskChannel_Contrast;
float  _Outline_MaskChannel_Brightness;
int    _Outline_AppearsOnMaterial;
int    _EarlyZ_Enabled;
int    _AudioLink_Disabled;

/* MARKER VARIABLES END */
  
  #if defined(RALIV_PENETRATOR) || defined(RALIV_ORIFICE)
    #include "Assets/RalivDynamicPenetrationSystem/Plugins/RalivDPS_Defines.cginc"
  #endif

#else
  #if defined(RALIV_ORIFICE)
	  sampler2D _OrificeData;
  #endif
#endif

SamplerState _SamplerLinearRepeat;
SamplerState _SamplerLinearClamp;
SamplerState _SamplerTrilinearClamp;
SamplerState _SamplerLinearMirror;

#if defined(NOT_BAKED)
  /* MARKER TEXTURE INCLUDE DEFINES START */
#define is_MaskChannel_1_Texture_set true
#define is_MaskChannel_2_Texture_set true
#define is_MaskChannel_3_Texture_set true
#define is_MaskChannel_4_Texture_set true
#define is_MaskChannel_5_Texture_set true
#define is_MaskChannel_6_Texture_set true
#define is_MaskChannel_7_Texture_set true
#define is_MaskChannel_8_Texture_set true
#define is_MainTex_set true
#define is_Mix_MainTex_set true
#define is_SecondaryTex_set true
#define is_Mix_SecondaryTex_set true
#define is_OcclusionMap_set true
#define is_Mix_OcclusionMap_set true
#define is_BumpMap_set true
#define is_Mix_BumpMap_set true
#define is_DetailNormalMap_set true
#define is_Mix_DetailNormalMap_set true
#define is_EmissionMap_set true
#define is_Mix_EmissionMap_set true
#define is_EmissionMap2_set true
#define is_Mix_EmissionMap2_set true
#define is_Matcap_1_Texture_set true
#define is_Mix_Matcap_1_Texture_set true
#define is_Matcap_2_Texture_set true
#define is_Mix_Matcap_2_Texture_set true
#define is_Matcap_3_Texture_set true
#define is_Mix_Matcap_3_Texture_set true
#define is_FakeCubemap_Texture_set true
#define is_TF_AnimationMap_set true
#define is_UVBus_1_Distortion_Texture_set true
#define is_UVBus_2_Distortion_Texture_set true
#define is_UVBus_3_Distortion_Texture_set true
#define is_UVBus_4_Distortion_Texture_set true
#define is_UVBus_5_Distortion_Texture_set true
#define is_UVBus_6_Distortion_Texture_set true
#define is_GrabPass_Tint_Texture_set true
#define is_Glitter_Texture_Map_set true
#define is_Diffuse_LUT_Texture_set true

/* MARKER TEXTURE INCLUDE DEFINES END */
#endif

Texture2D _MainTex;
Texture2D _Mix_MainTex;

Texture2D _SecondaryTex;
Texture2D _Mix_SecondaryTex;

Texture2D _OcclusionMap;
Texture2D _Mix_OcclusionMap;

Texture2D _DetailNormalMap;
Texture2D _Mix_DetailNormalMap;

Texture2D _BumpMap;
Texture2D _Mix_BumpMap;

Texture2D _Matcap_1_Texture;
Texture2D _Mix_Matcap_1_Texture;

Texture2D _Matcap_2_Texture;
Texture2D _Mix_Matcap_2_Texture;

Texture2D _Matcap_3_Texture;
Texture2D _Mix_Matcap_3_Texture;

Texture2D _EmissionMap;
Texture2D _Mix_EmissionMap;

Texture2D _EmissionMap2;
Texture2D _Mix_EmissionMap2;

Texture2D _UVBus_1_Distortion_Texture;
Texture2D _UVBus_2_Distortion_Texture;
Texture2D _UVBus_3_Distortion_Texture;
Texture2D _UVBus_4_Distortion_Texture;
Texture2D _UVBus_5_Distortion_Texture;
Texture2D _UVBus_6_Distortion_Texture;

// NOTE(valuef): Whenever SAMPLE_DEPTH_TEXTURE_LOD is defined to be UNITY_SAMPLE_TEX2DARRAY_LOD
// 2024-01-24
#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
  #define USE_2D_ARRAY_DEPTH
#endif

#if defined(USE_2D_ARRAY_DEPTH)
  Texture2DArray _CameraDepthTexture;
  SamplerState sampler_CameraDepthTexture;

  #define SAMPLE_DEPTH(uv) _CameraDepthTexture.SampleLevel(sampler_CameraDepthTexture, float3((uv).x, (uv).y, (float)unity_StereoEyeIndex), 0).r;

#else
  Texture2D<float> _CameraDepthTexture;
  SamplerState sampler_CameraDepthTexture;

  #define SAMPLE_DEPTH(uv) _CameraDepthTexture.SampleLevel(sampler_CameraDepthTexture, uv, 0).r;

#endif

inline
bool
is_depth_texture_available() {
  float size_x;
  float size_y;

  #if defined(USE_2D_ARRAY_DEPTH)
    float num_elements;
    _CameraDepthTexture.GetDimensions(size_x, size_y, num_elements);
  #else
    _CameraDepthTexture.GetDimensions(size_x, size_y);
  #endif

  return size_x > 16 && size_y > 16;
}

TextureCube _FakeCubemap_Texture;
SamplerState sampler_FakeCubemap_Texture;
half4 _FakeCubemap_Texture_HDR;

Texture2D _TF_AnimationMap;

Texture2D _MaskChannel_1_Texture;
Texture2D _MaskChannel_2_Texture;
Texture2D _MaskChannel_3_Texture;
Texture2D _MaskChannel_4_Texture;
Texture2D _MaskChannel_5_Texture;
Texture2D _MaskChannel_6_Texture;
Texture2D _MaskChannel_7_Texture;
Texture2D _MaskChannel_8_Texture;

Texture2D _Glitter_Texture_Map;

#if defined(VFGOO_GRABPASS)
  Texture2D _GrabPass;
  Texture2D _GrabPass_Tint_Texture;
#endif

struct Oscillator_Info {
  bool enabled;

  int slot;

  float4 default_value;
  float4 start;
  float4 end;
};

Oscillator_Info make_oscillator_info(bool enabled, int slot, float4 default_value, float4 start, float4 end) {
  Oscillator_Info ret;
  ret.enabled = enabled;
  ret.slot = slot;
  ret.default_value = default_value;
  ret.start = start;
  ret.end = end;
  return ret;
}

static const Oscillator_Info OSCILLATOR_INFO_NONE = make_oscillator_info(false, 0, float4(0,0,0,0), float4(0,0,0,0), float4(0,0,0,0));

#define make_oscillator_value(_name, _default) \
  static Oscillator_Info _name = make_oscillator_info( \
    _name##_Enabled, \
    _name##_Slot, \
    _default, \
    _name##_Value_Start.rrrr, \
    _name##_Value_End.rrrr \
  )

#define make_oscillator_color4(_name, _default) \
  static Oscillator_Info _name = make_oscillator_info( \
    _name##_Enabled, \
    _name##_Slot, \
    _default, \
    _name##_Color_Start, \
    _name##_Color_End \
  )

/* MARKER OSCILLATOR INFO START */
make_oscillator_value(_MaskChannel_1_Strength_PreInversion_Osci, _MaskChannel_1_Strength_PreInversion);
make_oscillator_value(_MaskChannel_1_Strength_PostInversion_Osci, _MaskChannel_1_Strength_PostInversion);
make_oscillator_value(_MaskChannel_2_Strength_PreInversion_Osci, _MaskChannel_2_Strength_PreInversion);
make_oscillator_value(_MaskChannel_2_Strength_PostInversion_Osci, _MaskChannel_2_Strength_PostInversion);
make_oscillator_value(_MaskChannel_3_Strength_PreInversion_Osci, _MaskChannel_3_Strength_PreInversion);
make_oscillator_value(_MaskChannel_3_Strength_PostInversion_Osci, _MaskChannel_3_Strength_PostInversion);
make_oscillator_value(_MaskChannel_4_Strength_PreInversion_Osci, _MaskChannel_4_Strength_PreInversion);
make_oscillator_value(_MaskChannel_4_Strength_PostInversion_Osci, _MaskChannel_4_Strength_PostInversion);
make_oscillator_value(_MaskChannel_5_Strength_PreInversion_Osci, _MaskChannel_5_Strength_PreInversion);
make_oscillator_value(_MaskChannel_5_Strength_PostInversion_Osci, _MaskChannel_5_Strength_PostInversion);
make_oscillator_value(_MaskChannel_6_Strength_PreInversion_Osci, _MaskChannel_6_Strength_PreInversion);
make_oscillator_value(_MaskChannel_6_Strength_PostInversion_Osci, _MaskChannel_6_Strength_PostInversion);
make_oscillator_value(_MaskChannel_7_Strength_PreInversion_Osci, _MaskChannel_7_Strength_PreInversion);
make_oscillator_value(_MaskChannel_7_Strength_PostInversion_Osci, _MaskChannel_7_Strength_PostInversion);
make_oscillator_value(_MaskChannel_8_Strength_PreInversion_Osci, _MaskChannel_8_Strength_PreInversion);
make_oscillator_value(_MaskChannel_8_Strength_PostInversion_Osci, _MaskChannel_8_Strength_PostInversion);
make_oscillator_color4(_Color_Osci, _Color);
make_oscillator_color4(_Mix_Color_Osci, _Mix_Color);
make_oscillator_color4(_SecondaryTex_Color_Osci, _SecondaryTex_Color);
make_oscillator_color4(_Mix_SecondaryTex_Color_Osci, _Mix_SecondaryTex_Color);
make_oscillator_value(_Opacity_Osci, _Opacity);
make_oscillator_value(_Mix_Opacity_Osci, _Mix_Opacity);
make_oscillator_value(_BumpScale_Osci, _BumpScale);
make_oscillator_value(_Mix_BumpScale_Osci, _Mix_BumpScale);
make_oscillator_value(_DetailBumpScale_Osci, _DetailBumpScale);
make_oscillator_value(_Mix_DetailBumpScale_Osci, _Mix_DetailBumpScale);
make_oscillator_color4(_EmissionColor_Osci, _EmissionColor);
make_oscillator_color4(_Mix_EmissionColor_Osci, _Mix_EmissionColor);
make_oscillator_color4(_EmissionColor2_Osci, _EmissionColor2);
make_oscillator_color4(_Mix_EmissionColor2_Osci, _Mix_EmissionColor2);
make_oscillator_color4(_Matcap_1_Color_Osci, _Matcap_1_Color);
make_oscillator_color4(_Mix_Matcap_1_Color_Osci, _Mix_Matcap_1_Color);
make_oscillator_color4(_Matcap_2_Color_Osci, _Matcap_2_Color);
make_oscillator_color4(_Mix_Matcap_2_Color_Osci, _Mix_Matcap_2_Color);
make_oscillator_color4(_Matcap_3_Color_Osci, _Matcap_3_Color);
make_oscillator_color4(_Mix_Matcap_3_Color_Osci, _Mix_Matcap_3_Color);
make_oscillator_value(_AlbedoEmissionWeight_Osci, _AlbedoEmissionWeight);
make_oscillator_color4(_AddedEmissionColor_Osci, _AddedEmissionColor);
make_oscillator_value(_Mix_AlbedoEmissionWeight_Osci, _Mix_AlbedoEmissionWeight);
make_oscillator_color4(_Mix_AddedEmissionColor_Osci, _Mix_AddedEmissionColor);
make_oscillator_value(_Goo_Size_Osci, _Goo_Size);
make_oscillator_color4(_Goo_Offset_Osci, _Goo_Offset);
make_oscillator_value(_Goo_Deformation_MeshNormal_Offset_Min_Osci, _Goo_Deformation_MeshNormal_Offset_Min);
make_oscillator_value(_Goo_Deformation_MeshNormal_Offset_Max_Osci, _Goo_Deformation_MeshNormal_Offset_Max);
make_oscillator_value(_Goo_Deformation_ProceduralNormal_Size_Osci, _Goo_Deformation_ProceduralNormal_Size);
make_oscillator_value(_Goo_Drip_Size_Osci, _Goo_Drip_Size);
make_oscillator_value(_Goo_Drip_Start_Osci, _Goo_Drip_Start);
make_oscillator_value(_Goo_Drip_End_Osci, _Goo_Drip_End);
make_oscillator_value(_Goo_Drip_Amount_Osci, _Goo_Drip_Amount);
make_oscillator_color4(_CapsuleMask_1_Origin_Osci, _CapsuleMask_1_Origin);
make_oscillator_color4(_CapsuleMask_1_Axis_Osci, _CapsuleMask_1_Axis);
make_oscillator_value(_CapsuleMask_1_Radius_Osci, _CapsuleMask_1_Radius);
make_oscillator_value(_CapsuleMask_1_Height_Osci, _CapsuleMask_1_Height);
make_oscillator_value(_CapsuleMask_1_Strength_PreInversion_Osci, _CapsuleMask_1_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_1_Strength_PostInversion_Osci, _CapsuleMask_1_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_2_Origin_Osci, _CapsuleMask_2_Origin);
make_oscillator_color4(_CapsuleMask_2_Axis_Osci, _CapsuleMask_2_Axis);
make_oscillator_value(_CapsuleMask_2_Radius_Osci, _CapsuleMask_2_Radius);
make_oscillator_value(_CapsuleMask_2_Height_Osci, _CapsuleMask_2_Height);
make_oscillator_value(_CapsuleMask_2_Strength_PreInversion_Osci, _CapsuleMask_2_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_2_Strength_PostInversion_Osci, _CapsuleMask_2_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_3_Origin_Osci, _CapsuleMask_3_Origin);
make_oscillator_color4(_CapsuleMask_3_Axis_Osci, _CapsuleMask_3_Axis);
make_oscillator_value(_CapsuleMask_3_Radius_Osci, _CapsuleMask_3_Radius);
make_oscillator_value(_CapsuleMask_3_Height_Osci, _CapsuleMask_3_Height);
make_oscillator_value(_CapsuleMask_3_Strength_PreInversion_Osci, _CapsuleMask_3_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_3_Strength_PostInversion_Osci, _CapsuleMask_3_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_4_Origin_Osci, _CapsuleMask_4_Origin);
make_oscillator_color4(_CapsuleMask_4_Axis_Osci, _CapsuleMask_4_Axis);
make_oscillator_value(_CapsuleMask_4_Radius_Osci, _CapsuleMask_4_Radius);
make_oscillator_value(_CapsuleMask_4_Height_Osci, _CapsuleMask_4_Height);
make_oscillator_value(_CapsuleMask_4_Strength_PreInversion_Osci, _CapsuleMask_4_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_4_Strength_PostInversion_Osci, _CapsuleMask_4_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_5_Origin_Osci, _CapsuleMask_5_Origin);
make_oscillator_color4(_CapsuleMask_5_Axis_Osci, _CapsuleMask_5_Axis);
make_oscillator_value(_CapsuleMask_5_Radius_Osci, _CapsuleMask_5_Radius);
make_oscillator_value(_CapsuleMask_5_Height_Osci, _CapsuleMask_5_Height);
make_oscillator_value(_CapsuleMask_5_Strength_PreInversion_Osci, _CapsuleMask_5_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_5_Strength_PostInversion_Osci, _CapsuleMask_5_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_6_Origin_Osci, _CapsuleMask_6_Origin);
make_oscillator_color4(_CapsuleMask_6_Axis_Osci, _CapsuleMask_6_Axis);
make_oscillator_value(_CapsuleMask_6_Radius_Osci, _CapsuleMask_6_Radius);
make_oscillator_value(_CapsuleMask_6_Height_Osci, _CapsuleMask_6_Height);
make_oscillator_value(_CapsuleMask_6_Strength_PreInversion_Osci, _CapsuleMask_6_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_6_Strength_PostInversion_Osci, _CapsuleMask_6_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_7_Origin_Osci, _CapsuleMask_7_Origin);
make_oscillator_color4(_CapsuleMask_7_Axis_Osci, _CapsuleMask_7_Axis);
make_oscillator_value(_CapsuleMask_7_Radius_Osci, _CapsuleMask_7_Radius);
make_oscillator_value(_CapsuleMask_7_Height_Osci, _CapsuleMask_7_Height);
make_oscillator_value(_CapsuleMask_7_Strength_PreInversion_Osci, _CapsuleMask_7_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_7_Strength_PostInversion_Osci, _CapsuleMask_7_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_8_Origin_Osci, _CapsuleMask_8_Origin);
make_oscillator_color4(_CapsuleMask_8_Axis_Osci, _CapsuleMask_8_Axis);
make_oscillator_value(_CapsuleMask_8_Radius_Osci, _CapsuleMask_8_Radius);
make_oscillator_value(_CapsuleMask_8_Height_Osci, _CapsuleMask_8_Height);
make_oscillator_value(_CapsuleMask_8_Strength_PreInversion_Osci, _CapsuleMask_8_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_8_Strength_PostInversion_Osci, _CapsuleMask_8_Strength_PostInversion);
make_oscillator_value(_TF_Manual_Osci, 1);
make_oscillator_value(_TF_Time_Osci, _TF_Time);
make_oscillator_value(_LightMix_Sensitivity_Osci, _LightMix_Sensitivity);
make_oscillator_value(_UVBus_1_Distortion_Texture_Strength_Osci, _UVBus_1_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_2_Distortion_Texture_Strength_Osci, _UVBus_2_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_3_Distortion_Texture_Strength_Osci, _UVBus_3_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_4_Distortion_Texture_Strength_Osci, _UVBus_4_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_5_Distortion_Texture_Strength_Osci, _UVBus_5_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_6_Distortion_Texture_Strength_Osci, _UVBus_6_Distortion_Texture_Strength);
make_oscillator_value(_RimMask_1_Start_Osci, _RimMask_1_Start);
make_oscillator_value(_RimMask_1_End_Osci, _RimMask_1_End);
make_oscillator_value(_RimMask_1_Strength_PreInversion_Osci, _RimMask_1_Strength_PreInversion);
make_oscillator_value(_RimMask_1_Strength_PostInversion_Osci, _RimMask_1_Strength_PostInversion);
make_oscillator_value(_RimMask_1_Smoothing_Osci, _RimMask_1_Smoothing);
make_oscillator_value(_RimMask_2_Start_Osci, _RimMask_2_Start);
make_oscillator_value(_RimMask_2_End_Osci, _RimMask_2_End);
make_oscillator_value(_RimMask_2_Strength_PreInversion_Osci, _RimMask_2_Strength_PreInversion);
make_oscillator_value(_RimMask_2_Strength_PostInversion_Osci, _RimMask_2_Strength_PostInversion);
make_oscillator_value(_RimMask_2_Smoothing_Osci, _RimMask_2_Smoothing);
make_oscillator_value(_RimMask_3_Start_Osci, _RimMask_3_Start);
make_oscillator_value(_RimMask_3_End_Osci, _RimMask_3_End);
make_oscillator_value(_RimMask_3_Strength_PreInversion_Osci, _RimMask_3_Strength_PreInversion);
make_oscillator_value(_RimMask_3_Strength_PostInversion_Osci, _RimMask_3_Strength_PostInversion);
make_oscillator_value(_RimMask_3_Smoothing_Osci, _RimMask_3_Smoothing);
make_oscillator_value(_RimMask_4_Start_Osci, _RimMask_4_Start);
make_oscillator_value(_RimMask_4_End_Osci, _RimMask_4_End);
make_oscillator_value(_RimMask_4_Strength_PreInversion_Osci, _RimMask_4_Strength_PreInversion);
make_oscillator_value(_RimMask_4_Strength_PostInversion_Osci, _RimMask_4_Strength_PostInversion);
make_oscillator_value(_RimMask_4_Smoothing_Osci, _RimMask_4_Smoothing);
make_oscillator_value(_DistanceMask_1_Distance_Start_Osci, _DistanceMask_1_Distance_Start);
make_oscillator_value(_DistanceMask_1_Distance_End_Osci, _DistanceMask_1_Distance_End);
make_oscillator_value(_DistanceMask_1_Strength_PreInversion_Osci, _DistanceMask_1_Strength_PreInversion);
make_oscillator_value(_DistanceMask_1_Strength_PostInversion_Osci, _DistanceMask_1_Strength_PostInversion);
make_oscillator_value(_DistanceMask_2_Distance_Start_Osci, _DistanceMask_2_Distance_Start);
make_oscillator_value(_DistanceMask_2_Distance_End_Osci, _DistanceMask_2_Distance_End);
make_oscillator_value(_DistanceMask_2_Strength_PreInversion_Osci, _DistanceMask_2_Strength_PreInversion);
make_oscillator_value(_DistanceMask_2_Strength_PostInversion_Osci, _DistanceMask_2_Strength_PostInversion);
make_oscillator_value(_TouchReactivityInteractionMask_Intensity_Pre_Osci, _TouchReactivityInteractionMask_Intensity_Pre);
make_oscillator_value(_TouchReactivityInteractionMask_Intensity_Osci, _TouchReactivityInteractionMask_Intensity);
make_oscillator_value(_BlendMask_1_Opacity_Osci, _BlendMask_1_Opacity);
make_oscillator_value(_BlendMask_1_Strength_PreInversion_Osci, _BlendMask_1_Strength_PreInversion);
make_oscillator_value(_BlendMask_1_Strength_PostInversion_Osci, _BlendMask_1_Strength_PostInversion);
make_oscillator_value(_BlendMask_2_Opacity_Osci, _BlendMask_2_Opacity);
make_oscillator_value(_BlendMask_2_Strength_PreInversion_Osci, _BlendMask_2_Strength_PreInversion);
make_oscillator_value(_BlendMask_2_Strength_PostInversion_Osci, _BlendMask_2_Strength_PostInversion);
make_oscillator_value(_BlendMask_3_Opacity_Osci, _BlendMask_3_Opacity);
make_oscillator_value(_BlendMask_3_Strength_PreInversion_Osci, _BlendMask_3_Strength_PreInversion);
make_oscillator_value(_BlendMask_3_Strength_PostInversion_Osci, _BlendMask_3_Strength_PostInversion);
make_oscillator_value(_BlendMask_4_Opacity_Osci, _BlendMask_4_Opacity);
make_oscillator_value(_BlendMask_4_Strength_PreInversion_Osci, _BlendMask_4_Strength_PreInversion);
make_oscillator_value(_BlendMask_4_Strength_PostInversion_Osci, _BlendMask_4_Strength_PostInversion);
make_oscillator_value(_BlendMask_5_Opacity_Osci, _BlendMask_5_Opacity);
make_oscillator_value(_BlendMask_5_Strength_PreInversion_Osci, _BlendMask_5_Strength_PreInversion);
make_oscillator_value(_BlendMask_5_Strength_PostInversion_Osci, _BlendMask_5_Strength_PostInversion);
make_oscillator_value(_BlendMask_6_Opacity_Osci, _BlendMask_6_Opacity);
make_oscillator_value(_BlendMask_6_Strength_PreInversion_Osci, _BlendMask_6_Strength_PreInversion);
make_oscillator_value(_BlendMask_6_Strength_PostInversion_Osci, _BlendMask_6_Strength_PostInversion);
make_oscillator_value(_BlendMask_7_Opacity_Osci, _BlendMask_7_Opacity);
make_oscillator_value(_BlendMask_7_Strength_PreInversion_Osci, _BlendMask_7_Strength_PreInversion);
make_oscillator_value(_BlendMask_7_Strength_PostInversion_Osci, _BlendMask_7_Strength_PostInversion);
make_oscillator_value(_BlendMask_8_Opacity_Osci, _BlendMask_8_Opacity);
make_oscillator_value(_BlendMask_8_Strength_PreInversion_Osci, _BlendMask_8_Strength_PreInversion);
make_oscillator_value(_BlendMask_8_Strength_PostInversion_Osci, _BlendMask_8_Strength_PostInversion);
make_oscillator_value(_ScrollMask_1_Frequency_Osci, _ScrollMask_1_Frequency);
make_oscillator_value(_ScrollMask_1_Gap_Osci, _ScrollMask_1_Gap);
make_oscillator_value(_ScrollMask_1_Offset_Osci, _ScrollMask_1_Offset);
make_oscillator_value(_ScrollMask_1_Strength_PreInversion_Osci, _ScrollMask_1_Strength_PreInversion);
make_oscillator_value(_ScrollMask_1_Strength_PostInversion_Osci, _ScrollMask_1_Strength_PostInversion);
make_oscillator_value(_ScrollMask_2_Frequency_Osci, _ScrollMask_2_Frequency);
make_oscillator_value(_ScrollMask_2_Gap_Osci, _ScrollMask_2_Gap);
make_oscillator_value(_ScrollMask_2_Offset_Osci, _ScrollMask_2_Offset);
make_oscillator_value(_ScrollMask_2_Strength_PreInversion_Osci, _ScrollMask_2_Strength_PreInversion);
make_oscillator_value(_ScrollMask_2_Strength_PostInversion_Osci, _ScrollMask_2_Strength_PostInversion);
make_oscillator_value(_MassBlendMask_1_Strength_Osci, _MassBlendMask_1_Strength);
make_oscillator_value(_MassBlendMask_1_Strength_PostInversion_Osci, _MassBlendMask_1_Strength_PostInversion);
make_oscillator_value(_MassBlendMask_2_Strength_Osci, _MassBlendMask_2_Strength);
make_oscillator_value(_MassBlendMask_2_Strength_PostInversion_Osci, _MassBlendMask_2_Strength_PostInversion);
make_oscillator_value(_Glitter_Amount_Osci, _Glitter_Amount);
make_oscillator_color4(_Glitter_Color_Osci, _Glitter_Color);
make_oscillator_value(_Glitter_Color_FromAlbedo_Osci, _Glitter_Color_FromAlbedo);
make_oscillator_color4(_Glitter_Opacity_MinMax_Osci, _Glitter_Opacity_MinMax);
make_oscillator_color4(_Glitter_Size_MinMax_Osci, _Glitter_Size_MinMax);
make_oscillator_color4(_Glitter_Brightness_MinMax_Osci, _Glitter_Brightness_MinMax);
make_oscillator_color4(_Glitter_Texture_Zoom_MinMax_Osci, _Glitter_Texture_Zoom_MinMax);
make_oscillator_color4(_Glitter_HSV_Hue_MinMax_Osci, _Glitter_HSV_Hue_MinMax);
make_oscillator_color4(_Glitter_HSV_Saturation_MinMax_Osci, _Glitter_HSV_Saturation_MinMax);
make_oscillator_value(_Glitter_HSV_Hue_Shift_Osci, _Glitter_HSV_Hue_Shift);
make_oscillator_value(_Glitter_ManualBlink_Offset_Osci, _Glitter_ManualBlink_Offset);
make_oscillator_value(_PostProcessHSV_Hue_Shift_Osci, _PostProcessHSV_Hue_Shift);
make_oscillator_value(_PostProcessHSV_Sat_Shift_Osci, _PostProcessHSV_Sat_Shift);
make_oscillator_value(_PostProcessHSV_Value_Shift_Osci, _PostProcessHSV_Value_Shift);
make_oscillator_value(_Cutoff_Osci, _Cutoff);

/* MARKER OSCILLATOR INFO END */

#undef make_oscillator_value
#undef make_oscillator_color4


struct Mask_Info {
  int channel;
  bool inverted;
  float strength;
  float contrast;
  float brightness;
};

Mask_Info
make_mask_info(
  int channel, 
  int inverted, 
  float strength, 
  float contrast, 
  float brightness
) {
  Mask_Info ret;
  ret.channel = channel;
  ret.inverted = inverted != 0;
  ret.strength = strength;
  ret.contrast = contrast;
  ret.brightness = brightness;
  return ret;
}

#define make_mask_info_variable(_name) \
  static const Mask_Info _name = make_mask_info( \
    _name##Channel, \
    _name##Channel_Inverted, \
    _name##Channel_Strength, \
    _name##Channel_Contrast, \
    _name##Channel_Brightness \
  );

/* MARKER MASK INFO START */
make_mask_info_variable(_MainTex_Mask);
make_mask_info_variable(_Mix_MainTex_Mask);
make_mask_info_variable(_SecondaryTex_Mask);
make_mask_info_variable(_Mix_SecondaryTex_Mask);
make_mask_info_variable(_Opacity_Mask);
make_mask_info_variable(_Mix_Opacity_Mask);
make_mask_info_variable(_OcclusionMap_Mask);
make_mask_info_variable(_Mix_OcclusionMap_Mask);
make_mask_info_variable(_BumpMap_Mask);
make_mask_info_variable(_Mix_BumpMap_Mask);
make_mask_info_variable(_DetailNormalMap_Mask);
make_mask_info_variable(_Mix_DetailNormalMap_Mask);
make_mask_info_variable(_EmissionMap_Mask);
make_mask_info_variable(_Mix_EmissionMap_Mask);
make_mask_info_variable(_EmissionMap2_Mask);
make_mask_info_variable(_Mix_EmissionMap2_Mask);
make_mask_info_variable(_Matcap_1_Texture_Mask);
make_mask_info_variable(_Mix_Matcap_1_Texture_Mask);
make_mask_info_variable(_Matcap_2_Texture_Mask);
make_mask_info_variable(_Mix_Matcap_2_Texture_Mask);
make_mask_info_variable(_Matcap_3_Texture_Mask);
make_mask_info_variable(_Mix_Matcap_3_Texture_Mask);
make_mask_info_variable(_AlbedoEmissionWeight_Mask);
make_mask_info_variable(_AddedEmissionColor_Mask);
make_mask_info_variable(_Mix_AlbedoEmissionWeight_Mask);
make_mask_info_variable(_Mix_AddedEmissionColor_Mask);
make_mask_info_variable(_Glossiness_Mask);
make_mask_info_variable(_Metallic_Mask);
make_mask_info_variable(_Mix_Glossiness_Mask);
make_mask_info_variable(_Mix_Metallic_Mask);
make_mask_info_variable(_Goo_Deformation_MeshNormal_Mask);
make_mask_info_variable(_Goo_Drip_Mask);
make_mask_info_variable(_Physbone_1_Mask);
make_mask_info_variable(_Physbone_2_Mask);
make_mask_info_variable(_Physbone_3_Mask);
make_mask_info_variable(_Physbone_4_Mask);
make_mask_info_variable(_Physbone_Drip_Mask);
make_mask_info_variable(_Physbone_Body_Mask);
make_mask_info_variable(_TF_Manual_Mask);
make_mask_info_variable(_DebugVisualisation_Mask);
make_mask_info_variable(_TF_Bulging_Mask);
make_mask_info_variable(_TouchReactivity_Mask);
make_mask_info_variable(_ProximityDistortion_Mask);
make_mask_info_variable(_BlendMask_1_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_1_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_2_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_2_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_3_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_3_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_4_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_4_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_5_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_5_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_6_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_6_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_7_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_7_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_8_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_8_Mask_Back_Mask);
make_mask_info_variable(_MassBlendMask_1_1_Mask);
make_mask_info_variable(_MassBlendMask_1_2_Mask);
make_mask_info_variable(_MassBlendMask_1_3_Mask);
make_mask_info_variable(_MassBlendMask_1_4_Mask);
make_mask_info_variable(_MassBlendMask_1_5_Mask);
make_mask_info_variable(_MassBlendMask_1_6_Mask);
make_mask_info_variable(_MassBlendMask_1_7_Mask);
make_mask_info_variable(_MassBlendMask_1_8_Mask);
make_mask_info_variable(_MassBlendMask_2_1_Mask);
make_mask_info_variable(_MassBlendMask_2_2_Mask);
make_mask_info_variable(_MassBlendMask_2_3_Mask);
make_mask_info_variable(_MassBlendMask_2_4_Mask);
make_mask_info_variable(_MassBlendMask_2_5_Mask);
make_mask_info_variable(_MassBlendMask_2_6_Mask);
make_mask_info_variable(_MassBlendMask_2_7_Mask);
make_mask_info_variable(_MassBlendMask_2_8_Mask);
make_mask_info_variable(_GrabPass_Distortion_Amount_Mask);
make_mask_info_variable(_GrabPass_Blur_Weight_Mask);
make_mask_info_variable(_GrabPass_Tint_Mask);
make_mask_info_variable(_Glitter_Mask);
make_mask_info_variable(_DistanceDither_Mask);
make_mask_info_variable(_Osci_Mask_1_Mask);
make_mask_info_variable(_Osci_Mask_2_Mask);
make_mask_info_variable(_Osci_Mask_3_Mask);
make_mask_info_variable(_Osci_Mask_4_Mask);
make_mask_info_variable(_Osci_Mask_5_Mask);
make_mask_info_variable(_Osci_Mask_6_Mask);
make_mask_info_variable(_Osci_Mask_7_Mask);
make_mask_info_variable(_Osci_Mask_8_Mask);
make_mask_info_variable(_Outline_Mask);

/* MARKER MASK INFO END */

#undef make_mask_info_variable

struct Texture_Info {
  Texture2D tex;
  SamplerState samp;
  float2 tiling;
  float2 offset;
  float2 scroll;
  Mask_Info mask;
  int uv_bus;
  int time_base_slot;

  bool is_set;
  float4 default_value;

  bool alpha_is_mask;
};

Texture_Info
make_tex_info(
  Texture2D tex,
  SamplerState samp,
  float2 tiling,
  float2 offset,
  float2 scroll,
  Mask_Info mask,
  int uv_bus,
  bool is_set,
  float4 default_value,
  bool alpha_is_mask,
  int time_base_slot
) {
  Texture_Info ret;
  ret.tex = tex;
  ret.samp = samp;
  ret.tiling = tiling;
  ret.offset = offset;
  ret.scroll = scroll;
  ret.mask = mask;
  ret.uv_bus = uv_bus;
  ret.is_set = is_set;
  ret.default_value = default_value;
  ret.alpha_is_mask = alpha_is_mask;
  ret.time_base_slot = time_base_slot;
  return ret;
}

static Mask_Info MASK_INFO_NONE = make_mask_info(0,0,1,1,0);

#define make_tex_info_mask(_name, _sampler, _is_set, _default, _alpha_is_mask, _mask) \
  make_tex_info(_name, _sampler, _name##_Tiling, _name##_Offset, _name##_ScrollSpeed, _mask, _name##_UVBus, _is_set, _default, _alpha_is_mask, _name##_ScrollSpeed_TimeBase)

#define make_tex_info_standard(_name, _sampler, _is_set, _default, _alpha_is_mask) \
  make_tex_info(_name, _sampler, _name##_Tiling, _name##_Offset, _name##_ScrollSpeed, _name##_Mask, _name##_UVBus, _is_set, _default, _alpha_is_mask, _name##_ScrollSpeed_TimeBase)

#define NO_TEX_TILING float4(1,1,0,0)
#define NO_TEX_OFFSET float4(1,1,0,0)
#define NO_TEX_SCROLL float2(0,0)

static Texture_Info MainTex                     = make_tex_info_standard(_MainTex,                    _SamplerLinearRepeat, is_MainTex_set,                     float4(1,1,1,1), _MainTex_AlphaIsMask);
static Texture_Info Mix_MainTex                 = make_tex_info_standard(_Mix_MainTex,                _SamplerLinearRepeat, is_Mix_MainTex_set,                 float4(1,1,1,1), _Mix_MainTex_AlphaIsMask);

static Texture_Info SecondaryTex                = make_tex_info_standard(_SecondaryTex,               _SamplerLinearRepeat, is_SecondaryTex_set,                float4(1,1,1,1), _SecondaryTex_AlphaIsMask);
static Texture_Info Mix_SecondaryTex            = make_tex_info_standard(_Mix_SecondaryTex,           _SamplerLinearRepeat, is_Mix_SecondaryTex_set,            float4(1,1,1,1), _Mix_SecondaryTex_AlphaIsMask);

static Texture_Info OcclusionMap                = make_tex_info_standard(_OcclusionMap,               _SamplerLinearRepeat, is_OcclusionMap_set,                float4(1,1,1,1), false);
static Texture_Info Mix_OcclusionMap            = make_tex_info_standard(_Mix_OcclusionMap,           _SamplerLinearRepeat, is_Mix_OcclusionMap_set,            float4(1,1,1,1), false);

static Texture_Info BumpMap                     = make_tex_info_standard(_BumpMap,                    _SamplerLinearRepeat, is_BumpMap_set,                     float4(0,0,1,1), false);
static Texture_Info Mix_BumpMap                 = make_tex_info_standard(_Mix_BumpMap,                _SamplerLinearRepeat, is_Mix_BumpMap_set,                 float4(0,0,1,1), false);

static Texture_Info DetailNormalMap             = make_tex_info_standard(_DetailNormalMap,            _SamplerLinearRepeat, is_DetailNormalMap_set,             float4(.5,.5,1,1), false);
static Texture_Info Mix_DetailNormalMap         = make_tex_info_standard(_Mix_DetailNormalMap,        _SamplerLinearRepeat, is_Mix_DetailNormalMap_set,         float4(.5,.5,1,1), false);

static Texture_Info EmissionMap                 = make_tex_info_standard(_EmissionMap,                _SamplerLinearRepeat, is_EmissionMap_set,                 float4(0,0,0,0), _EmissionMap_AlphaIsMask);
static Texture_Info Mix_EmissionMap             = make_tex_info_standard(_Mix_EmissionMap,            _SamplerLinearRepeat, is_Mix_EmissionMap_set,             float4(0,0,0,0), _Mix_EmissionMap_AlphaIsMask);

static Texture_Info EmissionMap2                = make_tex_info_standard(_EmissionMap2,               _SamplerLinearRepeat, is_EmissionMap2_set,                float4(0,0,0,0), _EmissionMap2_AlphaIsMask);
static Texture_Info Mix_EmissionMap2            = make_tex_info_standard(_Mix_EmissionMap2,           _SamplerLinearRepeat, is_Mix_EmissionMap2_set,            float4(0,0,0,0), _Mix_EmissionMap2_AlphaIsMask);

static Texture_Info Matcap_1_Texture            = make_tex_info(_Matcap_1_Texture,      _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Matcap_1_Texture_Mask,      UV_BUS_UV0, is_Matcap_1_Texture_set,      float4(0,0,0,0), _Matcap_1_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);
static Texture_Info Mix_Matcap_1_Texture        = make_tex_info(_Mix_Matcap_1_Texture,  _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Mix_Matcap_1_Texture_Mask,  UV_BUS_UV0, is_Mix_Matcap_1_Texture_set,  float4(0,0,0,0), _Mix_Matcap_1_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);

static Texture_Info Matcap_2_Texture            = make_tex_info(_Matcap_2_Texture,      _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Matcap_2_Texture_Mask,      UV_BUS_UV0, is_Matcap_2_Texture_set,      float4(0,0,0,0), _Matcap_2_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);
static Texture_Info Mix_Matcap_2_Texture        = make_tex_info(_Mix_Matcap_2_Texture,  _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Mix_Matcap_2_Texture_Mask,  UV_BUS_UV0, is_Mix_Matcap_2_Texture_set,  float4(0,0,0,0), _Mix_Matcap_2_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);

static Texture_Info Matcap_3_Texture            = make_tex_info(_Matcap_3_Texture,      _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Matcap_3_Texture_Mask,      UV_BUS_UV0, is_Matcap_3_Texture_set,      float4(0,0,0,0), _Matcap_3_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);
static Texture_Info Mix_Matcap_3_Texture        = make_tex_info(_Mix_Matcap_3_Texture,  _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Mix_Matcap_3_Texture_Mask,  UV_BUS_UV0, is_Mix_Matcap_3_Texture_set,  float4(0,0,0,0), _Mix_Matcap_3_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);

#if defined(VFGOO_GRABPASS)
  static Texture_Info GrabPass_Tint_Texture     = make_tex_info_mask(_GrabPass_Tint_Texture,      _SamplerLinearRepeat, is_GrabPass_Tint_Texture_set,         float4(1,1,1,1), _GrabPass_Tint_Texture_AlphaIsMask, MASK_INFO_NONE);
#endif

inline 
bool can_use_audiolink() {
  if(_AudioLink_Disabled) {
    return false;
  }

  return AudioLinkIsAvailable();
}

float 
evaluate_al_time_base(
  int type,
  float strength,
  int band,
  int use_time_as_fallback,
  bool combine_with_normal_time
) {
  [branch] if(can_use_audiolink()) {
    // TIMEBASE_AL_TYPE_INCREASING             0
    // TIMEBASE_AL_TYPE_INCREASING_SMOOTHED    1
    // TIMEBASE_AL_TYPE_BACK_N_FORTH           2
    // TIMEBASE_AL_TYPE_BACK_N_FORTH_SMOOTHED  3
    float time = AudioLinkGetChronoTime(type, band);

    time *= strength;

    EDITOR_BRANCH if(combine_with_normal_time) {
      time = _Time.y + time;
    }

    return time;
  } 
  else if(use_time_as_fallback) {
    return _Time.y;
  }
  else {
    return 0;
  }
}

void 
init_time_bases() {
  TIME_BASES.slots[TIMEBASE_SLOT_BASE] = _Time.y;

  TIME_BASES.slots[TIMEBASE_SLOT_AL_1] = evaluate_al_time_base(
    _TimeBase_AL_Slot_1_Type, 
    _TimeBase_AL_Slot_1_Strength,
    _TimeBase_AL_Slot_1_Band,
    _TimeBase_AL_Slot_1_UseTimeAsFallback,
    _TimeBase_AL_Slot_1_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_2] = evaluate_al_time_base(
    _TimeBase_AL_Slot_2_Type, 
    _TimeBase_AL_Slot_2_Strength,
    _TimeBase_AL_Slot_2_Band,
    _TimeBase_AL_Slot_2_UseTimeAsFallback,
    _TimeBase_AL_Slot_2_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_3] = evaluate_al_time_base(
    _TimeBase_AL_Slot_3_Type, 
    _TimeBase_AL_Slot_3_Strength,
    _TimeBase_AL_Slot_3_Band,
    _TimeBase_AL_Slot_3_UseTimeAsFallback,
    _TimeBase_AL_Slot_3_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_4] = evaluate_al_time_base(
    _TimeBase_AL_Slot_4_Type, 
    _TimeBase_AL_Slot_4_Strength,
    _TimeBase_AL_Slot_4_Band,
    _TimeBase_AL_Slot_4_UseTimeAsFallback,
    _TimeBase_AL_Slot_4_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_5] = evaluate_al_time_base(
    _TimeBase_AL_Slot_5_Type, 
    _TimeBase_AL_Slot_5_Strength,
    _TimeBase_AL_Slot_5_Band,
    _TimeBase_AL_Slot_5_UseTimeAsFallback,
    _TimeBase_AL_Slot_5_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_6] = evaluate_al_time_base(
    _TimeBase_AL_Slot_6_Type, 
    _TimeBase_AL_Slot_6_Strength,
    _TimeBase_AL_Slot_6_Band,
    _TimeBase_AL_Slot_6_UseTimeAsFallback,
    _TimeBase_AL_Slot_6_AddTime
  );
}

float
evaluate_simple_oscillator(
  int   type,
  float speed,
  int   time_base_slot,
  float square_duty_cycle,
  int   sine_half_wave
) {
  float time = get_time(time_base_slot) * speed;

  EDITOR_BRANCH switch(type) {
    case OSCI_SIMPLE_TYPE_SIN: {
      EDITOR_BRANCH if(sine_half_wave) {
        return saturate(sin(time));
      }
      else {
        return sin(time) * .5 + .5;
      }
    }
    case OSCI_SIMPLE_TYPE_SQUARE: {
      if(frac(time) > square_duty_cycle) {
        return 1;
      }
      return 0;
    }
    case OSCI_SIMPLE_TYPE_SAW: {
      return frac(time);
    }
    case OSCI_SIMPLE_TYPE_TRIANGLE: {

      if(fmod(int(time), 2) == 0) {
        return frac(time);
      }
      else {
        return 1 - frac(time);
      }
    }
  }
  return 1;
}

float 
handle_al_fallback(
  float al_value,
  int   fallback_type,
  int   fallback_osci,
  float fallback_value
) {
  [branch] if(can_use_audiolink()) {
    return al_value;
  }

  EDITOR_BRANCH if(fallback_type == 0) {
    return fallback_value;
  }
  else {
    return OSCILLATORS.slots[fallback_osci];
  }
}

float
evaluate_al_band_oscillator(
  int   band,
  bool  use_smoothness,
  float smoothness,
  int   fallback_type,
  int   fallback_osci,
  float fallback_value
) {
  float ret;

  if(use_smoothness) {
    // NOTE(valuef): 0 is most smoothed, 15 is least so we invert the smoothness param 
    // 2023-11-12
    float x_off = 15 - smoothness;
    float y_off = band;
    float4 tap = AudioLinkData(ALPASS_FILTEREDAUDIOLINK + int2(x_off, y_off));

    ret = tap.r;
  }
  else {
    float y_off = band;
    float4 tap = AudioLinkData(ALPASS_AUDIOLINK + int2(0, y_off));

    ret = tap.r;
  }

  return handle_al_fallback(ret, fallback_type, fallback_osci, fallback_value);
}

float
evaluate_al_energy_osci(
  bool  use_smoothness,
  float smoothness,
  int   fallback_type,
  int   fallback_osci,
  float fallback_value
) {

  float4 vu_data;
  if(use_smoothness) {
    // NOTE(valuef): 0 for most smoothed, 3 is most smoothed. Editor assumes 0
    // is least and 3 is most smoothed so we have to invert the value.
    // The 0th x bin accumulates a lot of data so it's not really useful. We skip it entirely with the +1
    // 2024-01-14
    vu_data = AudioLinkData(ALPASS_FILTEREDVU + uint2(3 - smoothness + 1, 0));
  }
  else {
    vu_data = AudioLinkData(ALPASS_GENERALVU + uint2(8, 0));
  }

  // r: RMS Left
  // g: Peak Left	
  // b: RMS Right
  // a: Peak right
  float rms = (vu_data.r + vu_data.b) * .5;

  return handle_al_fallback(rms, fallback_type, fallback_osci, fallback_value);
}

void
init_oscillators() {
  OSCILLATORS.slots[OSCI_SIMPLE_1] = evaluate_simple_oscillator(
    _Osci_Slot_1_Type,
    _Osci_Slot_1_Speed,
    _Osci_Slot_1_Speed_TimeBase,
    _Osci_Slot_1_Square_DutyCycle,
    _Osci_Slot_1_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_2] = evaluate_simple_oscillator(
    _Osci_Slot_2_Type,
    _Osci_Slot_2_Speed,
    _Osci_Slot_2_Speed_TimeBase,
    _Osci_Slot_2_Square_DutyCycle,
    _Osci_Slot_2_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_3] = evaluate_simple_oscillator(
    _Osci_Slot_3_Type,
    _Osci_Slot_3_Speed,
    _Osci_Slot_3_Speed_TimeBase,
    _Osci_Slot_3_Square_DutyCycle,
    _Osci_Slot_3_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_4] = evaluate_simple_oscillator(
    _Osci_Slot_4_Type,
    _Osci_Slot_4_Speed,
    _Osci_Slot_4_Speed_TimeBase,
    _Osci_Slot_4_Square_DutyCycle,
    _Osci_Slot_4_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_5] = evaluate_simple_oscillator(
    _Osci_Slot_5_Type,
    _Osci_Slot_5_Speed,
    _Osci_Slot_5_Speed_TimeBase,
    _Osci_Slot_5_Square_DutyCycle,
    _Osci_Slot_5_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_6] = evaluate_simple_oscillator(
    _Osci_Slot_6_Type,
    _Osci_Slot_6_Speed,
    _Osci_Slot_6_Speed_TimeBase,
    _Osci_Slot_6_Square_DutyCycle,
    _Osci_Slot_6_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_IS_AL_AVAILABLE] = can_use_audiolink() ? 1 : 0;

  OSCILLATORS.slots[OSCI_AL_BAND_1] = evaluate_al_band_oscillator(
    _Osci_ALBand_1_Band,
    _Osci_ALBand_1_Smoothness_Enabled,
    _Osci_ALBand_1_Smoothness_Level,
    _Osci_ALBand_1_Fallback_Type,
    _Osci_ALBand_1_Fallback_Osci,
    _Osci_ALBand_1_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_2] = evaluate_al_band_oscillator(
    _Osci_ALBand_2_Band,
    _Osci_ALBand_2_Smoothness_Enabled,
    _Osci_ALBand_2_Smoothness_Level,
    _Osci_ALBand_2_Fallback_Type,
    _Osci_ALBand_2_Fallback_Osci,
    _Osci_ALBand_2_Fallback_Value

  );

  OSCILLATORS.slots[OSCI_AL_BAND_3] = evaluate_al_band_oscillator(
    _Osci_ALBand_3_Band,
    _Osci_ALBand_3_Smoothness_Enabled,
    _Osci_ALBand_3_Smoothness_Level,
    _Osci_ALBand_3_Fallback_Type,
    _Osci_ALBand_3_Fallback_Osci,
    _Osci_ALBand_3_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_4] = evaluate_al_band_oscillator(
    _Osci_ALBand_4_Band,
    _Osci_ALBand_4_Smoothness_Enabled,
    _Osci_ALBand_4_Smoothness_Level,
    _Osci_ALBand_4_Fallback_Type,
    _Osci_ALBand_4_Fallback_Osci,
    _Osci_ALBand_4_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_5] = evaluate_al_band_oscillator(
    _Osci_ALBand_5_Band,
    _Osci_ALBand_5_Smoothness_Enabled,
    _Osci_ALBand_5_Smoothness_Level,
    _Osci_ALBand_5_Fallback_Type,
    _Osci_ALBand_5_Fallback_Osci,
    _Osci_ALBand_5_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_6] = evaluate_al_band_oscillator(
    _Osci_ALBand_6_Band,
    _Osci_ALBand_6_Smoothness_Enabled,
    _Osci_ALBand_6_Smoothness_Level,
    _Osci_ALBand_6_Fallback_Type,
    _Osci_ALBand_6_Fallback_Osci,
    _Osci_ALBand_6_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_ENERGY_1] = evaluate_al_energy_osci(
    _Osci_ALEnergy_1_Smoothness_Enabled,
    _Osci_ALEnergy_1_Smoothness_Level,
    _Osci_ALEnergy_1_Fallback_Type,
    _Osci_ALEnergy_1_Fallback_Osci,
    _Osci_ALEnergy_1_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_ENERGY_2] = evaluate_al_energy_osci(
    _Osci_ALEnergy_2_Smoothness_Enabled,
    _Osci_ALEnergy_2_Smoothness_Level,
    _Osci_ALEnergy_2_Fallback_Type,
    _Osci_ALEnergy_2_Fallback_Osci,
    _Osci_ALEnergy_2_Fallback_Value
  );
}

float4 
get_value(Oscillator_Info info) {
  if(!info.enabled) {
    return info.default_value;
  }

  float osci = OSCILLATORS.slots[info.slot];
  return lerp(info.start, info.end, osci.rrrr);
}

#define XYZ_COMPONENT_X 0
#define XYZ_COMPONENT_Y 1
#define XYZ_COMPONENT_Z 2

#define UV_VERTEX_CHANNEL_0 0
#define UV_VERTEX_CHANNEL_1 1
#define UV_VERTEX_CHANNEL_3 2
#define UV_VERTEX_CHANNEL_4 3
#define UV_VERTEX_CHANNEL_5 4
#define UV_VERTEX_CHANNEL_6 5
#define UV_VERTEX_CHANNEL_7 6

#define UV_SPECIAL_SOURCE_VERTEX_CHANNEL  0  
#define UV_SPECIAL_SOURCE_WORLD_LOCATION  1
#define UV_SPECIAL_SOURCE_BAKED_VERTEX    2
#define UV_SPECIAL_SOURCE_SKINNED_VERTEX  3

float2
make_uv_special(
  float2 uv0,
  float2 uv1,
  float2 uv3,
  float2 uv4,
  float2 uv5,
  float2 uv6,
  float2 uv7,
  float3 world_vertex,
  float3 baked_vertex,
  float3 skinned_vertex,

  int source,
  int vertex_channel,
  int world_location_x,
  int world_location_y,
  int baked_vertex_x,
  int baked_vertex_y,
  int skinned_vertex_x,
  int skinned_vertex_y,
  Texture2D distortion_tex,
  float2 distortion_tiling,
  float2 distortion_offset,
  float2 distortion_scroll,
  int distortion_uv_bus,
  bool distortion_is_set,
  Oscillator_Info distortion_strength,
  int distortion_time_base_slot
) {
  float2 uv = float2(0,0);
  
  EDITOR_BRANCH switch(source) {
    case UV_SPECIAL_SOURCE_VERTEX_CHANNEL:
      float2 uv_channels[7] = { uv0, uv1, uv3, uv4, uv5, uv6, uv7 };
      uv = uv_channels[vertex_channel];
      break;
    case UV_SPECIAL_SOURCE_WORLD_LOCATION:
      uv.x = world_vertex[world_location_x];
      uv.y = world_vertex[world_location_y];
      break;
    case UV_SPECIAL_SOURCE_BAKED_VERTEX: 
      uv.x = baked_vertex[baked_vertex_x];
      uv.y = baked_vertex[baked_vertex_y];
      break;
    case UV_SPECIAL_SOURCE_SKINNED_VERTEX:
      uv.x = skinned_vertex[skinned_vertex_x];
      uv.y = skinned_vertex[skinned_vertex_y];
      break;
  }

  if(distortion_is_set) {
    float2 distortion = sample_texture_2d(
      distortion_tex, 
      distortion_tiling, 
      distortion_offset,
      distortion_scroll, 
      distortion_uv_bus,
      _SamplerLinearRepeat,
      distortion_time_base_slot
    );

    // NOTE(valuef): .5 to adjust for the * 2
    // 2024-01-15
    uv += .5 * (distortion * 2 - 1) * get_value(distortion_strength);
  }

  return uv;
}


void
init_uv_bus(
  float2 uv0,
  float2 uv1,
  float2 uv3,
  float2 uv4,
  float2 uv5,
  float2 uv6,
  float2 uv7,
  float3 world_vertex,
  float3 baked_pos,
  float3 skinned_vertex
) {
  UV_BUSES = (UV_Bus)0;

  UV_BUSES.uv[UV_BUS_UV0] = uv0;
  UV_BUSES.uv[UV_BUS_UV1] = uv1;
  UV_BUSES.uv[UV_BUS_UV3] = uv3;
  UV_BUSES.uv[UV_BUS_UV4] = uv4;
  UV_BUSES.uv[UV_BUS_UV5] = uv5;
  UV_BUSES.uv[UV_BUS_UV6] = uv6;
  UV_BUSES.uv[UV_BUS_UV7] = uv7;


  {
    // NOTE(valuef): Adapted poiyomi panosphere UVs. 
    // Retrieved 2023-08-28.
    //
    // MIT BEGIN
    //MIT License

    //Copyright (c) 2023 Poiyomi Inc.

    //Permission is hereby granted, free of charge, to any person obtaining a copy
    //of this software and associated documentation files (the "Software"), to deal
    //in the Software without restriction, including without limitation the rights
    //to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    //copies of the Software, and to permit persons to whom the Software is
    //furnished to do so, subject to the following conditions:

    //The above copyright notice and this permission notice shall be included in all
    //copies or substantial portions of the Software.

    //THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    //IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    //FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    //AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    //LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    //OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    //SOFTWARE.

    float3 camera;
    #ifdef USING_STEREO_MATRICES
      camera = (unity_StereoWorldSpaceCameraPos[0] + unity_StereoWorldSpaceCameraPos[1]) * .5;
    #else
      camera = _WorldSpaceCameraPos.xyz;
    #endif

    float3 normalizedCoords = normalize(world_vertex - camera);

    float latitude = acos(normalizedCoords.y);
    float longitude = atan2(normalizedCoords.z, normalizedCoords.x);
    float phi = longitude / (UNITY_PI * 2.0);
    float phi_frac = frac(phi);
    if(!IS_VERTEX_SHADER) {
      longitude = fwidth(phi) - 0.0001 < fwidth(phi_frac) ? phi : phi_frac;
    }
    longitude *= 2;
    float2 sphereCoords = float2(longitude, latitude) * float2(0.5, 1.0 / UNITY_PI);
    sphereCoords = float2(0.5, 1.0) - sphereCoords;
    sphereCoords = (sphereCoords + float4(0, 1 - unity_StereoEyeIndex, 1, 0.5).xy) * float4(0, 1 - unity_StereoEyeIndex, 1, 0.5).zw;
    // MIT END

    UV_BUSES.uv[UV_BUS_PANOSPHERE] = sphereCoords;
  }

  #define make_special(_prefix) \
    make_uv_special( \
      uv0, uv1, uv3, uv4, uv5, uv6, uv7, \
      world_vertex, baked_pos, skinned_vertex, \
      _prefix##_Source, \
      _prefix##_VertexChannel_Channel, \
      _prefix##_WorldLocation_XComponent, \
      _prefix##_WorldLocation_YComponent, \
      _prefix##_BakedVertex_XComponent, \
      _prefix##_BakedVertex_YComponent, \
      _prefix##_SkinnedVertex_XComponent, \
      _prefix##_SkinnedVertex_YComponent, \
      _prefix##_Distortion_Texture, \
      _prefix##_Distortion_Texture_Tiling, \
      _prefix##_Distortion_Texture_Offset, \
      _prefix##_Distortion_Texture_ScrollSpeed, \
      _prefix##_Distortion_Texture_UVBus, \
      is##_prefix##_Distortion_Texture_set, \
      _prefix##_Distortion_Texture_Strength_Osci, \
      _prefix##_Distortion_Texture_ScrollSpeed_TimeBase \
    )

  #if defined(VFGOO_ENABLE_UV_BUS_1)
    UV_BUSES.uv[UV_BUS_1] = make_special(_UVBus_1);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_2)
    UV_BUSES.uv[UV_BUS_2] = make_special(_UVBus_2);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_3)
    UV_BUSES.uv[UV_BUS_3] = make_special(_UVBus_3);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_4)
    UV_BUSES.uv[UV_BUS_4] = make_special(_UVBus_4);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_5)
    UV_BUSES.uv[UV_BUS_5] = make_special(_UVBus_5);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_6)
    UV_BUSES.uv[UV_BUS_6] = make_special(_UVBus_6);
  #endif

  #undef make_special
}

#define APPEARS_ON_MATERIAL_BOTH          0
#define APPEARS_ON_MATERIAL_ONLY_PRE_TF   1
#define APPEARS_ON_MATERIAL_ONLY_POST_TF  2

#define MASK_NONE                           0

#define MASK_1_R                            1
#define MASK_1_G                            2
#define MASK_1_B                            3
#define MASK_1_A                            4

#define MASK_2_R                            5
#define MASK_2_G                            6
#define MASK_2_B                            7
#define MASK_2_A                            8

#define MASK_3_R                            9
#define MASK_3_G                            10
#define MASK_3_B                            11
#define MASK_3_A                            12

#define MASK_4_R                            13
#define MASK_4_G                            14
#define MASK_4_B                            15
#define MASK_4_A                            16

#define MASK_5_R                            17
#define MASK_5_G                            18
#define MASK_5_B                            19
#define MASK_5_A                            20

#define MASK_6_R                            21
#define MASK_6_G                            22
#define MASK_6_B                            23
#define MASK_6_A                            24

#define MASK_7_R                            25
#define MASK_7_G                            26
#define MASK_7_B                            27
#define MASK_7_A                            28

#define MASK_8_R                            29
#define MASK_8_G                            30
#define MASK_8_B                            31
#define MASK_8_A                            32

#define MASK_GOO_NOISE                      33
#define MASK_GOO_DRIP                       34

#define MASK_VERTEX_COLOR_R                 35
#define MASK_VERTEX_COLOR_G                 36
#define MASK_VERTEX_COLOR_B                 37
#define MASK_VERTEX_COLOR_A                 38

#define MASK_IS_AL_AVAILABLE                39
#define MASK_RIM_4                          40
// unused 41
// unused 42

#define MASK_CAPSULE_1                      43
#define MASK_CAPSULE_2                      44
#define MASK_CAPSULE_3                      45
#define MASK_CAPSULE_4                      46

#define MASK_POINT_LIGHTS                   47

#define MASK_RIM_1                          48
#define MASK_RIM_2                          49

#define MASK_TOUCH_REACTIVITY_INTERACTION   50 

#define MASK_BLEND_1                        51
#define MASK_BLEND_2                        52
#define MASK_BLEND_3                        53
#define MASK_BLEND_4                        54
#define MASK_BLEND_5                        55
#define MASK_BLEND_6                        56
#define MASK_BLEND_7                        57
#define MASK_BLEND_8                        58

#define MASK_RIM_3                          59

#define MASK_CAPSULE_5                      60
#define MASK_CAPSULE_6                      61
#define MASK_CAPSULE_7                      62
#define MASK_CAPSULE_8                      63

#define MASK_SCROLL_1                       64
#define MASK_SCROLL_2                       65

#define MASK_MASSBLEND_1                    66
#define MASK_MASSBLEND_2                    67

#define MASK_BACKFACE                       68

#define MASK_DISTANCE_1               69
#define MASK_DISTANCE_2               70

#define MASK_MAX                            71

struct Mask_Channels {
  // NOTE(valuef): x is the normal mask, y is the inverted masks.
  // We do this because some masks have special case inversions as we can't just 1-x them due to that creating
  // an undesirable inversion due to some lossy math that we do. For those cases, we need to do the 1-x inversion as early
  // as we can in the math, and not after we've done all the math.
  // 2023-09-12
  float2 masks[MASK_MAX];
};

static Mask_Channels MASK_CHANNELS;

// @DelayedGooDripEvaluationInVS
// NOTE(valuef): We ignore the inverted mask on the MASK_GOO_DRIP mask in the VS because for
// performance reasons we evaluate it in the middle of the VS and not immediatelly. This means that
// the Mask_Channels is not fully initialized for half of the VS beacuse we pass it a bogus
// placeholder value of 0. Now it works fine until you invert the mask, then you get some incorrect
// results where the goo mask ends up being all white even when it shouldn't be (because we inverted
// the 0 to a 1, duh!) and that's not desired. So, to prevent that undesired behaviour we set the goo
// drip mask value to (0,0) and keep it that way until we have evaluated the goo drip, then we set
// the proper value.
// 2023-09-12

float
get_mask(
  Mask_Info info
) {
  EDITOR_BRANCH if(info.channel == 0) return 1;

  float2 both_masks = MASK_CHANNELS.masks[info.channel];
  
  float mask = info.inverted ? both_masks.y : both_masks.x;

  // NOTE(valuef): https://www.desmos.com/calculator/mcgtyjntlf
  // where a is contrast and b is brightness
  // 2023-10-27
  mask = info.contrast * (mask - .5) + .5 + info.brightness;

  mask = saturate(mask * info.strength);

  return mask;
}

float2
evaluate_capsule_mask(
  float3 baked_pos,
  float3 axis,
  float3 origin,
  bool flip,
  float height,
  float radius,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  float ld = dot(axis, baked_pos - origin);
  ld = clamp(ld, -height, height);
  
  float3 on_line = origin + ld * axis;

  float t = 1 - saturate(length(baked_pos - on_line) / radius);

  t = saturate(t * pre_inversion_strength);

  EDITOR_BRANCH if(flip) {
    t = 1 - t;
  }

  float2 mask = float2(t, 1-t);
  mask = saturate(mask * post_inversion_strength );

  return mask;
}

int
get_light_id(int index) {
  return (int)((unity_LightColor[index].a/0.001)*255.0);
}

float3
get_light_pos(int index) {
  float raw_x[4] = { unity_4LightPosX0.x, unity_4LightPosX0.y, unity_4LightPosX0.z, unity_4LightPosX0.w };
  float raw_y[4] = { unity_4LightPosY0.x, unity_4LightPosY0.y, unity_4LightPosY0.z, unity_4LightPosX0.w };
  float raw_z[4] = { unity_4LightPosZ0.x, unity_4LightPosZ0.y, unity_4LightPosZ0.z, unity_4LightPosZ0.w };
 
  return float3(raw_x[index], raw_y[index], raw_z[index]);
}

float
get_light_range(int index) {

  float raw[4] = { unity_4LightAtten0.x, unity_4LightAtten0.y, unity_4LightAtten0.z, unity_4LightAtten0.w };

  // https://forum.unity.com/threads/point-light-in-v-f-shader.499717/
  return 5.0 * (1.0 / sqrt(raw[index]));
}

// NOTE(valuef): Looks like the fwdadd pass will get proper vertex lights while the shadowcaster wont.
// 2023-10-02
float
vs_make_point_light_mask(
  float3 world_vertex
) {
  #if defined(VF_GOO_SHADOWCASTER)
    return 0;
  #endif

  #if !defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    return 0;
  #endif

  float mask = 0;
  for(int idx = 0; idx < 4; idx++) {

    int id = get_light_id(idx);

    EDITOR_BRANCH if(id == 10) {
      float3 light_pos = get_light_pos(idx);
      float range = get_light_range(idx);

      float3 delta = light_pos - world_vertex;
      float len = saturate(length(delta) / range);

      float t = (len - 1) / (get_value(_LightMix_Sensitivity_Osci) - 1);

      mask += t;
    }
  }

  mask = saturate(mask);

  return mask;
}

float2
make_rim_mask_channel(
  float fres,
  float start,
  float end,
  float pre_inversion_strength,
  float post_inversion_strength,
  float smoothing
) {
  float mask = saturate((fres - start) / (end - start));

  mask = pow(mask,smoothing);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

#define DIFFUSE_TYPE_PBR 0
#define DIFFUSE_TYPE_PBR_LUT 1
#define DIFFUSE_TYPE_PBR_RAMP 2
#define DIFFUSE_TYPE_NONE 3

#define BLEND_LERP              0
#define BLEND_MIN_DARKEN        1 
#define BLEND_MAX_LIGHTEN       2
#define BLEND_MULTIPLY          3
#define BLEND_SUBTRACT          4
#define BLEND_DIVIDE            5
#define BLEND_ADD_LINEAR_DODGE  6
#define BLEND_DIFFERENCE        7

float2
make_blend_mask(
  Mask_Info fore_mask,
  Mask_Info back_mask,
  float opacity,
  int blend_mode,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  // NOTE(valuef): We're mimicking the substance designer blend node behaviour here for
  // consistency sake and some people will already have a model of how that node works so
  // it's better than reinventing the wheel.
  // 2023-08-29

  float fore = get_mask(fore_mask);
  float back = get_mask(back_mask);

  EDITOR_BRANCH if(blend_mode != BLEND_LERP) {
    fore *= opacity;
  }

  float mask = 1;
  
  // NOTE(valuef): From https://www.shadertoy.com/view/XdS3RW
  // s = back, d = fore
  // 2023-08-29
  EDITOR_BRANCH switch(blend_mode) {
    case BLEND_LERP:              mask = lerp(back, fore, opacity); break; 
    case BLEND_MIN_DARKEN:        mask = min(back, fore); break;
    case BLEND_MAX_LIGHTEN:       mask = max(back, fore); break;
    case BLEND_MULTIPLY:          mask = back * fore; break;
    case BLEND_SUBTRACT:          mask = back - fore; break;
    case BLEND_DIVIDE:            mask = back / fore; break;
    case BLEND_ADD_LINEAR_DODGE:  mask = back + fore; break;
    case BLEND_DIFFERENCE:        mask = abs(fore - back); break;
  }

  mask = saturate(mask);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

#define MASSBLEND_ADD_LINEAR_DODGE  0
#define MASSBLEND_MULTIPLY          1

float2
make_mass_blend_mask(
  Mask_Info mask_1_info,
  Mask_Info mask_2_info,
  Mask_Info mask_3_info,
  Mask_Info mask_4_info,
  Mask_Info mask_5_info,
  Mask_Info mask_6_info,
  Mask_Info mask_7_info,
  Mask_Info mask_8_info,
  int massblend_mode,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  const int NUM_MASKS = 8;

  Mask_Info masks[NUM_MASKS] = {
    mask_1_info,
    mask_2_info,
    mask_3_info,
    mask_4_info,
    mask_5_info,
    mask_6_info,
    mask_7_info,
    mask_8_info,
  };

  float mask = 0;

  EDITOR_BRANCH if(massblend_mode == MASSBLEND_ADD_LINEAR_DODGE) {

    for(int i = 0; i < NUM_MASKS; i++) {
      Mask_Info info = masks[i];
      EDITOR_BRANCH if(info.channel != MASK_NONE) {
        mask += get_mask(info);
      }
    }

    mask = saturate(mask);
  }
  else EDITOR_BRANCH if(massblend_mode == MASSBLEND_MULTIPLY) {
    mask = 1;

    for(int i = 0; i < NUM_MASKS; i++) {
      Mask_Info info = masks[i];
      mask *= get_mask(info);
    }
  }

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

#define trivial_inverted_mask(_val) float2((_val), 1 - (_val))

inline
float2
make_texture_mask_channel_mask(
  float mask,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  mask = saturate(mask * pre_inversion_strength);

  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

inline
float2
evaluate_scroll_mask(
  float3 skinned_pos,
  float speed,
  int time_base_slot,
  float3 axis,
  float frequency,
  float gap,
  float offset,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  skinned_pos *= frequency;
  float time = get_time(time_base_slot) * speed;

  float d = dot(skinned_pos, axis);

  // https://www.desmos.com/calculator/etdutrzdsq
  float saw = frac(time + d + offset) / gap;
  float mask = sin(saturate(saw) * UNITY_PI);
  mask = saturate(mask);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

inline
float2
evaluate_proximity_mask(
  float world_distance,
  float start,
  float end,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  // NOTE(valuef): plus magic constant to make sure that any banding is invisible.
  // Kind of a hack but it works
  // 2023-11-10
  float near_plane = _ProjectionParams.y + 0.003;
  start += near_plane;
  end += near_plane;

  float mask = (world_distance - start) / (end - start);
  mask = saturate(mask);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

void
init_mask_channels(
  float goo_noise,
  float2 goo_drip,
  float4 vertex_colors,
  float3 baked_pos,
  float3 world_normal,
  float3 eye_vec,
  float touch_reactivity_interaction,
  float point_lights,
  float3 skinned_pos,
  float2 backface_mask,
  float world_distance
) {
  MASK_CHANNELS.masks = (Mask_Channels)0;

  MASK_CHANNELS.masks[MASK_NONE] = float2(1,1);
  MASK_CHANNELS.masks[MASK_BACKFACE] = backface_mask;
  MASK_CHANNELS.masks[MASK_IS_AL_AVAILABLE] = can_use_audiolink() ? float2(1,0) : float2(0,1);

  {
    #define scroll_mask(_prefix) \
      evaluate_scroll_mask( \
        skinned_pos, \
        _prefix##_Speed, \
        _prefix##_Speed_TimeBase, \
        _prefix##_Axis, \
        get_value(_prefix##_Frequency_Osci), \
        get_value(_prefix##_Gap_Osci), \
        get_value(_prefix##_Offset_Osci), \
        get_value(_prefix##_Strength_PreInversion_Osci), \
        get_value(_prefix##_Strength_PostInversion_Osci) \
      )

    #if defined(VFGOO_ENABLE_MASK_SCROLL_1)
      MASK_CHANNELS.masks[MASK_SCROLL_1] = scroll_mask(_ScrollMask_1);
    #endif

    #if defined(VFGOO_ENABLE_MASK_SCROLL_2)
      MASK_CHANNELS.masks[MASK_SCROLL_2] = scroll_mask(_ScrollMask_2);
    #endif
  }

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
  {
    float pre_inversion_strength = get_value(_TouchReactivityInteractionMask_Intensity_Pre_Osci);
    float post_inversion_strength = get_value(_TouchReactivityInteractionMask_Intensity_Osci);

    #define calc(_val) saturate((_val) * intensity)

    float val = saturate(touch_reactivity_interaction * pre_inversion_strength);
    float2 mask = float2(val, 1 - val);
    mask = saturate(mask * post_inversion_strength);

    MASK_CHANNELS.masks[MASK_TOUCH_REACTIVITY_INTERACTION] = mask;

    #undef calc
  }
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    MASK_CHANNELS.masks[MASK_POINT_LIGHTS] = trivial_inverted_mask(point_lights);
  #endif

  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_R] = trivial_inverted_mask(vertex_colors.r);
  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_G] = trivial_inverted_mask(vertex_colors.g);
  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_B] = trivial_inverted_mask(vertex_colors.b);
  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_A] = trivial_inverted_mask(vertex_colors.a);

  {
    float fres = dot(world_normal, -eye_vec);

    #define rim_mask_channel(_prefix) \
      make_rim_mask_channel( \
        fres, \
        get_value(_prefix##_Start_Osci), \
        get_value(_prefix##_End_Osci), \
        get_value(_prefix##_Strength_PreInversion_Osci), \
        get_value(_prefix##_Strength_PostInversion_Osci), \
        get_value(_prefix##_Smoothing_Osci) \
      )

    #if defined(VFGOO_ENABLE_MASK_RIM_1)
      MASK_CHANNELS.masks[MASK_RIM_1] = rim_mask_channel(_RimMask_1);
    #endif

    #if defined(VFGOO_ENABLE_MASK_RIM_2)
      MASK_CHANNELS.masks[MASK_RIM_2] = rim_mask_channel(_RimMask_2);
    #endif

    #if defined(VFGOO_ENABLE_MASK_RIM_3)
      MASK_CHANNELS.masks[MASK_RIM_3] = rim_mask_channel(_RimMask_3);
    #endif

    #if defined(VFGOO_ENABLE_MASK_RIM_4)
      MASK_CHANNELS.masks[MASK_RIM_4] = rim_mask_channel(_RimMask_4);
    #endif


    #undef rim_mask_channel

  }

  {
    #define calc(_val) saturate(1-((_val) *2))

    float2 value = float2(
      calc(goo_noise),
      calc(1-goo_noise)
    );

    MASK_CHANNELS.masks[MASK_GOO_NOISE] = value;

    #undef calc
  }

  MASK_CHANNELS.masks[MASK_GOO_DRIP] = goo_drip;

  #define evaluate_capsule_mask_macro(_name) \
    evaluate_capsule_mask(\
      baked_pos, \
      get_value(_name##_Axis_Osci), \
      get_value(_name##_Origin_Osci), \
      _name##_Flip, \
      get_value(_name##_Height_Osci), \
      get_value(_name##_Radius_Osci), \
      get_value(_name##_Strength_PreInversion_Osci), \
      get_value(_name##_Strength_PostInversion_Osci) \
    )

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_1)
    MASK_CHANNELS.masks[MASK_CAPSULE_1] = evaluate_capsule_mask_macro(_CapsuleMask_1);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_2)
    MASK_CHANNELS.masks[MASK_CAPSULE_2] = evaluate_capsule_mask_macro(_CapsuleMask_2);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_3)
    MASK_CHANNELS.masks[MASK_CAPSULE_3] = evaluate_capsule_mask_macro(_CapsuleMask_3);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_4)
    MASK_CHANNELS.masks[MASK_CAPSULE_4] = evaluate_capsule_mask_macro(_CapsuleMask_4);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_5)
    MASK_CHANNELS.masks[MASK_CAPSULE_5] = evaluate_capsule_mask_macro(_CapsuleMask_5);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_6)
    MASK_CHANNELS.masks[MASK_CAPSULE_6] = evaluate_capsule_mask_macro(_CapsuleMask_6);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_7)
    MASK_CHANNELS.masks[MASK_CAPSULE_7] = evaluate_capsule_mask_macro(_CapsuleMask_7);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_8)
    MASK_CHANNELS.masks[MASK_CAPSULE_8] = evaluate_capsule_mask_macro(_CapsuleMask_8);
  #endif

  #undef evaluate_capsule_mask_macro

  #define sample_mask_texture_macro(_index, _name, _sampler) \
    { \
      float4 tap = float4(1,1,1,1); \
      \
      if(is##_name##_Texture_set) { \
        tap = sample_texture_2d( \
          _name##_Texture,  \
          _name##_Texture_Tiling, \
          _name##_Texture_Offset, \
          _name##_Texture_ScrollSpeed, \
          _name##_Texture_UVBus, \
          _sampler, \
          _name##_Texture_ScrollSpeed_TimeBase \
        ); \
      } \
      \
      float pre_inversion_strength = get_value(_name##_Strength_PreInversion_Osci); \
      float post_inversion_strength = get_value(_name##_Strength_PostInversion_Osci); \
      \
      MASK_CHANNELS.masks[_index##_R] = make_texture_mask_channel_mask(tap.r, pre_inversion_strength, post_inversion_strength); \
      MASK_CHANNELS.masks[_index##_G] = make_texture_mask_channel_mask(tap.g, pre_inversion_strength, post_inversion_strength); \
      MASK_CHANNELS.masks[_index##_B] = make_texture_mask_channel_mask(tap.b, pre_inversion_strength, post_inversion_strength); \
      MASK_CHANNELS.masks[_index##_A] = make_texture_mask_channel_mask(tap.a, pre_inversion_strength, post_inversion_strength); \
    }
  
  #if defined(VFGOO_ENABLE_MASK_TEXTURE_1)
    sample_mask_texture_macro(MASK_1, _MaskChannel_1, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_2)
    sample_mask_texture_macro(MASK_2, _MaskChannel_2, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_3)
    sample_mask_texture_macro(MASK_3, _MaskChannel_3, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_4)
    sample_mask_texture_macro(MASK_4, _MaskChannel_4, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_5)
    sample_mask_texture_macro(MASK_5, _MaskChannel_5, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_6)
    sample_mask_texture_macro(MASK_6, _MaskChannel_6, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_7)
    sample_mask_texture_macro(MASK_7, _MaskChannel_7, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_8)
    sample_mask_texture_macro(MASK_8, _MaskChannel_8, _SamplerLinearRepeat);
  #endif

  #undef sample_mask_texture_macro

  #if defined(VFGOO_ENABLE_MASK_DISTANCE_1)
    MASK_CHANNELS.masks[MASK_DISTANCE_1] = evaluate_proximity_mask(
      world_distance, 
      get_value(_DistanceMask_1_Distance_Start_Osci),
      get_value(_DistanceMask_1_Distance_End_Osci),
      get_value(_DistanceMask_1_Strength_PreInversion_Osci),
      get_value(_DistanceMask_1_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_DISTANCE_2)
    MASK_CHANNELS.masks[MASK_DISTANCE_2] = evaluate_proximity_mask(
      world_distance, 
      get_value(_DistanceMask_2_Distance_Start_Osci),
      get_value(_DistanceMask_2_Distance_End_Osci),
      get_value(_DistanceMask_2_Strength_PreInversion_Osci),
      get_value(_DistanceMask_2_Strength_PostInversion_Osci)
    );
  #endif


  #if defined(VFGOO_ENABLE_MASK_MASSBLEND_1)
    MASK_CHANNELS.masks[MASK_MASSBLEND_1] = make_mass_blend_mask(
      _MassBlendMask_1_1_Mask,
      _MassBlendMask_1_2_Mask,
      _MassBlendMask_1_3_Mask,
      _MassBlendMask_1_4_Mask,
      _MassBlendMask_1_5_Mask,
      _MassBlendMask_1_6_Mask,
      _MassBlendMask_1_7_Mask,
      _MassBlendMask_1_8_Mask,
      _MassBlendMask_1_BlendMode,
      get_value(_MassBlendMask_1_Strength_Osci),
      get_value(_MassBlendMask_1_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_MASSBLEND_2)
    MASK_CHANNELS.masks[MASK_MASSBLEND_2] = make_mass_blend_mask(
      _MassBlendMask_2_1_Mask,
      _MassBlendMask_2_2_Mask,
      _MassBlendMask_2_3_Mask,
      _MassBlendMask_2_4_Mask,
      _MassBlendMask_2_5_Mask,
      _MassBlendMask_2_6_Mask,
      _MassBlendMask_2_7_Mask,
      _MassBlendMask_2_8_Mask,
      _MassBlendMask_2_BlendMode,
      get_value(_MassBlendMask_2_Strength_Osci),
      get_value(_MassBlendMask_2_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_1)
    MASK_CHANNELS.masks[MASK_BLEND_1] = make_blend_mask(
      _BlendMask_1_Mask_Fore_Mask,
      _BlendMask_1_Mask_Back_Mask,
      get_value(_BlendMask_1_Opacity_Osci),
      _BlendMask_1_BlendMode,
      get_value(_BlendMask_1_Strength_PreInversion_Osci),
      get_value(_BlendMask_1_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_2)
    MASK_CHANNELS.masks[MASK_BLEND_2] = make_blend_mask(
      _BlendMask_2_Mask_Fore_Mask,
      _BlendMask_2_Mask_Back_Mask,
      get_value(_BlendMask_2_Opacity_Osci),
      _BlendMask_2_BlendMode,
      get_value(_BlendMask_2_Strength_PreInversion_Osci),
      get_value(_BlendMask_2_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_3)
    MASK_CHANNELS.masks[MASK_BLEND_3] = make_blend_mask(
      _BlendMask_3_Mask_Fore_Mask,
      _BlendMask_3_Mask_Back_Mask,
      get_value(_BlendMask_3_Opacity_Osci),
      _BlendMask_3_BlendMode,
      get_value(_BlendMask_3_Strength_PreInversion_Osci),
      get_value(_BlendMask_3_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_4)
    MASK_CHANNELS.masks[MASK_BLEND_4] = make_blend_mask(
      _BlendMask_4_Mask_Fore_Mask,
      _BlendMask_4_Mask_Back_Mask,
      get_value(_BlendMask_4_Opacity_Osci),
      _BlendMask_4_BlendMode,
      get_value(_BlendMask_4_Strength_PreInversion_Osci),
      get_value(_BlendMask_4_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_5)
    MASK_CHANNELS.masks[MASK_BLEND_5] = make_blend_mask(
      _BlendMask_5_Mask_Fore_Mask,
      _BlendMask_5_Mask_Back_Mask,
      get_value(_BlendMask_5_Opacity_Osci),
      _BlendMask_5_BlendMode,
      get_value(_BlendMask_5_Strength_PreInversion_Osci),
      get_value(_BlendMask_5_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_6)
    MASK_CHANNELS.masks[MASK_BLEND_6] = make_blend_mask(
      _BlendMask_6_Mask_Fore_Mask,
      _BlendMask_6_Mask_Back_Mask,
      get_value(_BlendMask_6_Opacity_Osci),
      _BlendMask_6_BlendMode,
      get_value(_BlendMask_6_Strength_PreInversion_Osci),
      get_value(_BlendMask_6_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_7)
    MASK_CHANNELS.masks[MASK_BLEND_7] = make_blend_mask(
      _BlendMask_7_Mask_Fore_Mask,
      _BlendMask_7_Mask_Back_Mask,
      get_value(_BlendMask_7_Opacity_Osci),
      _BlendMask_7_BlendMode,
      get_value(_BlendMask_7_Strength_PreInversion_Osci),
      get_value(_BlendMask_7_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_8)
    MASK_CHANNELS.masks[MASK_BLEND_8] = make_blend_mask(
      _BlendMask_8_Mask_Fore_Mask,
      _BlendMask_8_Mask_Back_Mask,
      get_value(_BlendMask_8_Opacity_Osci),
      _BlendMask_8_BlendMode,
      get_value(_BlendMask_8_Strength_PreInversion_Osci),
      get_value(_BlendMask_8_Strength_PostInversion_Osci)
    );
  #endif
}

void
init_masks_as_oscillators() {
  OSCILLATORS.slots[OSCI_MASK_1] = get_mask(_Osci_Mask_1_Mask);
  OSCILLATORS.slots[OSCI_MASK_2] = get_mask(_Osci_Mask_2_Mask);
  OSCILLATORS.slots[OSCI_MASK_3] = get_mask(_Osci_Mask_3_Mask);
  OSCILLATORS.slots[OSCI_MASK_4] = get_mask(_Osci_Mask_4_Mask);
  OSCILLATORS.slots[OSCI_MASK_5] = get_mask(_Osci_Mask_5_Mask);
  OSCILLATORS.slots[OSCI_MASK_6] = get_mask(_Osci_Mask_6_Mask);
  OSCILLATORS.slots[OSCI_MASK_7] = get_mask(_Osci_Mask_7_Mask);
  OSCILLATORS.slots[OSCI_MASK_8] = get_mask(_Osci_Mask_8_Mask);
}

// NOTE(valuef): any inline of these texture samplers is marked with @InlinedTextureSampling
// 2023-08-20
float4
sample_texture_separate_mask(
  const Texture_Info info,
  out float mask
) {
  float4 tap = info.default_value;

  if(info.is_set) {
    tap = sample_texture_2d(info.tex, info.tiling, info.offset, info.scroll, info.uv_bus, info.samp, info.time_base_slot);
  }

  mask = get_mask(info.mask);

  if(info.alpha_is_mask) {
    mask *= tap.a;
  }

  return tap;
}


float4
sample_texture(
  const Texture_Info info
) {
  // @InlinedTextureSampling
  float mask;
  float4 tap = sample_texture_separate_mask(info, mask);

  tap *= mask;

  return tap;
}

#if defined(RALIV_PENETRATOR) || defined(RALIV_ORIFICE)
  #include "Assets/RalivDynamicPenetrationSystem/Plugins/RalivDPS_Functions.cginc"
#endif

#define RENDERING_MODE_OPAQUE       0
#define RENDERING_MODE_TRANSPARENT  1
#define RENDERING_MODE_FADE         2
#define RENDERING_MODE_CUTOUT       3

// _ALPHAPREMULTIPLY_ON is set
inline bool is_using_premultiplied_alpha() {
  // one oneminussrcalpha
  return _SourceBlend == 1 && _DestinationBlend == 10;
}

// fade,
// _ALPHABLEND_ON is set
inline bool is_using_postmultiplied_alpha() {
  // srcalpha oneminussrcalpha
  return _SourceBlend == 5 && _DestinationBlend == 10;
}

float3 rgb2hsv(float3 c) {
  float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
  float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
  float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

  float d = q.x - min(q.w, q.y);
  float e = 1.0e-10;
  return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

float3 hsv2rgb(float3 c) {
  float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * lerp(K.xxx, saturate(p - K.xxx), c.y);
}

// NOTE(valuef): There are some problems with TEXCOORD < 2
// If the mesh has any texcoord vertex attributes with semantic index over 2, and there are
// shaders PRESENT ON THE MESH that make use of any of them, everything is okay.
// However, if those shaders are NOT present on the mesh during upload but instead are set up to
// be swapped into using simple material swap animations, then the vertex input input layout for
// texcoord attributes above 2 will not be properly set up!
//
// Here is some renderdoc IA info:
//
// === Deuzear with UV7 data and a shader that uses it as the default shader. Works fine ===
//  Input Layouts
//    Slot	Semantic Name	  Semantic Index	Format	              Input Slot	Byte Offset	  Per Instance	Instance Data Step Rate
//    0	    POSITION	      0	              R32G32B32_FLOAT	      0	          0	            False	        0
//    1	    NORMAL	        0	              R32G32B32_FLOAT	      0	          12	          False	        0
//    2	    TANGENT	        0	              R32G32B32A32_FLOAT	  0	          24	          False	        0
//    3	    COLOR	          0	              R8G8B8A8_UNORM	      3	          4	            False	        0
//    4	    TEXCOORD	      0	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    5	    TEXCOORD	      1	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    6	    TEXCOORD	      2	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    7	    TEXCOORD	      3	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    8	    TEXCOORD	      4	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    9	    TEXCOORD	      5	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    10	  TEXCOORD	      6	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    11	  TEXCOORD	      7	              R32G32B32A32_FLOAT	  1	          16	          False	        0
//    12	  BLENDWEIGHTS	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    13	  BLENDINDICES	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//
//  Vertex Buffers
//    Slot	  Buffer	                                                                            Stride	Offset	Byte Length
//    0	      Buffer-1-1134400	                                                                  40	    0	      1134400
//    1	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    2	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    3	      Buffer-1-20	                                                                        0	      0	      20
//
//  Index Buffer
//    Buffer	                                                              Format	  Offset	  Byte Length
//    wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	R16_UINT	0	        286668
//
//  Primitive Topology
//    Triangle List
//
// === Deuzear with UV2 data, a shader that doesn't use it as a default shader and a shader that does use it as a material swap via animation. Works fine. ===
//  Input Layouts
//    Slot	Semantic Name	  Semantic Index	Format	              Input Slot	Byte Offset	  Per Instance	Instance Data Step Rate
//    0	    POSITION	      0	              R32G32B32_FLOAT	      0	          0	            False	        0
//    1	    NORMAL	        0	              R32G32B32_FLOAT	      0	          12	          False	        0
//    2	    TANGENT	        0	              R32G32B32A32_FLOAT	  0	          24	          False	        0
//    3	    COLOR	          0	              R8G8B8A8_UNORM	      3	          4	            False	        0
//    4	    TEXCOORD	      0	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    5	    TEXCOORD	      1	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    6	    TEXCOORD	      2	              R32G32B32A32_FLOAT	  1	          16	          False	        0
//    7	    TEXCOORD	      3	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    8	    TEXCOORD	      4	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    9	    TEXCOORD	      5	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    10	  TEXCOORD	      6	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    11	  TEXCOORD	      7	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    12	  BLENDWEIGHTS	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    13	  BLENDINDICES	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//
//  Vertex Buffers
//    Slot	  Buffer	                                                                            Stride	Offset	Byte Length
//    0	      Buffer-1-1134400	                                                                  40	    0	      1134400
//    1	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    2	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    3	      Buffer-1-20	                                                                        0	      0	      20
//
//  Index Buffer
//    Buffer	                                                              Format	  Offset	  Byte Length
//    wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	R16_UINT	0	        286668
//
//  Primitive Topology
//    Triangle List
//
// === Deuzear with UV3 data, a shader that doesn't use it as a default shader and a shader that does use it as a material swap via animation. Broken normals and UV3 data. ===
//  Input Layouts
//    Slot	Semantic Name	  Semantic Index	Format	              Input Slot	Byte Offset	  Per Instance	Instance Data Step Rate
//    0	    POSITION	      0	              R32G32B32_FLOAT	      0	          0	            False	        0
//    1	    NORMAL	        0	              R32G32B32_FLOAT	      0	          12	          False	        0
//    2	    TANGENT	        0	              R32G32B32A32_FLOAT	  0	          24	          False	        0
//    3	    COLOR	          0	              R8G8B8A8_UNORM	      3	          4	            False	        0
//    4	    TEXCOORD	      0	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    5	    TEXCOORD	      1	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    6	    TEXCOORD	      2	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    7	    TEXCOORD	      3	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    8	    TEXCOORD	      4	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    9	    TEXCOORD	      5	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    10	  TEXCOORD	      6	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    11	  TEXCOORD	      7	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    12	  BLENDWEIGHTS	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    13	  BLENDINDICES	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//
//  Vertex Buffers
//    Slot	  Buffer	                                                                            Stride	Offset	Byte Length
//    0	      Buffer-1-1134400	                                                                  40	    0	      1134400
//    1	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              16	    0	      453760
//    2	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    3	      Buffer-1-20	                                                                        0	      0	      20
//
//  Index Buffer
//    Buffer	                                                              Format	  Offset	  Byte Length
//    wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	R16_UINT	0	        286668
//
//  Primitive Topology
//    Triangle List
//
// It's a bit unclear as to why the normal baking breaks with UV3-7 material swaps, but it's clear
// that the UV3 data does not have the proper byte offset set whereas the UV2 version and UV7
// default version do!
// 
// I'm completely in the dark on what's going on behind the scenes here at the API level.
// 2023-03-07
//
// It's likely happening due to the mesh channel optimization step during the unity bundle build process.
// 2023-08-04
//
// Confirmed, turning of mesh optimizaton before building seems to fix it.
// 2023-08-17
struct Vertex_Input {
  float4 vertex_colors : COLOR;
  float4 vertex : POSITION;
  half3 normal : NORMAL;

  float2 uv0 : TEXCOORD0;
  float2 uv1 : TEXCOORD1; 
  float3 baked_pos : TEXCOORD2; /* NOTE(valuef): Reserved for baked goo data */
  float2 uv3 : TEXCOORD3;
  float2 uv4 : TEXCOORD4;
  float2 uv5 : TEXCOORD5;
  float2 uv6 : TEXCOORD6;
  float2 uv7 : TEXCOORD7;

  half4 tangent : TANGENT;

	uint vertex_id : SV_VertexID;

  UNITY_VERTEX_INPUT_INSTANCE_ID
};

struct Vertex_Output_Forward_Base {
  float4 pos : SV_POSITION;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  UNITY_VERTEX_OUTPUT_STEREO

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD1;
  #endif

  float3 eye_vec_unnormalized : TEXCOORD2;

  /* [3x3:tangentToWorld | 1x3:viewDirForParallax or worldPos] */
  float4 tangentToWorldAndPackedData[3] : TEXCOORD3; 

  /* SH or Lightmap UV */
  half4 ambientOrLightmapUV : TEXCOORD6; 

  UNITY_LIGHTING_COORDS(7,8)
  UNITY_FOG_COORDS(9)

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise : TEXCOORD10;
  #endif

  #if !defined(OPT_GRAB_POS_INTERPOLATOR_DISABLED)
    float4 grab_pos : TEXCOORD11;
  #endif

  float3 baked_pos : TEXCOORD12;

  #if defined(NOT_BAKED)
    float4 debug : TEXCOORD13;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD14;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD15;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD16;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD17;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD18;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD19;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD20;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD21;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD22;
  #endif
};

struct Vertex_Output_Outline {
  float4 pos : SV_POSITION;

  UNITY_VERTEX_OUTPUT_STEREO
  UNITY_FOG_COORDS(0)

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD1;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD2;
  #endif

  // TODO can this be optimized out?
  float3 baked_pos : TEXCOORD3;

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD4;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD5;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise  : TEXCOORD6;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD7;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD8;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD9;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD10;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD11;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD12;
  #endif

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    /* Only used for uv buses and panosphere */
    float3 world_pos : TEXCOORD13;            
  #endif

  // TODO optimize these out
  /* Only for rim mask & center-out tf */
  float3 eye_vec_unnormalized : TEXCOORD14; 

  /* Only for rim mask & center out tf*/
  float3 world_normal : TEXCOORD15;         

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD16;
  #endif
};

struct Vertex_Output_Early_Z {
  float4 pos : SV_POSITION;

  UNITY_VERTEX_OUTPUT_STEREO
};

struct Vertex_Output_Forward_Add {
  float4 pos : SV_POSITION;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  UNITY_VERTEX_OUTPUT_STEREO

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD1;
  #endif

  float3 eye_vec_unnormalized : TEXCOORD2;

  /* [3x3:tangentToWorld | 1x3:lightDir] */
  float4 tangentToWorldAndLightDir[3] : TEXCOORD3; 

  float3 posWorld : TEXCOORD6;

  UNITY_LIGHTING_COORDS(7, 8)
  UNITY_FOG_COORDS(9)

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise : TEXCOORD10;
  #endif

  float3 baked_pos : TEXCOORD11;

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD12;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD13;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD14;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD15;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD16;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD17;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD18;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD19;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD20;
  #endif
};

struct Vertex_Output_Shadow_Caster {
  float4 pos : SV_POSITION;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  V2F_SHADOW_CASTER_NOPOS
  UNITY_VERTEX_OUTPUT_STEREO

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD1;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD2;
  #endif

  // unused TEXCOORD3;

  float3 baked_pos : TEXCOORD4;

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD5;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD6;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise  : TEXCOORD7;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD8;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD9;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD10;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD11;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD12;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD13;
  #endif

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    /* Only used for uv buses and panosphere */
    float3 world_pos : TEXCOORD14;            
  #endif

  // TODO optimize these out
  /* Only for rim mask & center-out tf */
  float3 eye_vec_unnormalized : TEXCOORD15; 

  /* Only for rim mask & center-out tf */
  float3 world_normal : TEXCOORD16;         

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD17;
  #endif
};

half3 ShadeSHPerPixel(half3 normal, half3 ambient, float3 worldPos) {
  half3 ambient_contrib = 0.0;

  #if defined(UNITY_SAMPLE_FULL_SH_PER_PIXEL)
    // Completely per-pixel
    #if UNITY_LIGHT_PROBE_PROXY_VOLUME
      if(unity_ProbeVolumeParams.x == 1.0) {
        ambient_contrib = SHEvalLinearL0L1_SampleProbeVolume(half4(normal, 1.0), worldPos);
      }
      else {
        ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
      }
    #else
      ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
    #endif

    ambient_contrib += SHEvalLinearL2(half4(normal, 1.0));

    ambient += max(half3(0, 0, 0), ambient_contrib);

    #ifdef UNITY_COLORSPACE_GAMMA
      ambient = LinearToGammaSpace(ambient);
    #endif
  #else
    // L2 per-vertex, L0..L1 & gamma-correction per-pixel
    // Ambient in this case is expected to be always Linear, see ShadeSHPerVertex()
    #if UNITY_LIGHT_PROBE_PROXY_VOLUME
      if(unity_ProbeVolumeParams.x == 1.0) {
        ambient_contrib = SHEvalLinearL0L1_SampleProbeVolume(half4(normal, 1.0), worldPos);
      }
      else {
        ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
      }
    #else
      ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
    #endif

    // include L2 contribution in vertex shader before clamp.
    ambient = max(half3(0, 0, 0), ambient+ambient_contrib);

    #ifdef UNITY_COLORSPACE_GAMMA
      ambient = LinearToGammaSpace(ambient);
    #endif
  #endif

  return ambient;
}

half3 ShadeSHPerVertex(half3 normal, half3 ambient) {
  #if defined(UNITY_SAMPLE_FULL_SH_PER_PIXEL)
    // Completely per-pixel
    // nothing to do here
  #else
    // L2 per-vertex, L0..L1 & gamma-correction per-pixel

    // NOTE: SH data is always in Linear AND calculation is split between vertex & pixel
    // Convert ambient to Linear and do final gamma-correction at the end(per-pixel)
    #ifdef UNITY_COLORSPACE_GAMMA
      ambient = GammaToLinearSpace(ambient);
    #endif

    ambient += SHEvalLinearL2(half4(normal, 1.0));     // no max since this is only L2 contribution
  #endif

  return ambient;
}

inline half4 VertexGIForward(float3 posWorld, half3 normalWorld) {
  half4 ambientOrLightmapUV = 0;

  // NOTE(valuef): By default this keyword is a multi-compile keyword but for the sake of build times we're baking it in.
  // In rare situations with too many lights, the avatar may look like it's not receiving lights BUT for now this is okay I think.
  // Also from testing, not including this keyword still seems to upload vertex light information into the shader. 
  //
  // So, all in all, since in VRC we mostly use vertex lights for world-space positions of nearby objects, we're likely not going
  // to be using them for lights. So we should be good.
  //
  // 2023-10-31
  /*
  #ifdef VERTEXLIGHT_ON
    // Approximated illumination from non-important point lights
    ambientOrLightmapUV.rgb = Shade4PointLights(
      unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
      unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
      unity_4LightAtten0, posWorld, normalWorld
    );
  #endif
  */

  ambientOrLightmapUV.rgb = ShadeSHPerVertex(normalWorld, ambientOrLightmapUV.rgb);

  return ambientOrLightmapUV;
}

#define IN_WORLDPOS(i) half3(i.tangentToWorldAndPackedData[0].w,i.tangentToWorldAndPackedData[1].w,i.tangentToWorldAndPackedData[2].w)

struct Fragment_Common_Data {
  float3 diffColor;
  float3 specColor;

  // Note: smoothness & oneMinusReflectivity for optimization purposes, mostly for DX9 SM2.0 level.
  // Most of the math is being done on these (1-x) values, and that saves a few precious ALU slots.
  float oneMinusReflectivity;
  float smoothness;

  float3 normalWorld;
  float3 normal_world_seamless;
  float3 posWorld;

  float4 albedo;
  float3 emissive_from_albedo_source;

  float alpha;

  float3 eye_vec;

  float4 glitter;
};

inline half3 PreMultiplyAlpha(half3 diffColor, half alpha, half oneMinusReflectivity, out half outModifiedAlpha) {
  bool is_transparent = false;

  EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT) {
    // NOTE: shader relies on pre-multiply alpha-blend (_SrcBlend = One, _DstBlend = OneMinusSrcAlpha)

    // Transparency 'removes' from Diffuse component
    diffColor *= alpha;

    // Reflectivity 'removes' from the rest of components, including Transparency
    // outAlpha = 1-(1-alpha)*(1-reflectivity) = 1-(oneMinusReflectivity - alpha*oneMinusReflectivity) =
    //          = 1-oneMinusReflectivity + alpha*oneMinusReflectivity
    outModifiedAlpha = 1-oneMinusReflectivity + alpha*oneMinusReflectivity;
  }
  else {
    outModifiedAlpha = alpha;
  }

  return diffColor;
}

half3 UnpackScaleNormal(half4 packednormal, half bumpScale) {
  packednormal.x *= packednormal.w;

  half3 normal;
  normal.xy = (packednormal.xy * 2 - 1);
  normal.xy *= bumpScale;
  normal.z = sqrt(1.0 - saturate(dot(normal.xy, normal.xy)));

  return normal;
}

inline half OneMinusReflectivityFromMetallic(half metallic) {
  // We'll need oneMinusReflectivity, so
  //   1-reflectivity = 1-lerp(dielectricSpec, 1, metallic) = lerp(1-dielectricSpec, 0, metallic)
  // store (1-dielectricSpec) in unity_ColorSpaceDielectricSpec.a, then
  //   1-reflectivity = lerp(alpha, 0, metallic) = alpha + metallic*(0 - alpha) =
  //                  = alpha - metallic * alpha
  half oneMinusDielectricSpec = unity_ColorSpaceDielectricSpec.a;
  return oneMinusDielectricSpec - metallic * oneMinusDielectricSpec;
}

inline half3 DiffuseAndSpecularFromMetallic(half3 albedo, half metallic, out half3 specColor, out half oneMinusReflectivity) {
  specColor = lerp(unity_ColorSpaceDielectricSpec.rgb, albedo, metallic);
  oneMinusReflectivity = OneMinusReflectivityFromMetallic(metallic);
  return albedo * oneMinusReflectivity;
}

struct UnityLight {
  half3 color;
  half3 dir;
};

struct UnityIndirect {
  half3 diffuse;
  half3 specular;
};

struct UnityGI {
  UnityLight light;
  UnityIndirect indirect;
};

struct UnityGIInput {
  // pixel light, sent from the engine
  UnityLight light;

  float3 worldPos;
  half3 worldViewDir;
  half atten;
  half3 ambient;

  // interpolated lightmap UVs are passed as full float precision data to fragment shaders
  // so lightmapUV (which is used as a tmp inside of lightmap fragment shaders) should
  // also be full float precision to avoid data loss before sampling a texture.
  float4 lightmapUV; // .xy = static lightmap UV, .zw = dynamic lightmap UV

  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION) || defined(UNITY_ENABLE_REFLECTION_BUFFERS)
    float4 boxMin[2];
  #endif

  #ifdef UNITY_SPECCUBE_BOX_PROJECTION
    float4 boxMax[2];
    float4 probePosition[2];
  #endif

  // HDR cubemap properties, use to decompress HDR texture
  float4 probeHDR[2];
};

inline bool has_world_space_light_direction() {
  return any(_WorldSpaceLightPos0.xyz);
}

// NOTE(valuef): direction should be normalized at usage site
// 2024-01-04
inline
UnityLight
get_directional_light(float3 world_pos) {
  UnityLight ret;
  ret.color = _LightColor0.rgb;

  float3 world_space_light;
  #ifndef USING_LIGHT_MULTI_COMPILE
      ret.dir = _WorldSpaceLightPos0.xyz - world_pos * _WorldSpaceLightPos0.w;
  #else
    #ifndef USING_DIRECTIONAL_LIGHT
      ret.dir = _WorldSpaceLightPos0.xyz - world_pos;
    #else
      ret.dir = _WorldSpaceLightPos0.xyz;
    #endif
  #endif


  EDITOR_BRANCH if(_FallbackLight_Enabled) {
    [branch] if(!has_world_space_light_direction()) {
      ret.color = _FallbackLight_Color.rgb;
      ret.dir = _FallbackLight_Direction.xyz;
    }
  }

  return ret;
}

inline float pow2(float x) { return x * x; }

float SmoothnessToPerceptualRoughness(float smoothness) {
  return 1 - smoothness;
}

// GlossyEnvironment - Function to integrate the specular lighting with default sky or reflection probes
struct Unity_GlossyEnvironmentData {
  // - Deferred case have one cubemap
  // - Forward case can have two blended cubemap (unusual should be deprecated).

  // Surface properties use for cubemap integration
  half perceptual_roughness;
  half3 reflUVW;
};

Unity_GlossyEnvironmentData UnityGlossyEnvironmentSetup(half Smoothness, half3 worldViewDir, half3 Normal, half3 fresnel0) {
  Unity_GlossyEnvironmentData g;

  g.perceptual_roughness = SmoothnessToPerceptualRoughness(Smoothness);
  g.reflUVW  = reflect(-worldViewDir, Normal);

  return g;
}

inline void ResetUnityLight(out UnityLight outLight) {
  outLight.color = half3(0, 0, 0);
  outLight.dir = half3(0, 1, 0); // Irrelevant direction, just not null
}

inline void ResetUnityGI(out UnityGI outGI) {
  ResetUnityLight(outGI.light);
  outGI.indirect.diffuse = 0;
  outGI.indirect.specular = 0;
}

inline UnityGI UnityGI_Base(UnityGIInput data, half occlusion, half3 normalWorld) {
  UnityGI o_gi;
  ResetUnityGI(o_gi);

  // Base pass with Lightmap support is responsible for handling ShadowMask / blending here for performance reason
  #if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
    half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
    float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
    float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
    data.atten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
  #endif

  o_gi.light = data.light;
  o_gi.light.color *= data.atten;

  #if UNITY_SHOULD_SAMPLE_SH
    o_gi.indirect.diffuse = ShadeSHPerPixel(normalWorld, data.ambient, data.worldPos);
  #endif

  #if defined(LIGHTMAP_ON)
    // Baked lightmaps
    half4 bakedColorTex = UNITY_SAMPLE_TEX2D(unity_Lightmap, data.lightmapUV.xy);
    half3 bakedColor = DecodeLightmap(bakedColorTex);

    #ifdef DIRLIGHTMAP_COMBINED
      fixed4 bakedDirTex = UNITY_SAMPLE_TEX2D_SAMPLER(unity_LightmapInd, unity_Lightmap, data.lightmapUV.xy);
      o_gi.indirect.diffuse += DecodeDirectionalLightmap(bakedColor, bakedDirTex, normalWorld);

      #if defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN)
        ResetUnityLight(o_gi.light);
        o_gi.indirect.diffuse = SubtractMainLightWithRealtimeAttenuationFromLightmap(o_gi.indirect.diffuse, data.atten, bakedColorTex, normalWorld);
      #endif

    #else // not directional lightmap
      o_gi.indirect.diffuse += bakedColor;

      #if defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN)
        ResetUnityLight(o_gi.light);
        o_gi.indirect.diffuse = SubtractMainLightWithRealtimeAttenuationFromLightmap(o_gi.indirect.diffuse, data.atten, bakedColorTex, normalWorld);
      #endif
    #endif
  #endif

  o_gi.indirect.diffuse *= occlusion;
  return o_gi;
}


inline UnityGI UnityGlobalIllumination(UnityGIInput data, half occlusion, half3 normalWorld) {
  return UnityGI_Base(data, occlusion, normalWorld);
}

inline float3 BoxProjectedCubemapDirection(float3 worldRefl, float3 worldPos, float4 cubemapCenter, float4 boxMin, float4 boxMax) {
  // Do we have a valid reflection probe?
  UNITY_BRANCH
  if(cubemapCenter.w > 0.0) {
    float3 nrdir = normalize(worldRefl);

    #if 1
      float3 rbmax = (boxMax.xyz - worldPos) / nrdir;
      float3 rbmin = (boxMin.xyz - worldPos) / nrdir;

      float3 rbminmax = (nrdir > 0.0f) ? rbmax : rbmin;

    #else // Optimized version
      float3 rbmax = (boxMax.xyz - worldPos);
      float3 rbmin = (boxMin.xyz - worldPos);

      float3 select = step(float3(0,0,0), nrdir);
      float3 rbminmax = lerp(rbmax, rbmin, select);
      rbminmax /= nrdir;
    #endif

    float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);

    worldPos -= cubemapCenter.xyz;
    worldRefl = worldPos + nrdir * fa;
  }

  return worldRefl;
}

half perceptualRoughnessToMipmapLevel(half perceptualRoughness) {
  return perceptualRoughness * UNITY_SPECCUBE_LOD_STEPS;
}

half3 Unity_GlossyEnvironment(UNITY_ARGS_TEXCUBE(tex), half4 hdr, Unity_GlossyEnvironmentData glossIn) {

  half perceptualRoughness = glossIn.perceptual_roughness;
  perceptualRoughness = perceptualRoughness*(1.7 - 0.7*perceptualRoughness);

  half mip = perceptualRoughnessToMipmapLevel(perceptualRoughness);
  half3 R = glossIn.reflUVW;
  half4 rgbm = UNITY_SAMPLE_TEXCUBE_LOD(tex, R, mip);

  return DecodeHDR(rgbm, hdr);
}

float
get_appears_on_mask(
  int appears_on, 
  float material_mix
) {
  EDITOR_BRANCH if(appears_on == APPEARS_ON_MATERIAL_ONLY_PRE_TF) {
    return 1-material_mix;
  }
  else EDITOR_BRANCH if(appears_on == APPEARS_ON_MATERIAL_ONLY_POST_TF) {
    return material_mix;
  }
  return 1;
}

inline 
half3 
UnityGI_IndirectSpecular(
  UnityGIInput data, 
  half occlusion, 
  Unity_GlossyEnvironmentData glossIn, 
  float material_mix
) {
  half3 specular;

  half3 originalReflUVW = glossIn.reflUVW;
  #ifdef UNITY_SPECCUBE_BOX_PROJECTION
    // we will tweak reflUVW in glossIn directly (as we pass it to Unity_GlossyEnvironment twice for probe0 and probe1), so keep original to pass into BoxProjectedCubemapDirection
    glossIn.reflUVW = BoxProjectedCubemapDirection(originalReflUVW, data.worldPos, data.probePosition[0], data.boxMin[0], data.boxMax[0]);
  #endif

  EDITOR_BRANCH if(_GlossyReflections_Enabled) {
    {
      half3 env0 = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE(unity_SpecCube0), data.probeHDR[0], glossIn);

      #ifdef UNITY_SPECCUBE_BLENDING
        const float kBlendFactor = 0.99999;
        float blendLerp = data.boxMin[0].w;

        UNITY_BRANCH
        if(blendLerp < kBlendFactor) {
          #ifdef UNITY_SPECCUBE_BOX_PROJECTION
            glossIn.reflUVW = BoxProjectedCubemapDirection(
              originalReflUVW, data.worldPos, data.probePosition[1], data.boxMin[1], data.boxMax[1]
            );
          #endif

          half3 env1 = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE_SAMPLER(unity_SpecCube1,unity_SpecCube0), data.probeHDR[1], glossIn);
          specular = lerp(env1, env0, blendLerp);
        }
        else {
          specular = env0;
        }
      #else
        specular = env0;
      #endif
    }

    EDITOR_BRANCH if(_FakeCubemap_Enabled) {
      half3 fake_refl;
      if(is_FakeCubemap_Texture_set) {
        {
          half3 old = glossIn.reflUVW;
          glossIn.reflUVW = originalReflUVW;
          fake_refl = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE(_FakeCubemap_Texture), _FakeCubemap_Texture_HDR, glossIn);
          glossIn.reflUVW = old;
        }

        fake_refl = fake_refl * _FakeCubemap_Tint2.rgb;
        fake_refl *= _FakeCubemap_Exposure;
      }
      else {
        // NOTE(valuef): This is 0.5^2.2 as the default value of cubemaps (0.5, 0.5, 0.5, 1).
        // The 2.2 pow is an educated guess to match the value we get by sampling the unset texture.
        // 2022-10-21
        fake_refl = 0.21763764082.rrr;
      }

      float appears_on = get_appears_on_mask(_FakeCubemap_AppearsOnMaterial, material_mix);

      fake_refl = lerp(specular, fake_refl, appears_on);
      specular = lerp(specular, fake_refl, _FakeCubemap_Blend);
    }
  }
  else {
    specular = unity_IndirectSpecColor.rgb;
  }

  return specular * occlusion;
}

inline 
UnityGI 
UnityGlobalIllumination(
  UnityGIInput data, 
  half occlusion, 
  half3 normalWorld, 
  Unity_GlossyEnvironmentData glossIn,
  float material_mix
) {
  UnityGI o_gi = UnityGI_Base(data, occlusion, normalWorld);
  o_gi.indirect.specular = UnityGI_IndirectSpecular(data, occlusion, glossIn, material_mix);
  return o_gi;
}

inline 
UnityGI 
FragmentGI(
  Fragment_Common_Data s, 
  float3 eyeVec,
  half occlusion, 
  half4 i_ambientOrLightmapUV, 
  half atten, 
  UnityLight light,
  float material_mix
) {
  UnityGIInput d;
  d.light = light;
  d.worldPos = s.posWorld;
  d.worldViewDir = -eyeVec;
  d.atten = atten;

  d.ambient = i_ambientOrLightmapUV.rgb;
  d.lightmapUV = 0;

  d.probeHDR[0] = unity_SpecCube0_HDR;
  d.probeHDR[1] = unity_SpecCube1_HDR;

  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
    d.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
  #endif

  #ifdef UNITY_SPECCUBE_BOX_PROJECTION
    d.boxMax[0] = unity_SpecCube0_BoxMax;
    d.probePosition[0] = unity_SpecCube0_ProbePosition;
    d.boxMax[1] = unity_SpecCube1_BoxMax;
    d.boxMin[1] = unity_SpecCube1_BoxMin;
    d.probePosition[1] = unity_SpecCube1_ProbePosition;
  #endif

  Unity_GlossyEnvironmentData g = UnityGlossyEnvironmentSetup(s.smoothness, -eyeVec, s.normalWorld, s.specColor);
  UnityGI gi = UnityGlobalIllumination(d, occlusion, s.normalWorld, g, material_mix);

  return gi;
}

inline float2 Unity_SafeNormalize(float2 inVec) {
  float dp2 = max(0.001f, dot(inVec, inVec));
  return inVec * rsqrt(dp2);
}

inline float3 Unity_SafeNormalize(float3 inVec) {
  float dp3 = max(0.001f, dot(inVec, inVec));
  return inVec * rsqrt(dp3);
}

// Pow5 uses the same amount of instructions as generic pow(), but has 2 advantages:
// 1) better instruction pipelining
// 2) no need to worry about NaNs
inline half Pow5(half x) {
  return x*x * x*x * x;
}

inline half2 Pow5(half2 x) {
  return x*x * x*x * x;
}

inline half3 Pow5(half3 x) {
  return x*x * x*x * x;
}

inline half4 Pow5(half4 x) {
  return x*x * x*x * x;
}


// Note: Disney diffuse must be multiply by diffuseAlbedo / PI. This is done outside of this function.
half DisneyDiffuse(half NdotV, half NdotL, half LdotH, half perceptualRoughness) {
  half fd90 = 0.5 + 2 * LdotH * LdotH * perceptualRoughness;

  // Two schlick fresnel term
  half lightScatter   = (1 + (fd90 - 1) * Pow5(1 - NdotL));
  half viewScatter    = (1 + (fd90 - 1) * Pow5(1 - NdotV));

  return lightScatter * viewScatter;
}

float PerceptualRoughnessToRoughness(float perceptualRoughness) {
  return perceptualRoughness * perceptualRoughness;
}

inline half PerceptualRoughnessToSpecPower(half perceptualRoughness) {
  half m = PerceptualRoughnessToRoughness(perceptualRoughness);   // m is the true academic roughness.
  half sq = max(1e-4f, m*m);

  // https://dl.dropboxusercontent.com/u/55891920/papers/mm_brdf.pdf
  half n = (2.0 / sq) - 2.0;                          

  // prevent possible cases of pow(0,0), which could happen when roughness is 1.0 and NdotH is zero
  n = max(n, 1e-4f);                                  
  return n;
}

inline half3 FresnelTerm(half3 F0, half cosA) {
  half t = Pow5(1 - cosA);   // ala Schlick interpoliation
  return F0 + (1-F0) * t;
}

inline half3 FresnelLerp(half3 F0, half3 F90, half cosA) {
  // ala Schlick interpoliation
  half t = Pow5(1 - cosA);   
  return lerp(F0, F90, t);
}

// Ref: http://jcgt.org/published/0003/02/03/paper.pdf
inline float SmithJointGGXVisibilityTerm(float NdotL, float NdotV, float roughness) {
  #if 0
    // Original formulation:
    //  lambda_v    = (-1 + sqrt(a2 * (1 - NdotL2) / NdotL2 + 1)) * 0.5f;
    //  lambda_l    = (-1 + sqrt(a2 * (1 - NdotV2) / NdotV2 + 1)) * 0.5f;
    //  G           = 1 / (1 + lambda_v + lambda_l);

    // Reorder code to be more optimal
    half a          = roughness;
    half a2         = a * a;

    half lambdaV    = NdotL * sqrt((-NdotV * a2 + NdotV) * NdotV + a2);
    half lambdaL    = NdotV * sqrt((-NdotL * a2 + NdotL) * NdotL + a2);

    // Simplify visibility term: (2.0f * NdotL * NdotV) /  ((4.0f * NdotL * NdotV) * (lambda_v + lambda_l + 1e-5f));
    return 0.5f / (lambdaV + lambdaL + 1e-5f);  // This function is not intended to be running on Mobile,
                                                // therefore epsilon is smaller than can be represented by half
  #else
    // Approximation of the above formulation (simplify the sqrt, not mathematically correct but close enough)
    float a = roughness;
    float lambdaV = NdotL * (NdotV * (1 - a) + a);
    float lambdaL = NdotV * (NdotL * (1 - a) + a);

    return 0.5f / (lambdaV + lambdaL + 1e-5f);
  #endif
}

inline float GGXTerm(float NdotH, float roughness) {
  float a2 = roughness * roughness;
  float d = (NdotH * a2 - NdotH) * NdotH + 1.0f; // 2 mad

  // This function is not intended to be running on Mobile,
  // therefore epsilon is smaller than what can be represented by half
  return UNITY_INV_PI * a2 / (d * d + 1e-7f); 
}

struct TF_And_Material_Mix {
  // NOTE(valuef): May be combined with built_in_tf, use this to lerp between material data
  // 2023-09-11
  float material_mix;

  float bulge_t;
};

float3
sample_matcap(
  const Texture_Info matcap,
  float3 color,
  float size,
  bool use_world_lighting,
  float3 world_normal,
  float3 eye_vec,
  float3 pbr_diffuse_tint,
  float3 pbr_specular_light_term,
  float3 pbr_specular_indirect_term
) {
  if(!matcap.is_set) {
    return float3(0,0,0);
  }

  if(IS_FORWARD_ADD && !use_world_lighting) {
    // NOTE(valuef): No need to evaluate matcaps twice in the forwardadd pass if they aren't affected by lighting
    // 2023-11-10
    return float3(0,0,0);
  }

  // NOTE(valuef): Adapted poiyomi double sided matcap.
  // Retrieved 2023-11-09
  //
  // MIT BEGIN
  //MIT License

  //Copyright (c) 2023 Poiyomi Inc.

  //Permission is hereby granted, free of charge, to any person obtaining a copy
  //of this software and associated documentation files (the "Software"), to deal
  //in the Software without restriction, including without limitation the rights
  //to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  //copies of the Software, and to permit persons to whom the Software is
  //furnished to do so, subject to the following conditions:

  //The above copyright notice and this permission notice shall be included in all
  //copies or substantial portions of the Software.

  //THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  //IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  //FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  //AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  //LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  //OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  //SOFTWARE.

  float3 reflection = reflect(eye_vec, world_normal);
  float2 uv = float2(dot(reflection, float3(1, 0, 0)), dot(reflection, float3(0, 1, 0)));
  uv = (uv * size) + float2(.5,.5);
  // MIT END

  // @InlinedTextureSampling
  float4 tap = matcap.tex.Sample(matcap.samp, uv);
  float3 col = tap.rgb * color;

  col *= get_mask(matcap.mask);

  if(matcap.alpha_is_mask) {
    col *= tap.a;
  }

  if(use_world_lighting) {
    col.rgb = (col.rgb * pbr_diffuse_tint) + (col.rgb * pbr_specular_light_term) + (col.rgb * pbr_specular_indirect_term);
  }

  return col;
}

#define apply_mat_mix(_target, _mix_value, _base_value, _condition, _material_mix) \
    EDITOR_BRANCH if(_condition && _TF_Enabled)  _target = lerp(_mix_value, _base_value, _material_mix); \
    else            _target = _base_value;


// Main Physically Based BRDF
// Derived from Disney work and based on Torrance-Sparrow micro-facet model
//   BRDF = kD / pi + kS * (D * V * F) / 4
//   I = BRDF * NdotL
//
// * GGX NDF
// * Smith for Visiblity term
// * Schlick approximation for Fresnel
half4 
BRDF1_Unity_PBS(
  half3 diffColor, 
  half3 specColor, 
  half oneMinusReflectivity, 
  half smoothness,
  float3 normal, 
  float3 viewDir,
  UnityLight light, 
  UnityIndirect indirect,
  TF_And_Material_Mix mix_info
) {
  float perceptualRoughness = SmoothnessToPerceptualRoughness(smoothness);
  float3 halfDir = Unity_SafeNormalize(float3(light.dir) + viewDir);

  // NdotV should not be negative for visible pixels, but it can happen due to perspective projection and normal mapping
  // In this case normal should be modified to become valid (i.e facing camera) and not cause weird artifacts.
  // but this operation adds few ALU and users may not want it. Alternative is to simply take the abs of NdotV (less correct but works too).
  // Following define allow to control this. Set it to 0 if ALU is critical on your platform.
  // This correction is interesting for GGX with SmithJoint visibility function because artifacts are more visible in this case due to highlight edge of rough surface
  // The amount we shift the normal toward the view vector is defined by the dot product.
  half shiftAmount = dot(normal, viewDir);
  normal = shiftAmount < 0.0f ? normal + viewDir * (-shiftAmount + 1e-5f) : normal;
  // A re-normalization should be applied here but as the shift is small we don't do it to save ALU.
  //normal = normalize(normal);

  float nv = dot(normal, viewDir); // this saturate should no be necessary here

  float nl = saturate(dot(normal, light.dir));
  float nh = saturate(dot(normal, halfDir));

  half lv = saturate(dot(light.dir, viewDir));
  half lh = saturate(dot(light.dir, halfDir));

  half diffuseTerm = DisneyDiffuse(nv, nl, lh, perceptualRoughness) * nl;

  EDITOR_BRANCH if(_Diffuse_Type == DIFFUSE_TYPE_PBR_LUT) {
    diffuseTerm = _Diffuse_LUT_Texture.Sample(_SamplerLinearClamp, diffuseTerm).r;
  }
  else EDITOR_BRANCH if(_Diffuse_Type == DIFFUSE_TYPE_PBR_RAMP) {
    float ramp_1 = saturate(((diffuseTerm - _Diffuse_Ramp_1_Offset) - _Diffuse_Ramp_1_Start) / (_Diffuse_Ramp_1_End - _Diffuse_Ramp_1_Start));
    float ramp_2 = saturate(((diffuseTerm - _Diffuse_Ramp_2_Offset) - _Diffuse_Ramp_2_Start) / (_Diffuse_Ramp_2_End - _Diffuse_Ramp_2_Start));
    
    diffuseTerm = lerp(ramp_1, ramp_2, _Diffuse_Ramp_Blend);
  }
  else EDITOR_BRANCH if(_Diffuse_Type == DIFFUSE_TYPE_NONE) {
    diffuseTerm = 1;
  }
  
  // Specular term
  // HACK: theoretically we should divide diffuseTerm by Pi and not multiply specularTerm!
  // BUT 1) that will make shader look significantly darker than Legacy ones
  // and 2) on engine side "Non-important" lights have to be divided by Pi too in cases when they are injected into ambient SH
  float roughness = PerceptualRoughnessToRoughness(perceptualRoughness);
  roughness = max(roughness, 0.002);

  float V = SmithJointGGXVisibilityTerm(nl, nv, roughness);
  float D = GGXTerm(nh, roughness);

  // Torrance-Sparrow model, Fresnel is applied later
  float specularTerm = V*D * UNITY_PI; 

  #ifdef UNITY_COLORSPACE_GAMMA
    specularTerm = sqrt(max(1e-4h, specularTerm));
  #endif

  // specularTerm * nl can be NaN on Metal in some cases, use max() to make sure it's a sane value
  specularTerm = max(0, specularTerm * nl);

  // surfaceReduction = Int D(NdotH) * NdotH * Id(NdotL>0) dH = 1/(roughness^2+1)
  half surfaceReduction;
  #ifdef UNITY_COLORSPACE_GAMMA
    // 1-0.28*x^3 as approximation for (1/(x^4+1))^(1/2.2) on the domain [0;1]
    surfaceReduction = 1.0-0.28*roughness*perceptualRoughness;
  #else
    // fade in [0.5;1]
    surfaceReduction = 1.0 / (roughness*roughness + 1.0);           
  #endif

  EDITOR_BRANCH if(!_SpecularHightlights_Enabled) {
    specularTerm = 0.0;
  }
  else {
    // To provide true Lambert lighting, we need to be able to kill specular completely.
    specularTerm *= any(specColor) ? 1.0 : 0.0;
  }

  half grazingTerm = saturate(smoothness + (1-oneMinusReflectivity));

  float3 light_color_term = lerp(float3(1,1,1), light.color, _LightColor_Weight);

  // NOTE(valuef): Bias the shadows toward the tint color based off of the lack of diffuse term.
  // 2023-01-08
  float3 tinted_diffuse = lerp(_Diffuse_Shadow_Tint_Color.rgb, 1, diffuseTerm);
  float3 tinted_indirect_diffuse = lerp(_LightProbe_Shadow_Tint_Color.rgb, 1, indirect.diffuse);

  float3 light_probes = _LightProbeWeight * tinted_indirect_diffuse;
  float3 direct_light = light_color_term * tinted_diffuse;

  float3 diffuse_tint = light_probes + direct_light;
  float3 specular_light_term = specularTerm * light_color_term * FresnelTerm(specColor * _Specular_Tint, lh);
  float3 specular_indirect_term = _World_ReflectionProbe_Tint.rgb * (surfaceReduction * indirect.specular * FresnelLerp(specColor, grazingTerm, nv)) * _IndirectLighting_Amount;

  

  float3 color = float3(0,0,0);

  color += diffColor * diffuse_tint;
  color += specular_light_term;
  color += specular_indirect_term;

  {
    float3 matcaps = float3(0,0,0);

    {
      float3 base = sample_matcap(
        Matcap_1_Texture, 
        get_value(_Matcap_1_Color_Osci), 
        _Matcap_1_Size,
        _Matcap_1_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 mix = sample_matcap(
        Mix_Matcap_1_Texture, 
        get_value(_Mix_Matcap_1_Color_Osci), 
        _Mix_Matcap_1_Size,
        _Mix_Matcap_1_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 matcap;
      apply_mat_mix(matcap, mix, base, _Mix_Separate_Matcap_1, mix_info.material_mix.rrr);
      matcaps += matcap;
    }

    {
      float3 base = sample_matcap(
        Matcap_2_Texture, 
        get_value(_Matcap_2_Color_Osci), 
        _Matcap_2_Size,
        _Matcap_2_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 mix = sample_matcap(
        Mix_Matcap_2_Texture, 
        get_value(_Mix_Matcap_2_Color_Osci), 
        _Mix_Matcap_2_Size,
        _Mix_Matcap_2_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 matcap;
      apply_mat_mix(matcap, mix, base, _Mix_Separate_Matcap_2, mix_info.material_mix.rrr);
      matcaps += matcap;
    }

    {
      float3 base = sample_matcap(
        Matcap_3_Texture, 
        get_value(_Matcap_3_Color_Osci), 
        _Matcap_3_Size,
        _Matcap_3_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 mix = sample_matcap(
        Mix_Matcap_3_Texture, 
        get_value(_Mix_Matcap_3_Color_Osci), 
        _Mix_Matcap_3_Size,
        _Mix_Matcap_3_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 matcap;
      apply_mat_mix(matcap, mix, base, _Mix_Separate_Matcap_3, mix_info.material_mix.rrr);
      matcaps += matcap;
    }


    color += matcaps;

  }

  return half4(color, 1);
}

// TANOISE START
// tanoise.cginc - Retrieved 2023-03-07 
// Original source
//  https://github.com/cnlohr/shadertrixx/blob/main/Assets/cnlohr/Shaders/tanoise/tanoise.cginc
// 
// tanoise -> Extremely fast noise that does repeat, but "feels" like
// perlin noise... Ok, not perlin but smooth noise.  It can be used like
// perlin noise in many applications. Rewritten to avoid license issues.
//
//  Usage:
//    * For normal (not 1D) lookups, just use any white noise map.
//    * For 1D Output textures, you will need an offset texture map.
//    * For 4D->1D and 3D->2D Lookups, you will need to make sure SRGB on
//      your tex is OFF!
//    * For 3D->1D Lookups, it only uses the .r and .g channels of the texture.
//    * There is a possible benefit to using tanoise2,3,4 on an 1-channel
//      texture in that you could make it larger to support less repeating. 
//
//  float4 tanoise4( in float4 x )    //4 Texture Lookups
//  float tanoise4_1d( in float4 x )  //1 Texture Lookup
//  float4 tanoise3( in float3 x )    //2 Texture Lookups
//  float tanoise3_1d( in float3 x )  //1 Texture Lookup
//	float tanoise3_1d_fast( in float3 x ) //1 Texture Lookup, No matrix scramble (Slightly poorer quality)
//  float2 tanoise3_2d( in float3 x ) //1 Texture Lookup
//  float4 tanoise2( in float2 x )    //1 Texture Lookup
//  float4 tanoise2_hq( in float2 x ) //4 Texture Lookup (For when hardware interpreters aren't good enough)
//  float4 tanoise4_hq( in float4 x ) //12 texture lookups
//
//  The texture should be the noise texture bound. i.e. add this to properties
//  Properties {
//		_TANoiseTex ("TANoise", 2D) = "white" {}
//        ...
//  }
//
//  NOTE: You must:
//    * Disable compression (unless you want it muted)
//    * Use bilinear filtering. 
//    * Use repeat wrapping.
//    * If you are using the single-texel lookups, disable sRGB.
//
//  Map Generation:
//    * The C rand() function is insufficient for generation of this texture.
//      (It has obvious patterns).
//    * Recommended use an LFSR.
//    * See appendix at end.
//
//  TODO: Improve matrix for non-ordinal-direction viewing.  It should be
//    possible to make the noise resistant to 90-degree angle artifacts even
//    when viewerd from other axes.
//
// The original version of this noise is restrictively licensed.  Code was
// re-written for HLSL 2020 <>< CNLohr, code henseforth may be liberally
// licensed under MIT-X11, NewBSD or Any Creative Commons License including
// CC0.
//
// This is a included in shadertrixx https://github.com/cnlohr/shadertrixx
//
// There was also a bug in the version by stubbe which caused a migration in
// x/y/z when there was an applied w value.  The matrix undoes the migration
// in this version.
//
// The absolutely key idea here is by permuting the input by a matrix, the 
// artifacts from a gridded noise source can be decimated.  At least in most
// applications!  This was loosely referenced in this page here:
//   http://devmag.org.za/2009/04/25/perlin-noise/
//
// The specific tactic for arbitrary noise was mentioned here, though this
// does not give the noise a perlinesque feel.
//   https://shadertoyunofficial.wordpress.com/2016/07/21/usual-tricks-in-shadertoyglsl/
//
// Original concepts behind this algorithm are from: 
//   https://www.shadertoy.com/view/XslGRr
// The modified version is here:
//   https://www.shadertoy.com/view/XltSWj 
//
// The original noise came with this header.
//
// Created by inigo quilez - iq/2013
// Adapted for 4d by stubbe in 2016
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
//
// Fast 3D (value) noise by using two cubic-smooth bilinear interpolations in a LUT, 
// which is much faster than its hash based (purely procedural) counterpart.
//
// Note that instead of fetching from a grey scale texture twice at an offset of (37,17)
// pixels, the green channel of the texture is a copy of the red channel offset that amount
// (thx Dave Hoskins for the suggestion to try this)
//
// Adaped by stubbe for 4d: By applying the same trick again we can copy red and green into 
// blue and alpha with an offset for w and effectively sample a 4d noise by sampling and
// blending two 3d noises.
//
//  C. Lohr notes:
// Originally, they used zOffset 37,17 and wOffset 59.0, 83.0
// This was the original matrix.
//   const mat4 m = mat4( 0.00,  0.80,  0.60, -0.4,
//                       -0.80,  0.36, -0.48, -0.5,
//                       -0.60, -0.48,  0.64,  0.2,
//                        0.40,  0.30,  0.20,  0.4);
// We have adapted this to use a pure-hexagonal move in the upper left.
// And appropriate shifts outside that.
//
// I experimentally found this combination to work better, and it seems to
// cause less repeating when applied to a sphere and a cube.  Selection of
// noise offset values is critical to avoid apparent repeating patterns.
// 

#define tanoiseZOff float2(37,17)
//#define tanoiseZOff float2(51,111)

Texture2D _TANoiseTex;
uniform half4 _TANoiseTex_TexelSize; 

static const float4x4 tanoiseM = 
{
  -0.071301, 0.494967, -0.757557, 0.372699,
  0.494967, 0.388720, 0.303345, 0.701985,
  -0.757557, 0.303345, 0.497523, -0.290552,
  0.372699, 0.701985, -0.290552, -0.532815
};


// NOTE(valuef): Adapted to use the original zoff (37, 17) as (51, 111) was causing some sort of
// quantization artifact likely to do with improper sampling.
//
// 2023-03-09
float4 tanoise3( in float3 x ) {
  float3 c = mul(tanoiseM,x);
	float3 p = floor(c);
	float3 f = frac(c);

	// First level smoothing for nice interpolation between levels. This
	// gets rid of the sharp artifacts that will come from the bilinear
	// interpolation.
	f = f * f * ( 3.0 - 2.0 * f );

	// Compute a u,v coordinateback in
	float2 uv = ( p.xy + p.z*tanoiseZOff ) + f.xy;

	fixed4 r = _TANoiseTex.SampleLevel(_SamplerLinearRepeat, (uv+0.5)*_TANoiseTex_TexelSize, 0.0 );
	fixed4 g = _TANoiseTex.SampleLevel(_SamplerLinearRepeat, (uv+0.5 + tanoiseZOff)*_TANoiseTex_TexelSize, 0.0 );
	return lerp( r, g, f.z );
}

// TANOISE END


half3x3 CreateTangentToWorldPerVertex(half3 normal, half3 tangent, half tangentSign) {
  // For odd-negative scale transforms we need to flip the sign
  half sign = tangentSign * unity_WorldTransformParams.w;
  half3 binormal = cross(normal, tangent) * sign;
  return half3x3(tangent, binormal, normal);
}

UnityLight AdditiveLight(half3 lightDir, half atten) {
  UnityLight l;

  l.color = _LightColor0.rgb;
  l.dir = lightDir;

  #ifndef USING_DIRECTIONAL_LIGHT
    l.dir = normalize(l.dir);
  #endif

  // shadow the light
  l.color *= atten;

  return l;
}

UnityIndirect ZeroIndirect() {
  UnityIndirect ind;
  ind.diffuse = 0;
  ind.specular = 0;
  return ind;
}

inline
float
calculate_built_in_tf_animation(
  float3 baked_pos,
  float3 world_normal,
  float3 eye_vec,
  out float unclamped_tf
) {
 
  float noise = 0;
  EDITOR_BRANCH if(is_TF_AnimationMap_set) {
    float mip = _TF_AnimationMap_Mip;

    if(_TF_AnimationMap_UseUVBus) {
      // @InlinedTextureSampling
      float2 uv = resolve_uv_bus(_TF_AnimationMap_UVBus);

      float2 off = _TF_AnimationMap_Offset.xy;
      float2 scale = _TF_AnimationMap_Scale.xy;

      uv = apply_uv_tiling_offset_and_scroll(uv, scale, off, float2(0,0), _Time.y);

      if(IS_VERTEX_SHADER) {
        noise = _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv, mip);
      }
      else {
        noise = _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv);
      }
    }
    else {
      float3 off = _TF_AnimationMap_Offset.xyz;
      float3 scale = _TF_AnimationMap_Scale.xyz;

      float2 uv_x = float2(off.x + scale.x * baked_pos.yz);
      float2 uv_y = float2(off.y + scale.y * baked_pos.zx);
      float2 uv_z = float2(off.z + scale.z * baked_pos.xy);

      float3 noise3;
      
      if(IS_VERTEX_SHADER) {
        noise3 = float3(
          _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv_x, mip).r,
          _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv_y, mip).r,
          _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv_z, mip).r
        );
      }
      else {
        noise3 = float3(
          _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv_x).r,
          _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv_y).r,
          _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv_z).r
        );
      }

      noise = (noise3.x + noise3.y + noise3.z) * (1.0/3.0);
    }
  }
  else {
    noise = 0;
  }

  float tf_slider = get_value(_TF_Time_Osci).r;

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_TF_Visualisation_Enabled) {
      tf_slider = frac(_Time.y * _TF_Visualisation_Speed);
    }
  #endif

  float margin;
  if(IS_VERTEX_SHADER) {
    margin = _TF_Animation_Blur_VS;
  }
  else {
    margin = _TF_Animation_Blur_PS;
  }
  margin = abs(margin);

  EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_VERY_SIMPLE) {
    unclamped_tf = tf_slider;
    return tf_slider;
  }
  else EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_SIMPLE_WITH_NOISE) {
    // NOTE(valuef): https://www.desmos.com/calculator/f4py5sok4x
    // 2022-10-11
    float t2 = tf_slider * (1 + margin);

    float start = 0 - margin + t2;
    float end = 0 + t2;

    float tf = (noise - start) / (end - start);

    unclamped_tf = tf;

    tf = saturate(tf);

    return 1-tf;
  }
  else EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_RADIAL) {
    float radius = tf_slider * _TF_Animation_Radial_Radius;

    float tf = length(baked_pos - _TF_Animation_Radial_Origin);
    tf /= radius;

    if(_TF_Animation_Radial_LegacyNoise_Enabled) {
      tf /= 2;
      tf += noise;
    }
    else {
      tf -= noise * .5;
    }
    tf = 1-tf;

    float start = 0;
    float end = 0 + margin;

    tf = (tf - start) / (end - start);

    unclamped_tf = tf;

    tf = saturate(tf);

    return tf;
  }
  else EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_CENTER_OUT) {
    float tf = dot(world_normal, -eye_vec);

    tf -= noise * .5;
    tf = saturate(tf);
    EDITOR_BRANCH if(!_TF_Animation_CenterOut_Invert) {
      tf = 1 - tf;
    }

    float t2 = tf_slider * (1 + margin);
    float start = 0 - margin + t2;
    float end = 0 + t2;

    tf = (tf - start) / (end - start);

    unclamped_tf = tf;
    if(!_TF_Animation_CenterOut_Invert) {
      unclamped_tf = 1-unclamped_tf;
    }

    tf = 1-saturate(tf);

    return tf;
  }

  unclamped_tf = 0;
  return 0;
}

float _VRChatMirrorMode;

// NOTE(valuef): VRC Mirrors seem to have a lot of trouble with the _CameraDepthTexture. By default
// it seems like that value is set to be some kind of constant black or constant white. But it
// seems like what texture is bound to that sampler is undefined. I've had instanced where the depth
// texture of the mirror is set to some bizzare texture that's loaded in VRAM.
// So we want to guard any _CameraDepthTexture samples with a mirror check to make sure we don't
// read garbage.
// 2022-09-20
inline
bool
is_rendering_for_mirror() {
  // NOTE(valuef):
  // As of VRChat 2022.3.1 (2022-10-19)
  // 0 - Rendering normally, not in a mirror
  // 1 - Rendering in a mirror viewed in VR
  // 2 - Rendering in a mirror viewed in desktop mode

  #if defined(NOT_BAKED)
    return _PreviewMirror != 0;
  #endif

  return _VRChatMirrorMode != 0;
}

inline
bool
can_use_camera_depth() {
  return !is_rendering_for_mirror() && is_depth_texture_available();
}

TF_And_Material_Mix
calculate_tf_and_material_mix(
  float3 baked_pos,
  float3 world_normal,
  float3 view_dir
) {
  TF_And_Material_Mix ret;

  EDITOR_BRANCH if(!_TF_Enabled) {
    ret.material_mix = 1;
    ret.bulge_t = 1;
    return ret;
  }

  bool is_manual_enabled = (_TF_Manual_Mask.channel != MASK_NONE) || _TF_Manual_Osci_Enabled;
  bool is_builtin_enabled = _TF_Mode != TF_ANIMATION_NONE;

  float manual = 0;
  float builtin = 0;
  float builtin_unclamped_tf = 0;

  EDITOR_BRANCH if(is_manual_enabled) {
    manual = get_mask(_TF_Manual_Mask);
    manual *= saturate(get_value(_TF_Manual_Osci).r);
  }

  EDITOR_BRANCH if(is_builtin_enabled) {
    builtin = calculate_built_in_tf_animation(baked_pos, world_normal, view_dir, builtin_unclamped_tf);
  }

  EDITOR_BRANCH if(is_manual_enabled && is_builtin_enabled) {
    EDITOR_BRANCH if(_TF_ManualBuiltin_BlendMode == 0) { // mul
      ret.material_mix = (manual * builtin);
      ret.bulge_t = manual * (saturate(builtin_unclamped_tf + _TF_Animation_Bulging_Offset + .5));
    }
    else { // add
      ret.material_mix = saturate(manual + builtin);
      ret.bulge_t = saturate(manual + (saturate(builtin_unclamped_tf + _TF_Animation_Bulging_Offset + .5)));
    }
  }
  else EDITOR_BRANCH if(is_manual_enabled) {
    ret.material_mix = manual;
    ret.bulge_t = manual;
  }
  else EDITOR_BRANCH if(is_builtin_enabled) {
    ret.material_mix = builtin;
    ret.bulge_t = saturate(builtin_unclamped_tf + _TF_Animation_Bulging_Offset + .5);
  }
  else {
    ret.material_mix = _TF_Enabled ? 0 : 1;
    ret.bulge_t = ret.material_mix;
  }

  return ret;
}

struct Distortion_Result {
  float goo_noise;
  float goo_drip;

  float3 world_normal;
  float4 world_position;
  float4 local_vertex;
  float4 clip_vertex;
  float4 grab_pos;

  float4 debug;

  float light_mask;

  float touch_reactivity_interaction;
};

float
sample_depth_for_touch_reactivity(
  float our_depth,
  float4 clip_vertex,
  float2 offset
) {
  float4 sample_clip = clip_vertex;
  sample_clip.xy += offset;

  // NOTE(valuef): Not going to be correct for mirrors
  // 2023-09-13
  float4 screen = ComputeGrabScreenPos(sample_clip);
  float tap = SAMPLE_DEPTH(screen.xy / screen.w);

  float depth = LinearEyeDepth(tap);
  return 1-saturate(abs(our_depth - depth) / _TouchReactivity_Remap_End);
}

inline
void
normalize_eye_vec(
  float3 eye_vec_unnormalized,
  out float3 eye_vec,
  out float world_distance
) {
  world_distance = length(eye_vec_unnormalized);
  eye_vec = eye_vec_unnormalized / max(.001, world_distance);
}

inline
Distortion_Result
do_distortion(
  float3  input_baked_pos,
  float3  input_normal,
  float4  input_vertex,
  float4  input_color,
  float4  input_tangent,
  uint    input_vertex_id,
  float3  input_early_world_position,
  const bool apply_depth_distortion
) {
  input_vertex.xyz -= input_normal.xyz * _NormalOffset_Amount;

  #if defined(RALIV_PENETRATOR)
    PenetratorReshape(input_vertex, input_normal);
  #elif defined(RALIV_ORIFICE)
    OrificeReshape(input_vertex, input_normal, input_tangent.xyz, input_vertex_id);
  #endif

  float3 early_eye_vec;
  float early_world_distance;
  normalize_eye_vec(
    input_early_world_position - _WorldSpaceCameraPos.xyz,
    /* out */ early_eye_vec, 
    /* out */ early_world_distance
  );

  // NOTE(valuef): So it appears that the Unity mesh skinning algorithm scales the normals along
  // with the scale of the armature. I do not understand why it does this or even if it's useful,
  // but it's something that, in order to be correct, we have to deal with in the shader.
  // Behind the scenes, UnityObjectToWorldNormal does a normalize after the coordinate system
  // change, so we get good direction vectors.
  // As an aside, it's interesting to note how the input POSITION vertex data is the position of the
  // skinned vertex and it appears that the scale of a skinned mesh is not encoded in the model
  // matrix but instead it's applied during skinning! So from what I can tell, taking the length of
  // the skinned normal is one way of getting an approximation of the scale of a skinned mesh
  // without setting any extra uniforms or input vertex data.
  // 2022-09-18

  float3 world_normal = UnityObjectToWorldNormal(input_normal);

  Distortion_Result ret;
  ret.debug = 0.0.rrrr;
  ret.local_vertex = input_vertex;
  ret.goo_noise = 0;

  float3 noise_normal = float3(0,0,0);

  {
    float3 noise_uv = get_value(_Goo_Size_Osci) * input_baked_pos;
    noise_uv -= get_time(_Goo_Speed_TimeBase) * _Goo_Speed.xyz + get_value(_Goo_Offset_Osci).xyz;

    EDITOR_BRANCH if(_Goo_Enabled) {
      float4 tap = tanoise3(noise_uv);
      ret.goo_noise = tap.w;
      noise_normal = normalize(tap.xyz * 2 - 1);
    }
  }

  float light_mask = vs_make_point_light_mask(input_early_world_position);

  init_mask_channels(
    ret.goo_noise, 
    float2(0,0), // @DelayedGooDripEvaluationInVS
    input_color, 
    input_baked_pos, 
    world_normal, 
    early_eye_vec,
    0, // @TouchReactivityInteractionMaskUnavailableInVS
    light_mask,
    input_vertex,
    float2(0,0),
    early_world_distance
  );

  init_masks_as_oscillators();
  
  TF_And_Material_Mix mix_info = calculate_tf_and_material_mix(input_baked_pos, world_normal, early_eye_vec);

  float droop = 0;
  float drip_mask = get_mask(_Goo_Drip_Mask);

  const int NUM_PHYSBONES = 4;
  Capsule_Physbone_Data cap_pb[NUM_PHYSBONES];

  {
    int i = 0;
    cap_pb[i].is_enabled  = _Physbone_1_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_1_Proximity_X, _Physbone_1_Proximity_Y, _Physbone_1_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_1_Mask);
  }
  {
    int i = 1;
    cap_pb[i].is_enabled  = _Physbone_2_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_2_Proximity_X, _Physbone_2_Proximity_Y, _Physbone_2_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_2_Mask);
  }
  {
    int i = 2;
    cap_pb[i].is_enabled  = _Physbone_3_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_3_Proximity_X, _Physbone_3_Proximity_Y, _Physbone_3_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_3_Mask);
  }
  {
    int i = 3;
    cap_pb[i].is_enabled  = _Physbone_4_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_4_Proximity_X, _Physbone_4_Proximity_Y, _Physbone_4_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_4_Mask);
  }

  // NOTE(valuef): Up until this point, local_vertex was canonical vertex position data. To save on
  // matrix multiplies during the drip & physics deformation calculations, we let world_position be
  // the canonical. This way we don't have to convert world_x/y/z and world gravity to local space.
  // :CanonicalVertexPositionSwitch
  // 2023-03-22
  float4 world_position = mul(unity_ObjectToWorld, ret.local_vertex);

  float3 world_x = float3(1,0,0);
  float3 world_y = float3(0,1,0);
  float3 world_z = float3(0,0,1);
  float3 world_gravity = normalize(_Goo_Drip_Gravity_Vector.xyz);

  float3 drag_force = float3(0,0,0);

  {for(int i = 0; i < NUM_PHYSBONES; i++) {
    EDITOR_BRANCH if(!cap_pb[i].is_enabled) {
      continue;
    }

    drag_force += (
      world_x * cap_pb[i].proximity.x + 
      world_y * cap_pb[i].proximity.y + 
      world_z * cap_pb[i].proximity.z
    ) * cap_pb[i].mask;
  }}

  EDITOR_BRANCH if(_Goo_Enabled && _Goo_Drip_Enabled) {	

    float physbone_drip_strength = _Physbone_Drip_DragForce_Strength;
    physbone_drip_strength *= get_mask(_Physbone_Drip_Mask);

    float3 drip_drag_force = drag_force * physbone_drip_strength;

    float3 total_force = world_gravity + drip_drag_force;

    float3 force_direction = Unity_SafeNormalize(total_force);

    float d = max(0, dot(force_direction, world_normal));

    float drip_start = get_value(_Goo_Drip_Start_Osci);
    float drip_end = get_value(_Goo_Drip_End_Osci);
    d = saturate((d - drip_start) / (drip_end - drip_start));	
    d *= drip_mask;

    EDITOR_BRANCH if(!_Goo_Drip_ApplyOnMaterialMix) {
      d *= mix_info.material_mix;
    }

    float physics_drip = d;

    float drip_amount = get_value(_Goo_Drip_Amount_Osci);
    d *= (1 - drip_amount) + ret.goo_noise * drip_amount;

    float drip_size = get_value(_Goo_Drip_Size_Osci);
    float3 force_offset = (world_gravity + drip_drag_force) * d * drip_size;

    world_position.xyz += force_offset;

    droop = d;
  }

  EDITOR_BRANCH if(_TF_Bulging_Enabled) {

    float bulge_edge_mask = 1-pow2(2 * mix_info.bulge_t - 1);

    bulge_edge_mask *= get_mask(_TF_Bulging_Mask);
    
    float bulge_size = _TF_Bulging_Size / 100;
    world_position.xyz += world_normal.xyz * bulge_edge_mask * bulge_size;
  }

  float goo_deformation_mask = get_mask(_Goo_Deformation_MeshNormal_Mask);

  EDITOR_BRANCH if(_Goo_Enabled && _Goo_Deformation_Enabled) {

    float weight = ret.goo_noise;

    float mesh_offset_min = get_value(_Goo_Deformation_MeshNormal_Offset_Min_Osci);
    float mesh_offset_max = get_value(_Goo_Deformation_MeshNormal_Offset_Max_Osci);
    float mesh_normal_t = lerp(mesh_offset_min, mesh_offset_max, weight);
    float3 mesh_normal_offset = world_normal.xyz * (mesh_normal_t / 100);

    float3 world_noise_normal = UnityObjectToWorldNormal(noise_normal);

    float procedural_normal_size = get_value(_Goo_Deformation_ProceduralNormal_Size_Osci);
    float3 procedural_normal_offset = weight * world_noise_normal * (procedural_normal_size / 100);

    float3 offset = 0.0.rrr;
    offset += mesh_normal_offset;
    offset += procedural_normal_offset;

    offset *= goo_deformation_mask;

    EDITOR_BRANCH if(!_Goo_Deformation_ApplyOnMaterialMix) {
      offset *= mix_info.material_mix;
    }

    world_position.xyz += offset;
  }

  // NOTE(valuef): The correct way of doing this is to do it after we do the drip toggle as that
  // one needs to work off of normal unmodified world normals, but we save a
  // UnityObjectToWorldNormal (4 dp3 1 rsq 1 mul) call if we do it before hand as only have to
  // calculate the world normal once.
  // 2022-08-16
  EDITOR_BRANCH if(_Goo_Enabled && _Goo_Deformation_Enabled) {
    const float DEG_TO_RAD = UNITY_PI / 180.0;

    float xy = lerp(_Goo_Normal_Offset_Min_Degrees, _Goo_Normal_Offset_Max_Degrees, ret.goo_noise);
    float yz = lerp(_Goo_Normal_Offset_Min_Degrees, _Goo_Normal_Offset_Max_Degrees, ret.goo_noise);

    xy *= goo_deformation_mask;
    yz *= goo_deformation_mask;

    EDITOR_BRANCH if(!_Goo_Deformation_ApplyOnMaterialMix) {
      xy *= mix_info.material_mix;
      yz *= mix_info.material_mix;
    }

    world_normal.xy = mul(rot2x2(xy * DEG_TO_RAD), world_normal.xy);
    world_normal.yz = mul(rot2x2(yz * DEG_TO_RAD), world_normal.yz);
  }

  // @DelayedGooDripEvaluationInVS
  MASK_CHANNELS.masks[MASK_GOO_DRIP] = float2(droop, 1-droop);

  {
    float3 force_offset = drag_force;
    force_offset *= _Physbone_Body_DragForce_Strength;
    force_offset *= get_mask(_Physbone_Body_Mask);

    EDITOR_BRANCH if(!_Physics_Body_ApplyOnMaterialMix) {
      force_offset *= mix_info.material_mix;
    }

    world_position.xyz += force_offset;
  }

  EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_TOTAL_DRAG_FORCE) {
    ret.debug.rgb = abs(drag_force) * .2;
    ret.debug.w = 1; 
  }
  
  ret.clip_vertex = UnityWorldToClipPos(world_position);

  ret.touch_reactivity_interaction = 0;

  bool do_touch_reactivity = apply_depth_distortion && _TouchReactivity_Mode == TOUCH_REACTIVITY_MODE_ENABLED;

  if(_TouchReactivity_Bypassed) {
    do_touch_reactivity = false;
  }

  EDITOR_BRANCH if(do_touch_reactivity) {

    // NOTE(valuef): we use ComputeGrabScreenPos in case the depth buffer is flipped.
    // 2022-08-16
    float4 screen_uv = ComputeGrabScreenPos(ret.clip_vertex);

    [branch] if(can_use_camera_depth()) {
      // NOTE(valeuf): should be the same as -UnityObjectToViewPos(input_vertex).z;
      // 2022-08-16
      float our_depth = screen_uv.w;
      float t = 0;
      {
        float sz = .005 * _TouchReactivity_Dispersion;
        float2 clip_sz = mul((float2x2)UNITY_MATRIX_P, sz.rr);

        // NOTE(valuef): Sampling pattern:
        //   .  
        //  . . 
        // . X .
        //  . . 
        //   .  
        // Picked this one over a simple box as we the +x -x +y -y poles that
        // have been offset by an extra 1 give us a small bit of extra visual
        // smoothness for free.
        // 2022-12-21
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(0,2));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(-1,1));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(1,1));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(-2,0));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(0,0));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(2,0));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(-1,-1));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(1,-1));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(0,-2));

        t /= 9.0;
      }

      EDITOR_BRANCH if(_ProximityDistortion_Enabled) {
        float near_plane = _ProjectionParams.y;
        float delta = our_depth - near_plane;

        // NOTE(valuef): start and end are swapped to save on a (1 - t) instruction
        // 2022-09-18
        float start = _ProximityDistortion_Depth_End;
        float end = _ProximityDistortion_Depth_Start;
        float close_t = saturate((delta - start) / (end - start));

        float proximity_distorion_mask = get_mask(_ProximityDistortion_Mask);
        close_t *= proximity_distorion_mask;

        t = saturate(t+close_t);
      }

      EDITOR_BRANCH if(!_TouchReactivity_And_PD_ApplyOnMaterialMix) {
        t *= mix_info.material_mix;
      }

      float touch_reactivity =  t * _TouchReactivity_Strength;

      touch_reactivity *= get_mask(_TouchReactivity_Mask);

      // NOTE(valuef): Touch reactivity in the VS won't have much use due to how late we evaluate it,
      // so we're marking it as unavailable in the VS and only available in the PS.
      // @TouchReactivityInteractionMaskUnavailableInVS
      // 2023-08-29
      ret.touch_reactivity_interaction = abs(touch_reactivity);

      world_position.xyz += world_normal * touch_reactivity;
    }

    ret.clip_vertex = UnityWorldToClipPos(world_position);
  }

  ret.grab_pos = ComputeGrabScreenPos(ret.clip_vertex);

  // NOTE(valuef): Propagate the canonical vertex information to local_vertex in case any macro in
  // a stack above us uses it.
  // 2023-03-22
  // :CanonicalVertexPositionSwitch
  ret.local_vertex = mul(unity_WorldToObject, world_position);

  ret.world_position = world_position;
  ret.world_normal = world_normal;

  ret.goo_drip = droop;
  ret.light_mask = light_mask;

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_NORMAL) {
      ret.debug.xyz = input_normal;
      ret.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_VS) {
      ret.debug.xyz = pow(get_mask(_DebugVisualisation_Mask),2.2);
      ret.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_TF_VS) {
      ret.debug.xyz = pow(mix_info.material_mix,2.2);
      ret.debug.w = 1;
    }
  #endif

  return ret;
}

const static float dither_pattern[8][8] = {
  { 0.0/64.0, 32.0/64.0,  8.0/64.0, 40.0/64.0, 02.0/64.0, 34.0/64.0, 10.0/64.0, 42.0/64.0}, 
  {48.0/64.0, 16.0/64.0, 56.0/64.0, 24.0/64.0, 50.0/64.0, 18.0/64.0, 58.0/64.0, 26.0/64.0}, 
  {12.0/64.0, 44.0/64.0, 04.0/64.0, 36.0/64.0, 14.0/64.0, 46.0/64.0, 06.0/64.0, 38.0/64.0}, 
  {60.0/64.0, 28.0/64.0, 52.0/64.0, 20.0/64.0, 62.0/64.0, 30.0/64.0, 54.0/64.0, 22.0/64.0}, 
  { 3.0/64.0, 35.0/64.0, 11.0/64.0, 43.0/64.0, 01.0/64.0, 33.0/64.0,  9.0/64.0, 41.0/64.0}, 
  {51.0/64.0, 19.0/64.0, 59.0/64.0, 27.0/64.0, 49.0/64.0, 17.0/64.0, 57.0/64.0, 25.0/64.0},
  {15.0/64.0, 47.0/64.0, 07.0/64.0, 39.0/64.0, 13.0/64.0, 45.0/64.0, 05.0/64.0, 37.0/64.0},
  {63.0/64.0, 31.0/64.0, 55.0/64.0, 23.0/64.0, 61.0/64.0, 29.0/64.0, 53.0/64.0, 21.0/64.0} 
};

Vertex_Output_Outline
vertex_outline(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;

  EDITOR_BRANCH if(!_Outline_Enabled) {
    return (Vertex_Output_Outline)0;
  }

  Vertex_Output_Outline o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Outline, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  float3 world_pos = dist.world_position + dist.world_normal * _Outline_Size;

  o.pos = UnityWorldToClipPos(world_pos);
  o.world_normal = dist.world_normal;

  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = world_pos - _WorldSpaceCameraPos.xyz;

  o.baked_pos = v.baked_pos;

  UNITY_TRANSFER_FOG(o, o.pos);

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    o.world_pos = world_pos;
  #endif

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  return o;
}

Vertex_Output_Early_Z
vertex_early_z(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;

  EDITOR_BRANCH if(!_EarlyZ_Enabled) {
    return (Vertex_Output_Early_Z)0;
  }

  Vertex_Output_Early_Z o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Early_Z, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  o.pos = dist.clip_vertex;

  return o;
}

Vertex_Output_Forward_Base 
vertex_base(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;
  IS_FORWARD_BASE = true;

  Vertex_Output_Forward_Base o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Forward_Base, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  o.baked_pos = v.baked_pos;

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  #if defined(NOT_BAKED)
    o.debug = dist.debug;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GRAB_POS_INTERPOLATOR_DISABLED)
    o.grab_pos = dist.grab_pos;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  o.pos = dist.clip_vertex;

  // NOTE(valuef): UNITY_TRANSFER_LIGHTING uses v.vertex so we want to reflect changes to it here.
  // 2022-08-18
  v.vertex = dist.local_vertex;

  o.tangentToWorldAndPackedData[0].w = dist.world_position.x;
  o.tangentToWorldAndPackedData[1].w = dist.world_position.y;
  o.tangentToWorldAndPackedData[2].w = dist.world_position.z;

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  // NOTE(valuef): We normalize the eye vec later on in the PS
  // 2023-11-09
  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = dist.world_position.xyz - _WorldSpaceCameraPos.xyz;

  float4 tangentWorld = float4(UnityObjectToWorldDir(v.tangent.xyz), v.tangent.w);

  float3x3 tangentToWorld = CreateTangentToWorldPerVertex(
    dist.world_normal, tangentWorld.xyz, tangentWorld.w
  );

  o.tangentToWorldAndPackedData[0].xyz = tangentToWorld[0];
  o.tangentToWorldAndPackedData[1].xyz = tangentToWorld[1];
  o.tangentToWorldAndPackedData[2].xyz = tangentToWorld[2];

  // NOTE(valuef): From what I can tell, the mesh would store its lightmap uv in UV2 if it had the
  // lightmap lighting baked in. However this shader is designed to be an avatar shader. You're not
  // really going to bake lightmap info into an avatar that can appear on any world, so we use UV2
  // for our own data.
  // This macro still is important for lighting (from the looks of it in the Unity cginc code), so
  // we still use it but we pass in float2(0,0) in cases where it might want the lightmap uvs.
  // @LightmapUVHack
  // 2023-09-13
  UNITY_TRANSFER_LIGHTING(o, float2(0,0)); 

  o.ambientOrLightmapUV = VertexGIForward(dist.world_position, dist.world_normal);

  UNITY_TRANSFER_FOG(o, o.pos);

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  return o;
}

float3
sample_emission_constant(
  float3 albedo,
  float albedo_emission_weight,
  Mask_Info albedo_emission_weight_mask,
  float3 added_emission_color,
  Mask_Info added_emission_color_mask
) {
  float3 emission = float3(0,0,0);

  emission += albedo.rgb * albedo_emission_weight * get_mask(albedo_emission_weight_mask);
  emission += added_emission_color * get_mask(added_emission_color_mask);

  return emission;
}

float3
sample_emission(
  const Texture_Info emission,
  float3 color
) {
  float3 col = sample_texture(emission);
  col *= color;
  return col;
}

float3
sample_detail_normal(
  const Texture_Info tex,
  float scale
) {
  // @InlinedTextureSampling
  if(!tex.is_set) {
    return float3(0,0,1);
  }

  float mask;
  float4 tap = sample_texture_separate_mask(tex, mask);

  float3 detail_normal = UnpackScaleNormal(tap, scale);

  detail_normal.xy *= mask;

  return detail_normal;
}

float3 
sample_normal(
  const Texture_Info tex,
  float scale
) {
  // @InlinedTextureSampling
  if(!tex.is_set) {
    return float3(0,0,1);
  }

  float mask;
  float4 tap = sample_texture_separate_mask(tex, mask);

  float3 normal = UnpackScaleNormal(tap, scale);
  normal.xy *= mask;

  return normal;
}

struct Metallic_Glossiness {
  float metallic;
  float glossiness;
};

Metallic_Glossiness
sample_metallic_glossiness(
  float constant_metal,
  Mask_Info constant_metal_mask,
  float constant_gloss,
  Mask_Info constant_gloss_mask
) {
  Metallic_Glossiness ret;

  ret.metallic = constant_metal * get_mask(constant_metal_mask);
  ret.glossiness = constant_gloss * get_mask(constant_gloss_mask);

  return ret;
}

float
sample_fresnel_opacity(
  bool enabled,
  float start,
  float end,
  float intensity,
  Mask_Info mask_info,
  float3 world_normal,
  float3 eye_vec
) {
  EDITOR_BRANCH if(!enabled) {
    return 1;
  }

  float fres = dot(world_normal, -eye_vec);

  fres = saturate((fres - start) / (end - start));
  fres = (1 - intensity) + fres * intensity;
  fres *= get_mask(mask_info);

  return fres;
}

float
sample_opacity(
  float opacity,
  Mask_Info mask_info
) {
  opacity *= get_mask(mask_info);
  return opacity;
}

// NOTE(valuef): 
// https://www.shadertoy.com/view/4djSRW
//
// Hash without Sine
// MIT License BEGIN
/* Copyright (c)2014 David Hoskins.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.*/

// Retrieved 2024-03-20
float hash12(float2 p) {
	float3 p3  = frac(float3(p.xyx) * .1031);
  p3 += dot(p3, p3.yzx + 33.33);
  return frac((p3.x + p3.y) * p3.z);
}

// Retrieved 2024-03-20
float2 hash22(float2 p) {
	float3 p3 = frac(float3(p.xyx) * float3(.1031, .1030, .0973));
  p3 += dot(p3, p3.yzx+33.33);
  return frac((p3.xx+p3.yz)*p3.zy);
}
// MIT License END


inline
void
pixel_init(
  float2  uv0,
  float2  uv1,
  float2  uv3,
  float2  uv4,
  float2  uv5,
  float2  uv6,
  float2  uv7,
  float3  pos_world,
  float3  baked_pos,
  float3  skinned_vertex,
  float   goo_noise,
  float   goo_drip,
  float4  vertex_colors,
  float3  world_normal,
  float3  eye_vec_unnormalized,
  float   touch_reactivity_interaction,
  float   light_mask,
  float4  tbn_vecs[3],
  float4  pixel_pos,
  bool    is_frontface,
  float4  grab_pos,
  out     TF_And_Material_Mix   out_mix_info,
  out     Fragment_Common_Data  out_s
) {

  // @EyeVecNormalization */
  float3 eye_vec;
  float world_distance_to_pixel;
  normalize_eye_vec(eye_vec_unnormalized, /* out */ eye_vec, /* out */ world_distance_to_pixel);
  out_s.eye_vec = eye_vec;

  init_time_bases();
  init_oscillators();

  init_uv_bus(uv0, uv1, uv3, uv4, uv5, uv6, uv7, pos_world, baked_pos, skinned_vertex);

  init_mask_channels(
    goo_noise, 
    float2(goo_drip, 1 - goo_drip),
    vertex_colors, 
    baked_pos, 
    world_normal, 
    eye_vec,
    touch_reactivity_interaction,
    light_mask,
    skinned_vertex,
    float2(1 - is_frontface, is_frontface),
    world_distance_to_pixel
  );

  init_masks_as_oscillators();
  
  EDITOR_BRANCH if(_DistanceDither_Enabled) {
    bool use_front_face_values = false;
    EDITOR_BRANCH if(_DistanceDither_Separate_Faces) {
      use_front_face_values = is_frontface;
    }
  
    // NOTE(valuef): start and end here are swapped on purpose as in the UI, the 'start' is the distance at which the dither starts
    // to eat away at the material, and end is where it's fully eaten it.
    // Here is's the other way around: start is the distance at which the material STARTS to show up, end is where it's fully shown.
    // 2023-11-10
    float start = use_front_face_values ? _DistanceDither_Front_Distance_End    : _DistanceDither_Back_Distance_End;
    float end   = use_front_face_values ? _DistanceDither_Front_Distance_Start  : _DistanceDither_Back_Distance_Start;
    float bias  = use_front_face_values ? _DistanceDither_Front_Bias            : _DistanceDither_Back_Bias;

    // NOTE(valuef): plus magic constant to make sure that any banding is invisible.
    // Kind of a hack but it works
    // 2023-11-10
    float near_plane = _ProjectionParams.y + 0.003;
    start += near_plane;
    end += near_plane;

    float t = (world_distance_to_pixel - start) / (end - start);

    float mask = get_mask(_DistanceDither_Mask);
    t += (1-mask);

    t = saturate(t);
    t -= bias;

    float dither = dither_pattern[uint(pixel_pos.y) % 8][uint(pixel_pos.x) % 8];
    if(dither >= t) {
      discard;
    }
  }

  // NOTE(valuef): We recalculate the tf value here so that we quanitize that value to the pixel
  // grid instead of per-vertex, which lets us get a sharper and more detailed tf animation.
  // 2022-10-20
  out_mix_info = calculate_tf_and_material_mix(baked_pos, world_normal, eye_vec);

  {
    float3 base = sample_texture(MainTex) * get_value(_Color_Osci).rgb;
    float3 mix  = sample_texture(Mix_MainTex) * get_value(_Mix_Color_Osci).rgb;

    float4 base_secondary = sample_texture(SecondaryTex) * get_value(_SecondaryTex_Color_Osci).rgba;
    float4 mix_secondary  = sample_texture(Mix_SecondaryTex) * get_value(_Mix_SecondaryTex_Color_Osci).rgba;

    float base_opacity  = sample_opacity(get_value(_Opacity_Osci).r, _Opacity_Mask);
    float mix_opacity   = sample_opacity(get_value(_Mix_Opacity_Osci).r, _Mix_Opacity_Mask);

    if(!IS_SHADOWCASTER) {

      [branch] if(can_use_camera_depth()) {
        float4 depth_uv = grab_pos;
        depth_uv.xy /= depth_uv.w;

        float depth_tap = SAMPLE_DEPTH(depth_uv);
        float view_depth = LinearEyeDepth(depth_tap);
        
        float our_depth = grab_pos.w;
        float depth_delta = view_depth - our_depth;

        float t;
        {
          // NOTE(valuef): start and end are swapped to save on a 1-t. 
          // 2022-09-21
          float start = _IntersectionModulation_Depth_End;
          float end = _IntersectionModulation_Depth_Start;
          t = saturate((depth_delta - start) / (end - start));
        }

        EDITOR_BRANCH if(_IntersectionModulation_Color_Enabled) {
          base.rgb            = lerp(base,            _IntersectionModulation_Color_Target.rgb, t);
          base_secondary.rgb  = lerp(base_secondary,  _IntersectionModulation_Color_Target.rgb, t);
        }

        EDITOR_BRANCH if(_IntersectionModulation_Opacity_Enabled) {
          base_opacity = saturate(base_opacity + t * _IntersectionModulation_Opacity_Amount);
        }

        EDITOR_BRANCH if(_IntersectionModulation_HSV_Enabled) {
          {
            base.rgb = rgb2hsv(base.rgb);

            base.r += _IntersectionModulation_HSV_Hue_Amount * t;
            base.g += _IntersectionModulation_HSV_Saturation_Amount * t;
            base.b += _IntersectionModulation_HSV_Value_Amount * t;

            base.rgb = hsv2rgb(base.rgb);
          }

          {
            base_secondary.rgb = rgb2hsv(base_secondary.rgb);

            base_secondary.r += _IntersectionModulation_HSV_Hue_Amount * t;
            base_secondary.g += _IntersectionModulation_HSV_Saturation_Amount * t;
            base_secondary.b += _IntersectionModulation_HSV_Value_Amount * t;

            base_secondary.rgb = hsv2rgb(base_secondary.rgb);
          }
        }
      }
    }

    apply_mat_mix(out_s.albedo.rgb,   mix,          base,         _Mix_Separate_MainTex, out_mix_info.material_mix.rrr);
    apply_mat_mix(out_s.albedo.a,     mix_opacity,  base_opacity, _Mix_Separate_Opacity, out_mix_info.material_mix);

    // NOTE(valuef): before we apply the secondary color texture.
    out_s.emissive_from_albedo_source = out_s.albedo.rgb;

    {
      float4 final_secondary;
      apply_mat_mix(final_secondary, mix_secondary, base_secondary, _Mix_Separate_SecondaryTex, out_mix_info.material_mix.rrrr);

      if(_SecondaryTex_BlendMode == 1) {
        out_s.albedo.rgb = lerp(out_s.albedo.rgb, final_secondary.rgb, final_secondary.a);
      }
      else {
        out_s.albedo.rgb += final_secondary;
      }
    }
  }

  out_s.glitter = float4(0,0,0,0);

  #if defined(VFGOO_ENABLE_GLITTER)
    if(IS_FORWARD_BASE || IS_FORWARD_ADD) {
      float2 uv_scroll_time = get_time(_Glitter_UV_Scroll_Speed_TimeBase);

      float2 base_uv = resolve_uv_bus(_Glitter_UVBus) * _Glitter_Density + uv_scroll_time * _Glitter_UV_Scroll_Speed;

      float tile_sq_dist = 9999;
      float2 tile_uv = float2(0,0);
      float2 tile_index = float2(0,0);
      float2 tile_rng = float2(0,0); 

      EDITOR_BRANCH if(_Glitter_Disorder > 0) {
        
        // NOTE(valuef): Without the unroll, the compiler makes the assumption
        // that frac(tile_rng) == 0 at every usage site. It's clearly incorrect
        // and somehow the unroll breaks this assumption.
        // So we keep this.
        // 2024-03-26
        [unroll] for(float xoff = -1; xoff <= 1; xoff++) {
          for(float yoff = -1; yoff <= 1; yoff++) {
            float2 tile_offset = float2(xoff, yoff);
            float2 tile_offset_rng = hash22(floor(base_uv) + tile_offset);

            float2 voronoi_factor = tile_offset_rng * _Glitter_Disorder;

            float2 final_uv = frac(base_uv) - tile_offset - voronoi_factor;

            float candidate_sq_dist = dot(final_uv, final_uv);

            if(tile_sq_dist > candidate_sq_dist) {
              tile_sq_dist = candidate_sq_dist;
              tile_uv = final_uv;
              tile_index = tile_offset + floor(base_uv);
              tile_rng = tile_offset_rng;
            }
          }
        }
      }
      else {
        tile_uv = frac(base_uv) - .5;
        tile_index = floor(base_uv);
        tile_rng = hash22(tile_index);
        tile_sq_dist = dot(tile_uv, tile_uv);
      }

      float rng = hash12(tile_index);

      float phase;
      {
        float blink_randomness = _Glitter_AutoBlink_Randomness * rng;
        float blink_time_offset = get_time(_Glitter_AutoBlink_Speed_TimeBase) * _Glitter_AutoBlink_Speed;

        float auto_phase = cos(blink_randomness + blink_time_offset);

        phase = auto_phase;

        EDITOR_BRANCH if(_Glitter_ManualBlink_Enabled) {
          float blink_manual_offset = get_value(_Glitter_ManualBlink_Offset_Osci);
          float blink_manual_randomness = _Glitter_ManualBlink_Offset_Randomness * rng;

          // NOTE(valuef): manual_phase needs to be large enough (in turn,
          // 'blink_manual_randomness' needs to be large ) so that when we do
          // the amplitude modulation with 'phase', we get enough aliasing in
          // the signal that the moire pattern of manual_phase created by the
          // relatively low sampling rate of our framerate re-creates the
          // randomness instead of a consistent pulsing.
          //
          // It's a weird way of doing this but can't think of anything else
          // that won't introduce some kind of regular pattern into the
          // blinking.
          //
          // We put manual blinking under a toggle so that people don't have to
          // think about these variables unless they want manual blink control
          // for real.
          // 2024-03-28
          float manual_phase = cos(blink_manual_randomness + blink_manual_offset);

          phase *= manual_phase;
        }
      
        phase = max(0, phase);
      }

      out_s.glitter = get_value(_Glitter_Color_Osci);
      out_s.glitter.rgb *= lerp(float3(1,1,1), out_s.albedo.rgb, get_value(_Glitter_Color_FromAlbedo_Osci).rrr);

      EDITOR_BRANCH if(_Glitter_Texture_Enabled) {
        if(is_Glitter_Texture_Map_set) {

          float2 uv = tile_uv;

          float2 size_minmax = get_value(_Glitter_Texture_Zoom_MinMax_Osci);
          float size = lerp(size_minmax.x, size_minmax.y, frac(rng + tile_rng.y));

          EDITOR_BRANCH if(_Glitter_Texture_Rotation_Random_Enabled || _Glitter_Texture_Rotation_Speed != 0) {
            float rotation = rng * UNITY_PI * 2 * _Glitter_Texture_Rotation_Random_Enabled;
            rotation += get_time(_Glitter_Texture_Rotation_Speed_TimeBase) * _Glitter_Texture_Rotation_Speed;

            uv = mul(rot2x2(rotation), uv);
          }

          uv *= size;
          uv += .5.rr;

          uv = uv * _Glitter_Texture_Map_Tiling + _Glitter_Texture_Map_Offset;

          // NOTE(valuef): We have discontinuities in the space-repeated UVs so we
          // resort to using the tiled base uv for derivatives. That alone does
          // help but in cases where we have A LOT of glitter that's shown, mip
          // transition artifacts become VERY obvious. So we combat this problem by
          // using a trilinear sampler to blend between mips.
          // 2024-03-21
          float4 tap = _Glitter_Texture_Map.SampleGrad(_SamplerTrilinearClamp, uv, ddx(base_uv), ddy(base_uv));

          out_s.glitter.rgb *= tap.rgb;

          EDITOR_BRANCH if(_Glitter_Texture_Map_AlphaIsMask) {
            out_s.glitter.a *= tap.a;
          }
        }
      }

      float2 circle_size_minmax = get_value(_Glitter_Size_MinMax_Osci).xy;
      float circle_size = lerp(circle_size_minmax.x, circle_size_minmax.y, frac(tile_rng.y - rng * 13));

      float dist = sqrt(tile_sq_dist);
      float circle = saturate((circle_size - dist) / fwidth(dist));

      EDITOR_BRANCH if(_Glitter_HSV_Enabled) {
        out_s.glitter.rgb = rgb2hsv(out_s.glitter.rgb);

        float2 hue_minmax = get_value(_Glitter_HSV_Hue_MinMax_Osci);
        float hue_random = lerp(hue_minmax.x, hue_minmax.y, (tile_rng.x + tile_rng.y + rng)/3);

        float2 sat_minmax = get_value(_Glitter_HSV_Saturation_MinMax_Osci);
        float sat_random = lerp(sat_minmax.x, sat_minmax.y, frac(tile_rng.x - tile_rng.y));

        float hue_shift_speed = get_time(_Glitter_HSV_Hue_Speed_TimeBase) * _Glitter_HSV_Hue_Speed;

        float hue_shift = get_value(_Glitter_HSV_Hue_Shift_Osci);

        out_s.glitter.x = frac(out_s.glitter.x + hue_random + hue_shift_speed + hue_shift);
        out_s.glitter.y = saturate(out_s.glitter.y + sat_random);

        out_s.glitter.rgb = hsv2rgb(out_s.glitter.rgb);
      }

      float amount_mask = 1;
      float amount = get_value(_Glitter_Amount_Osci);

      if(rng >= amount) {
        amount_mask = 0;
      }

      {
        float brightness = circle * phase * amount_mask;
        float2 brightness_minmax = get_value(_Glitter_Brightness_MinMax_Osci);
        brightness = max(0, brightness * (brightness_minmax.y - brightness_minmax.x) + brightness_minmax.x);
        out_s.glitter.a *= brightness;
      }

      {
        float mask = get_mask(_Glitter_Mask);
        out_s.glitter.a *= mask;
      }

      EDITOR_BRANCH if(_Glitter_AppearsOnMaterial != APPEARS_ON_MATERIAL_BOTH) {
        float appears_on = get_appears_on_mask(_Glitter_AppearsOnMaterial, out_mix_info.material_mix);
        out_s.glitter.a *= appears_on;
      }

      {
        float2 opacity_minmax = get_value(_Glitter_Opacity_MinMax_Osci);
        float opacity_random = lerp(opacity_minmax.x, opacity_minmax.y, frac(tile_rng.y - rng));
        out_s.glitter.a *= opacity_random;
      }
    }
  #endif
  
  EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_CUTOUT) {
    clip(out_s.albedo.a - get_value(_Cutoff_Osci) + out_s.glitter.a);
  }

  // NOTE(valuef): smoothness is 1 minus the square root of real roughness m.
  float metallic;
  {
    {
      Metallic_Glossiness base = sample_metallic_glossiness(
        _Metallic,
        _Metallic_Mask,
        _Glossiness,
        _Glossiness_Mask
      );

      Metallic_Glossiness mix = sample_metallic_glossiness(
        _Mix_Metallic,
        _Mix_Metallic_Mask,
        _Mix_Glossiness,
        _Mix_Glossiness_Mask
      );

      apply_mat_mix(metallic,         mix.metallic,    base.metallic,   _Mix_Separate_MetallicGlossiness, out_mix_info.material_mix);
      apply_mat_mix(out_s.smoothness, mix.glossiness,  base.glossiness, _Mix_Separate_MetallicGlossiness, out_mix_info.material_mix);
    }
  }

  out_s.diffColor = DiffuseAndSpecularFromMetallic(
    out_s.albedo, metallic, 
    /*out*/ out_s.specColor, 
    /*out*/ out_s.oneMinusReflectivity
  );

  {
    float3 tangent = tbn_vecs[0].xyz;
    float3 binormal = tbn_vecs[1].xyz;
    float3 normal = tbn_vecs[2].xyz;

    float3 seamless_tangent = normalize(cross(float3(0,-1,0), normal));
    // TODO : bitangent sign
    float3 seamless_binormal = cross(normal, seamless_tangent);

    #if UNITY_TANGENT_ORTHONORMALIZE
      normal = normalize(normal);

      // ortho-normalize Tangent
      tangent = normalize(tangent - normal * dot(tangent, normal));

      // recalculate Binormal
      half3 newB = cross(normal, tangent);
      binormal = newB * sign(dot(newB, binormal));
    #endif

    float3 normal_tangent;
    {
      float3 normal;
      {
        float3 base = sample_normal(BumpMap, get_value(_BumpScale_Osci).r);
        float3 mix = sample_normal(Mix_BumpMap, get_value(_Mix_BumpScale_Osci).r);

        apply_mat_mix(normal, mix, base, _Mix_Separate_BumpMap, out_mix_info.material_mix);

      }
  
      float3 detail;
      {
        float3 base = sample_detail_normal(DetailNormalMap, get_value(_DetailBumpScale_Osci).r);
        float3 mix = sample_detail_normal(Mix_DetailNormalMap, get_value(_Mix_DetailBumpScale_Osci).r);

        apply_mat_mix(detail, mix, base, _Mix_Separate_DetailNormalMap, out_mix_info.material_mix);
      }

      // NOTE(valuef): Technically it'd be a good idea to normalize both the normal and detail as apply_mat_mix will
      // perform a lerp between the base and mix, but from testing, it seems like there's no perceptible difference
      // between a normalized and non-normalized detail & normal textures during a blend with all (4 in total) detail
      // and normal textures set and a basic blend between them with some blur.
      // 2023-08-20

      // NOTE(valuef): RNM from https://blog.selfshadow.com/publications/blending-in-detail/
      // 2022-08-17
      normal.z += 1;
      detail.xy *= -1;
      normal_tangent = normal * dot(normal, detail) / normal.z - detail;
    }

    out_s.normalWorld = normalize(
      tangent * normal_tangent.x + 
      binormal * normal_tangent.y + 
      normal * normal_tangent.z
    );

    out_s.normal_world_seamless = normalize(
      seamless_tangent * normal_tangent.x + 
      seamless_binormal * normal_tangent.y + 
      normal * normal_tangent.z
    );
  }

  if(_GSAA_Enabled) {
    // NOTE(valuef): Valve's GSAA 
    // https://media.steampowered.com/apps/valve/2015/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf
    // pg. 43
    float3 normal = out_s.normalWorld;

    float3 nddx = ddx_fine(normal);
    float3 nddy = ddy_fine(normal);

    float geometric_roughness_term = pow(saturate(max(dot(nddx, nddx), dot(nddy, nddy))), .333);

    out_s.smoothness = min(out_s.smoothness, 1 - geometric_roughness_term);
  }

  out_s.posWorld = pos_world;

  if(!IS_SHADOWCASTER) {
    out_s.diffColor = PreMultiplyAlpha(
      out_s.diffColor, 
      out_s.albedo.a, 
      out_s.oneMinusReflectivity, 
      /*out*/ out_s.alpha
    );
  }
  else {
    out_s.alpha = 1;
  }
}

float
sample_occlusion(
  const Texture_Info tex,
  float strength
) {
  float occlusion = sample_texture(tex).g;
  if(tex.is_set || tex.mask.channel != 0) {
    // :LerpOneTo
    // NOTE(valuef): This is pretty much just a (occ * _OcclusionStrength) but the hinge of where
    // the curve rotates is (1,1) instead of (0,0)
    // 2023-04-28
    occlusion = (1.0 - strength) + occlusion * strength;
  }
  return occlusion;
}

const static float2 grabpass_blur_locations[21] = {
  float2(0.809017, 0.587785),
  float2(-0.309017, 0.951056),
  float2(-1, -0),
  float2(-0.309016, -0.951057),
  float2(0.809017, -0.587785),
  float2(0.618034, 1.902112),
  float2(-1.101794, 1.669146),
  float2(-1.991948, 0.179278),
  float2(-1.382124, -1.44559),
  float2(0.268468, -1.9819),
  float2(1.716898, -1.025798),
  float2(1.87247, 0.70275),
  float2(-0.927051, 2.853168),
  float2(-2.544144, 1.5897571),
  float2(-2.970804, -0.417519),
  float2(-2.00739, -2.229435),
  float2(-0.104697004, -2.998173),
  float2(1.8469859, -2.36403),
  float2(2.934444, -0.623733),
  float2(2.6488411, 1.408416),
  float2(1.123818, 2.7815518),
};

float3
do_hsv_postprocessing(
  float3 col
) {
  col = rgb2hsv(col);

  col.x = frac(col.x + get_value(_PostProcessHSV_Hue_Shift_Osci) + _PostProcessHSV_Hue_Speed * get_time(_PostProcessHSV_Hue_Speed_TimeBase));
  col.y = (col.y + get_value(_PostProcessHSV_Sat_Shift_Osci));
  col.z = (col.z + get_value(_PostProcessHSV_Value_Shift_Osci));

  col = hsv2rgb(col);

  return col;
}


float4
pixel_early_z(
  Vertex_Output_Early_Z i
) : SV_Target {

  EDITOR_BRANCH if(!_EarlyZ_Enabled) {
    discard;
  }

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  return float4(1,1,1,1);
}

float4 
pixel_outline(
  Vertex_Output_Outline i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {

  EDITOR_BRANCH if(!_Outline_Enabled) {
    discard;
  }

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  float4 unused_tangent_to_world[3] = {0.0.rrr,0.0.rrr,0.0.rrr,0.0.rrr};

  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
      i.world_pos,                    /* pos_world */
    #else
      float3(0,0,0),
    #endif

    i.baked_pos,                    /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif

    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                    /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                     /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.world_normal,                 /* world_normal */
    i.eye_vec_unnormalized.xyz,     /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction, /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                   /* light_mask */
    #else
      0,
    #endif

    unused_tangent_to_world,        /* tbn_vecs       @Unused */
    pixel_pos,                      /* pixel_pos */
    is_front_face,                  /* is_front_face  */
    1.0.rrrr,                       /* grab_pos       @Unused */
    mix_info,                       /* out_mix_info */
    s                               /* out_s        */
  );

  // TODO advanced outline colors like gradients, al etc?
  // TODO some kind of transparency/dither support in the future so we don't just cut off the outline?
  float3 color = _Outline_Color;

  float appears_on = get_appears_on_mask(_Outline_AppearsOnMaterial, mix_info.material_mix);
  clip(appears_on - .5);

  float mask = get_mask(_Outline_Mask);
  clip(mask - _Outline_Mask_Cutoff);

  UNITY_EXTRACT_FOG(i);
  UNITY_APPLY_FOG(_unity_fogCoord, color);

  #if defined(VFGOO_ENABLE_HSV_POSTPROCESSING)
    color.rgb = do_hsv_postprocessing(color.rgb);
  #endif

  return float4(color.rgb, 1);
}

float4 
pixel_base(
  Vertex_Output_Forward_Base i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {
  IS_FORWARD_BASE = true;

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
  
  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  // NOTE(valuef): Use any variables in s over the ones in i after this, including stuff like
  // world pos, material_mix etc
  // 2023-08-26
  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    IN_WORLDPOS(i),                         /* pos_world */
    i.baked_pos,                            /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif

    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                            /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                             /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.tangentToWorldAndPackedData[2].xyz,   /* world_normal */
    i.eye_vec_unnormalized.xyz,             /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction,         /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                           /* light_mask */
    #else
      0,
    #endif

    i.tangentToWorldAndPackedData,          /* tbn_vecs */
    pixel_pos,                              /* pixel_pos */
    is_front_face,                          /* is_front_face */

    #if !defined(OPT_GRAB_POS_INTERPOLATOR_DISABLED)
      i.grab_pos,                             /* grab_pos */
    #else
      float4(0,0,0,1),
    #endif

    mix_info,                               /* out_mix_info */
    s                                       /* out_s */
  );

  if(_BackfaceFill_Enabled && !is_front_face) {
    return _BackfaceFill_Color;
  }

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_PS) {
      i.debug.xyz = pow(get_mask(_DebugVisualisation_Mask),2.2);
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_TF_PS) {
      i.debug.xyz = pow(mix_info.material_mix,2.2);
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_UV) {
      i.debug.xy = resolve_uv_bus(_DebugVisualisation_UVBus);
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_UV2_CHANNEL) {
      i.debug.xyz = i.baked_pos.xyz;
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_SKINNED_VERTICES) {
      i.debug.xyz = i.skinned_vertex;
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_IS_CAMERA_DEPTH_TEXTURE_AVAILABLE) {
      i.debug.xyz = (is_depth_texture_available() ? 1 : 0).rrr;
      i.debug.w = 1;
    }
       
    EDITOR_BRANCH if(i.debug.w > 0) {
      return i.debug;
    }
  #endif


  EDITOR_BRANCH if(_FlipNormalsOnBackFacingTris) {
    if(!is_front_face) {
      s.normalWorld = -s.normalWorld;
    }
  }

  UnityLight mainLight = get_directional_light(s.posWorld);
  UNITY_LIGHT_ATTENUATION(atten, i, s.posWorld);

  float occlusion;
  {
    float base  = sample_occlusion(OcclusionMap, _OcclusionStrength);
    float mix   = sample_occlusion(Mix_OcclusionMap, _Mix_OcclusionStrength);

    apply_mat_mix(occlusion, mix, base, _Mix_Separate_Occlusion, mix_info.material_mix);
  }

  UnityGI gi = FragmentGI(s, s.eye_vec.xyz, occlusion, i.ambientOrLightmapUV, atten, mainLight, mix_info.material_mix);

  half4 c = BRDF1_Unity_PBS(
    s.diffColor, s.specColor, 
    s.oneMinusReflectivity, s.smoothness, 
    s.normalWorld, -s.eye_vec.xyz, 
    gi.light, gi.indirect,
    mix_info  /* mix_info */
  );

  float3 emissive = float3(0,0,0);
  {
    float3 emission1;
    {
      float3 base = sample_emission(EmissionMap,      get_value(_EmissionColor_Osci).rgb);
      float3 mix  = sample_emission(Mix_EmissionMap,  get_value(_Mix_EmissionColor_Osci).rgb);

      apply_mat_mix(emission1, mix, base, _Mix_Separate_Emission_1, mix_info.material_mix.rrr);
    }

    float3 emission2;
    {
      float3 base = sample_emission(EmissionMap2, get_value(_EmissionColor2_Osci).rgb);
      float3 mix = sample_emission(Mix_EmissionMap2, get_value(_Mix_EmissionColor2_Osci).rgb);

      apply_mat_mix(emission2, mix, base, _Mix_Separate_Emission_2, mix_info.material_mix.rrr);
    }

    float3 emission_constant;
    {
      float3 base = sample_emission_constant(
        s.emissive_from_albedo_source,
        get_value(_AlbedoEmissionWeight_Osci).r,
        _AlbedoEmissionWeight_Mask,
        get_value(_AddedEmissionColor_Osci).rgb,
        _AddedEmissionColor_Mask
      );

      float3 mix = sample_emission_constant(
        s.emissive_from_albedo_source,
        get_value(_Mix_AlbedoEmissionWeight_Osci).r,
        _Mix_AlbedoEmissionWeight_Mask,
        get_value(_Mix_AddedEmissionColor_Osci).rgb,
        _Mix_AddedEmissionColor_Mask
      );

      apply_mat_mix(emission_constant, mix, base, _Mix_Separate_Emission_Const, mix_info.material_mix.rrr);
    }

    emissive += emission1;
    emissive += emission2;
    emissive += emission_constant;
  }

  #if defined(LTCGI) 
  {
    float3 ltcgi_diff = 0;
    float3 ltcgi_spec = 0;
    float2 light_map_uv = float2(0,0);

    float ltcgi_total_spec_intensity;
    float ltcgi_total_diff_intensity;
    
    LTCGI_Contribution(
      s.posWorld,
      s.normalWorld,
      -s.eye_vec.xyz,
      1 - s.smoothness,
      light_map_uv,
      /* inout */ ltcgi_diff,
      /* inout */ ltcgi_spec,
      /* out */ ltcgi_total_spec_intensity,
      /* out */ ltcgi_total_diff_intensity
    );

    emissive += ltcgi_diff;
    emissive += ltcgi_spec;
  }
  #endif

  // TODO(valuef): To properly add the glitter on top of a faded out material, we need to do stuff in the following order:
  // 1. Normal light calculations
  // 2. Apply transparency.
  // 3. Apply glitter and the transparency of glitter.
  //
  // We can do this in the transparent rendering preset as the premultiplied alpha nature of it gives us enough control to
  // do this.
  // However, in fade, we do step 2 outside the shader via our blend mode.
  // Because of that, we can't really 'add' the glitter 'on top' of a transparent material in fade without also adding
  // black glitter, which is undesired.
  // So in a future breaking update, we should consider switching to a premul workflow and drop postmul support.
  // 2024-03-25
  //
  // NOTE(valuef): Sparkles don't 'emit' light, they reflect it. So fog should
  // affect them whereas emission shouldn't be affected by fog.
  // 2024-03-25
  #if defined(VFGOO_ENABLE_GLITTER)
    // NOTE(valuef): We've already done the alpha cutoff earlier on, so no need
    // to blend here or else we'll have color bleed. BUT we still need to apply
    // the mask here so the bleed is just going to be something we have to live
    // with.
    // 2024-03-25
    c.rgb += s.glitter.rgb * s.glitter.a;
  #endif

  UNITY_EXTRACT_FOG(i);
  UNITY_APPLY_FOG(_unity_fogCoord, c.rgb);

  EDITOR_BRANCH if(is_using_postmultiplied_alpha() || is_using_premultiplied_alpha()) {
    c.a = s.alpha;
  }
  else {
    c.a = 1.0;
  }

  c.rgb += emissive * c.a;

  #if defined(VFGOO_GRABPASS)
  {
    float3 view_normal = normalize(mul((float3x3)UNITY_MATRIX_IT_MV, s.normalWorld));
    view_normal.xy = Unity_SafeNormalize(view_normal.xy);

    float2 uv = i.grab_pos.xy;
    {
      {
        float t = _GrabPass_Distortion_Amount;
        t *= get_mask(_GrabPass_Distortion_Amount_Mask);

        uv += view_normal.xy * t;
      }

      uv /= i.grab_pos.w;

      {
        uv -= float2(.5, .5);
        uv *= _GrabPass_Zoom_Amount;
        uv += float2(.5, .5);
      }
    }

    float4 grab = _GrabPass.SampleLevel(_SamplerLinearMirror, uv, 0);

    EDITOR_BRANCH if(_GrabPass_Blur_Enabled) {
      float4 blurred = grab;

      float dispersion = _GrabPass_Blur_Dispersion;

      float size_x, size_y;
      _GrabPass.GetDimensions(size_x, size_y);
      for(uint i = 0; i < 21; ++i) {
        float2 offset = grabpass_blur_locations[i];
        float2 tap_uv = uv + (offset / float2(size_x,size_y)) * dispersion;
        float4 tap = _GrabPass.SampleLevel(_SamplerLinearMirror, tap_uv, 0);

        blurred += tap;
      }
      blurred /= 22;

      {
        float t = get_mask(_GrabPass_Blur_Weight_Mask);
        grab = lerp(grab, blurred, t);
      }
    }

    {
      float mask;
      float4 tint = sample_texture_separate_mask(GrabPass_Tint_Texture, mask);
      tint.rgb *= _GrabPass_Tint_Color.rgb;

      float3 tinted = grab.rgb * tint;

      float t = mask * get_mask(_GrabPass_Tint_Mask) * _GrabPass_Tint_Color.a;
      grab.rgb = lerp(grab.rgb, tinted.rgb, t);
    }

    EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT) {
      c.rgb += grab.rgb * (1-s.alpha);
    }
    else EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_FADE) {
      c.rgb = lerp(grab.rgb, c.rgb, s.alpha);
    }

    c.a = 1;
  }
  #endif

  #if defined(VFGOO_ENABLE_HSV_POSTPROCESSING)
    c.rgb = do_hsv_postprocessing(c.rgb);
  #endif

  return c;
}

Vertex_Output_Forward_Add 
vertex_add(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;
  IS_FORWARD_ADD = true;

  Vertex_Output_Forward_Add o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Forward_Add, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  o.baked_pos = v.baked_pos;

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  o.pos = dist.clip_vertex;

  // NOTE(valuef): TRANSFER_VERTEX_TO_FRAGMENT and UNITY_TRANSFER_LIGHTING uses v.vertex so we want
  // to reflect changes to it here.
  // 2022-08-18
  v.vertex = dist.local_vertex;

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = dist.world_position.xyz - _WorldSpaceCameraPos; 
  o.posWorld = dist.world_position.xyz;

  {
    float4 tangentWorld = float4(UnityObjectToWorldDir(v.tangent.xyz), v.tangent.w);

    float3x3 tangentToWorld = CreateTangentToWorldPerVertex(
      dist.world_normal, tangentWorld.xyz, tangentWorld.w
    );

    o.tangentToWorldAndLightDir[0].xyz = tangentToWorld[0];
    o.tangentToWorldAndLightDir[1].xyz = tangentToWorld[1];
    o.tangentToWorldAndLightDir[2].xyz = tangentToWorld[2];
  }

  // @LightmapUVHack
  UNITY_TRANSFER_LIGHTING(o, float2(0,0)); 

  {
    // NOTE(valuef): This is normalized in the pixel shader
    // 2022-09-18
    float3 lightDir = get_directional_light(dist.world_position.xyz).dir;

    o.tangentToWorldAndLightDir[0].w = lightDir.x;
    o.tangentToWorldAndLightDir[1].w = lightDir.y;
    o.tangentToWorldAndLightDir[2].w = lightDir.z;
  }

  UNITY_TRANSFER_FOG(o, o.pos);

  TRANSFER_VERTEX_TO_FRAGMENT(o);

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  return o;
}

float4
pixel_add(
  Vertex_Output_Forward_Add i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {

  IS_FORWARD_ADD = true;

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_TF_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_UV ||
       _DebugVisualisation_Type == DEBUG_VIS_UV2_CHANNEL ||
       _DebugVisualisation_Type == DEBUG_VIS_SKINNED_VERTICES
    ) {
      discard;
    }
  #endif

  if(_BackfaceFill_Enabled && !is_front_face) {
    discard;
  }

  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    i.posWorld,                         /* pos_world */
    i.baked_pos,                        /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif


    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                        /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                         /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.tangentToWorldAndLightDir[2].xyz, /* world_normal */
    i.eye_vec_unnormalized.xyz,         /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction,     /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                       /* light_mask */
    #else
      0,
    #endif

    i.tangentToWorldAndLightDir,        /* tbn_vecs */
    pixel_pos,                          /* pixel_pos */
    is_front_face,                      /* is_front_face */
    1.0.rrrr,                           /* grab_pos     @Unused*/
    mix_info,                           /* out_mix_info */
    s                                   /* out_s */
  );

  UNITY_LIGHT_ATTENUATION(atten, i, s.posWorld)

  half3 light_dir = half3(
    i.tangentToWorldAndLightDir[0].w, 
    i.tangentToWorldAndLightDir[1].w, 
    i.tangentToWorldAndLightDir[2].w
  );
  UnityLight light = AdditiveLight(light_dir, atten);

  UnityIndirect noIndirect = ZeroIndirect();

  half4 c = BRDF1_Unity_PBS(
    s.diffColor, s.specColor, 
    s.oneMinusReflectivity, s.smoothness, 
    s.normalWorld, -s.eye_vec, 
    light, noIndirect,
    mix_info  /* mix_info */
  );

  #if defined(VFGOO_ENABLE_GLITTER)
    c.rgb += s.glitter.rgb * s.glitter.a * light.color;
  #endif

  // fog towards black in additive pass
  UNITY_EXTRACT_FOG(i);
  UNITY_APPLY_FOG_COLOR(_unity_fogCoord, c.rgb, half4(0,0,0,0));

  EDITOR_BRANCH if(is_using_postmultiplied_alpha() || is_using_premultiplied_alpha()) {
    c.a = s.alpha;
  }
  else {
    c.a = 1.0;
  }

  #if defined(VFGOO_ENABLE_HSV_POSTPROCESSING)
    c.rgb = do_hsv_postprocessing(c.rgb);
  #endif

  return c;
}

Vertex_Output_Shadow_Caster
vertex_shadow_caster(
  Vertex_Input v
) {
  IS_SHADOWCASTER = true;
  IS_VERTEX_SHADER = true;

  Vertex_Output_Shadow_Caster o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Shadow_Caster, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  init_time_bases();
  init_oscillators();
  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    false                   /* apply depth distortion */
  );

  o.baked_pos = v.baked_pos;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  //TRANSFER_SHADOW_CASTER_NOPOS(o,o.pos)
  // NOTE(valuef): TRANSFER_SHADOW_CASTER_NOPOS expansion
  #if defined(SHADOWS_CUBE) && !defined(SHADOWS_CUBE_IN_DEPTH_TEX)
    o.vec = dist.world_position.xyz - _LightPositionRange.xyz; 
    o.pos = dist.clip_vertex;
  #else
    // NOTE(valuef): UnityClipSpaceShadowCasterPos expanstion
    float4 world_position = dist.world_position;
    if(unity_LightShadowBias.z != 0.0) {
      float3 wLight = normalize(get_directional_light(world_position).dir);

      // apply normal offset bias (inset position along the normal)
      // bias needs to be scaled by sine between normal and light direction
      // (http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/)
      //
      // unity_LightShadowBias.z contains user-specified normal offset amount
      // scaled by world space texel size.

      float shadowCos = dot(dist.world_normal, wLight);
      float shadowSine = sqrt(1-shadowCos*shadowCos);
      float normalBias = unity_LightShadowBias.z * shadowSine;

      world_position.xyz -= dist.world_normal * normalBias;
    }
    o.pos = mul(UNITY_MATRIX_VP, world_position);
    o.pos = UnityApplyLinearShadowBias(o.pos);
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    o.world_pos = dist.world_position;
  #endif

  o.world_normal = dist.world_normal;

  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = dist.world_position.xyz - _WorldSpaceCameraPos.xyz;

  return o;
}

#if defined(UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS)
  sampler3D _DitherMaskLOD;
#endif

float4
pixel_shadow_caster(
  Vertex_Output_Shadow_Caster i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {
  IS_SHADOWCASTER = true;

  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_TF_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_UV ||
       _DebugVisualisation_Type == DEBUG_VIS_UV2_CHANNEL ||
       _DebugVisualisation_Type == DEBUG_VIS_SKINNED_VERTICES
    ) {
      discard;
    }
  #endif

  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  float4 unused_tangent_to_world[3] = {0.0.rrr,0.0.rrr,0.0.rrr,0.0.rrr};
  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
      i.world_pos,                    /* pos_world */
    #else
      float3(0,0,0),
    #endif

    i.baked_pos,                    /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif

    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                    /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                     /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.world_normal,                 /* world_normal */
    i.eye_vec_unnormalized.xyz,     /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction, /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                   /* light_mask */
    #else
      0,
    #endif

    unused_tangent_to_world,        /* tbn_vecs       @Unused */
    pixel_pos,                      /* pixel_pos */
    is_front_face,                  /* is_front_face  */
    1.0.rrrr,                       /* grab_pos       @Unused */
    mix_info,                       /* out_mix_info */
    s                               /* out_s        */
  );

  float alpha = s.albedo.a;

  EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT || _RenderingMode == RENDERING_MODE_FADE) {

    EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT) {
      PreMultiplyAlpha(
        half3(0, 0, 0), 
        alpha, 
        s.oneMinusReflectivity, 
        /* out */ alpha
      );
    }

    #if defined(UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS)
      // Use dither mask for alpha blended shadows, based on pixel position xy
      // and alpha level. Our dither texture is 4x4x16.
      half alphaRef = tex3D(_DitherMaskLOD, float3(i.pos.xy*0.25,alpha*0.9375)).a;
      clip(alphaRef - 0.01);
    #else
      clip(alpha - _Cutoff);
    #endif
  }

  SHADOW_CASTER_FRAGMENT(i)
}


      ENDCG
    }

    /*OUTLINE PASS END*/


    Pass {
      Name "ShadowCaster"
      Tags { "LightMode" = "ShadowCaster" }

      Cull [_CullMode]
      ZWrite On 
      ZTest [_ZTest]

      CGPROGRAM
      #pragma target 5.0

      

      #pragma multi_compile_shadowcaster
      #pragma skip_variants LIGHTMAP_ON DIRLIGHTMAP_COMBINED DYNAMICLIGHTMAP_ON SHADOWS_SHADOWMASK LIGHTMAP_SHADOW_MIXING 
      #pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
      #pragma skip_variants VERTEXLIGHT_ON
      #pragma skip_variants LIGHTPROBE_SH
      /*SHADOWS_SCREEN SKIP*/

      #pragma vertex vertex_shadow_caster 
      #pragma fragment pixel_shadow_caster

      
      #pragma shader_feature_local LTCGI

      #pragma shader_feature_local VFGOO_SHADOWCASTER_DISABLED

      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_1
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_2
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_3
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_4
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_5
      #pragma shader_feature_local VFGOO_ENABLE_UV_BUS_6

      #pragma shader_feature_local VFGOO_ENABLE_MASK_SCROLL_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_SCROLL_2

      #pragma shader_feature_local VFGOO_ENABLE_MASK_TOUCH_REACTIVITY

      #pragma shader_feature_local VFGOO_ENABLE_MASK_POINT_LIGHTS

      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_RIM_4

      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_4
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_5
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_6
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_7
      #pragma shader_feature_local VFGOO_ENABLE_MASK_CAPSULE_8

      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_4
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_5
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_6
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_7
      #pragma shader_feature_local VFGOO_ENABLE_MASK_TEXTURE_8

      #pragma shader_feature_local VFGOO_ENABLE_MASK_DISTANCE_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_DISTANCE_2

      #pragma shader_feature_local VFGOO_ENABLE_MASK_MASSBLEND_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_MASSBLEND_2

      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_1
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_2
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_3
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_4
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_5
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_6
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_7
      #pragma shader_feature_local VFGOO_ENABLE_MASK_BLEND_8

      #pragma shader_feature_local VFGOO_ENABLE_GLITTER
      #pragma shader_feature_local VFGOO_ENABLE_HSV_POSTPROCESSING
    

      // NOTE(valuef): This is here to avoid some compile errors as the other passes want this macro
      // but none of the unity standard includes define it in any shadow caster pass.
      // 2022-09-03
      #if !defined(TRANSFER_SHADOW)
        #define TRANSFER_SHADOW
      #endif

      #define VF_GOO_SHADOWCASTER

      /*VARIANT GEN MARKER*/
      #define VFGOO_ENABLE_MASK_TEXTURE_2
#define VFGOO_ENABLE_MASK_TEXTURE_3
#define OPT_GOO_NOISE_INTERPOLATOR_DISABLED
#define OPT_GOO_DRIP_INTERPOLATOR_DISABLED
#define OPT_UV1_INTERPOLATOR_DISABLED
#define OPT_UV3_INTERPOLATOR_DISABLED
#define OPT_UV4_INTERPOLATOR_DISABLED
#define OPT_UV5_INTERPOLATOR_DISABLED
#define OPT_UV6_INTERPOLATOR_DISABLED
#define OPT_UV7_INTERPOLATOR_DISABLED
#define OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED
#define OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED
#define OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED
#define OPT_GRAB_POS_INTERPOLATOR_DISABLED
// ValueFactory Goo Shader for VRChat avatars.
// Please see TERMS_OF_USE.txt
// (c) 2024 ValueFactory shader.gay
// https://shader.gay

// This file conatins Unity PBS shader code licensed under the following license:
//   Copyright (c) 2016 Unity Technologies
// 
//   Permission is hereby granted, free of charge, to any person obtaining a copy of
//   this software and associated documentation files (the "Software"), to deal in
//   the Software without restriction, including without limitation the rights to
//   use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
//   of the Software, and to permit persons to whom the Software is furnished to do
//   so, subject to the following conditions:
//   
//   The above copyright notice and this permission notice shall be included in all
//   copies or substantial portions of the Software.
//   
//   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
//   FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
//   COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
//   IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
//   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#define _Temp 0.00000000
#define _BakedAtVersion 7.00000000
#define _RenderingMode 0.00000000
#define is_TANoiseTex_set true
#define _CullMode 0.00000000
#define _SourceBlend 1.00000000
#define _DestinationBlend 0.00000000
#define _ZTest 4.00000000
#define _ZWrite 1.00000000
#define _Stencil_Ref 0.00000000
#define _Stencil_ReadMask 255.00000000
#define _Stencil_WriteMask 255.00000000
#define _Stencil_Comparison 8.00000000
#define _Stencil_Pass 0.00000000
#define _Stencil_Fail 0.00000000
#define _Stencil_ZFail 0.00000000
#define _Stencil_ComparisonBack 8.00000000
#define _Stencil_PassBack 0.00000000
#define _Stencil_FailBack 0.00000000
#define _Stencil_ZFailBack 0.00000000
#define _Stencil_ComparisonFront 8.00000000
#define _Stencil_PassFront 0.00000000
#define _Stencil_FailFront 0.00000000
#define _Stencil_ZFailFront 0.00000000
#define _OutlineStencil_Ref 0.00000000
#define _OutlineStencil_ReadMask 255.00000000
#define _OutlineStencil_WriteMask 255.00000000
#define _OutlineStencil_Comparison 8.00000000
#define _OutlineStencil_Pass 0.00000000
#define _OutlineStencil_Fail 0.00000000
#define _OutlineStencil_ZFail 0.00000000
#define _OutlineStencil_ComparisonBack 8.00000000
#define _OutlineStencil_PassBack 0.00000000
#define _OutlineStencil_FailBack 0.00000000
#define _OutlineStencil_ZFailBack 0.00000000
#define _OutlineStencil_ComparisonFront 8.00000000
#define _OutlineStencil_PassFront 0.00000000
#define _OutlineStencil_FailFront 0.00000000
#define _OutlineStencil_ZFailFront 0.00000000
#define is_MaskChannel_1_Texture_set false
#define _MaskChannel_1_Texture_UVBus 0.00000000
#define _MaskChannel_1_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_1_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_1_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_1_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_1_Strength_PreInversion 1.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_1_Strength_PostInversion 1.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_2_Texture_set false
#define _MaskChannel_2_Texture_UVBus 0.00000000
#define _MaskChannel_2_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_2_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_2_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_2_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_2_Strength_PreInversion 1.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_2_Strength_PostInversion 1.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_3_Texture_set false
#define _MaskChannel_3_Texture_UVBus 0.00000000
#define _MaskChannel_3_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_3_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_3_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_3_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_3_Strength_PreInversion 1.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_3_Strength_PostInversion 1.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_4_Texture_set false
#define _MaskChannel_4_Texture_UVBus 0.00000000
#define _MaskChannel_4_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_4_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_4_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_4_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_4_Strength_PreInversion 1.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_4_Strength_PostInversion 1.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_5_Texture_set false
#define _MaskChannel_5_Texture_UVBus 0.00000000
#define _MaskChannel_5_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_5_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_5_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_5_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_5_Strength_PreInversion 1.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_5_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_5_Strength_PostInversion 1.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_5_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_6_Texture_set false
#define _MaskChannel_6_Texture_UVBus 0.00000000
#define _MaskChannel_6_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_6_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_6_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_6_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_6_Strength_PreInversion 1.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_6_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_6_Strength_PostInversion 1.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_6_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_7_Texture_set false
#define _MaskChannel_7_Texture_UVBus 0.00000000
#define _MaskChannel_7_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_7_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_7_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_7_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_7_Strength_PreInversion 1.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_7_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_7_Strength_PostInversion 1.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_7_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MaskChannel_8_Texture_set false
#define _MaskChannel_8_Texture_UVBus 0.00000000
#define _MaskChannel_8_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_8_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_8_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MaskChannel_8_Texture_ScrollSpeed_TimeBase 0.00000000
#define _MaskChannel_8_Strength_PreInversion 1.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Enabled 0.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Slot 0.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_8_Strength_PreInversion_Osci_Value_End 1.00000000
#define _MaskChannel_8_Strength_PostInversion 1.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Slot 0.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MaskChannel_8_Strength_PostInversion_Osci_Value_End 1.00000000
#define is_MainTex_set false
#define _MainTex_AlphaIsMask 0.00000000
#define _MainTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _MainTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MainTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _MainTex_ScrollSpeed_TimeBase 0.00000000
#define _MainTex_UVBus 0.00000000
#define _MainTex_MaskChannel 0.00000000
#define _MainTex_MaskChannel_Inverted 0.00000000
#define _MainTex_MaskChannel_Strength 1.00000000
#define _MainTex_MaskChannel_Contrast 1.00000000
#define _MainTex_MaskChannel_Brightness 0.00000000
#define _Color float4(0.00000000, 0.04817181, 0.52099570, 1.00000000)
#define _Color_Osci_Enabled 0.00000000
#define _Color_Osci_Slot 0.00000000
#define _Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define is_Mix_MainTex_set false
#define _Mix_MainTex_AlphaIsMask 0.00000000
#define _Mix_MainTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_MainTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_MainTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_MainTex_ScrollSpeed_TimeBase 0.00000000
#define _Mix_MainTex_UVBus 0.00000000
#define _Mix_MainTex_MaskChannel 0.00000000
#define _Mix_MainTex_MaskChannel_Inverted 0.00000000
#define _Mix_MainTex_MaskChannel_Strength 1.00000000
#define _Mix_MainTex_MaskChannel_Contrast 1.00000000
#define _Mix_MainTex_MaskChannel_Brightness 0.00000000
#define _Mix_Color float4(0.52099570, 0.10224170, 0.52099570, 1.00000000)
#define _Mix_Color_Osci_Enabled 0.00000000
#define _Mix_Color_Osci_Slot 0.00000000
#define _Mix_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Separate_MainTex 1.00000000
#define is_SecondaryTex_set false
#define _SecondaryTex_AlphaIsMask 0.00000000
#define _SecondaryTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_ScrollSpeed_TimeBase 0.00000000
#define _SecondaryTex_UVBus 0.00000000
#define _SecondaryTex_MaskChannel 0.00000000
#define _SecondaryTex_MaskChannel_Inverted 0.00000000
#define _SecondaryTex_MaskChannel_Strength 1.00000000
#define _SecondaryTex_MaskChannel_Contrast 1.00000000
#define _SecondaryTex_MaskChannel_Brightness 0.00000000
#define _SecondaryTex_BlendMode 0.00000000
#define _SecondaryTex_Color float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_Color_Osci_Enabled 0.00000000
#define _SecondaryTex_Color_Osci_Slot 0.00000000
#define _SecondaryTex_Color_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _SecondaryTex_Color_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define is_Mix_SecondaryTex_set false
#define _Mix_SecondaryTex_AlphaIsMask 0.00000000
#define _Mix_SecondaryTex_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_ScrollSpeed_TimeBase 0.00000000
#define _Mix_SecondaryTex_UVBus 0.00000000
#define _Mix_SecondaryTex_MaskChannel 0.00000000
#define _Mix_SecondaryTex_MaskChannel_Inverted 0.00000000
#define _Mix_SecondaryTex_MaskChannel_Strength 1.00000000
#define _Mix_SecondaryTex_MaskChannel_Contrast 1.00000000
#define _Mix_SecondaryTex_MaskChannel_Brightness 0.00000000
#define _Mix_SecondaryTex_BlendMode 0.00000000
#define _Mix_SecondaryTex_Color float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_Color_Osci_Enabled 0.00000000
#define _Mix_SecondaryTex_Color_Osci_Slot 0.00000000
#define _Mix_SecondaryTex_Color_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_SecondaryTex_Color_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_Separate_SecondaryTex 0.00000000
#define _Opacity 0.98000000
#define _Opacity_MaskChannel 0.00000000
#define _Opacity_MaskChannel_Inverted 0.00000000
#define _Opacity_MaskChannel_Strength 1.00000000
#define _Opacity_MaskChannel_Contrast 1.00000000
#define _Opacity_MaskChannel_Brightness 0.00000000
#define _Opacity_Osci_Enabled 0.00000000
#define _Opacity_Osci_Slot 0.00000000
#define _Opacity_Osci_Value_Start 1.00000000
#define _Opacity_Osci_Value_End 1.00000000
#define _Mix_Opacity 1.00000000
#define _Mix_Opacity_MaskChannel 0.00000000
#define _Mix_Opacity_MaskChannel_Inverted 0.00000000
#define _Mix_Opacity_MaskChannel_Strength 1.00000000
#define _Mix_Opacity_MaskChannel_Contrast 1.00000000
#define _Mix_Opacity_MaskChannel_Brightness 0.00000000
#define _Mix_Opacity_Osci_Enabled 0.00000000
#define _Mix_Opacity_Osci_Slot 0.00000000
#define _Mix_Opacity_Osci_Value_Start 1.00000000
#define _Mix_Opacity_Osci_Value_End 1.00000000
#define _Mix_Separate_Opacity 0.00000000
#define is_OcclusionMap_set false
#define _OcclusionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _OcclusionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _OcclusionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _OcclusionMap_ScrollSpeed_TimeBase 0.00000000
#define _OcclusionMap_UVBus 0.00000000
#define _OcclusionMap_MaskChannel 0.00000000
#define _OcclusionMap_MaskChannel_Inverted 0.00000000
#define _OcclusionMap_MaskChannel_Strength 1.00000000
#define _OcclusionMap_MaskChannel_Contrast 1.00000000
#define _OcclusionMap_MaskChannel_Brightness 0.00000000
#define _OcclusionStrength 1.00000000
#define is_Mix_OcclusionMap_set false
#define _Mix_OcclusionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_OcclusionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_OcclusionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_OcclusionMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_OcclusionMap_UVBus 0.00000000
#define _Mix_OcclusionMap_MaskChannel 0.00000000
#define _Mix_OcclusionMap_MaskChannel_Inverted 0.00000000
#define _Mix_OcclusionMap_MaskChannel_Strength 1.00000000
#define _Mix_OcclusionMap_MaskChannel_Contrast 1.00000000
#define _Mix_OcclusionMap_MaskChannel_Brightness 0.00000000
#define _Mix_OcclusionStrength 1.00000000
#define _Mix_Separate_Occlusion 0.00000000
#define is_BumpMap_set false
#define _BumpMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _BumpMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _BumpMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _BumpMap_ScrollSpeed_TimeBase 0.00000000
#define _BumpMap_UVBus 0.00000000
#define _BumpMap_MaskChannel 0.00000000
#define _BumpMap_MaskChannel_Inverted 0.00000000
#define _BumpMap_MaskChannel_Strength 1.00000000
#define _BumpMap_MaskChannel_Contrast 1.00000000
#define _BumpMap_MaskChannel_Brightness 0.00000000
#define _BumpScale 1.00000000
#define _BumpScale_Osci_Enabled 0.00000000
#define _BumpScale_Osci_Slot 0.00000000
#define _BumpScale_Osci_Value_Start 1.00000000
#define _BumpScale_Osci_Value_End 1.00000000
#define is_Mix_BumpMap_set false
#define _Mix_BumpMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_BumpMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_BumpMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_BumpMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_BumpMap_UVBus 0.00000000
#define _Mix_BumpMap_MaskChannel 0.00000000
#define _Mix_BumpMap_MaskChannel_Inverted 0.00000000
#define _Mix_BumpMap_MaskChannel_Strength 1.00000000
#define _Mix_BumpMap_MaskChannel_Contrast 1.00000000
#define _Mix_BumpMap_MaskChannel_Brightness 0.00000000
#define _Mix_BumpScale 1.00000000
#define _Mix_BumpScale_Osci_Enabled 0.00000000
#define _Mix_BumpScale_Osci_Slot 0.00000000
#define _Mix_BumpScale_Osci_Value_Start 1.00000000
#define _Mix_BumpScale_Osci_Value_End 1.00000000
#define _Mix_Separate_BumpMap 0.00000000
#define is_DetailNormalMap_set false
#define _DetailNormalMap_Tiling float4(3.20000000, 3.20000000, 0.00000000, 0.00000000)
#define _DetailNormalMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _DetailNormalMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _DetailNormalMap_ScrollSpeed_TimeBase 0.00000000
#define _DetailNormalMap_UVBus 0.00000000
#define _DetailNormalMap_MaskChannel 0.00000000
#define _DetailNormalMap_MaskChannel_Inverted 0.00000000
#define _DetailNormalMap_MaskChannel_Strength 1.00000000
#define _DetailNormalMap_MaskChannel_Contrast 1.00000000
#define _DetailNormalMap_MaskChannel_Brightness 0.00000000
#define _DetailBumpScale 1.00000000
#define _DetailBumpScale_Osci_Enabled 0.00000000
#define _DetailBumpScale_Osci_Slot 0.00000000
#define _DetailBumpScale_Osci_Value_Start 1.00000000
#define _DetailBumpScale_Osci_Value_End 1.00000000
#define is_Mix_DetailNormalMap_set false
#define _Mix_DetailNormalMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_DetailNormalMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_DetailNormalMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_DetailNormalMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_DetailNormalMap_UVBus 0.00000000
#define _Mix_DetailNormalMap_MaskChannel 0.00000000
#define _Mix_DetailNormalMap_MaskChannel_Inverted 0.00000000
#define _Mix_DetailNormalMap_MaskChannel_Strength 1.00000000
#define _Mix_DetailNormalMap_MaskChannel_Contrast 1.00000000
#define _Mix_DetailNormalMap_MaskChannel_Brightness 0.00000000
#define _Mix_DetailBumpScale 1.00000000
#define _Mix_DetailBumpScale_Osci_Enabled 0.00000000
#define _Mix_DetailBumpScale_Osci_Slot 0.00000000
#define _Mix_DetailBumpScale_Osci_Value_Start 1.00000000
#define _Mix_DetailBumpScale_Osci_Value_End 1.00000000
#define _Mix_Separate_DetailNormalMap 0.00000000
#define is_EmissionMap_set false
#define _EmissionMap_AlphaIsMask 0.00000000
#define _EmissionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _EmissionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap_ScrollSpeed_TimeBase 0.00000000
#define _EmissionMap_UVBus 0.00000000
#define _EmissionMap_MaskChannel 0.00000000
#define _EmissionMap_MaskChannel_Inverted 0.00000000
#define _EmissionMap_MaskChannel_Strength 1.00000000
#define _EmissionMap_MaskChannel_Contrast 1.00000000
#define _EmissionMap_MaskChannel_Brightness 0.00000000
#define _EmissionColor float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _EmissionColor_Osci_Enabled 0.00000000
#define _EmissionColor_Osci_Slot 0.00000000
#define _EmissionColor_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _EmissionColor_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define is_Mix_EmissionMap_set false
#define _Mix_EmissionMap_AlphaIsMask 0.00000000
#define _Mix_EmissionMap_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap_ScrollSpeed_TimeBase 0.00000000
#define _Mix_EmissionMap_UVBus 0.00000000
#define _Mix_EmissionMap_MaskChannel 0.00000000
#define _Mix_EmissionMap_MaskChannel_Inverted 0.00000000
#define _Mix_EmissionMap_MaskChannel_Strength 1.00000000
#define _Mix_EmissionMap_MaskChannel_Contrast 1.00000000
#define _Mix_EmissionMap_MaskChannel_Brightness 0.00000000
#define _Mix_EmissionColor float4(0.00000000, 1.35320800, 5.65685400, 1.00000000)
#define _Mix_EmissionColor_Osci_Enabled 0.00000000
#define _Mix_EmissionColor_Osci_Slot 0.00000000
#define _Mix_EmissionColor_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_EmissionColor_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Separate_Emission_1 0.00000000
#define is_EmissionMap2_set false
#define _EmissionMap2_AlphaIsMask 0.00000000
#define _EmissionMap2_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _EmissionMap2_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap2_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _EmissionMap2_ScrollSpeed_TimeBase 0.00000000
#define _EmissionMap2_UVBus 0.00000000
#define _EmissionMap2_MaskChannel 0.00000000
#define _EmissionMap2_MaskChannel_Inverted 0.00000000
#define _EmissionMap2_MaskChannel_Strength 1.00000000
#define _EmissionMap2_MaskChannel_Contrast 1.00000000
#define _EmissionMap2_MaskChannel_Brightness 0.00000000
#define _EmissionColor2 float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _EmissionColor2_Osci_Enabled 0.00000000
#define _EmissionColor2_Osci_Slot 0.00000000
#define _EmissionColor2_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _EmissionColor2_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define is_Mix_EmissionMap2_set false
#define _Mix_EmissionMap2_AlphaIsMask 0.00000000
#define _Mix_EmissionMap2_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap2_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap2_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Mix_EmissionMap2_ScrollSpeed_TimeBase 0.00000000
#define _Mix_EmissionMap2_UVBus 0.00000000
#define _Mix_EmissionMap2_MaskChannel 0.00000000
#define _Mix_EmissionMap2_MaskChannel_Inverted 0.00000000
#define _Mix_EmissionMap2_MaskChannel_Strength 1.00000000
#define _Mix_EmissionMap2_MaskChannel_Contrast 1.00000000
#define _Mix_EmissionMap2_MaskChannel_Brightness 0.00000000
#define _Mix_EmissionColor2 float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_EmissionColor2_Osci_Enabled 0.00000000
#define _Mix_EmissionColor2_Osci_Slot 0.00000000
#define _Mix_EmissionColor2_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_EmissionColor2_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Separate_Emission_2 0.00000000
#define is_Matcap_1_Texture_set false
#define _Matcap_1_Texture_AlphaIsMask 0.00000000
#define _Matcap_1_Texture_MaskChannel 0.00000000
#define _Matcap_1_Texture_MaskChannel_Inverted 0.00000000
#define _Matcap_1_Texture_MaskChannel_Strength 1.00000000
#define _Matcap_1_Texture_MaskChannel_Contrast 1.00000000
#define _Matcap_1_Texture_MaskChannel_Brightness 0.00000000
#define _Matcap_1_Color float4(0.13687000, 0.13550940, 0.13550940, 1.00000000)
#define _Matcap_1_Color_Osci_Enabled 0.00000000
#define _Matcap_1_Color_Osci_Slot 0.00000000
#define _Matcap_1_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_1_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_1_Lighting_Enabled 1.00000000
#define _Matcap_1_Size 0.43000000
#define is_Mix_Matcap_1_Texture_set false
#define _Mix_Matcap_1_Texture_AlphaIsMask 0.00000000
#define _Mix_Matcap_1_Texture_MaskChannel 1.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Inverted 0.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Strength 1.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Contrast 1.00000000
#define _Mix_Matcap_1_Texture_MaskChannel_Brightness 0.00000000
#define _Mix_Matcap_1_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_1_Color_Osci_Enabled 0.00000000
#define _Mix_Matcap_1_Color_Osci_Slot 0.00000000
#define _Mix_Matcap_1_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_1_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_1_Lighting_Enabled 1.00000000
#define _Mix_Matcap_1_Size 0.00000000
#define _Mix_Separate_Matcap_1 0.00000000
#define is_Matcap_2_Texture_set false
#define _Matcap_2_Texture_AlphaIsMask 0.00000000
#define _Matcap_2_Texture_MaskChannel 0.00000000
#define _Matcap_2_Texture_MaskChannel_Inverted 0.00000000
#define _Matcap_2_Texture_MaskChannel_Strength 1.00000000
#define _Matcap_2_Texture_MaskChannel_Contrast 1.00000000
#define _Matcap_2_Texture_MaskChannel_Brightness 0.00000000
#define _Matcap_2_Color float4(0.13687000, 0.13281220, 0.13281220, 1.00000000)
#define _Matcap_2_Color_Osci_Enabled 0.00000000
#define _Matcap_2_Color_Osci_Slot 0.00000000
#define _Matcap_2_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_2_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_2_Lighting_Enabled 1.00000000
#define _Matcap_2_Size 0.43000000
#define is_Mix_Matcap_2_Texture_set false
#define _Mix_Matcap_2_Texture_AlphaIsMask 0.00000000
#define _Mix_Matcap_2_Texture_MaskChannel 0.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Inverted 0.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Strength 1.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Contrast 1.00000000
#define _Mix_Matcap_2_Texture_MaskChannel_Brightness 0.00000000
#define _Mix_Matcap_2_Color float4(0.03864443, 0.03864443, 0.03864443, 1.00000000)
#define _Mix_Matcap_2_Color_Osci_Enabled 0.00000000
#define _Mix_Matcap_2_Color_Osci_Slot 0.00000000
#define _Mix_Matcap_2_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_2_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_2_Lighting_Enabled 1.00000000
#define _Mix_Matcap_2_Size 0.00000000
#define _Mix_Separate_Matcap_2 0.00000000
#define is_Matcap_3_Texture_set false
#define _Matcap_3_Texture_AlphaIsMask 0.00000000
#define _Matcap_3_Texture_MaskChannel 0.00000000
#define _Matcap_3_Texture_MaskChannel_Inverted 0.00000000
#define _Matcap_3_Texture_MaskChannel_Strength 1.00000000
#define _Matcap_3_Texture_MaskChannel_Contrast 1.00000000
#define _Matcap_3_Texture_MaskChannel_Brightness 0.00000000
#define _Matcap_3_Color float4(0.15792650, 0.15320800, 0.15320800, 1.00000000)
#define _Matcap_3_Color_Osci_Enabled 0.00000000
#define _Matcap_3_Color_Osci_Slot 0.00000000
#define _Matcap_3_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_3_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Matcap_3_Lighting_Enabled 1.00000000
#define _Matcap_3_Size 0.43000000
#define is_Mix_Matcap_3_Texture_set false
#define _Mix_Matcap_3_Texture_AlphaIsMask 0.00000000
#define _Mix_Matcap_3_Texture_MaskChannel 5.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Inverted 0.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Strength 1.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Contrast 1.00000000
#define _Mix_Matcap_3_Texture_MaskChannel_Brightness 0.00000000
#define _Mix_Matcap_3_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_3_Color_Osci_Enabled 0.00000000
#define _Mix_Matcap_3_Color_Osci_Slot 0.00000000
#define _Mix_Matcap_3_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_3_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Mix_Matcap_3_Lighting_Enabled 1.00000000
#define _Mix_Matcap_3_Size 0.00000000
#define _Mix_Separate_Matcap_3 0.00000000
#define _AlbedoEmissionWeight 0.00000000
#define _AlbedoEmissionWeight_MaskChannel 0.00000000
#define _AlbedoEmissionWeight_MaskChannel_Inverted 0.00000000
#define _AlbedoEmissionWeight_MaskChannel_Strength 1.00000000
#define _AlbedoEmissionWeight_MaskChannel_Contrast 1.00000000
#define _AlbedoEmissionWeight_MaskChannel_Brightness 0.00000000
#define _AlbedoEmissionWeight_Osci_Enabled 0.00000000
#define _AlbedoEmissionWeight_Osci_Slot 0.00000000
#define _AlbedoEmissionWeight_Osci_Value_Start 0.00000000
#define _AlbedoEmissionWeight_Osci_Value_End 0.00000000
#define _AddedEmissionColor float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _AddedEmissionColor_MaskChannel 0.00000000
#define _AddedEmissionColor_MaskChannel_Inverted 0.00000000
#define _AddedEmissionColor_MaskChannel_Strength 1.00000000
#define _AddedEmissionColor_MaskChannel_Contrast 1.00000000
#define _AddedEmissionColor_MaskChannel_Brightness 0.00000000
#define _AddedEmissionColor_Osci_Enabled 0.00000000
#define _AddedEmissionColor_Osci_Slot 0.00000000
#define _AddedEmissionColor_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _AddedEmissionColor_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Mix_AlbedoEmissionWeight 0.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel 0.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Inverted 0.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Strength 1.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Contrast 1.00000000
#define _Mix_AlbedoEmissionWeight_MaskChannel_Brightness 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Enabled 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Slot 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Value_Start 0.00000000
#define _Mix_AlbedoEmissionWeight_Osci_Value_End 0.00000000
#define _Mix_AddedEmissionColor float4(0.00000000, 1.35320800, 5.65685400, 1.00000000)
#define _Mix_AddedEmissionColor_MaskChannel 0.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Inverted 0.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Strength 1.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Contrast 1.00000000
#define _Mix_AddedEmissionColor_MaskChannel_Brightness 0.00000000
#define _Mix_AddedEmissionColor_Osci_Enabled 0.00000000
#define _Mix_AddedEmissionColor_Osci_Slot 0.00000000
#define _Mix_AddedEmissionColor_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Mix_AddedEmissionColor_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Mix_Separate_Emission_Const 0.00000000
#define _Glossiness 1.00000000
#define _Glossiness_MaskChannel 0.00000000
#define _Glossiness_MaskChannel_Inverted 0.00000000
#define _Glossiness_MaskChannel_Strength 1.00000000
#define _Glossiness_MaskChannel_Contrast 1.00000000
#define _Glossiness_MaskChannel_Brightness 0.00000000
#define _Metallic 0.00000000
#define _Metallic_MaskChannel 0.00000000
#define _Metallic_MaskChannel_Inverted 0.00000000
#define _Metallic_MaskChannel_Strength 1.00000000
#define _Metallic_MaskChannel_Contrast 1.00000000
#define _Metallic_MaskChannel_Brightness 0.00000000
#define _Mix_Glossiness 1.00000000
#define _Mix_Glossiness_MaskChannel 9.00000000
#define _Mix_Glossiness_MaskChannel_Inverted 0.00000000
#define _Mix_Glossiness_MaskChannel_Strength 1.00000000
#define _Mix_Glossiness_MaskChannel_Contrast 1.00000000
#define _Mix_Glossiness_MaskChannel_Brightness 0.00000000
#define _Mix_Metallic 0.00000000
#define _Mix_Metallic_MaskChannel 9.00000000
#define _Mix_Metallic_MaskChannel_Inverted 0.00000000
#define _Mix_Metallic_MaskChannel_Strength 1.00000000
#define _Mix_Metallic_MaskChannel_Contrast 1.00000000
#define _Mix_Metallic_MaskChannel_Brightness 0.00000000
#define _Mix_Separate_MetallicGlossiness 0.00000000
#define _GSAA_Enabled 1.00000000
#define _Goo_Enabled 0.00000000
#define _Goo_Size 7.50000000
#define _Goo_Size_Osci_Enabled 0.00000000
#define _Goo_Size_Osci_Slot 0.00000000
#define _Goo_Size_Osci_Value_Start 7.50000000
#define _Goo_Size_Osci_Value_End 7.50000000
#define _Goo_Speed float4(0.00000000, 0.50000000, 0.50000000, 0.00000000)
#define _Goo_Speed_TimeBase 0.00000000
#define _Goo_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Goo_Offset_Osci_Enabled 0.00000000
#define _Goo_Offset_Osci_Slot 0.00000000
#define _Goo_Offset_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Goo_Offset_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Goo_Normal_Offset_Min_Degrees -10.00000000
#define _Goo_Normal_Offset_Max_Degrees 10.00000000
#define _Goo_Deformation_Enabled 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Enabled 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Slot 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_Start 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_End 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Enabled 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Slot 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_Start 0.00000000
#define _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_End 0.00000000
#define _Goo_Deformation_ProceduralNormal_Size 1.50000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Enabled 0.00000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Slot 0.00000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Value_Start 1.50000000
#define _Goo_Deformation_ProceduralNormal_Size_Osci_Value_End 1.50000000
#define _Goo_Deformation_ApplyOnMaterialMix 0.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel 0.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Inverted 0.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Strength 1.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Contrast 1.00000000
#define _Goo_Deformation_MeshNormal_MaskChannel_Brightness 0.00000000
#define _Goo_Drip_Enabled 0.00000000
#define _Goo_Drip_Size 0.20000000
#define _Goo_Drip_Size_Osci_Enabled 0.00000000
#define _Goo_Drip_Size_Osci_Slot 0.00000000
#define _Goo_Drip_Size_Osci_Value_Start 0.20000000
#define _Goo_Drip_Size_Osci_Value_End 0.20000000
#define _Goo_Drip_Start 0.60000000
#define _Goo_Drip_Start_Osci_Enabled 0.00000000
#define _Goo_Drip_Start_Osci_Slot 0.00000000
#define _Goo_Drip_Start_Osci_Value_Start 0.60000000
#define _Goo_Drip_Start_Osci_Value_End 0.60000000
#define _Goo_Drip_End 1.00000000
#define _Goo_Drip_End_Osci_Enabled 0.00000000
#define _Goo_Drip_End_Osci_Slot 0.00000000
#define _Goo_Drip_End_Osci_Value_Start 1.00000000
#define _Goo_Drip_End_Osci_Value_End 1.00000000
#define _Goo_Drip_Amount 1.00000000
#define _Goo_Drip_Amount_Osci_Enabled 0.00000000
#define _Goo_Drip_Amount_Osci_Slot 0.00000000
#define _Goo_Drip_Amount_Osci_Value_Start 1.00000000
#define _Goo_Drip_Amount_Osci_Value_End 1.00000000
#define _Goo_Drip_MaskChannel 0.00000000
#define _Goo_Drip_MaskChannel_Inverted 0.00000000
#define _Goo_Drip_MaskChannel_Strength 1.00000000
#define _Goo_Drip_MaskChannel_Contrast 1.00000000
#define _Goo_Drip_MaskChannel_Brightness 0.00000000
#define _Goo_Drip_ApplyOnMaterialMix 0.00000000
#define _Goo_Drip_Gravity_Vector float4(0.00000000, -1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_1_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_1_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_1_Flip 0.00000000
#define _CapsuleMask_1_Radius 0.12500000
#define _CapsuleMask_1_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_1_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_1_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_1_Height 0.25000000
#define _CapsuleMask_1_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Height_Osci_Slot 0.00000000
#define _CapsuleMask_1_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_1_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_1_Strength_PreInversion 1.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_1_Strength_PostInversion 1.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_2_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_2_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_2_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_2_Flip 0.00000000
#define _CapsuleMask_2_Radius 0.12500000
#define _CapsuleMask_2_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_2_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_2_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_2_Height 0.25000000
#define _CapsuleMask_2_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Height_Osci_Slot 0.00000000
#define _CapsuleMask_2_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_2_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_2_Strength_PreInversion 1.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_2_Strength_PostInversion 1.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_3_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_3_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_3_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_3_Flip 0.00000000
#define _CapsuleMask_3_Radius 0.12500000
#define _CapsuleMask_3_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_3_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_3_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_3_Height 0.25000000
#define _CapsuleMask_3_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Height_Osci_Slot 0.00000000
#define _CapsuleMask_3_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_3_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_3_Strength_PreInversion 1.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_3_Strength_PostInversion 1.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_4_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_4_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_4_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_4_Flip 0.00000000
#define _CapsuleMask_4_Radius 0.12500000
#define _CapsuleMask_4_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_4_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_4_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_4_Height 0.25000000
#define _CapsuleMask_4_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Height_Osci_Slot 0.00000000
#define _CapsuleMask_4_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_4_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_4_Strength_PreInversion 1.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_4_Strength_PostInversion 1.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_5_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_5_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_5_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_5_Flip 0.00000000
#define _CapsuleMask_5_Radius 0.12500000
#define _CapsuleMask_5_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_5_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_5_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_5_Height 0.25000000
#define _CapsuleMask_5_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Height_Osci_Slot 0.00000000
#define _CapsuleMask_5_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_5_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_5_Strength_PreInversion 1.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_5_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_5_Strength_PostInversion 1.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_5_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_6_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_6_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_6_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_6_Flip 0.00000000
#define _CapsuleMask_6_Radius 0.12500000
#define _CapsuleMask_6_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_6_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_6_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_6_Height 0.25000000
#define _CapsuleMask_6_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Height_Osci_Slot 0.00000000
#define _CapsuleMask_6_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_6_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_6_Strength_PreInversion 1.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_6_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_6_Strength_PostInversion 1.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_6_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_7_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_7_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_7_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_7_Flip 0.00000000
#define _CapsuleMask_7_Radius 0.12500000
#define _CapsuleMask_7_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_7_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_7_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_7_Height 0.25000000
#define _CapsuleMask_7_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Height_Osci_Slot 0.00000000
#define _CapsuleMask_7_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_7_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_7_Strength_PreInversion 1.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_7_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_7_Strength_PostInversion 1.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_7_Strength_PostInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_8_Origin float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Origin_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Origin_Osci_Slot 0.00000000
#define _CapsuleMask_8_Origin_Osci_Color_Start float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Origin_Osci_Color_End float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Axis_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Axis_Osci_Slot 0.00000000
#define _CapsuleMask_8_Axis_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Axis_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _CapsuleMask_8_Flip 0.00000000
#define _CapsuleMask_8_Radius 0.12500000
#define _CapsuleMask_8_Radius_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Radius_Osci_Slot 0.00000000
#define _CapsuleMask_8_Radius_Osci_Value_Start 0.12500000
#define _CapsuleMask_8_Radius_Osci_Value_End 0.12500000
#define _CapsuleMask_8_Height 0.25000000
#define _CapsuleMask_8_Height_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Height_Osci_Slot 0.00000000
#define _CapsuleMask_8_Height_Osci_Value_Start 0.25000000
#define _CapsuleMask_8_Height_Osci_Value_End 0.25000000
#define _CapsuleMask_8_Strength_PreInversion 1.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Slot 0.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_8_Strength_PreInversion_Osci_Value_End 1.00000000
#define _CapsuleMask_8_Strength_PostInversion 1.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Enabled 0.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Slot 0.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _CapsuleMask_8_Strength_PostInversion_Osci_Value_End 1.00000000
#define _Physbone_1_Enabled 0.00000000
#define _Physbone_1_MaskChannel 0.00000000
#define _Physbone_1_MaskChannel_Inverted 0.00000000
#define _Physbone_1_MaskChannel_Strength 1.00000000
#define _Physbone_1_MaskChannel_Contrast 1.00000000
#define _Physbone_1_MaskChannel_Brightness 0.00000000
#define _Physbone_1_Proximity_X 0.00000000
#define _Physbone_1_Proximity_Y 0.00000000
#define _Physbone_1_Proximity_Z 0.00000000
#define _Physbone_2_Enabled 0.00000000
#define _Physbone_2_MaskChannel 0.00000000
#define _Physbone_2_MaskChannel_Inverted 0.00000000
#define _Physbone_2_MaskChannel_Strength 1.00000000
#define _Physbone_2_MaskChannel_Contrast 1.00000000
#define _Physbone_2_MaskChannel_Brightness 0.00000000
#define _Physbone_2_Proximity_X 0.00000000
#define _Physbone_2_Proximity_Y 0.00000000
#define _Physbone_2_Proximity_Z 0.00000000
#define _Physbone_3_Enabled 0.00000000
#define _Physbone_3_MaskChannel 0.00000000
#define _Physbone_3_MaskChannel_Inverted 0.00000000
#define _Physbone_3_MaskChannel_Strength 1.00000000
#define _Physbone_3_MaskChannel_Contrast 1.00000000
#define _Physbone_3_MaskChannel_Brightness 0.00000000
#define _Physbone_3_Proximity_X 0.00000000
#define _Physbone_3_Proximity_Y 0.00000000
#define _Physbone_3_Proximity_Z 0.00000000
#define _Physbone_4_Enabled 0.00000000
#define _Physbone_4_MaskChannel 0.00000000
#define _Physbone_4_MaskChannel_Inverted 0.00000000
#define _Physbone_4_MaskChannel_Strength 1.00000000
#define _Physbone_4_MaskChannel_Contrast 1.00000000
#define _Physbone_4_MaskChannel_Brightness 0.00000000
#define _Physbone_4_Proximity_X 0.00000000
#define _Physbone_4_Proximity_Y 0.00000000
#define _Physbone_4_Proximity_Z 0.00000000
#define _Physics_Body_ApplyOnMaterialMix 0.00000000
#define _Physbone_Drip_DragForce_Strength 4.00000000
#define _Physbone_Drip_MaskChannel 0.00000000
#define _Physbone_Drip_MaskChannel_Inverted 0.00000000
#define _Physbone_Drip_MaskChannel_Strength 1.00000000
#define _Physbone_Drip_MaskChannel_Contrast 1.00000000
#define _Physbone_Drip_MaskChannel_Brightness 0.00000000
#define _Physbone_Body_DragForce_Strength 0.05000000
#define _Physbone_Body_MaskChannel 0.00000000
#define _Physbone_Body_MaskChannel_Inverted 0.00000000
#define _Physbone_Body_MaskChannel_Strength 1.00000000
#define _Physbone_Body_MaskChannel_Contrast 1.00000000
#define _Physbone_Body_MaskChannel_Brightness 0.00000000
#define _TF_Enabled 1.00000000
#define _TF_Manual_MaskChannel 0.00000000
#define _TF_Manual_MaskChannel_Inverted 0.00000000
#define _TF_Manual_MaskChannel_Strength 1.00000000
#define _TF_Manual_MaskChannel_Contrast 1.00000000
#define _TF_Manual_MaskChannel_Brightness 0.00000000
#define _TF_Manual_Osci_Enabled 0.00000000
#define _TF_Manual_Osci_Slot 0.00000000
#define _TF_Manual_Osci_Value_Start 0.00000000
#define _TF_Manual_Osci_Value_End 0.00000000
#define _TF_ManualBuiltin_BlendMode 0.00000000
#define _DebugVisualisation_Type 0.00000000
#define _DebugVisualisation_MaskChannel 9.00000000
#define _DebugVisualisation_MaskChannel_Inverted 0.00000000
#define _DebugVisualisation_MaskChannel_Strength 1.00000000
#define _DebugVisualisation_MaskChannel_Contrast 1.00000000
#define _DebugVisualisation_MaskChannel_Brightness 0.00000000
#define _DebugVisualisation_UVBus 0.00000000
#define _TF_Bulging_Enabled 0.00000000
#define _TF_Bulging_MaskChannel 0.00000000
#define _TF_Bulging_MaskChannel_Inverted 0.00000000
#define _TF_Bulging_MaskChannel_Strength 1.00000000
#define _TF_Bulging_MaskChannel_Contrast 1.00000000
#define _TF_Bulging_MaskChannel_Brightness 0.00000000
#define _TF_Bulging_Size 5.00000000
#define _TF_Animation_Bulging_Offset 0.00000000
#define _FakeCubemap_Enabled 0.00000000
#define _FakeCubemap_Blend 1.00000000
#define is_FakeCubemap_Texture_set false
#define _FakeCubemap_Exposure 1.00000000
#define _FakeCubemap_Tint2 float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _FakeCubemap_AppearsOnMaterial 0.00000000
#define _World_ReflectionProbe_Tint float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Specular_Tint float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _TouchReactivity_Mode 0.00000000
#define _TouchReactivity_Strength 0.03500000
#define _TouchReactivity_MaskChannel 0.00000000
#define _TouchReactivity_MaskChannel_Inverted 0.00000000
#define _TouchReactivity_MaskChannel_Strength 1.00000000
#define _TouchReactivity_MaskChannel_Contrast 1.00000000
#define _TouchReactivity_MaskChannel_Brightness 0.00000000
#define _TouchReactivity_And_PD_ApplyOnMaterialMix 0.00000000
#define _TouchReactivity_Remap_End 0.10000000
#define _TouchReactivity_Bypassed 0.00000000
#define _TouchReactivity_SafeMode4000 0.00000000
#define _TouchReactivity_Dispersion 1.00000000
#define _ProximityDistortion_Enabled 0.00000000
#define _ProximityDistortion_MaskChannel 0.00000000
#define _ProximityDistortion_MaskChannel_Inverted 0.00000000
#define _ProximityDistortion_MaskChannel_Strength 1.00000000
#define _ProximityDistortion_MaskChannel_Contrast 1.00000000
#define _ProximityDistortion_MaskChannel_Brightness 0.00000000
#define _ProximityDistortion_Depth_Start 0.05000000
#define _ProximityDistortion_Depth_End 0.22500000
#define _TF_Mode 3.00000000
#define is_TF_AnimationMap_set false
#define _TF_AnimationMap_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _TF_AnimationMap_Scale float4(6.00000000, 6.00000000, 6.00000000, 0.00000000)
#define _TF_AnimationMap_Mip 3.00000000
#define _TF_AnimationMap_UseUVBus 1.00000000
#define _TF_AnimationMap_UVBus 0.00000000
float _TF_Time;
#define _TF_Time_Osci_Enabled 0.00000000
#define _TF_Time_Osci_Slot 0.00000000
#define _TF_Time_Osci_Value_Start 0.00000000
#define _TF_Time_Osci_Value_End 0.00000000
#define _TF_Visualisation_Enabled 0.00000000
#define _TF_Visualisation_Speed 1.00000000
#define _TF_Animation_Blur_PS 0.09339190
#define _TF_Animation_Blur_VS 0.16535040
#define _TF_Animation_Radial_Radius 0.25461320
#define _TF_Animation_Radial_Origin float4(0.00000000, 0.86484320, 0.16653480, 0.00000000)
#define _TF_Animation_Radial_LegacyNoise_Enabled 0.00000000
#define _TF_Animation_CenterOut_Invert 0.00000000
#define _GlossyReflections_Enabled 1.00000000
#define _SpecularHightlights_Enabled 1.00000000
#define _IndirectLighting_Amount 1.00000000
#define _LightMix_Sensitivity 0.50000000
#define _LightMix_Sensitivity_Osci_Enabled 0.00000000
#define _LightMix_Sensitivity_Osci_Slot 0.00000000
#define _LightMix_Sensitivity_Osci_Value_Start 0.50000000
#define _LightMix_Sensitivity_Osci_Value_End 0.50000000
#define _IntersectionModulation_HSV_Enabled 0.00000000
#define _IntersectionModulation_HSV_Hue_Amount 0.50000000
#define _IntersectionModulation_HSV_Saturation_Amount 0.00000000
#define _IntersectionModulation_HSV_Value_Amount 0.00000000
#define _IntersectionModulation_Color_Enabled 0.00000000
#define _IntersectionModulation_Color_Target float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _IntersectionModulation_Opacity_Enabled 0.00000000
#define _IntersectionModulation_Opacity_Amount 1.00000000
#define _IntersectionModulation_Depth_Start 0.00000000
#define _IntersectionModulation_Depth_End 0.20000000
#define _NormalOffset_Amount 0.00000000
#define _UVBus_1_Source 0.00000000
#define _UVBus_1_VertexChannel_Channel 0.00000000
#define _UVBus_1_WorldLocation_XComponent 0.00000000
#define _UVBus_1_WorldLocation_YComponent 2.00000000
#define _UVBus_1_BakedVertex_XComponent 0.00000000
#define _UVBus_1_BakedVertex_YComponent 2.00000000
#define _UVBus_1_SkinnedVertex_XComponent 0.00000000
#define _UVBus_1_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_1_Distortion_Texture_set false
#define _UVBus_1_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_1_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_1_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_1_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_1_Distortion_Texture_Strength 0.10000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_1_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_1_Distortion_Texture_UVBus 0.00000000
#define _UVBus_2_Source 0.00000000
#define _UVBus_2_VertexChannel_Channel 0.00000000
#define _UVBus_2_WorldLocation_XComponent 0.00000000
#define _UVBus_2_WorldLocation_YComponent 2.00000000
#define _UVBus_2_BakedVertex_XComponent 0.00000000
#define _UVBus_2_BakedVertex_YComponent 2.00000000
#define _UVBus_2_SkinnedVertex_XComponent 0.00000000
#define _UVBus_2_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_2_Distortion_Texture_set false
#define _UVBus_2_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_2_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_2_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_2_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_2_Distortion_Texture_Strength 0.10000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_2_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_2_Distortion_Texture_UVBus 0.00000000
#define _UVBus_3_Source 0.00000000
#define _UVBus_3_VertexChannel_Channel 0.00000000
#define _UVBus_3_WorldLocation_XComponent 0.00000000
#define _UVBus_3_WorldLocation_YComponent 2.00000000
#define _UVBus_3_BakedVertex_XComponent 0.00000000
#define _UVBus_3_BakedVertex_YComponent 2.00000000
#define _UVBus_3_SkinnedVertex_XComponent 0.00000000
#define _UVBus_3_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_3_Distortion_Texture_set false
#define _UVBus_3_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_3_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_3_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_3_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_3_Distortion_Texture_Strength 0.10000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_3_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_3_Distortion_Texture_UVBus 0.00000000
#define _UVBus_4_Source 0.00000000
#define _UVBus_4_VertexChannel_Channel 0.00000000
#define _UVBus_4_WorldLocation_XComponent 0.00000000
#define _UVBus_4_WorldLocation_YComponent 2.00000000
#define _UVBus_4_BakedVertex_XComponent 0.00000000
#define _UVBus_4_BakedVertex_YComponent 2.00000000
#define _UVBus_4_SkinnedVertex_XComponent 0.00000000
#define _UVBus_4_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_4_Distortion_Texture_set false
#define _UVBus_4_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_4_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_4_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_4_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_4_Distortion_Texture_Strength 0.10000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_4_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_4_Distortion_Texture_UVBus 0.00000000
#define _UVBus_5_Source 0.00000000
#define _UVBus_5_VertexChannel_Channel 0.00000000
#define _UVBus_5_WorldLocation_XComponent 0.00000000
#define _UVBus_5_WorldLocation_YComponent 2.00000000
#define _UVBus_5_BakedVertex_XComponent 0.00000000
#define _UVBus_5_BakedVertex_YComponent 2.00000000
#define _UVBus_5_SkinnedVertex_XComponent 0.00000000
#define _UVBus_5_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_5_Distortion_Texture_set false
#define _UVBus_5_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_5_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_5_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_5_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_5_Distortion_Texture_Strength 0.10000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_5_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_5_Distortion_Texture_UVBus 0.00000000
#define _UVBus_6_Source 0.00000000
#define _UVBus_6_VertexChannel_Channel 0.00000000
#define _UVBus_6_WorldLocation_XComponent 0.00000000
#define _UVBus_6_WorldLocation_YComponent 2.00000000
#define _UVBus_6_BakedVertex_XComponent 0.00000000
#define _UVBus_6_BakedVertex_YComponent 2.00000000
#define _UVBus_6_SkinnedVertex_XComponent 0.00000000
#define _UVBus_6_SkinnedVertex_YComponent 2.00000000
#define is_UVBus_6_Distortion_Texture_set false
#define _UVBus_6_Distortion_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_6_Distortion_Texture_ScrollSpeed_TimeBase 0.00000000
#define _UVBus_6_Distortion_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _UVBus_6_Distortion_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _UVBus_6_Distortion_Texture_Strength 0.10000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Enabled 0.00000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Slot 0.00000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Value_Start 0.10000000
#define _UVBus_6_Distortion_Texture_Strength_Osci_Value_End 0.10000000
#define _UVBus_6_Distortion_Texture_UVBus 0.00000000
#define _RimMask_1_Start 1.00000000
#define _RimMask_1_Start_Osci_Enabled 0.00000000
#define _RimMask_1_Start_Osci_Slot 0.00000000
#define _RimMask_1_Start_Osci_Value_Start 1.00000000
#define _RimMask_1_Start_Osci_Value_End 1.00000000
#define _RimMask_1_End 0.50000000
#define _RimMask_1_End_Osci_Enabled 0.00000000
#define _RimMask_1_End_Osci_Slot 0.00000000
#define _RimMask_1_End_Osci_Value_Start 0.50000000
#define _RimMask_1_End_Osci_Value_End 0.50000000
#define _RimMask_1_Strength_PreInversion 1.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_1_Strength_PostInversion 1.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_1_Smoothing 1.00000000
#define _RimMask_1_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_1_Smoothing_Osci_Slot 0.00000000
#define _RimMask_1_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_1_Smoothing_Osci_Value_End 1.00000000
#define _RimMask_2_Start 1.00000000
#define _RimMask_2_Start_Osci_Enabled 0.00000000
#define _RimMask_2_Start_Osci_Slot 0.00000000
#define _RimMask_2_Start_Osci_Value_Start 1.00000000
#define _RimMask_2_Start_Osci_Value_End 1.00000000
#define _RimMask_2_End 0.50000000
#define _RimMask_2_End_Osci_Enabled 0.00000000
#define _RimMask_2_End_Osci_Slot 0.00000000
#define _RimMask_2_End_Osci_Value_Start 0.50000000
#define _RimMask_2_End_Osci_Value_End 0.50000000
#define _RimMask_2_Strength_PreInversion 1.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_2_Strength_PostInversion 1.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_2_Smoothing 1.00000000
#define _RimMask_2_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_2_Smoothing_Osci_Slot 0.00000000
#define _RimMask_2_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_2_Smoothing_Osci_Value_End 1.00000000
#define _RimMask_3_Start 1.00000000
#define _RimMask_3_Start_Osci_Enabled 0.00000000
#define _RimMask_3_Start_Osci_Slot 0.00000000
#define _RimMask_3_Start_Osci_Value_Start 1.00000000
#define _RimMask_3_Start_Osci_Value_End 1.00000000
#define _RimMask_3_End 0.50000000
#define _RimMask_3_End_Osci_Enabled 0.00000000
#define _RimMask_3_End_Osci_Slot 0.00000000
#define _RimMask_3_End_Osci_Value_Start 0.50000000
#define _RimMask_3_End_Osci_Value_End 0.50000000
#define _RimMask_3_Strength_PreInversion 1.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_3_Strength_PostInversion 1.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_3_Smoothing 1.00000000
#define _RimMask_3_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_3_Smoothing_Osci_Slot 0.00000000
#define _RimMask_3_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_3_Smoothing_Osci_Value_End 1.00000000
#define _RimMask_4_Start 1.00000000
#define _RimMask_4_Start_Osci_Enabled 0.00000000
#define _RimMask_4_Start_Osci_Slot 0.00000000
#define _RimMask_4_Start_Osci_Value_Start 1.00000000
#define _RimMask_4_Start_Osci_Value_End 1.00000000
#define _RimMask_4_End 0.50000000
#define _RimMask_4_End_Osci_Enabled 0.00000000
#define _RimMask_4_End_Osci_Slot 0.00000000
#define _RimMask_4_End_Osci_Value_Start 0.50000000
#define _RimMask_4_End_Osci_Value_End 0.50000000
#define _RimMask_4_Strength_PreInversion 1.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _RimMask_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _RimMask_4_Strength_PostInversion 1.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _RimMask_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define _RimMask_4_Smoothing 1.00000000
#define _RimMask_4_Smoothing_Osci_Enabled 0.00000000
#define _RimMask_4_Smoothing_Osci_Slot 0.00000000
#define _RimMask_4_Smoothing_Osci_Value_Start 1.00000000
#define _RimMask_4_Smoothing_Osci_Value_End 1.00000000
#define _DistanceMask_1_Distance_Start 1.00000000
#define _DistanceMask_1_Distance_Start_Osci_Enabled 0.00000000
#define _DistanceMask_1_Distance_Start_Osci_Slot 0.00000000
#define _DistanceMask_1_Distance_Start_Osci_Value_Start 1.00000000
#define _DistanceMask_1_Distance_Start_Osci_Value_End 1.00000000
#define _DistanceMask_1_Distance_End 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Enabled 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Slot 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Value_Start 0.00000000
#define _DistanceMask_1_Distance_End_Osci_Value_End 0.00000000
#define _DistanceMask_1_Strength_PreInversion 1.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _DistanceMask_1_Strength_PostInversion 1.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _DistanceMask_2_Distance_Start 1.00000000
#define _DistanceMask_2_Distance_Start_Osci_Enabled 0.00000000
#define _DistanceMask_2_Distance_Start_Osci_Slot 0.00000000
#define _DistanceMask_2_Distance_Start_Osci_Value_Start 1.00000000
#define _DistanceMask_2_Distance_Start_Osci_Value_End 1.00000000
#define _DistanceMask_2_Distance_End 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Enabled 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Slot 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Value_Start 0.00000000
#define _DistanceMask_2_Distance_End_Osci_Value_End 0.00000000
#define _DistanceMask_2_Strength_PreInversion 1.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _DistanceMask_2_Strength_PostInversion 1.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _DistanceMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre 20.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Enabled 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Slot 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_Start 20.00000000
#define _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_End 20.00000000
#define _TouchReactivityInteractionMask_Intensity 1.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Enabled 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Slot 0.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Value_Start 1.00000000
#define _TouchReactivityInteractionMask_Intensity_Osci_Value_End 1.00000000
#define _BlendMask_1_BlendMode 0.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_1_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_1_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_1_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_1_Opacity 1.00000000
#define _BlendMask_1_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_1_Opacity_Osci_Slot 0.00000000
#define _BlendMask_1_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_1_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_1_Strength_PreInversion 1.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_1_Strength_PostInversion 1.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_2_BlendMode 0.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_2_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_2_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_2_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_2_Opacity 1.00000000
#define _BlendMask_2_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_2_Opacity_Osci_Slot 0.00000000
#define _BlendMask_2_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_2_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_2_Strength_PreInversion 1.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_2_Strength_PostInversion 1.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_3_BlendMode 0.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_3_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_3_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_3_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_3_Opacity 1.00000000
#define _BlendMask_3_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_3_Opacity_Osci_Slot 0.00000000
#define _BlendMask_3_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_3_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_3_Strength_PreInversion 1.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_3_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_3_Strength_PostInversion 1.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_3_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_4_BlendMode 0.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_4_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_4_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_4_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_4_Opacity 1.00000000
#define _BlendMask_4_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_4_Opacity_Osci_Slot 0.00000000
#define _BlendMask_4_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_4_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_4_Strength_PreInversion 1.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_4_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_4_Strength_PostInversion 1.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_4_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_5_BlendMode 0.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_5_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_5_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_5_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_5_Opacity 1.00000000
#define _BlendMask_5_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_5_Opacity_Osci_Slot 0.00000000
#define _BlendMask_5_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_5_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_5_Strength_PreInversion 1.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_5_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_5_Strength_PostInversion 1.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_5_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_6_BlendMode 0.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_6_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_6_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_6_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_6_Opacity 1.00000000
#define _BlendMask_6_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_6_Opacity_Osci_Slot 0.00000000
#define _BlendMask_6_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_6_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_6_Strength_PreInversion 1.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_6_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_6_Strength_PostInversion 1.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_6_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_7_BlendMode 0.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_7_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_7_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_7_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_7_Opacity 1.00000000
#define _BlendMask_7_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_7_Opacity_Osci_Slot 0.00000000
#define _BlendMask_7_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_7_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_7_Strength_PreInversion 1.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_7_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_7_Strength_PostInversion 1.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_7_Strength_PostInversion_Osci_Value_End 1.00000000
#define _BlendMask_8_BlendMode 0.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel 0.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Inverted 0.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Strength 1.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Contrast 1.00000000
#define _BlendMask_8_Mask_Fore_MaskChannel_Brightness 0.00000000
#define _BlendMask_8_Mask_Back_MaskChannel 0.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Inverted 0.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Strength 1.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Contrast 1.00000000
#define _BlendMask_8_Mask_Back_MaskChannel_Brightness 0.00000000
#define _BlendMask_8_Opacity 1.00000000
#define _BlendMask_8_Opacity_Osci_Enabled 0.00000000
#define _BlendMask_8_Opacity_Osci_Slot 0.00000000
#define _BlendMask_8_Opacity_Osci_Value_Start 1.00000000
#define _BlendMask_8_Opacity_Osci_Value_End 1.00000000
#define _BlendMask_8_Strength_PreInversion 1.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Enabled 0.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Slot 0.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _BlendMask_8_Strength_PreInversion_Osci_Value_End 1.00000000
#define _BlendMask_8_Strength_PostInversion 1.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Enabled 0.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Slot 0.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _BlendMask_8_Strength_PostInversion_Osci_Value_End 1.00000000
#define _ScrollMask_1_Speed 1.00000000
#define _ScrollMask_1_Speed_TimeBase 0.00000000
#define _ScrollMask_1_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _ScrollMask_1_Frequency 1.00000000
#define _ScrollMask_1_Frequency_Osci_Enabled 0.00000000
#define _ScrollMask_1_Frequency_Osci_Slot 0.00000000
#define _ScrollMask_1_Frequency_Osci_Value_Start 1.00000000
#define _ScrollMask_1_Frequency_Osci_Value_End 1.00000000
#define _ScrollMask_1_Gap 0.50000000
#define _ScrollMask_1_Gap_Osci_Enabled 0.00000000
#define _ScrollMask_1_Gap_Osci_Slot 0.00000000
#define _ScrollMask_1_Gap_Osci_Value_Start 0.50000000
#define _ScrollMask_1_Gap_Osci_Value_End 0.50000000
#define _ScrollMask_1_Offset 0.00000000
#define _ScrollMask_1_Offset_Osci_Enabled 0.00000000
#define _ScrollMask_1_Offset_Osci_Slot 0.00000000
#define _ScrollMask_1_Offset_Osci_Value_Start 0.00000000
#define _ScrollMask_1_Offset_Osci_Value_End 0.00000000
#define _ScrollMask_1_Strength_PreInversion 1.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Enabled 0.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Slot 0.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_1_Strength_PreInversion_Osci_Value_End 1.00000000
#define _ScrollMask_1_Strength_PostInversion 1.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _ScrollMask_2_Speed 1.00000000
#define _ScrollMask_2_Speed_TimeBase 0.00000000
#define _ScrollMask_2_Axis float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _ScrollMask_2_Frequency 1.00000000
#define _ScrollMask_2_Frequency_Osci_Enabled 0.00000000
#define _ScrollMask_2_Frequency_Osci_Slot 0.00000000
#define _ScrollMask_2_Frequency_Osci_Value_Start 1.00000000
#define _ScrollMask_2_Frequency_Osci_Value_End 1.00000000
#define _ScrollMask_2_Gap 0.50000000
#define _ScrollMask_2_Gap_Osci_Enabled 0.00000000
#define _ScrollMask_2_Gap_Osci_Slot 0.00000000
#define _ScrollMask_2_Gap_Osci_Value_Start 0.50000000
#define _ScrollMask_2_Gap_Osci_Value_End 0.50000000
#define _ScrollMask_2_Offset 0.00000000
#define _ScrollMask_2_Offset_Osci_Enabled 0.00000000
#define _ScrollMask_2_Offset_Osci_Slot 0.00000000
#define _ScrollMask_2_Offset_Osci_Value_Start 0.00000000
#define _ScrollMask_2_Offset_Osci_Value_End 0.00000000
#define _ScrollMask_2_Strength_PreInversion 1.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Enabled 0.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Slot 0.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_2_Strength_PreInversion_Osci_Value_End 1.00000000
#define _ScrollMask_2_Strength_PostInversion 1.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _ScrollMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _MassBlendMask_1_BlendMode 0.00000000
#define _MassBlendMask_1_Strength 1.00000000
#define _MassBlendMask_1_Strength_Osci_Enabled 0.00000000
#define _MassBlendMask_1_Strength_Osci_Slot 0.00000000
#define _MassBlendMask_1_Strength_Osci_Value_Start 1.00000000
#define _MassBlendMask_1_Strength_Osci_Value_End 1.00000000
#define _MassBlendMask_1_Strength_PostInversion 1.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Slot 0.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MassBlendMask_1_Strength_PostInversion_Osci_Value_End 1.00000000
#define _MassBlendMask_1_1_MaskChannel 0.00000000
#define _MassBlendMask_1_1_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_1_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_1_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_1_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_2_MaskChannel 0.00000000
#define _MassBlendMask_1_2_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_2_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_2_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_2_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_3_MaskChannel 0.00000000
#define _MassBlendMask_1_3_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_3_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_3_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_3_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_4_MaskChannel 0.00000000
#define _MassBlendMask_1_4_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_4_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_4_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_4_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_5_MaskChannel 0.00000000
#define _MassBlendMask_1_5_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_5_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_5_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_5_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_6_MaskChannel 0.00000000
#define _MassBlendMask_1_6_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_6_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_6_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_6_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_7_MaskChannel 0.00000000
#define _MassBlendMask_1_7_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_7_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_7_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_7_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_1_8_MaskChannel 0.00000000
#define _MassBlendMask_1_8_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_1_8_MaskChannel_Strength 1.00000000
#define _MassBlendMask_1_8_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_1_8_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_BlendMode 0.00000000
#define _MassBlendMask_2_Strength 1.00000000
#define _MassBlendMask_2_Strength_Osci_Enabled 0.00000000
#define _MassBlendMask_2_Strength_Osci_Slot 0.00000000
#define _MassBlendMask_2_Strength_Osci_Value_Start 1.00000000
#define _MassBlendMask_2_Strength_Osci_Value_End 1.00000000
#define _MassBlendMask_2_Strength_PostInversion 1.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Enabled 0.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Slot 0.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Value_Start 1.00000000
#define _MassBlendMask_2_Strength_PostInversion_Osci_Value_End 1.00000000
#define _MassBlendMask_2_1_MaskChannel 0.00000000
#define _MassBlendMask_2_1_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_1_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_1_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_1_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_2_MaskChannel 0.00000000
#define _MassBlendMask_2_2_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_2_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_2_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_2_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_3_MaskChannel 0.00000000
#define _MassBlendMask_2_3_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_3_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_3_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_3_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_4_MaskChannel 0.00000000
#define _MassBlendMask_2_4_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_4_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_4_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_4_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_5_MaskChannel 0.00000000
#define _MassBlendMask_2_5_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_5_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_5_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_5_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_6_MaskChannel 0.00000000
#define _MassBlendMask_2_6_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_6_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_6_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_6_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_7_MaskChannel 0.00000000
#define _MassBlendMask_2_7_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_7_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_7_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_7_MaskChannel_Brightness 0.00000000
#define _MassBlendMask_2_8_MaskChannel 0.00000000
#define _MassBlendMask_2_8_MaskChannel_Inverted 0.00000000
#define _MassBlendMask_2_8_MaskChannel_Strength 1.00000000
#define _MassBlendMask_2_8_MaskChannel_Contrast 1.00000000
#define _MassBlendMask_2_8_MaskChannel_Brightness 0.00000000
#define _LTCGI 0.00000000
#define _GrabPass_Distortion_Amount 0.01000000
#define _GrabPass_Distortion_Amount_MaskChannel 0.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Inverted 0.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Strength 1.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Contrast 1.00000000
#define _GrabPass_Distortion_Amount_MaskChannel_Brightness 0.00000000
#define _GrabPass_Zoom_Amount 1.00000000
#define _GrabPass_Blur_Enabled 0.00000000
#define _GrabPass_Blur_Dispersion 2.00000000
#define _GrabPass_Blur_Weight_MaskChannel 0.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Inverted 0.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Strength 1.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Contrast 1.00000000
#define _GrabPass_Blur_Weight_MaskChannel_Brightness 0.00000000
#define is_GrabPass_Tint_Texture_set false
#define _GrabPass_Tint_Texture_AlphaIsMask 0.00000000
#define _GrabPass_Tint_Texture_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _GrabPass_Tint_Texture_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _GrabPass_Tint_Texture_ScrollSpeed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _GrabPass_Tint_Texture_ScrollSpeed_TimeBase 0.00000000
#define _GrabPass_Tint_Texture_UVBus 0.00000000
#define _GrabPass_Tint_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _GrabPass_Tint_MaskChannel 0.00000000
#define _GrabPass_Tint_MaskChannel_Inverted 0.00000000
#define _GrabPass_Tint_MaskChannel_Strength 1.00000000
#define _GrabPass_Tint_MaskChannel_Contrast 1.00000000
#define _GrabPass_Tint_MaskChannel_Brightness 0.00000000
#define _Glitter_UVBus 0.00000000
#define _Glitter_Density 700.00000000
#define _Glitter_Amount 0.50000000
#define _Glitter_Amount_Osci_Enabled 0.00000000
#define _Glitter_Amount_Osci_Slot 0.00000000
#define _Glitter_Amount_Osci_Value_Start 0.50000000
#define _Glitter_Amount_Osci_Value_End 0.50000000
#define _Glitter_Disorder 1.00000000
#define _Glitter_AppearsOnMaterial 0.00000000
#define _Glitter_MaskChannel 0.00000000
#define _Glitter_MaskChannel_Inverted 0.00000000
#define _Glitter_MaskChannel_Strength 1.00000000
#define _Glitter_MaskChannel_Contrast 1.00000000
#define _Glitter_MaskChannel_Brightness 0.00000000
#define _Glitter_Color float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Glitter_Color_Osci_Enabled 0.00000000
#define _Glitter_Color_Osci_Slot 0.00000000
#define _Glitter_Color_Osci_Color_Start float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Glitter_Color_Osci_Color_End float4(1.00000000, 1.00000000, 1.00000000, 1.00000000)
#define _Glitter_Color_FromAlbedo 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Enabled 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Slot 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Value_Start 0.00000000
#define _Glitter_Color_FromAlbedo_Osci_Value_End 0.00000000
#define _Glitter_Opacity_MinMax float4(0.50000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Opacity_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Opacity_MinMax_Osci_Slot 0.00000000
#define _Glitter_Opacity_MinMax_Osci_Color_Start float4(0.50000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Opacity_MinMax_Osci_Color_End float4(0.50000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Size_MinMax float4(0.25000000, 0.50000000, 0.00000000, 0.00000000)
#define _Glitter_Size_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Size_MinMax_Osci_Slot 0.00000000
#define _Glitter_Size_MinMax_Osci_Color_Start float4(0.25000000, 0.50000000, 0.00000000, 0.00000000)
#define _Glitter_Size_MinMax_Osci_Color_End float4(0.25000000, 0.50000000, 0.00000000, 0.00000000)
#define _Glitter_Brightness_MinMax float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Brightness_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Brightness_MinMax_Osci_Slot 0.00000000
#define _Glitter_Brightness_MinMax_Osci_Color_Start float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Brightness_MinMax_Osci_Color_End float4(0.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Enabled 0.00000000
#define is_Glitter_Texture_Map_set false
#define _Glitter_Texture_Map_AlphaIsMask 1.00000000
#define _Glitter_Texture_Map_Tiling float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Map_Offset float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Zoom_MinMax float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Zoom_MinMax_Osci_Enabled 0.00000000
#define _Glitter_Texture_Zoom_MinMax_Osci_Slot 0.00000000
#define _Glitter_Texture_Zoom_MinMax_Osci_Color_Start float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Zoom_MinMax_Osci_Color_End float4(1.00000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_Texture_Rotation_Random_Enabled 1.00000000
#define _Glitter_Texture_Rotation_Speed 0.00000000
#define _Glitter_Texture_Rotation_Speed_TimeBase 0.00000000
#define _Glitter_HSV_Enabled 0.00000000
#define _Glitter_HSV_Hue_MinMax float4(0.00000000, 0.20000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Hue_MinMax_Osci_Enabled 0.00000000
#define _Glitter_HSV_Hue_MinMax_Osci_Slot 0.00000000
#define _Glitter_HSV_Hue_MinMax_Osci_Color_Start float4(0.00000000, 0.20000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Hue_MinMax_Osci_Color_End float4(0.00000000, 0.20000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Saturation_MinMax float4(-0.10000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Saturation_MinMax_Osci_Enabled 0.00000000
#define _Glitter_HSV_Saturation_MinMax_Osci_Slot 0.00000000
#define _Glitter_HSV_Saturation_MinMax_Osci_Color_Start float4(-0.10000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Saturation_MinMax_Osci_Color_End float4(-0.10000000, 1.00000000, 0.00000000, 0.00000000)
#define _Glitter_HSV_Hue_Speed 0.00000000
#define _Glitter_HSV_Hue_Speed_TimeBase 0.00000000
#define _Glitter_HSV_Hue_Shift 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Enabled 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Slot 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Value_Start 0.00000000
#define _Glitter_HSV_Hue_Shift_Osci_Value_End 0.00000000
#define _Glitter_AutoBlink_Speed 3.00000000
#define _Glitter_AutoBlink_Speed_TimeBase 0.00000000
#define _Glitter_AutoBlink_Randomness 1000.00000000
#define _Glitter_ManualBlink_Enabled 0.00000000
#define _Glitter_ManualBlink_Offset 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Enabled 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Slot 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Value_Start 0.00000000
#define _Glitter_ManualBlink_Offset_Osci_Value_End 0.00000000
#define _Glitter_ManualBlink_Offset_Randomness 20000.00000000
#define _Glitter_UV_Scroll_Speed float4(0.00000000, 0.00000000, 0.00000000, 0.00000000)
#define _Glitter_UV_Scroll_Speed_TimeBase 0.00000000
#define _PostProcessHSV_Hue_Shift 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Enabled 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Slot 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Value_Start 0.00000000
#define _PostProcessHSV_Hue_Shift_Osci_Value_End 0.00000000
#define _PostProcessHSV_Sat_Shift 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Enabled 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Slot 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Value_Start 0.00000000
#define _PostProcessHSV_Sat_Shift_Osci_Value_End 0.00000000
#define _PostProcessHSV_Value_Shift 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Enabled 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Slot 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Value_Start 0.00000000
#define _PostProcessHSV_Value_Shift_Osci_Value_End 0.00000000
#define _PostProcessHSV_Hue_Speed 0.00000000
#define _PostProcessHSV_Hue_Speed_TimeBase 0.00000000
#define _DistanceDither_Enabled 0.00000000
#define _DistanceDither_Separate_Faces 1.00000000
#define _DistanceDither_Front_Distance_Start 0.10000000
#define _DistanceDither_Front_Distance_End 0.00000000
#define _DistanceDither_Back_Distance_Start 0.01000000
#define _DistanceDither_Back_Distance_End 0.00000000
#define _DistanceDither_Front_Bias 0.00000000
#define _DistanceDither_Back_Bias 0.00000000
#define _DistanceDither_MaskChannel 0.00000000
#define _DistanceDither_MaskChannel_Inverted 0.00000000
#define _DistanceDither_MaskChannel_Strength 1.00000000
#define _DistanceDither_MaskChannel_Contrast 1.00000000
#define _DistanceDither_MaskChannel_Brightness 0.00000000
#define _BackfaceFill_Enabled 0.00000000
#define _BackfaceFill_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _PreviewMirror 0.00000000
#define _Cutoff 0.50000000
#define _Cutoff_Osci_Enabled 0.00000000
#define _Cutoff_Osci_Slot 0.00000000
#define _Cutoff_Osci_Value_Start 0.50000000
#define _Cutoff_Osci_Value_End 0.50000000
#define _FlipNormalsOnBackFacingTris 1.00000000
#define _Osci_Slot_1_Type 0.00000000
#define _Osci_Slot_1_Speed 1.00000000
#define _Osci_Slot_1_Speed_TimeBase 0.00000000
#define _Osci_Slot_1_Square_DutyCycle 0.50000000
#define _Osci_Slot_1_Sine_HalfWave 0.00000000
#define _Osci_Slot_2_Type 0.00000000
#define _Osci_Slot_2_Speed 1.00000000
#define _Osci_Slot_2_Speed_TimeBase 0.00000000
#define _Osci_Slot_2_Square_DutyCycle 0.50000000
#define _Osci_Slot_2_Sine_HalfWave 0.00000000
#define _Osci_Slot_3_Type 0.00000000
#define _Osci_Slot_3_Speed 1.00000000
#define _Osci_Slot_3_Speed_TimeBase 0.00000000
#define _Osci_Slot_3_Square_DutyCycle 0.50000000
#define _Osci_Slot_3_Sine_HalfWave 0.00000000
#define _Osci_Slot_4_Type 0.00000000
#define _Osci_Slot_4_Speed 1.00000000
#define _Osci_Slot_4_Speed_TimeBase 0.00000000
#define _Osci_Slot_4_Square_DutyCycle 0.50000000
#define _Osci_Slot_4_Sine_HalfWave 0.00000000
#define _Osci_Slot_5_Type 0.00000000
#define _Osci_Slot_5_Speed 1.00000000
#define _Osci_Slot_5_Speed_TimeBase 0.00000000
#define _Osci_Slot_5_Square_DutyCycle 0.50000000
#define _Osci_Slot_5_Sine_HalfWave 0.00000000
#define _Osci_Slot_6_Type 0.00000000
#define _Osci_Slot_6_Speed 1.00000000
#define _Osci_Slot_6_Speed_TimeBase 0.00000000
#define _Osci_Slot_6_Square_DutyCycle 0.50000000
#define _Osci_Slot_6_Sine_HalfWave 0.00000000
#define _Osci_ALBand_1_Band 0.00000000
#define _Osci_ALBand_1_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_1_Smoothness_Level 0.00000000
#define _Osci_ALBand_1_Fallback_Type 0.00000000
#define _Osci_ALBand_1_Fallback_Osci 0.00000000
#define _Osci_ALBand_1_Fallback_Value 0.00000000
#define _Osci_ALBand_2_Band 0.00000000
#define _Osci_ALBand_2_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_2_Smoothness_Level 0.00000000
#define _Osci_ALBand_2_Fallback_Type 0.00000000
#define _Osci_ALBand_2_Fallback_Osci 0.00000000
#define _Osci_ALBand_2_Fallback_Value 0.00000000
#define _Osci_ALBand_3_Band 0.00000000
#define _Osci_ALBand_3_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_3_Smoothness_Level 0.00000000
#define _Osci_ALBand_3_Fallback_Type 0.00000000
#define _Osci_ALBand_3_Fallback_Osci 0.00000000
#define _Osci_ALBand_3_Fallback_Value 0.00000000
#define _Osci_ALBand_4_Band 0.00000000
#define _Osci_ALBand_4_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_4_Smoothness_Level 0.00000000
#define _Osci_ALBand_4_Fallback_Type 0.00000000
#define _Osci_ALBand_4_Fallback_Osci 0.00000000
#define _Osci_ALBand_4_Fallback_Value 0.00000000
#define _Osci_ALBand_5_Band 0.00000000
#define _Osci_ALBand_5_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_5_Smoothness_Level 0.00000000
#define _Osci_ALBand_5_Fallback_Type 0.00000000
#define _Osci_ALBand_5_Fallback_Osci 0.00000000
#define _Osci_ALBand_5_Fallback_Value 0.00000000
#define _Osci_ALBand_6_Band 0.00000000
#define _Osci_ALBand_6_Smoothness_Enabled 0.00000000
#define _Osci_ALBand_6_Smoothness_Level 0.00000000
#define _Osci_ALBand_6_Fallback_Type 0.00000000
#define _Osci_ALBand_6_Fallback_Osci 0.00000000
#define _Osci_ALBand_6_Fallback_Value 0.00000000
#define _Osci_ALEnergy_1_Smoothness_Enabled 1.00000000
#define _Osci_ALEnergy_1_Smoothness_Level 1.00000000
#define _Osci_ALEnergy_1_Fallback_Type 0.00000000
#define _Osci_ALEnergy_1_Fallback_Osci 0.00000000
#define _Osci_ALEnergy_1_Fallback_Value 0.00000000
#define _Osci_ALEnergy_2_Smoothness_Enabled 1.00000000
#define _Osci_ALEnergy_2_Smoothness_Level 1.00000000
#define _Osci_ALEnergy_2_Fallback_Type 0.00000000
#define _Osci_ALEnergy_2_Fallback_Osci 0.00000000
#define _Osci_ALEnergy_2_Fallback_Value 0.00000000
#define _Osci_Mask_1_MaskChannel 0.00000000
#define _Osci_Mask_1_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_1_MaskChannel_Strength 1.00000000
#define _Osci_Mask_1_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_1_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_2_MaskChannel 0.00000000
#define _Osci_Mask_2_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_2_MaskChannel_Strength 1.00000000
#define _Osci_Mask_2_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_2_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_3_MaskChannel 0.00000000
#define _Osci_Mask_3_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_3_MaskChannel_Strength 1.00000000
#define _Osci_Mask_3_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_3_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_4_MaskChannel 0.00000000
#define _Osci_Mask_4_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_4_MaskChannel_Strength 1.00000000
#define _Osci_Mask_4_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_4_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_5_MaskChannel 0.00000000
#define _Osci_Mask_5_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_5_MaskChannel_Strength 1.00000000
#define _Osci_Mask_5_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_5_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_6_MaskChannel 0.00000000
#define _Osci_Mask_6_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_6_MaskChannel_Strength 1.00000000
#define _Osci_Mask_6_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_6_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_7_MaskChannel 0.00000000
#define _Osci_Mask_7_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_7_MaskChannel_Strength 1.00000000
#define _Osci_Mask_7_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_7_MaskChannel_Brightness 0.00000000
#define _Osci_Mask_8_MaskChannel 0.00000000
#define _Osci_Mask_8_MaskChannel_Inverted 0.00000000
#define _Osci_Mask_8_MaskChannel_Strength 1.00000000
#define _Osci_Mask_8_MaskChannel_Contrast 1.00000000
#define _Osci_Mask_8_MaskChannel_Brightness 0.00000000
#define _TimeBase_AL_Slot_1_Type 0.00000000
#define _TimeBase_AL_Slot_1_Band 0.00000000
#define _TimeBase_AL_Slot_1_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_1_AddTime 0.00000000
#define _TimeBase_AL_Slot_1_Strength 1.00000000
#define _TimeBase_AL_Slot_2_Type 0.00000000
#define _TimeBase_AL_Slot_2_Band 0.00000000
#define _TimeBase_AL_Slot_2_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_2_AddTime 0.00000000
#define _TimeBase_AL_Slot_2_Strength 1.00000000
#define _TimeBase_AL_Slot_3_Type 0.00000000
#define _TimeBase_AL_Slot_3_Band 0.00000000
#define _TimeBase_AL_Slot_3_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_3_AddTime 0.00000000
#define _TimeBase_AL_Slot_3_Strength 1.00000000
#define _TimeBase_AL_Slot_4_Type 0.00000000
#define _TimeBase_AL_Slot_4_Band 0.00000000
#define _TimeBase_AL_Slot_4_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_4_AddTime 0.00000000
#define _TimeBase_AL_Slot_4_Strength 1.00000000
#define _TimeBase_AL_Slot_5_Type 0.00000000
#define _TimeBase_AL_Slot_5_Band 0.00000000
#define _TimeBase_AL_Slot_5_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_5_AddTime 0.00000000
#define _TimeBase_AL_Slot_5_Strength 1.00000000
#define _TimeBase_AL_Slot_6_Type 0.00000000
#define _TimeBase_AL_Slot_6_Band 0.00000000
#define _TimeBase_AL_Slot_6_UseTimeAsFallback 0.00000000
#define _TimeBase_AL_Slot_6_AddTime 0.00000000
#define _TimeBase_AL_Slot_6_Strength 1.00000000
#define _Diffuse_Type 0.00000000
#define _Diffuse_Ramp_1_Start 0.00000000
#define _Diffuse_Ramp_1_End 1.00000000
#define _Diffuse_Ramp_1_Offset 0.00000000
#define _Diffuse_Ramp_2_Start 0.00000000
#define _Diffuse_Ramp_2_End 1.00000000
#define _Diffuse_Ramp_2_Offset 0.00000000
#define _Diffuse_Ramp_Blend 0.00000000
#define is_Diffuse_LUT_Texture_set false
#define _Diffuse_Shadow_Tint_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _LightProbeWeight 1.00000000
#define _LightProbe_Shadow_Tint_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _LightColor_Weight 1.00000000
#define _FallbackLight_Enabled 0.00000000
#define _FallbackLight_Direction float4(0.57735030, 0.57735030, 0.57735030, 1.00000000)
#define _FallbackLight_Color float4(1.00000000, 0.90466110, 0.67244320, 1.00000000)
#define _Outline_Enabled 0.00000000
#define _Outline_Size 0.01000000
#define _Outline_Color float4(0.00000000, 0.00000000, 0.00000000, 1.00000000)
#define _Outline_Mask_Cutoff 0.50000000
#define _Outline_MaskChannel 0.00000000
#define _Outline_MaskChannel_Inverted 0.00000000
#define _Outline_MaskChannel_Strength 1.00000000
#define _Outline_MaskChannel_Contrast 1.00000000
#define _Outline_MaskChannel_Brightness 0.00000000
#define _Outline_AppearsOnMaterial 0.00000000
#define _EarlyZ_Enabled 0.00000000
#define _AudioLink_Disabled 0.00000000
#define _VFGOO_SHADOWCASTER_DISABLED 0.00000000
#define _VFGOO_ENABLE_UV_BUS_1 0.00000000
#define _VFGOO_ENABLE_UV_BUS_2 0.00000000
#define _VFGOO_ENABLE_UV_BUS_3 0.00000000
#define _VFGOO_ENABLE_UV_BUS_4 0.00000000
#define _VFGOO_ENABLE_UV_BUS_5 0.00000000
#define _VFGOO_ENABLE_UV_BUS_6 0.00000000
#define _VFGOO_ENABLE_MASK_SCROLL_1 0.00000000
#define _VFGOO_ENABLE_MASK_SCROLL_2 0.00000000
#define _VFGOO_ENABLE_MASK_TOUCH_REACTIVITY 0.00000000
#define _VFGOO_ENABLE_MASK_POINT_LIGHTS 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_1 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_2 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_3 0.00000000
#define _VFGOO_ENABLE_MASK_RIM_4 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_1 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_2 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_3 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_4 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_5 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_6 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_7 0.00000000
#define _VFGOO_ENABLE_MASK_CAPSULE_8 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_1 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_2 1.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_3 1.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_4 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_5 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_6 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_7 0.00000000
#define _VFGOO_ENABLE_MASK_TEXTURE_8 0.00000000
#define _VFGOO_ENABLE_MASK_DISTANCE_1 0.00000000
#define _VFGOO_ENABLE_MASK_DISTANCE_2 0.00000000
#define _VFGOO_ENABLE_MASK_MASSBLEND_1 0.00000000
#define _VFGOO_ENABLE_MASK_MASSBLEND_2 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_1 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_2 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_3 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_4 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_5 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_6 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_7 0.00000000
#define _VFGOO_ENABLE_MASK_BLEND_8 0.00000000
#define _VFGOO_ENABLE_GLITTER 0.00000000
#define _VFGOO_ENABLE_HSV_POSTPROCESSING 0.00000000

#define EDITOR_BRANCH

// NOTE(valuef):
// @LightprobeExperiment
// For over a year I've been running a shader that _always_ samples SH in the PS and doesn't care about the 
// LIGHTPROBE_SH keyword - it acts as if it's always enabled.
// So why not try this on the goo shader as well? We'd save on a multi compile keyword resulting in faster build
// times!
// 2023-10-31
#define LIGHTPROBE_SH
#define UNITY_SAMPLE_FULL_SH_PER_PIXEL

static bool IS_VERTEX_SHADER = false;
static bool IS_SHADOWCASTER = false;
static bool IS_FORWARD_ADD = false;
static bool IS_FORWARD_BASE = false;

#define UNITY_SPECCUBE_LOD_STEPS 6

/*
// @LightprobeExperiment
#ifndef UNITY_SAMPLE_FULL_SH_PER_PIXEL
  // Lightmap UVs and ambient color from SHL2 are shared in the vertex to pixel interpolators. Do
  // full SH evaluation in the pixel shader when static lightmap and LIGHTPROBE_SH is enabled.
  #define UNITY_SAMPLE_FULL_SH_PER_PIXEL (LIGHTMAP_ON && LIGHTPROBE_SH)
#endif
*/

#ifndef UNITY_BRDF_GGX
  #define UNITY_BRDF_GGX 1
#endif

// Orthnormalize Tangent Space basis per-pixel Necessary to support high-quality normal-maps.
// Compatible with Maya and Marmoset.  However xNormal expects oldschool non-orthnormalized basis -
// essentially preventing good looking normal-maps :( Due to the fact that xNormal is probably _the
// most used tool to bake out normal-maps today_ we have to stick to old ways for now.
//
// Disabled by default, until xNormal has an option to bake proper normal-maps.
#ifndef UNITY_TANGENT_ORTHONORMALIZE
  #define UNITY_TANGENT_ORTHONORMALIZE 0
#endif

#include "UnityCG.cginc"

// NOTE(valuef): Inlined AudioLink.cginc 1.2.0 header.
// Originally was #include "Packages/com.llealloo.audiolink/Runtime/Shaders/AudioLink.cginc"
// Retrieved 2023-11-14
#ifndef AUDIOLINK_CGINC_INCLUDED
    #define AUDIOLINK_CGINC_INCLUDED

    // Map of where features in AudioLink are.
    #define ALPASS_DFT                      uint2(0,4)  //Size: 128, 2
    #define ALPASS_WAVEFORM                 uint2(0,6)  //Size: 128, 16
    #define ALPASS_AUDIOLINK                uint2(0,0)  //Size: 128, 4
    #define ALPASS_AUDIOBASS                uint2(0,0)  //Size: 128, 1
    #define ALPASS_AUDIOLOWMIDS             uint2(0,1)  //Size: 128, 1
    #define ALPASS_AUDIOHIGHMIDS            uint2(0,2)  //Size: 128, 1
    #define ALPASS_AUDIOTREBLE              uint2(0,3)  //Size: 128, 1
    #define ALPASS_AUDIOLINKHISTORY         uint2(1,0)  //Size: 127, 4
    #define ALPASS_GENERALVU                uint2(0,22) //Size: 12, 1
    #define ALPASS_GENERALVU_INSTANCE_TIME  uint2(2,22)
    #define ALPASS_GENERALVU_LOCAL_TIME     uint2(3,22)
    #define ALPASS_GENERALVU_NETWORK_TIME   uint2(4,22)
    #define ALPASS_GENERALVU_PLAYERINFO     uint2(6,22)
    #define ALPASS_THEME_COLOR0             uint2(0,23)
    #define ALPASS_THEME_COLOR1             uint2(1,23)
    #define ALPASS_THEME_COLOR2             uint2(2,23)
    #define ALPASS_THEME_COLOR3             uint2(3,23)
    #define ALPASS_GENERALVU_UNIX_DAYS      uint2(5,23)
    #define ALPASS_GENERALVU_UNIX_SECONDS   uint2(6,23)
    #define ALPASS_GENERALVU_SOURCE_POS     uint2(7,23)
    #define ALPASS_MEDIASTATE               uint2(5,22)

    #define ALPASS_CCINTERNAL               uint2(12,22) //Size: 12, 2
    #define ALPASS_CCCOLORS                 uint2(25,22) //Size: 12, 1 (Note Color #0 is always black, Colors start at 1)
    #define ALPASS_CCSTRIP                  uint2(0,24)  //Size: 128, 1
    #define ALPASS_CCLIGHTS                 uint2(0,25)  //Size: 128, 2
    #define ALPASS_AUTOCORRELATOR           uint2(0,27)  //Size: 128, 1
    #define ALPASS_FILTEREDAUDIOLINK        uint2(0,28)  //Size: 16, 4
    #define ALPASS_CHRONOTENSITY            uint2(16,28) //Size: 8, 4
    #define ALPASS_FILTEREDVU               uint2(23,28) //Size: 4, 4
    #define ALPASS_FILTEREDVU_INTENSITY     uint2(24,28) //Size: 4, 1
    #define ALPASS_FILTEREDVU_MARKER        uint2(24,29) //Size: 4, 1
    #define ALPASS_GLOBAL_STRINGS           uint2(40,28) //Size: 8, 4

    // Some basic constants to use (Note, these should be compatible with
    // future version of AudioLink, but may change.
    #define AUDIOLINK_SAMPHIST              3069        // Internal use for algos, do not change.
    #define AUDIOLINK_SAMPLEDATA24          2046
    #define AUDIOLINK_EXPBINS               24
    #define AUDIOLINK_EXPOCT                10
    #define AUDIOLINK_ETOTALBINS            (AUDIOLINK_EXPBINS * AUDIOLINK_EXPOCT)
    #define AUDIOLINK_WIDTH                 128
    #define AUDIOLINK_SPS                   48000       // Samples per second
    #define AUDIOLINK_ROOTNOTE              0
    #define AUDIOLINK_4BAND_FREQFLOOR       0.123
    #define AUDIOLINK_4BAND_FREQCEILING     1
    #define AUDIOLINK_BOTTOM_FREQUENCY      13.75
    #define AUDIOLINK_BASE_AMPLITUDE        2.5
    #define AUDIOLINK_DELAY_COEFFICIENT_MIN 0.3
    #define AUDIOLINK_DELAY_COEFFICIENT_MAX 0.9
    #define AUDIOLINK_DFT_Q                 4.0
    #define AUDIOLINK_TREBLE_CORRECTION     5.0
    #define AUDIOLINK_4BAND_TARGET_RATE     90.0

    // Text constants
    #define AUDIOLINK_STRING_MAX_CHARS      32
    #define AUDIOLINK_STRING_LOCALPLAYER    0
    #define AUDIOLINK_STRING_MASTER         1
    #define AUDIOLINK_STRING_CUSTOM1        2
    #define AUDIOLINK_STRING_CUSTOM2        3

    // ColorChord constants
    #define COLORCHORD_EMAXBIN              192
    #define COLORCHORD_NOTE_CLOSEST         3.0
    #define COLORCHORD_NEW_NOTE_GAIN        8.0
    #define COLORCHORD_MAX_NOTES            10

    // We use glsl_mod for most calculations because it behaves better
    // on negative numbers, and in some situations actually outperforms
    // HLSL's modf().
    #ifndef glsl_mod
        #define glsl_mod(x,y) (((x)-(y)*floor((x)/(y))))
    #endif

    uniform float4               _AudioTexture_TexelSize;

    #ifdef SHADER_TARGET_SURFACE_ANALYSIS
        #define AUDIOLINK_STANDARD_INDEXING
    #endif

    // Mechanism to index into texture.
    #ifdef AUDIOLINK_STANDARD_INDEXING
        sampler2D _AudioTexture;
        #define AudioLinkData(xycoord) tex2Dlod(_AudioTexture, float4(uint2(xycoord) * _AudioTexture_TexelSize.xy, 0, 0))
    #else
        uniform Texture2D<float4>   _AudioTexture;
        #define AudioLinkData(xycoord) _AudioTexture[uint2(xycoord)]
    #endif

    // Convenient mechanism to read from the AudioLink texture that handles reading off the end of one line and onto the next above it.
    float4 AudioLinkDataMultiline(uint2 xycoord) { return AudioLinkData(uint2(xycoord.x % AUDIOLINK_WIDTH, xycoord.y + xycoord.x/AUDIOLINK_WIDTH)); }

    // Mechanism to sample between two adjacent pixels and lerp between them, like "linear" supesampling
    float4 AudioLinkLerp(float2 xy) { return lerp( AudioLinkData(xy), AudioLinkData(xy+int2(1,0)), frac( xy.x ) ); }

    // Same as AudioLinkLerp but properly handles multiline reading.
    float4 AudioLinkLerpMultiline(float2 xy) { return lerp(AudioLinkDataMultiline(xy), AudioLinkDataMultiline(xy+float2(1,0)), frac(xy.x)); }

    //Tests to see if Audio Link texture is available
    bool AudioLinkIsAvailable()
    {
        #if !defined(AUDIOLINK_STANDARD_INDEXING)
            int width, height;
            _AudioTexture.GetDimensions(width, height);
            return width > 16;
        #else
            return _AudioTexture_TexelSize.z > 16;
        #endif
    }

    // DEPRECATED! Use AudioLinkGetVersionMajor and AudioLinkGetVersionMinor() instead.
    //Get version of audiolink present in the world, 0 if no audiolink is present
    float AudioLinkGetVersion()
    {
        int2 dims;
        #if !defined(AUDIOLINK_STANDARD_INDEXING)
            _AudioTexture.GetDimensions(dims.x, dims.y);
        #else
            dims = _AudioTexture_TexelSize.zw;
        #endif

        if (dims.x >= 128)
            return AudioLinkData(ALPASS_GENERALVU).x;
        else if (dims.x > 16)
            return 1;
        else
            return 0;
    }

    float AudioLinkGetVersionMajor()
    {
        return AudioLinkData(ALPASS_GENERALVU).y;
    }

    float AudioLinkGetVersionMinor()
    {
        // If the major version is 1 or greater, we are using the new versioning system.
        if (AudioLinkGetVersionMajor() > 0)
        {
            return AudioLinkData(ALPASS_GENERALVU).w;
        }
        // Otherwise, defer to the old logic for determining version.
        else
        {
            int2 dims;
            #if !defined(AUDIOLINK_STANDARD_INDEXING)
                _AudioTexture.GetDimensions(dims.x, dims.y);
            #else
                dims = _AudioTexture_TexelSize.zw;
            #endif

            if (dims.x >= 128)
                return AudioLinkData(ALPASS_GENERALVU).x;
            else if (dims.x > 16)
                return 1;
            else
                return 0;
        }
    }

    // This pulls data from this texture.
    #define AudioLinkGetSelfPixelData(xy) _SelfTexture2D[xy]

    // Extra utility functions for time.
    uint AudioLinkDecodeDataAsUInt(uint2 indexloc)
    {
        uint4 rpx = AudioLinkData(indexloc);
        return rpx.x + rpx.y*1024 + rpx.z * 1048576 + rpx.w * 1073741824;
    }

    //Note: This will truncate time to every 134,217.728 seconds (~1.5 days of an instance being up) to prevent floating point aliasing.
    // if your code will alias sooner, you will need to use a different function.  It should be safe to use this on all times.
    float AudioLinkDecodeDataAsSeconds(uint2 indexloc)
    {
        uint time = AudioLinkDecodeDataAsUInt(indexloc) & 0x7ffffff;
        //Can't just divide by float.  Bug in Unity's HLSL compiler.
        return float(time / 1000) + float( time % 1000 ) / 1000.; 
    }

    #define ALDecodeDataAsSeconds( x ) AudioLinkDecodeDataAsSeconds( x )
    #define ALDecodeDataAsUInt( x ) AudioLinkDecodeDataAsUInt( x )

    float AudioLinkRemap(float t, float a, float b, float u, float v) { return ((t-a) / (b-a)) * (v-u) + u; }

    float3 AudioLinkHSVtoRGB(float3 HSV)
    {
        float3 RGB = 0;
        float C = HSV.z * HSV.y;
        float H = HSV.x * 6;
        float X = C * (1 - abs(fmod(H, 2) - 1));
        if (HSV.y != 0)
        {
            float I = floor(H);
            if (I == 0) { RGB = float3(C, X, 0); }
            else if (I == 1) { RGB = float3(X, C, 0); }
            else if (I == 2) { RGB = float3(0, C, X); }
            else if (I == 3) { RGB = float3(0, X, C); }
            else if (I == 4) { RGB = float3(X, 0, C); }
            else { RGB = float3(C, 0, X); }
        }
        float M = HSV.z - C;
        return RGB + M;
    }

    float3 AudioLinkCCtoRGB(float bin, float intensity, int rootNote)
    {
        float note = bin / AUDIOLINK_EXPBINS;

        float hue = 0.0;
        note *= 12.0;
        note = glsl_mod(4. - note + rootNote, 12.0);
        {
            if(note < 4.0)
            {
                //Needs to be YELLOW->RED
                hue = (note) / 24.0;
            }
            else if(note < 8.0)
            {
                //            [4]  [8]
                //Needs to be RED->BLUE
                hue = (note-2.0) / 12.0;
            }
            else
            {
                //             [8] [12]
                //Needs to be BLUE->YELLOW
                hue = (note - 4.0) / 8.0;
            }
        }
        float val = intensity - 0.1;
        return AudioLinkHSVtoRGB(float3(fmod(hue, 1.0), 1.0, clamp(val, 0.0, 1.0)));
    }

    // Sample the amplitude of a given frequency in the DFT, supports frequencies in [13.75; 14080].
    float4 AudioLinkGetAmplitudeAtFrequency(float hertz)
    {
        float note = AUDIOLINK_EXPBINS * log2(hertz / AUDIOLINK_BOTTOM_FREQUENCY);
        return AudioLinkLerpMultiline(ALPASS_DFT + float2(note, 0));
    }

    // Sample the amplitude of a given quartertone in an octave. Octave is in [0; 9] while quarter is [0; 23].
    float4 AudioLinkGetAmplitudeAtQuarterNote(float octave, float quarter)
    {
        return AudioLinkLerpMultiline(ALPASS_DFT + float2(octave * AUDIOLINK_EXPBINS + quarter, 0));
    }

    // Sample the amplitude of a given semitone in an octave. Octave is in [0; 9] while note is [0; 11].
    float4 AudioLinkGetAmplitudeAtNote(float octave, float note)
    {
        float quarter = note * 2.0;
        return AudioLinkGetAmplitudeAtQuarterNote(octave, quarter);
    }

    // Sample the amplitude of a given quartertone across all octaves. Quarter is [0; 23].
    float4 AudioLinkGetAmplitudesAtQuarterNote(float quarter)
    {
        float amplitude = 0;
        UNITY_UNROLL
        for (int i = 0; i < AUDIOLINK_EXPOCT; i++)
        {
            amplitude += AudioLinkGetAmplitudeAtQuarterNote(i,quarter);
        }
        return amplitude;
    }

    // Sample the amplitude of a given semitone across all octaves. Note is [0; 11].
    float4 AudioLinkGetAmplitudesAtNote(float note)
    {
        float quarter = note * 2.0;
        return AudioLinkGetAmplitudesAtQuarterNote(quarter);
    }

    // Get a reasonable drop-in replacement time value for _Time.y with the
    // given chronotensity index [0; 7] and AudioLink band [0; 3].
    float AudioLinkGetChronoTime(uint index, uint band)
    {
        return (AudioLinkDecodeDataAsUInt(ALPASS_CHRONOTENSITY + uint2(index, band))) / 100000.0;
    }

    // Get a chronotensity value in the interval [0; 1], modulated by the speed input, 
    // with the given chronotensity index [0; 7] and AudioLink band [0; 3].
    float AudioLinkGetChronoTimeNormalized(uint index, uint band, float speed)
    {
        return frac(AudioLinkGetChronoTime(index, band) * speed);
    }

    // Get a chronotensity value in the interval [0; interval], modulated by the speed input, 
    // with the given chronotensity index [0; 7] and AudioLink band [0; 3].
    float AudioLinkGetChronoTimeInterval(uint index, uint band, float speed, float interval)
    {
        return AudioLinkGetChronoTimeNormalized(index, band, speed) * interval;
    }

    // Get time of day. The return value is a float4 with the values float3(hour, minute, second).
    float3 AudioLinkGetTimeOfDay()
    {
        float value = AudioLinkDecodeDataAsSeconds(ALPASS_GENERALVU_UNIX_SECONDS);
        float hour = floor(value / 3600.0);
        float minute = floor(value / 60.0) % 60.0;
        float second = value % 60.0;
        return float3(hour, minute, second);
    }

    // Get a character from a globally synced string, given an index of string in range [0; 3], and
    // a character index in range [0; 31]. The string at the 0th index is the local player name.
    // The 1st index is the master name, and index 2 and 3 are custom strings.
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetGlobalStringChar(uint stringIndex, uint charIndex)
    {
        uint4 fourChars = asuint(AudioLinkData(ALPASS_GLOBAL_STRINGS + uint2(charIndex / 4, stringIndex)));
        return fourChars[charIndex % 4];
    }

    // Get a character from the local player name given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetLocalPlayerNameChar(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_LOCALPLAYER, charIndex);
    }

    // Get a character from the master player name given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetMasterNameChar(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_MASTER, charIndex);
    }

    // Get a character from the first custom string given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetCustomString1Char(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_CUSTOM1, charIndex);
    }

    // Get a character from the second custom string given a character index in the range [0; 31].
    // Returns a unsigned integer represented a unicode codepoint, i.e. UTF32.
    uint AudioLinkGetCustomString2Char(uint charIndex)
    {
        return AudioLinkGetGlobalStringChar(AUDIOLINK_STRING_CUSTOM2, charIndex);
    }

    // Returns the position of the AudioLink AudioSource in world space.
    float4 AudioLinkGetAudioSourcePosition()
    {
        return float4(AudioLinkData(ALPASS_GENERALVU_SOURCE_POS).xyz,1);
    }
#endif

#include "AutoLight.cginc"

#if defined(LTCGI)
  #define LTCGI_AVATAR_MODE
  #include "Packages/at.pimaker.ltcgi/Shaders/LTCGI.cginc"
#endif

#define rot2x2(x) float2x2(cos(x),-sin(x),sin(x),cos(x))

struct Capsule_Physbone_Data {
  bool is_enabled;
  float3 proximity;
  float mask;
};

float4 _LightColor0;

//Texture2D _AuxTexture;	
Texture2D _Diffuse_LUT_Texture;	

#define TOUCH_REACTIVITY_MODE_NONE                                  0
#define TOUCH_REACTIVITY_MODE_DONT_INTERACT_WITH_OTHER_TR_MATERIALS 1
#define TOUCH_REACTIVITY_MODE_ENABLED                               2

#define DEBUG_VIS_NONE                              0
#define DEBUG_VIS_MASK_VS                           1
#define DEBUG_VIS_MASK_PS                           2
#define DEBUG_VIS_UV                                3
#define DEBUG_VIS_NORMAL                            4
#define DEBUG_VIS_TOTAL_DRAG_FORCE                  5
#define DEBUG_VIS_TF_VS                             6
#define DEBUG_VIS_TF_PS                             7
#define DEBUG_VIS_UV2_CHANNEL                       8
#define DEBUG_VIS_SKINNED_VERTICES                  9
#define DEBUG_VIS_IS_CAMERA_DEPTH_TEXTURE_AVAILABLE 10

#define UV_BUS_UV0            0
#define UV_BUS_UV1            1
#define UV_BUS_UV3            2
#define UV_BUS_UV4            3
#define UV_BUS_UV5            4
#define UV_BUS_UV6            5
#define UV_BUS_UV7            6
#define UV_BUS_PANOSPHERE     7
#define UV_BUS_1              8
#define UV_BUS_2              9
#define UV_BUS_3              10
#define UV_BUS_4              11
#define UV_BUS_5              12
#define UV_BUS_6              13
#define UV_MAX                14

#define TF_ANIMATION_NONE                 0
#define TF_ANIMATION_VERY_SIMPLE          1
#define TF_ANIMATION_SIMPLE_WITH_NOISE    2
#define TF_ANIMATION_RADIAL               3
#define TF_ANIMATION_CENTER_OUT           4

#define OSCI_SIMPLE_1                 0
#define OSCI_SIMPLE_2                 1
#define OSCI_SIMPLE_3                 2
#define OSCI_SIMPLE_4                 3
#define OSCI_SIMPLE_5                 4
#define OSCI_SIMPLE_6                 5
#define OSCI_SIMPLE_IS_AL_AVAILABLE   6
#define OSCI_AL_BAND_1                7
#define OSCI_AL_BAND_2                8
#define OSCI_AL_BAND_3                9
#define OSCI_AL_BAND_4                10
#define OSCI_AL_BAND_5                11
#define OSCI_AL_BAND_6                12
#define OSCI_AL_ENERGY_1              13
#define OSCI_AL_ENERGY_2              14
#define OSCI_MASK_1                   15
#define OSCI_MASK_2                   16
#define OSCI_MASK_3                   17
#define OSCI_MASK_4                   18
#define OSCI_MASK_5                   19
#define OSCI_MASK_6                   20
#define OSCI_MASK_7                   21
#define OSCI_MASK_8                   22
#define OSCI_MAX                      23

#define OSCI_SIMPLE_TYPE_SIN          0
#define OSCI_SIMPLE_TYPE_SQUARE       1
#define OSCI_SIMPLE_TYPE_SAW          2
#define OSCI_SIMPLE_TYPE_TRIANGLE     3

#define TIMEBASE_SLOT_BASE    0
#define TIMEBASE_SLOT_AL_1    1
#define TIMEBASE_SLOT_AL_2    2
#define TIMEBASE_SLOT_AL_3    3
#define TIMEBASE_SLOT_AL_4    4
#define TIMEBASE_SLOT_AL_5    5
#define TIMEBASE_SLOT_AL_6    6
#define TIMEBASE_SLOT_MAX     7

#define TIMEBASE_AL_TYPE_INCREASING             0
#define TIMEBASE_AL_TYPE_INCREASING_SMOOTHED    1
#define TIMEBASE_AL_TYPE_BACK_N_FORTH           2
#define TIMEBASE_AL_TYPE_BACK_N_FORTH_SMOOTHED  3

struct Time_Bases {
  float slots[TIMEBASE_SLOT_MAX];
};

static Time_Bases TIME_BASES;

#define get_time(_time_base_slot) TIME_BASES.slots[_time_base_slot]

struct Oscillators {
  float slots[OSCI_MAX];
};

static Oscillators OSCILLATORS;

struct UV_Bus {
  float2 uv[UV_MAX]; 
};

static UV_Bus UV_BUSES;

#define resolve_uv_bus(_uv_bus_to_use) UV_BUSES.uv[_uv_bus_to_use]

float2 apply_uv_tiling_offset_and_scroll(
  float2 uv,
  float2 tiling,
  float2 offset,
  float2 scroll,
  float time_base
) {
  uv = uv * tiling + offset;

  uv += scroll * time_base.xx;

  return uv;
}

float4 
sample_texture_2d(
  const Texture2D tex,
  const float2 tiling,
  const float2 offset,
  const float2 scroll,
  const int uv_bus_to_use,
  const SamplerState samp,
  int time_base_slot
) {
  // @InlinedTextureSampling
  float2 uv = resolve_uv_bus(uv_bus_to_use);

  float time_base = get_time(time_base_slot);
  uv = apply_uv_tiling_offset_and_scroll(uv, tiling, offset, scroll, time_base);
  
  float4 tap;
  if(IS_VERTEX_SHADER) {
    tap = tex.SampleLevel(samp, uv, 0);
  }
  else {
    tap = tex.Sample(samp, uv);
  }

  return tap;
}

#if defined(NOT_BAKED)

  //
  // @CustomProperty
  // Add your custom property fields in this define block here!
  // When you do this, baking them into the shader will be automatically handled during material baking.
  //

  float   _AuxFloat;
  float   _AuxFloat2;
  float4  _AuxColor;
  int     _AuxToggle;
  int     _AuxToggle2;

  int     _RenderingMode;
  int     _SourceBlend;
  int     _DestinationBlend;

  /* MARKER VARIABLES START */
int    _MaskChannel_1_Texture_UVBus;
float4 _MaskChannel_1_Texture_Tiling;
float4 _MaskChannel_1_Texture_Offset;
float4 _MaskChannel_1_Texture_ScrollSpeed;
int    _MaskChannel_1_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_1_Strength_PreInversion;
int    _MaskChannel_1_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_1_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_1_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_1_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_1_Strength_PostInversion;
int    _MaskChannel_1_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_1_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_1_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_1_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_2_Texture_UVBus;
float4 _MaskChannel_2_Texture_Tiling;
float4 _MaskChannel_2_Texture_Offset;
float4 _MaskChannel_2_Texture_ScrollSpeed;
int    _MaskChannel_2_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_2_Strength_PreInversion;
int    _MaskChannel_2_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_2_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_2_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_2_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_2_Strength_PostInversion;
int    _MaskChannel_2_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_2_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_2_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_2_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_3_Texture_UVBus;
float4 _MaskChannel_3_Texture_Tiling;
float4 _MaskChannel_3_Texture_Offset;
float4 _MaskChannel_3_Texture_ScrollSpeed;
int    _MaskChannel_3_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_3_Strength_PreInversion;
int    _MaskChannel_3_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_3_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_3_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_3_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_3_Strength_PostInversion;
int    _MaskChannel_3_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_3_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_3_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_3_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_4_Texture_UVBus;
float4 _MaskChannel_4_Texture_Tiling;
float4 _MaskChannel_4_Texture_Offset;
float4 _MaskChannel_4_Texture_ScrollSpeed;
int    _MaskChannel_4_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_4_Strength_PreInversion;
int    _MaskChannel_4_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_4_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_4_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_4_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_4_Strength_PostInversion;
int    _MaskChannel_4_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_4_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_4_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_4_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_5_Texture_UVBus;
float4 _MaskChannel_5_Texture_Tiling;
float4 _MaskChannel_5_Texture_Offset;
float4 _MaskChannel_5_Texture_ScrollSpeed;
int    _MaskChannel_5_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_5_Strength_PreInversion;
int    _MaskChannel_5_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_5_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_5_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_5_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_5_Strength_PostInversion;
int    _MaskChannel_5_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_5_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_5_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_5_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_6_Texture_UVBus;
float4 _MaskChannel_6_Texture_Tiling;
float4 _MaskChannel_6_Texture_Offset;
float4 _MaskChannel_6_Texture_ScrollSpeed;
int    _MaskChannel_6_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_6_Strength_PreInversion;
int    _MaskChannel_6_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_6_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_6_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_6_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_6_Strength_PostInversion;
int    _MaskChannel_6_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_6_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_6_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_6_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_7_Texture_UVBus;
float4 _MaskChannel_7_Texture_Tiling;
float4 _MaskChannel_7_Texture_Offset;
float4 _MaskChannel_7_Texture_ScrollSpeed;
int    _MaskChannel_7_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_7_Strength_PreInversion;
int    _MaskChannel_7_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_7_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_7_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_7_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_7_Strength_PostInversion;
int    _MaskChannel_7_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_7_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_7_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_7_Strength_PostInversion_Osci_Value_End;
int    _MaskChannel_8_Texture_UVBus;
float4 _MaskChannel_8_Texture_Tiling;
float4 _MaskChannel_8_Texture_Offset;
float4 _MaskChannel_8_Texture_ScrollSpeed;
int    _MaskChannel_8_Texture_ScrollSpeed_TimeBase;
float  _MaskChannel_8_Strength_PreInversion;
int    _MaskChannel_8_Strength_PreInversion_Osci_Enabled;
int    _MaskChannel_8_Strength_PreInversion_Osci_Slot;
float  _MaskChannel_8_Strength_PreInversion_Osci_Value_Start;
float  _MaskChannel_8_Strength_PreInversion_Osci_Value_End;
float  _MaskChannel_8_Strength_PostInversion;
int    _MaskChannel_8_Strength_PostInversion_Osci_Enabled;
int    _MaskChannel_8_Strength_PostInversion_Osci_Slot;
float  _MaskChannel_8_Strength_PostInversion_Osci_Value_Start;
float  _MaskChannel_8_Strength_PostInversion_Osci_Value_End;
int    _MainTex_AlphaIsMask;
float4 _MainTex_Tiling;
float4 _MainTex_Offset;
float4 _MainTex_ScrollSpeed;
int    _MainTex_ScrollSpeed_TimeBase;
int    _MainTex_UVBus;
int    _MainTex_MaskChannel;
int    _MainTex_MaskChannel_Inverted;
float  _MainTex_MaskChannel_Strength;
float  _MainTex_MaskChannel_Contrast;
float  _MainTex_MaskChannel_Brightness;
float4 _Color;
int    _Color_Osci_Enabled;
int    _Color_Osci_Slot;
float4 _Color_Osci_Color_Start;
float4 _Color_Osci_Color_End;
int    _Mix_MainTex_AlphaIsMask;
float4 _Mix_MainTex_Tiling;
float4 _Mix_MainTex_Offset;
float4 _Mix_MainTex_ScrollSpeed;
int    _Mix_MainTex_ScrollSpeed_TimeBase;
int    _Mix_MainTex_UVBus;
int    _Mix_MainTex_MaskChannel;
int    _Mix_MainTex_MaskChannel_Inverted;
float  _Mix_MainTex_MaskChannel_Strength;
float  _Mix_MainTex_MaskChannel_Contrast;
float  _Mix_MainTex_MaskChannel_Brightness;
float4 _Mix_Color;
int    _Mix_Color_Osci_Enabled;
int    _Mix_Color_Osci_Slot;
float4 _Mix_Color_Osci_Color_Start;
float4 _Mix_Color_Osci_Color_End;
int    _Mix_Separate_MainTex;
int    _SecondaryTex_AlphaIsMask;
float4 _SecondaryTex_Tiling;
float4 _SecondaryTex_Offset;
float4 _SecondaryTex_ScrollSpeed;
int    _SecondaryTex_ScrollSpeed_TimeBase;
int    _SecondaryTex_UVBus;
int    _SecondaryTex_MaskChannel;
int    _SecondaryTex_MaskChannel_Inverted;
float  _SecondaryTex_MaskChannel_Strength;
float  _SecondaryTex_MaskChannel_Contrast;
float  _SecondaryTex_MaskChannel_Brightness;
int    _SecondaryTex_BlendMode;
float4 _SecondaryTex_Color;
int    _SecondaryTex_Color_Osci_Enabled;
int    _SecondaryTex_Color_Osci_Slot;
float4 _SecondaryTex_Color_Osci_Color_Start;
float4 _SecondaryTex_Color_Osci_Color_End;
int    _Mix_SecondaryTex_AlphaIsMask;
float4 _Mix_SecondaryTex_Tiling;
float4 _Mix_SecondaryTex_Offset;
float4 _Mix_SecondaryTex_ScrollSpeed;
int    _Mix_SecondaryTex_ScrollSpeed_TimeBase;
int    _Mix_SecondaryTex_UVBus;
int    _Mix_SecondaryTex_MaskChannel;
int    _Mix_SecondaryTex_MaskChannel_Inverted;
float  _Mix_SecondaryTex_MaskChannel_Strength;
float  _Mix_SecondaryTex_MaskChannel_Contrast;
float  _Mix_SecondaryTex_MaskChannel_Brightness;
int    _Mix_SecondaryTex_BlendMode;
float4 _Mix_SecondaryTex_Color;
int    _Mix_SecondaryTex_Color_Osci_Enabled;
int    _Mix_SecondaryTex_Color_Osci_Slot;
float4 _Mix_SecondaryTex_Color_Osci_Color_Start;
float4 _Mix_SecondaryTex_Color_Osci_Color_End;
int    _Mix_Separate_SecondaryTex;
float  _Opacity;
int    _Opacity_MaskChannel;
int    _Opacity_MaskChannel_Inverted;
float  _Opacity_MaskChannel_Strength;
float  _Opacity_MaskChannel_Contrast;
float  _Opacity_MaskChannel_Brightness;
int    _Opacity_Osci_Enabled;
int    _Opacity_Osci_Slot;
float  _Opacity_Osci_Value_Start;
float  _Opacity_Osci_Value_End;
float  _Mix_Opacity;
int    _Mix_Opacity_MaskChannel;
int    _Mix_Opacity_MaskChannel_Inverted;
float  _Mix_Opacity_MaskChannel_Strength;
float  _Mix_Opacity_MaskChannel_Contrast;
float  _Mix_Opacity_MaskChannel_Brightness;
int    _Mix_Opacity_Osci_Enabled;
int    _Mix_Opacity_Osci_Slot;
float  _Mix_Opacity_Osci_Value_Start;
float  _Mix_Opacity_Osci_Value_End;
int    _Mix_Separate_Opacity;
float4 _OcclusionMap_Tiling;
float4 _OcclusionMap_Offset;
float4 _OcclusionMap_ScrollSpeed;
int    _OcclusionMap_ScrollSpeed_TimeBase;
int    _OcclusionMap_UVBus;
int    _OcclusionMap_MaskChannel;
int    _OcclusionMap_MaskChannel_Inverted;
float  _OcclusionMap_MaskChannel_Strength;
float  _OcclusionMap_MaskChannel_Contrast;
float  _OcclusionMap_MaskChannel_Brightness;
float  _OcclusionStrength;
float4 _Mix_OcclusionMap_Tiling;
float4 _Mix_OcclusionMap_Offset;
float4 _Mix_OcclusionMap_ScrollSpeed;
int    _Mix_OcclusionMap_ScrollSpeed_TimeBase;
int    _Mix_OcclusionMap_UVBus;
int    _Mix_OcclusionMap_MaskChannel;
int    _Mix_OcclusionMap_MaskChannel_Inverted;
float  _Mix_OcclusionMap_MaskChannel_Strength;
float  _Mix_OcclusionMap_MaskChannel_Contrast;
float  _Mix_OcclusionMap_MaskChannel_Brightness;
float  _Mix_OcclusionStrength;
int    _Mix_Separate_Occlusion;
float4 _BumpMap_Tiling;
float4 _BumpMap_Offset;
float4 _BumpMap_ScrollSpeed;
int    _BumpMap_ScrollSpeed_TimeBase;
int    _BumpMap_UVBus;
int    _BumpMap_MaskChannel;
int    _BumpMap_MaskChannel_Inverted;
float  _BumpMap_MaskChannel_Strength;
float  _BumpMap_MaskChannel_Contrast;
float  _BumpMap_MaskChannel_Brightness;
float  _BumpScale;
int    _BumpScale_Osci_Enabled;
int    _BumpScale_Osci_Slot;
float  _BumpScale_Osci_Value_Start;
float  _BumpScale_Osci_Value_End;
float4 _Mix_BumpMap_Tiling;
float4 _Mix_BumpMap_Offset;
float4 _Mix_BumpMap_ScrollSpeed;
int    _Mix_BumpMap_ScrollSpeed_TimeBase;
int    _Mix_BumpMap_UVBus;
int    _Mix_BumpMap_MaskChannel;
int    _Mix_BumpMap_MaskChannel_Inverted;
float  _Mix_BumpMap_MaskChannel_Strength;
float  _Mix_BumpMap_MaskChannel_Contrast;
float  _Mix_BumpMap_MaskChannel_Brightness;
float  _Mix_BumpScale;
int    _Mix_BumpScale_Osci_Enabled;
int    _Mix_BumpScale_Osci_Slot;
float  _Mix_BumpScale_Osci_Value_Start;
float  _Mix_BumpScale_Osci_Value_End;
int    _Mix_Separate_BumpMap;
float4 _DetailNormalMap_Tiling;
float4 _DetailNormalMap_Offset;
float4 _DetailNormalMap_ScrollSpeed;
int    _DetailNormalMap_ScrollSpeed_TimeBase;
int    _DetailNormalMap_UVBus;
int    _DetailNormalMap_MaskChannel;
int    _DetailNormalMap_MaskChannel_Inverted;
float  _DetailNormalMap_MaskChannel_Strength;
float  _DetailNormalMap_MaskChannel_Contrast;
float  _DetailNormalMap_MaskChannel_Brightness;
float  _DetailBumpScale;
int    _DetailBumpScale_Osci_Enabled;
int    _DetailBumpScale_Osci_Slot;
float  _DetailBumpScale_Osci_Value_Start;
float  _DetailBumpScale_Osci_Value_End;
float4 _Mix_DetailNormalMap_Tiling;
float4 _Mix_DetailNormalMap_Offset;
float4 _Mix_DetailNormalMap_ScrollSpeed;
int    _Mix_DetailNormalMap_ScrollSpeed_TimeBase;
int    _Mix_DetailNormalMap_UVBus;
int    _Mix_DetailNormalMap_MaskChannel;
int    _Mix_DetailNormalMap_MaskChannel_Inverted;
float  _Mix_DetailNormalMap_MaskChannel_Strength;
float  _Mix_DetailNormalMap_MaskChannel_Contrast;
float  _Mix_DetailNormalMap_MaskChannel_Brightness;
float  _Mix_DetailBumpScale;
int    _Mix_DetailBumpScale_Osci_Enabled;
int    _Mix_DetailBumpScale_Osci_Slot;
float  _Mix_DetailBumpScale_Osci_Value_Start;
float  _Mix_DetailBumpScale_Osci_Value_End;
int    _Mix_Separate_DetailNormalMap;
int    _EmissionMap_AlphaIsMask;
float4 _EmissionMap_Tiling;
float4 _EmissionMap_Offset;
float4 _EmissionMap_ScrollSpeed;
int    _EmissionMap_ScrollSpeed_TimeBase;
int    _EmissionMap_UVBus;
int    _EmissionMap_MaskChannel;
int    _EmissionMap_MaskChannel_Inverted;
float  _EmissionMap_MaskChannel_Strength;
float  _EmissionMap_MaskChannel_Contrast;
float  _EmissionMap_MaskChannel_Brightness;
float4 _EmissionColor;
int    _EmissionColor_Osci_Enabled;
int    _EmissionColor_Osci_Slot;
float4 _EmissionColor_Osci_Color_Start;
float4 _EmissionColor_Osci_Color_End;
int    _Mix_EmissionMap_AlphaIsMask;
float4 _Mix_EmissionMap_Tiling;
float4 _Mix_EmissionMap_Offset;
float4 _Mix_EmissionMap_ScrollSpeed;
int    _Mix_EmissionMap_ScrollSpeed_TimeBase;
int    _Mix_EmissionMap_UVBus;
int    _Mix_EmissionMap_MaskChannel;
int    _Mix_EmissionMap_MaskChannel_Inverted;
float  _Mix_EmissionMap_MaskChannel_Strength;
float  _Mix_EmissionMap_MaskChannel_Contrast;
float  _Mix_EmissionMap_MaskChannel_Brightness;
float4 _Mix_EmissionColor;
int    _Mix_EmissionColor_Osci_Enabled;
int    _Mix_EmissionColor_Osci_Slot;
float4 _Mix_EmissionColor_Osci_Color_Start;
float4 _Mix_EmissionColor_Osci_Color_End;
int    _Mix_Separate_Emission_1;
int    _EmissionMap2_AlphaIsMask;
float4 _EmissionMap2_Tiling;
float4 _EmissionMap2_Offset;
float4 _EmissionMap2_ScrollSpeed;
int    _EmissionMap2_ScrollSpeed_TimeBase;
int    _EmissionMap2_UVBus;
int    _EmissionMap2_MaskChannel;
int    _EmissionMap2_MaskChannel_Inverted;
float  _EmissionMap2_MaskChannel_Strength;
float  _EmissionMap2_MaskChannel_Contrast;
float  _EmissionMap2_MaskChannel_Brightness;
float4 _EmissionColor2;
int    _EmissionColor2_Osci_Enabled;
int    _EmissionColor2_Osci_Slot;
float4 _EmissionColor2_Osci_Color_Start;
float4 _EmissionColor2_Osci_Color_End;
int    _Mix_EmissionMap2_AlphaIsMask;
float4 _Mix_EmissionMap2_Tiling;
float4 _Mix_EmissionMap2_Offset;
float4 _Mix_EmissionMap2_ScrollSpeed;
int    _Mix_EmissionMap2_ScrollSpeed_TimeBase;
int    _Mix_EmissionMap2_UVBus;
int    _Mix_EmissionMap2_MaskChannel;
int    _Mix_EmissionMap2_MaskChannel_Inverted;
float  _Mix_EmissionMap2_MaskChannel_Strength;
float  _Mix_EmissionMap2_MaskChannel_Contrast;
float  _Mix_EmissionMap2_MaskChannel_Brightness;
float4 _Mix_EmissionColor2;
int    _Mix_EmissionColor2_Osci_Enabled;
int    _Mix_EmissionColor2_Osci_Slot;
float4 _Mix_EmissionColor2_Osci_Color_Start;
float4 _Mix_EmissionColor2_Osci_Color_End;
int    _Mix_Separate_Emission_2;
int    _Matcap_1_Texture_AlphaIsMask;
int    _Matcap_1_Texture_MaskChannel;
int    _Matcap_1_Texture_MaskChannel_Inverted;
float  _Matcap_1_Texture_MaskChannel_Strength;
float  _Matcap_1_Texture_MaskChannel_Contrast;
float  _Matcap_1_Texture_MaskChannel_Brightness;
float4 _Matcap_1_Color;
int    _Matcap_1_Color_Osci_Enabled;
int    _Matcap_1_Color_Osci_Slot;
float4 _Matcap_1_Color_Osci_Color_Start;
float4 _Matcap_1_Color_Osci_Color_End;
int    _Matcap_1_Lighting_Enabled;
float  _Matcap_1_Size;
int    _Mix_Matcap_1_Texture_AlphaIsMask;
int    _Mix_Matcap_1_Texture_MaskChannel;
int    _Mix_Matcap_1_Texture_MaskChannel_Inverted;
float  _Mix_Matcap_1_Texture_MaskChannel_Strength;
float  _Mix_Matcap_1_Texture_MaskChannel_Contrast;
float  _Mix_Matcap_1_Texture_MaskChannel_Brightness;
float4 _Mix_Matcap_1_Color;
int    _Mix_Matcap_1_Color_Osci_Enabled;
int    _Mix_Matcap_1_Color_Osci_Slot;
float4 _Mix_Matcap_1_Color_Osci_Color_Start;
float4 _Mix_Matcap_1_Color_Osci_Color_End;
int    _Mix_Matcap_1_Lighting_Enabled;
float  _Mix_Matcap_1_Size;
int    _Mix_Separate_Matcap_1;
int    _Matcap_2_Texture_AlphaIsMask;
int    _Matcap_2_Texture_MaskChannel;
int    _Matcap_2_Texture_MaskChannel_Inverted;
float  _Matcap_2_Texture_MaskChannel_Strength;
float  _Matcap_2_Texture_MaskChannel_Contrast;
float  _Matcap_2_Texture_MaskChannel_Brightness;
float4 _Matcap_2_Color;
int    _Matcap_2_Color_Osci_Enabled;
int    _Matcap_2_Color_Osci_Slot;
float4 _Matcap_2_Color_Osci_Color_Start;
float4 _Matcap_2_Color_Osci_Color_End;
int    _Matcap_2_Lighting_Enabled;
float  _Matcap_2_Size;
int    _Mix_Matcap_2_Texture_AlphaIsMask;
int    _Mix_Matcap_2_Texture_MaskChannel;
int    _Mix_Matcap_2_Texture_MaskChannel_Inverted;
float  _Mix_Matcap_2_Texture_MaskChannel_Strength;
float  _Mix_Matcap_2_Texture_MaskChannel_Contrast;
float  _Mix_Matcap_2_Texture_MaskChannel_Brightness;
float4 _Mix_Matcap_2_Color;
int    _Mix_Matcap_2_Color_Osci_Enabled;
int    _Mix_Matcap_2_Color_Osci_Slot;
float4 _Mix_Matcap_2_Color_Osci_Color_Start;
float4 _Mix_Matcap_2_Color_Osci_Color_End;
int    _Mix_Matcap_2_Lighting_Enabled;
float  _Mix_Matcap_2_Size;
int    _Mix_Separate_Matcap_2;
int    _Matcap_3_Texture_AlphaIsMask;
int    _Matcap_3_Texture_MaskChannel;
int    _Matcap_3_Texture_MaskChannel_Inverted;
float  _Matcap_3_Texture_MaskChannel_Strength;
float  _Matcap_3_Texture_MaskChannel_Contrast;
float  _Matcap_3_Texture_MaskChannel_Brightness;
float4 _Matcap_3_Color;
int    _Matcap_3_Color_Osci_Enabled;
int    _Matcap_3_Color_Osci_Slot;
float4 _Matcap_3_Color_Osci_Color_Start;
float4 _Matcap_3_Color_Osci_Color_End;
int    _Matcap_3_Lighting_Enabled;
float  _Matcap_3_Size;
int    _Mix_Matcap_3_Texture_AlphaIsMask;
int    _Mix_Matcap_3_Texture_MaskChannel;
int    _Mix_Matcap_3_Texture_MaskChannel_Inverted;
float  _Mix_Matcap_3_Texture_MaskChannel_Strength;
float  _Mix_Matcap_3_Texture_MaskChannel_Contrast;
float  _Mix_Matcap_3_Texture_MaskChannel_Brightness;
float4 _Mix_Matcap_3_Color;
int    _Mix_Matcap_3_Color_Osci_Enabled;
int    _Mix_Matcap_3_Color_Osci_Slot;
float4 _Mix_Matcap_3_Color_Osci_Color_Start;
float4 _Mix_Matcap_3_Color_Osci_Color_End;
int    _Mix_Matcap_3_Lighting_Enabled;
float  _Mix_Matcap_3_Size;
int    _Mix_Separate_Matcap_3;
float  _AlbedoEmissionWeight;
int    _AlbedoEmissionWeight_MaskChannel;
int    _AlbedoEmissionWeight_MaskChannel_Inverted;
float  _AlbedoEmissionWeight_MaskChannel_Strength;
float  _AlbedoEmissionWeight_MaskChannel_Contrast;
float  _AlbedoEmissionWeight_MaskChannel_Brightness;
int    _AlbedoEmissionWeight_Osci_Enabled;
int    _AlbedoEmissionWeight_Osci_Slot;
float  _AlbedoEmissionWeight_Osci_Value_Start;
float  _AlbedoEmissionWeight_Osci_Value_End;
float4 _AddedEmissionColor;
int    _AddedEmissionColor_MaskChannel;
int    _AddedEmissionColor_MaskChannel_Inverted;
float  _AddedEmissionColor_MaskChannel_Strength;
float  _AddedEmissionColor_MaskChannel_Contrast;
float  _AddedEmissionColor_MaskChannel_Brightness;
int    _AddedEmissionColor_Osci_Enabled;
int    _AddedEmissionColor_Osci_Slot;
float4 _AddedEmissionColor_Osci_Color_Start;
float4 _AddedEmissionColor_Osci_Color_End;
float  _Mix_AlbedoEmissionWeight;
int    _Mix_AlbedoEmissionWeight_MaskChannel;
int    _Mix_AlbedoEmissionWeight_MaskChannel_Inverted;
float  _Mix_AlbedoEmissionWeight_MaskChannel_Strength;
float  _Mix_AlbedoEmissionWeight_MaskChannel_Contrast;
float  _Mix_AlbedoEmissionWeight_MaskChannel_Brightness;
int    _Mix_AlbedoEmissionWeight_Osci_Enabled;
int    _Mix_AlbedoEmissionWeight_Osci_Slot;
float  _Mix_AlbedoEmissionWeight_Osci_Value_Start;
float  _Mix_AlbedoEmissionWeight_Osci_Value_End;
float4 _Mix_AddedEmissionColor;
int    _Mix_AddedEmissionColor_MaskChannel;
int    _Mix_AddedEmissionColor_MaskChannel_Inverted;
float  _Mix_AddedEmissionColor_MaskChannel_Strength;
float  _Mix_AddedEmissionColor_MaskChannel_Contrast;
float  _Mix_AddedEmissionColor_MaskChannel_Brightness;
int    _Mix_AddedEmissionColor_Osci_Enabled;
int    _Mix_AddedEmissionColor_Osci_Slot;
float4 _Mix_AddedEmissionColor_Osci_Color_Start;
float4 _Mix_AddedEmissionColor_Osci_Color_End;
int    _Mix_Separate_Emission_Const;
float  _Glossiness;
int    _Glossiness_MaskChannel;
int    _Glossiness_MaskChannel_Inverted;
float  _Glossiness_MaskChannel_Strength;
float  _Glossiness_MaskChannel_Contrast;
float  _Glossiness_MaskChannel_Brightness;
float  _Metallic;
int    _Metallic_MaskChannel;
int    _Metallic_MaskChannel_Inverted;
float  _Metallic_MaskChannel_Strength;
float  _Metallic_MaskChannel_Contrast;
float  _Metallic_MaskChannel_Brightness;
float  _Mix_Glossiness;
int    _Mix_Glossiness_MaskChannel;
int    _Mix_Glossiness_MaskChannel_Inverted;
float  _Mix_Glossiness_MaskChannel_Strength;
float  _Mix_Glossiness_MaskChannel_Contrast;
float  _Mix_Glossiness_MaskChannel_Brightness;
float  _Mix_Metallic;
int    _Mix_Metallic_MaskChannel;
int    _Mix_Metallic_MaskChannel_Inverted;
float  _Mix_Metallic_MaskChannel_Strength;
float  _Mix_Metallic_MaskChannel_Contrast;
float  _Mix_Metallic_MaskChannel_Brightness;
int    _Mix_Separate_MetallicGlossiness;
int    _GSAA_Enabled;
int    _Goo_Enabled;
float  _Goo_Size;
int    _Goo_Size_Osci_Enabled;
int    _Goo_Size_Osci_Slot;
float  _Goo_Size_Osci_Value_Start;
float  _Goo_Size_Osci_Value_End;
float4 _Goo_Speed;
int    _Goo_Speed_TimeBase;
float4 _Goo_Offset;
int    _Goo_Offset_Osci_Enabled;
int    _Goo_Offset_Osci_Slot;
float4 _Goo_Offset_Osci_Color_Start;
float4 _Goo_Offset_Osci_Color_End;
float  _Goo_Normal_Offset_Min_Degrees;
float  _Goo_Normal_Offset_Max_Degrees;
int    _Goo_Deformation_Enabled;
float  _Goo_Deformation_MeshNormal_Offset_Min;
int    _Goo_Deformation_MeshNormal_Offset_Min_Osci_Enabled;
int    _Goo_Deformation_MeshNormal_Offset_Min_Osci_Slot;
float  _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_Start;
float  _Goo_Deformation_MeshNormal_Offset_Min_Osci_Value_End;
float  _Goo_Deformation_MeshNormal_Offset_Max;
int    _Goo_Deformation_MeshNormal_Offset_Max_Osci_Enabled;
int    _Goo_Deformation_MeshNormal_Offset_Max_Osci_Slot;
float  _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_Start;
float  _Goo_Deformation_MeshNormal_Offset_Max_Osci_Value_End;
float  _Goo_Deformation_ProceduralNormal_Size;
int    _Goo_Deformation_ProceduralNormal_Size_Osci_Enabled;
int    _Goo_Deformation_ProceduralNormal_Size_Osci_Slot;
float  _Goo_Deformation_ProceduralNormal_Size_Osci_Value_Start;
float  _Goo_Deformation_ProceduralNormal_Size_Osci_Value_End;
int    _Goo_Deformation_ApplyOnMaterialMix;
int    _Goo_Deformation_MeshNormal_MaskChannel;
int    _Goo_Deformation_MeshNormal_MaskChannel_Inverted;
float  _Goo_Deformation_MeshNormal_MaskChannel_Strength;
float  _Goo_Deformation_MeshNormal_MaskChannel_Contrast;
float  _Goo_Deformation_MeshNormal_MaskChannel_Brightness;
int    _Goo_Drip_Enabled;
float  _Goo_Drip_Size;
int    _Goo_Drip_Size_Osci_Enabled;
int    _Goo_Drip_Size_Osci_Slot;
float  _Goo_Drip_Size_Osci_Value_Start;
float  _Goo_Drip_Size_Osci_Value_End;
float  _Goo_Drip_Start;
int    _Goo_Drip_Start_Osci_Enabled;
int    _Goo_Drip_Start_Osci_Slot;
float  _Goo_Drip_Start_Osci_Value_Start;
float  _Goo_Drip_Start_Osci_Value_End;
float  _Goo_Drip_End;
int    _Goo_Drip_End_Osci_Enabled;
int    _Goo_Drip_End_Osci_Slot;
float  _Goo_Drip_End_Osci_Value_Start;
float  _Goo_Drip_End_Osci_Value_End;
float  _Goo_Drip_Amount;
int    _Goo_Drip_Amount_Osci_Enabled;
int    _Goo_Drip_Amount_Osci_Slot;
float  _Goo_Drip_Amount_Osci_Value_Start;
float  _Goo_Drip_Amount_Osci_Value_End;
int    _Goo_Drip_MaskChannel;
int    _Goo_Drip_MaskChannel_Inverted;
float  _Goo_Drip_MaskChannel_Strength;
float  _Goo_Drip_MaskChannel_Contrast;
float  _Goo_Drip_MaskChannel_Brightness;
int    _Goo_Drip_ApplyOnMaterialMix;
float4 _Goo_Drip_Gravity_Vector;
float4 _CapsuleMask_1_Origin;
int    _CapsuleMask_1_Origin_Osci_Enabled;
int    _CapsuleMask_1_Origin_Osci_Slot;
float4 _CapsuleMask_1_Origin_Osci_Color_Start;
float4 _CapsuleMask_1_Origin_Osci_Color_End;
float4 _CapsuleMask_1_Axis;
int    _CapsuleMask_1_Axis_Osci_Enabled;
int    _CapsuleMask_1_Axis_Osci_Slot;
float4 _CapsuleMask_1_Axis_Osci_Color_Start;
float4 _CapsuleMask_1_Axis_Osci_Color_End;
int    _CapsuleMask_1_Flip;
float  _CapsuleMask_1_Radius;
int    _CapsuleMask_1_Radius_Osci_Enabled;
int    _CapsuleMask_1_Radius_Osci_Slot;
float  _CapsuleMask_1_Radius_Osci_Value_Start;
float  _CapsuleMask_1_Radius_Osci_Value_End;
float  _CapsuleMask_1_Height;
int    _CapsuleMask_1_Height_Osci_Enabled;
int    _CapsuleMask_1_Height_Osci_Slot;
float  _CapsuleMask_1_Height_Osci_Value_Start;
float  _CapsuleMask_1_Height_Osci_Value_End;
float  _CapsuleMask_1_Strength_PreInversion;
int    _CapsuleMask_1_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_1_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_1_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_1_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_1_Strength_PostInversion;
int    _CapsuleMask_1_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_1_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_1_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_1_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_2_Origin;
int    _CapsuleMask_2_Origin_Osci_Enabled;
int    _CapsuleMask_2_Origin_Osci_Slot;
float4 _CapsuleMask_2_Origin_Osci_Color_Start;
float4 _CapsuleMask_2_Origin_Osci_Color_End;
float4 _CapsuleMask_2_Axis;
int    _CapsuleMask_2_Axis_Osci_Enabled;
int    _CapsuleMask_2_Axis_Osci_Slot;
float4 _CapsuleMask_2_Axis_Osci_Color_Start;
float4 _CapsuleMask_2_Axis_Osci_Color_End;
int    _CapsuleMask_2_Flip;
float  _CapsuleMask_2_Radius;
int    _CapsuleMask_2_Radius_Osci_Enabled;
int    _CapsuleMask_2_Radius_Osci_Slot;
float  _CapsuleMask_2_Radius_Osci_Value_Start;
float  _CapsuleMask_2_Radius_Osci_Value_End;
float  _CapsuleMask_2_Height;
int    _CapsuleMask_2_Height_Osci_Enabled;
int    _CapsuleMask_2_Height_Osci_Slot;
float  _CapsuleMask_2_Height_Osci_Value_Start;
float  _CapsuleMask_2_Height_Osci_Value_End;
float  _CapsuleMask_2_Strength_PreInversion;
int    _CapsuleMask_2_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_2_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_2_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_2_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_2_Strength_PostInversion;
int    _CapsuleMask_2_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_2_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_2_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_2_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_3_Origin;
int    _CapsuleMask_3_Origin_Osci_Enabled;
int    _CapsuleMask_3_Origin_Osci_Slot;
float4 _CapsuleMask_3_Origin_Osci_Color_Start;
float4 _CapsuleMask_3_Origin_Osci_Color_End;
float4 _CapsuleMask_3_Axis;
int    _CapsuleMask_3_Axis_Osci_Enabled;
int    _CapsuleMask_3_Axis_Osci_Slot;
float4 _CapsuleMask_3_Axis_Osci_Color_Start;
float4 _CapsuleMask_3_Axis_Osci_Color_End;
int    _CapsuleMask_3_Flip;
float  _CapsuleMask_3_Radius;
int    _CapsuleMask_3_Radius_Osci_Enabled;
int    _CapsuleMask_3_Radius_Osci_Slot;
float  _CapsuleMask_3_Radius_Osci_Value_Start;
float  _CapsuleMask_3_Radius_Osci_Value_End;
float  _CapsuleMask_3_Height;
int    _CapsuleMask_3_Height_Osci_Enabled;
int    _CapsuleMask_3_Height_Osci_Slot;
float  _CapsuleMask_3_Height_Osci_Value_Start;
float  _CapsuleMask_3_Height_Osci_Value_End;
float  _CapsuleMask_3_Strength_PreInversion;
int    _CapsuleMask_3_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_3_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_3_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_3_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_3_Strength_PostInversion;
int    _CapsuleMask_3_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_3_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_3_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_3_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_4_Origin;
int    _CapsuleMask_4_Origin_Osci_Enabled;
int    _CapsuleMask_4_Origin_Osci_Slot;
float4 _CapsuleMask_4_Origin_Osci_Color_Start;
float4 _CapsuleMask_4_Origin_Osci_Color_End;
float4 _CapsuleMask_4_Axis;
int    _CapsuleMask_4_Axis_Osci_Enabled;
int    _CapsuleMask_4_Axis_Osci_Slot;
float4 _CapsuleMask_4_Axis_Osci_Color_Start;
float4 _CapsuleMask_4_Axis_Osci_Color_End;
int    _CapsuleMask_4_Flip;
float  _CapsuleMask_4_Radius;
int    _CapsuleMask_4_Radius_Osci_Enabled;
int    _CapsuleMask_4_Radius_Osci_Slot;
float  _CapsuleMask_4_Radius_Osci_Value_Start;
float  _CapsuleMask_4_Radius_Osci_Value_End;
float  _CapsuleMask_4_Height;
int    _CapsuleMask_4_Height_Osci_Enabled;
int    _CapsuleMask_4_Height_Osci_Slot;
float  _CapsuleMask_4_Height_Osci_Value_Start;
float  _CapsuleMask_4_Height_Osci_Value_End;
float  _CapsuleMask_4_Strength_PreInversion;
int    _CapsuleMask_4_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_4_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_4_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_4_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_4_Strength_PostInversion;
int    _CapsuleMask_4_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_4_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_4_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_4_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_5_Origin;
int    _CapsuleMask_5_Origin_Osci_Enabled;
int    _CapsuleMask_5_Origin_Osci_Slot;
float4 _CapsuleMask_5_Origin_Osci_Color_Start;
float4 _CapsuleMask_5_Origin_Osci_Color_End;
float4 _CapsuleMask_5_Axis;
int    _CapsuleMask_5_Axis_Osci_Enabled;
int    _CapsuleMask_5_Axis_Osci_Slot;
float4 _CapsuleMask_5_Axis_Osci_Color_Start;
float4 _CapsuleMask_5_Axis_Osci_Color_End;
int    _CapsuleMask_5_Flip;
float  _CapsuleMask_5_Radius;
int    _CapsuleMask_5_Radius_Osci_Enabled;
int    _CapsuleMask_5_Radius_Osci_Slot;
float  _CapsuleMask_5_Radius_Osci_Value_Start;
float  _CapsuleMask_5_Radius_Osci_Value_End;
float  _CapsuleMask_5_Height;
int    _CapsuleMask_5_Height_Osci_Enabled;
int    _CapsuleMask_5_Height_Osci_Slot;
float  _CapsuleMask_5_Height_Osci_Value_Start;
float  _CapsuleMask_5_Height_Osci_Value_End;
float  _CapsuleMask_5_Strength_PreInversion;
int    _CapsuleMask_5_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_5_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_5_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_5_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_5_Strength_PostInversion;
int    _CapsuleMask_5_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_5_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_5_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_5_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_6_Origin;
int    _CapsuleMask_6_Origin_Osci_Enabled;
int    _CapsuleMask_6_Origin_Osci_Slot;
float4 _CapsuleMask_6_Origin_Osci_Color_Start;
float4 _CapsuleMask_6_Origin_Osci_Color_End;
float4 _CapsuleMask_6_Axis;
int    _CapsuleMask_6_Axis_Osci_Enabled;
int    _CapsuleMask_6_Axis_Osci_Slot;
float4 _CapsuleMask_6_Axis_Osci_Color_Start;
float4 _CapsuleMask_6_Axis_Osci_Color_End;
int    _CapsuleMask_6_Flip;
float  _CapsuleMask_6_Radius;
int    _CapsuleMask_6_Radius_Osci_Enabled;
int    _CapsuleMask_6_Radius_Osci_Slot;
float  _CapsuleMask_6_Radius_Osci_Value_Start;
float  _CapsuleMask_6_Radius_Osci_Value_End;
float  _CapsuleMask_6_Height;
int    _CapsuleMask_6_Height_Osci_Enabled;
int    _CapsuleMask_6_Height_Osci_Slot;
float  _CapsuleMask_6_Height_Osci_Value_Start;
float  _CapsuleMask_6_Height_Osci_Value_End;
float  _CapsuleMask_6_Strength_PreInversion;
int    _CapsuleMask_6_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_6_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_6_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_6_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_6_Strength_PostInversion;
int    _CapsuleMask_6_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_6_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_6_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_6_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_7_Origin;
int    _CapsuleMask_7_Origin_Osci_Enabled;
int    _CapsuleMask_7_Origin_Osci_Slot;
float4 _CapsuleMask_7_Origin_Osci_Color_Start;
float4 _CapsuleMask_7_Origin_Osci_Color_End;
float4 _CapsuleMask_7_Axis;
int    _CapsuleMask_7_Axis_Osci_Enabled;
int    _CapsuleMask_7_Axis_Osci_Slot;
float4 _CapsuleMask_7_Axis_Osci_Color_Start;
float4 _CapsuleMask_7_Axis_Osci_Color_End;
int    _CapsuleMask_7_Flip;
float  _CapsuleMask_7_Radius;
int    _CapsuleMask_7_Radius_Osci_Enabled;
int    _CapsuleMask_7_Radius_Osci_Slot;
float  _CapsuleMask_7_Radius_Osci_Value_Start;
float  _CapsuleMask_7_Radius_Osci_Value_End;
float  _CapsuleMask_7_Height;
int    _CapsuleMask_7_Height_Osci_Enabled;
int    _CapsuleMask_7_Height_Osci_Slot;
float  _CapsuleMask_7_Height_Osci_Value_Start;
float  _CapsuleMask_7_Height_Osci_Value_End;
float  _CapsuleMask_7_Strength_PreInversion;
int    _CapsuleMask_7_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_7_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_7_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_7_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_7_Strength_PostInversion;
int    _CapsuleMask_7_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_7_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_7_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_7_Strength_PostInversion_Osci_Value_End;
float4 _CapsuleMask_8_Origin;
int    _CapsuleMask_8_Origin_Osci_Enabled;
int    _CapsuleMask_8_Origin_Osci_Slot;
float4 _CapsuleMask_8_Origin_Osci_Color_Start;
float4 _CapsuleMask_8_Origin_Osci_Color_End;
float4 _CapsuleMask_8_Axis;
int    _CapsuleMask_8_Axis_Osci_Enabled;
int    _CapsuleMask_8_Axis_Osci_Slot;
float4 _CapsuleMask_8_Axis_Osci_Color_Start;
float4 _CapsuleMask_8_Axis_Osci_Color_End;
int    _CapsuleMask_8_Flip;
float  _CapsuleMask_8_Radius;
int    _CapsuleMask_8_Radius_Osci_Enabled;
int    _CapsuleMask_8_Radius_Osci_Slot;
float  _CapsuleMask_8_Radius_Osci_Value_Start;
float  _CapsuleMask_8_Radius_Osci_Value_End;
float  _CapsuleMask_8_Height;
int    _CapsuleMask_8_Height_Osci_Enabled;
int    _CapsuleMask_8_Height_Osci_Slot;
float  _CapsuleMask_8_Height_Osci_Value_Start;
float  _CapsuleMask_8_Height_Osci_Value_End;
float  _CapsuleMask_8_Strength_PreInversion;
int    _CapsuleMask_8_Strength_PreInversion_Osci_Enabled;
int    _CapsuleMask_8_Strength_PreInversion_Osci_Slot;
float  _CapsuleMask_8_Strength_PreInversion_Osci_Value_Start;
float  _CapsuleMask_8_Strength_PreInversion_Osci_Value_End;
float  _CapsuleMask_8_Strength_PostInversion;
int    _CapsuleMask_8_Strength_PostInversion_Osci_Enabled;
int    _CapsuleMask_8_Strength_PostInversion_Osci_Slot;
float  _CapsuleMask_8_Strength_PostInversion_Osci_Value_Start;
float  _CapsuleMask_8_Strength_PostInversion_Osci_Value_End;
int    _Physbone_1_Enabled;
int    _Physbone_1_MaskChannel;
int    _Physbone_1_MaskChannel_Inverted;
float  _Physbone_1_MaskChannel_Strength;
float  _Physbone_1_MaskChannel_Contrast;
float  _Physbone_1_MaskChannel_Brightness;
float  _Physbone_1_Proximity_X;
float  _Physbone_1_Proximity_Y;
float  _Physbone_1_Proximity_Z;
int    _Physbone_2_Enabled;
int    _Physbone_2_MaskChannel;
int    _Physbone_2_MaskChannel_Inverted;
float  _Physbone_2_MaskChannel_Strength;
float  _Physbone_2_MaskChannel_Contrast;
float  _Physbone_2_MaskChannel_Brightness;
float  _Physbone_2_Proximity_X;
float  _Physbone_2_Proximity_Y;
float  _Physbone_2_Proximity_Z;
int    _Physbone_3_Enabled;
int    _Physbone_3_MaskChannel;
int    _Physbone_3_MaskChannel_Inverted;
float  _Physbone_3_MaskChannel_Strength;
float  _Physbone_3_MaskChannel_Contrast;
float  _Physbone_3_MaskChannel_Brightness;
float  _Physbone_3_Proximity_X;
float  _Physbone_3_Proximity_Y;
float  _Physbone_3_Proximity_Z;
int    _Physbone_4_Enabled;
int    _Physbone_4_MaskChannel;
int    _Physbone_4_MaskChannel_Inverted;
float  _Physbone_4_MaskChannel_Strength;
float  _Physbone_4_MaskChannel_Contrast;
float  _Physbone_4_MaskChannel_Brightness;
float  _Physbone_4_Proximity_X;
float  _Physbone_4_Proximity_Y;
float  _Physbone_4_Proximity_Z;
int    _Physics_Body_ApplyOnMaterialMix;
float  _Physbone_Drip_DragForce_Strength;
int    _Physbone_Drip_MaskChannel;
int    _Physbone_Drip_MaskChannel_Inverted;
float  _Physbone_Drip_MaskChannel_Strength;
float  _Physbone_Drip_MaskChannel_Contrast;
float  _Physbone_Drip_MaskChannel_Brightness;
float  _Physbone_Body_DragForce_Strength;
int    _Physbone_Body_MaskChannel;
int    _Physbone_Body_MaskChannel_Inverted;
float  _Physbone_Body_MaskChannel_Strength;
float  _Physbone_Body_MaskChannel_Contrast;
float  _Physbone_Body_MaskChannel_Brightness;
int    _TF_Enabled;
int    _TF_Manual_MaskChannel;
int    _TF_Manual_MaskChannel_Inverted;
float  _TF_Manual_MaskChannel_Strength;
float  _TF_Manual_MaskChannel_Contrast;
float  _TF_Manual_MaskChannel_Brightness;
int    _TF_Manual_Osci_Enabled;
int    _TF_Manual_Osci_Slot;
float  _TF_Manual_Osci_Value_Start;
float  _TF_Manual_Osci_Value_End;
int    _TF_ManualBuiltin_BlendMode;
int    _DebugVisualisation_Type;
int    _DebugVisualisation_MaskChannel;
int    _DebugVisualisation_MaskChannel_Inverted;
float  _DebugVisualisation_MaskChannel_Strength;
float  _DebugVisualisation_MaskChannel_Contrast;
float  _DebugVisualisation_MaskChannel_Brightness;
int    _DebugVisualisation_UVBus;
int    _TF_Bulging_Enabled;
int    _TF_Bulging_MaskChannel;
int    _TF_Bulging_MaskChannel_Inverted;
float  _TF_Bulging_MaskChannel_Strength;
float  _TF_Bulging_MaskChannel_Contrast;
float  _TF_Bulging_MaskChannel_Brightness;
float  _TF_Bulging_Size;
float  _TF_Animation_Bulging_Offset;
int    _FakeCubemap_Enabled;
float  _FakeCubemap_Blend;
float  _FakeCubemap_Exposure;
float4 _FakeCubemap_Tint2;
int    _FakeCubemap_AppearsOnMaterial;
float4 _World_ReflectionProbe_Tint;
float4 _Specular_Tint;
int    _TouchReactivity_Mode;
float  _TouchReactivity_Strength;
int    _TouchReactivity_MaskChannel;
int    _TouchReactivity_MaskChannel_Inverted;
float  _TouchReactivity_MaskChannel_Strength;
float  _TouchReactivity_MaskChannel_Contrast;
float  _TouchReactivity_MaskChannel_Brightness;
int    _TouchReactivity_And_PD_ApplyOnMaterialMix;
float  _TouchReactivity_Remap_End;
int    _TouchReactivity_Bypassed;
int    _TouchReactivity_SafeMode4000;
float  _TouchReactivity_Dispersion;
int    _ProximityDistortion_Enabled;
int    _ProximityDistortion_MaskChannel;
int    _ProximityDistortion_MaskChannel_Inverted;
float  _ProximityDistortion_MaskChannel_Strength;
float  _ProximityDistortion_MaskChannel_Contrast;
float  _ProximityDistortion_MaskChannel_Brightness;
float  _ProximityDistortion_Depth_Start;
float  _ProximityDistortion_Depth_End;
int    _TF_Mode;
float4 _TF_AnimationMap_Offset;
float4 _TF_AnimationMap_Scale;
float  _TF_AnimationMap_Mip;
int    _TF_AnimationMap_UseUVBus;
int    _TF_AnimationMap_UVBus;
float  _TF_Time;
int    _TF_Time_Osci_Enabled;
int    _TF_Time_Osci_Slot;
float  _TF_Time_Osci_Value_Start;
float  _TF_Time_Osci_Value_End;
int    _TF_Visualisation_Enabled;
float  _TF_Visualisation_Speed;
float  _TF_Animation_Blur_PS;
float  _TF_Animation_Blur_VS;
float  _TF_Animation_Radial_Radius;
float4 _TF_Animation_Radial_Origin;
int    _TF_Animation_Radial_LegacyNoise_Enabled;
int    _TF_Animation_CenterOut_Invert;
int    _GlossyReflections_Enabled;
int    _SpecularHightlights_Enabled;
float  _IndirectLighting_Amount;
float  _LightMix_Sensitivity;
int    _LightMix_Sensitivity_Osci_Enabled;
int    _LightMix_Sensitivity_Osci_Slot;
float  _LightMix_Sensitivity_Osci_Value_Start;
float  _LightMix_Sensitivity_Osci_Value_End;
int    _IntersectionModulation_HSV_Enabled;
float  _IntersectionModulation_HSV_Hue_Amount;
float  _IntersectionModulation_HSV_Saturation_Amount;
float  _IntersectionModulation_HSV_Value_Amount;
int    _IntersectionModulation_Color_Enabled;
float4 _IntersectionModulation_Color_Target;
int    _IntersectionModulation_Opacity_Enabled;
float  _IntersectionModulation_Opacity_Amount;
float  _IntersectionModulation_Depth_Start;
float  _IntersectionModulation_Depth_End;
float  _NormalOffset_Amount;
int    _UVBus_1_Source;
int    _UVBus_1_VertexChannel_Channel;
int    _UVBus_1_WorldLocation_XComponent;
int    _UVBus_1_WorldLocation_YComponent;
int    _UVBus_1_BakedVertex_XComponent;
int    _UVBus_1_BakedVertex_YComponent;
int    _UVBus_1_SkinnedVertex_XComponent;
int    _UVBus_1_SkinnedVertex_YComponent;
float4 _UVBus_1_Distortion_Texture_ScrollSpeed;
int    _UVBus_1_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_1_Distortion_Texture_Tiling;
float4 _UVBus_1_Distortion_Texture_Offset;
float  _UVBus_1_Distortion_Texture_Strength;
int    _UVBus_1_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_1_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_1_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_1_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_1_Distortion_Texture_UVBus;
int    _UVBus_2_Source;
int    _UVBus_2_VertexChannel_Channel;
int    _UVBus_2_WorldLocation_XComponent;
int    _UVBus_2_WorldLocation_YComponent;
int    _UVBus_2_BakedVertex_XComponent;
int    _UVBus_2_BakedVertex_YComponent;
int    _UVBus_2_SkinnedVertex_XComponent;
int    _UVBus_2_SkinnedVertex_YComponent;
float4 _UVBus_2_Distortion_Texture_ScrollSpeed;
int    _UVBus_2_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_2_Distortion_Texture_Tiling;
float4 _UVBus_2_Distortion_Texture_Offset;
float  _UVBus_2_Distortion_Texture_Strength;
int    _UVBus_2_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_2_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_2_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_2_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_2_Distortion_Texture_UVBus;
int    _UVBus_3_Source;
int    _UVBus_3_VertexChannel_Channel;
int    _UVBus_3_WorldLocation_XComponent;
int    _UVBus_3_WorldLocation_YComponent;
int    _UVBus_3_BakedVertex_XComponent;
int    _UVBus_3_BakedVertex_YComponent;
int    _UVBus_3_SkinnedVertex_XComponent;
int    _UVBus_3_SkinnedVertex_YComponent;
float4 _UVBus_3_Distortion_Texture_ScrollSpeed;
int    _UVBus_3_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_3_Distortion_Texture_Tiling;
float4 _UVBus_3_Distortion_Texture_Offset;
float  _UVBus_3_Distortion_Texture_Strength;
int    _UVBus_3_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_3_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_3_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_3_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_3_Distortion_Texture_UVBus;
int    _UVBus_4_Source;
int    _UVBus_4_VertexChannel_Channel;
int    _UVBus_4_WorldLocation_XComponent;
int    _UVBus_4_WorldLocation_YComponent;
int    _UVBus_4_BakedVertex_XComponent;
int    _UVBus_4_BakedVertex_YComponent;
int    _UVBus_4_SkinnedVertex_XComponent;
int    _UVBus_4_SkinnedVertex_YComponent;
float4 _UVBus_4_Distortion_Texture_ScrollSpeed;
int    _UVBus_4_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_4_Distortion_Texture_Tiling;
float4 _UVBus_4_Distortion_Texture_Offset;
float  _UVBus_4_Distortion_Texture_Strength;
int    _UVBus_4_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_4_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_4_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_4_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_4_Distortion_Texture_UVBus;
int    _UVBus_5_Source;
int    _UVBus_5_VertexChannel_Channel;
int    _UVBus_5_WorldLocation_XComponent;
int    _UVBus_5_WorldLocation_YComponent;
int    _UVBus_5_BakedVertex_XComponent;
int    _UVBus_5_BakedVertex_YComponent;
int    _UVBus_5_SkinnedVertex_XComponent;
int    _UVBus_5_SkinnedVertex_YComponent;
float4 _UVBus_5_Distortion_Texture_ScrollSpeed;
int    _UVBus_5_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_5_Distortion_Texture_Tiling;
float4 _UVBus_5_Distortion_Texture_Offset;
float  _UVBus_5_Distortion_Texture_Strength;
int    _UVBus_5_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_5_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_5_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_5_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_5_Distortion_Texture_UVBus;
int    _UVBus_6_Source;
int    _UVBus_6_VertexChannel_Channel;
int    _UVBus_6_WorldLocation_XComponent;
int    _UVBus_6_WorldLocation_YComponent;
int    _UVBus_6_BakedVertex_XComponent;
int    _UVBus_6_BakedVertex_YComponent;
int    _UVBus_6_SkinnedVertex_XComponent;
int    _UVBus_6_SkinnedVertex_YComponent;
float4 _UVBus_6_Distortion_Texture_ScrollSpeed;
int    _UVBus_6_Distortion_Texture_ScrollSpeed_TimeBase;
float4 _UVBus_6_Distortion_Texture_Tiling;
float4 _UVBus_6_Distortion_Texture_Offset;
float  _UVBus_6_Distortion_Texture_Strength;
int    _UVBus_6_Distortion_Texture_Strength_Osci_Enabled;
int    _UVBus_6_Distortion_Texture_Strength_Osci_Slot;
float  _UVBus_6_Distortion_Texture_Strength_Osci_Value_Start;
float  _UVBus_6_Distortion_Texture_Strength_Osci_Value_End;
int    _UVBus_6_Distortion_Texture_UVBus;
float  _RimMask_1_Start;
int    _RimMask_1_Start_Osci_Enabled;
int    _RimMask_1_Start_Osci_Slot;
float  _RimMask_1_Start_Osci_Value_Start;
float  _RimMask_1_Start_Osci_Value_End;
float  _RimMask_1_End;
int    _RimMask_1_End_Osci_Enabled;
int    _RimMask_1_End_Osci_Slot;
float  _RimMask_1_End_Osci_Value_Start;
float  _RimMask_1_End_Osci_Value_End;
float  _RimMask_1_Strength_PreInversion;
int    _RimMask_1_Strength_PreInversion_Osci_Enabled;
int    _RimMask_1_Strength_PreInversion_Osci_Slot;
float  _RimMask_1_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_1_Strength_PreInversion_Osci_Value_End;
float  _RimMask_1_Strength_PostInversion;
int    _RimMask_1_Strength_PostInversion_Osci_Enabled;
int    _RimMask_1_Strength_PostInversion_Osci_Slot;
float  _RimMask_1_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_1_Strength_PostInversion_Osci_Value_End;
float  _RimMask_1_Smoothing;
int    _RimMask_1_Smoothing_Osci_Enabled;
int    _RimMask_1_Smoothing_Osci_Slot;
float  _RimMask_1_Smoothing_Osci_Value_Start;
float  _RimMask_1_Smoothing_Osci_Value_End;
float  _RimMask_2_Start;
int    _RimMask_2_Start_Osci_Enabled;
int    _RimMask_2_Start_Osci_Slot;
float  _RimMask_2_Start_Osci_Value_Start;
float  _RimMask_2_Start_Osci_Value_End;
float  _RimMask_2_End;
int    _RimMask_2_End_Osci_Enabled;
int    _RimMask_2_End_Osci_Slot;
float  _RimMask_2_End_Osci_Value_Start;
float  _RimMask_2_End_Osci_Value_End;
float  _RimMask_2_Strength_PreInversion;
int    _RimMask_2_Strength_PreInversion_Osci_Enabled;
int    _RimMask_2_Strength_PreInversion_Osci_Slot;
float  _RimMask_2_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_2_Strength_PreInversion_Osci_Value_End;
float  _RimMask_2_Strength_PostInversion;
int    _RimMask_2_Strength_PostInversion_Osci_Enabled;
int    _RimMask_2_Strength_PostInversion_Osci_Slot;
float  _RimMask_2_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_2_Strength_PostInversion_Osci_Value_End;
float  _RimMask_2_Smoothing;
int    _RimMask_2_Smoothing_Osci_Enabled;
int    _RimMask_2_Smoothing_Osci_Slot;
float  _RimMask_2_Smoothing_Osci_Value_Start;
float  _RimMask_2_Smoothing_Osci_Value_End;
float  _RimMask_3_Start;
int    _RimMask_3_Start_Osci_Enabled;
int    _RimMask_3_Start_Osci_Slot;
float  _RimMask_3_Start_Osci_Value_Start;
float  _RimMask_3_Start_Osci_Value_End;
float  _RimMask_3_End;
int    _RimMask_3_End_Osci_Enabled;
int    _RimMask_3_End_Osci_Slot;
float  _RimMask_3_End_Osci_Value_Start;
float  _RimMask_3_End_Osci_Value_End;
float  _RimMask_3_Strength_PreInversion;
int    _RimMask_3_Strength_PreInversion_Osci_Enabled;
int    _RimMask_3_Strength_PreInversion_Osci_Slot;
float  _RimMask_3_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_3_Strength_PreInversion_Osci_Value_End;
float  _RimMask_3_Strength_PostInversion;
int    _RimMask_3_Strength_PostInversion_Osci_Enabled;
int    _RimMask_3_Strength_PostInversion_Osci_Slot;
float  _RimMask_3_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_3_Strength_PostInversion_Osci_Value_End;
float  _RimMask_3_Smoothing;
int    _RimMask_3_Smoothing_Osci_Enabled;
int    _RimMask_3_Smoothing_Osci_Slot;
float  _RimMask_3_Smoothing_Osci_Value_Start;
float  _RimMask_3_Smoothing_Osci_Value_End;
float  _RimMask_4_Start;
int    _RimMask_4_Start_Osci_Enabled;
int    _RimMask_4_Start_Osci_Slot;
float  _RimMask_4_Start_Osci_Value_Start;
float  _RimMask_4_Start_Osci_Value_End;
float  _RimMask_4_End;
int    _RimMask_4_End_Osci_Enabled;
int    _RimMask_4_End_Osci_Slot;
float  _RimMask_4_End_Osci_Value_Start;
float  _RimMask_4_End_Osci_Value_End;
float  _RimMask_4_Strength_PreInversion;
int    _RimMask_4_Strength_PreInversion_Osci_Enabled;
int    _RimMask_4_Strength_PreInversion_Osci_Slot;
float  _RimMask_4_Strength_PreInversion_Osci_Value_Start;
float  _RimMask_4_Strength_PreInversion_Osci_Value_End;
float  _RimMask_4_Strength_PostInversion;
int    _RimMask_4_Strength_PostInversion_Osci_Enabled;
int    _RimMask_4_Strength_PostInversion_Osci_Slot;
float  _RimMask_4_Strength_PostInversion_Osci_Value_Start;
float  _RimMask_4_Strength_PostInversion_Osci_Value_End;
float  _RimMask_4_Smoothing;
int    _RimMask_4_Smoothing_Osci_Enabled;
int    _RimMask_4_Smoothing_Osci_Slot;
float  _RimMask_4_Smoothing_Osci_Value_Start;
float  _RimMask_4_Smoothing_Osci_Value_End;
float  _DistanceMask_1_Distance_Start;
int    _DistanceMask_1_Distance_Start_Osci_Enabled;
int    _DistanceMask_1_Distance_Start_Osci_Slot;
float  _DistanceMask_1_Distance_Start_Osci_Value_Start;
float  _DistanceMask_1_Distance_Start_Osci_Value_End;
float  _DistanceMask_1_Distance_End;
int    _DistanceMask_1_Distance_End_Osci_Enabled;
int    _DistanceMask_1_Distance_End_Osci_Slot;
float  _DistanceMask_1_Distance_End_Osci_Value_Start;
float  _DistanceMask_1_Distance_End_Osci_Value_End;
float  _DistanceMask_1_Strength_PreInversion;
int    _DistanceMask_1_Strength_PreInversion_Osci_Enabled;
int    _DistanceMask_1_Strength_PreInversion_Osci_Slot;
float  _DistanceMask_1_Strength_PreInversion_Osci_Value_Start;
float  _DistanceMask_1_Strength_PreInversion_Osci_Value_End;
float  _DistanceMask_1_Strength_PostInversion;
int    _DistanceMask_1_Strength_PostInversion_Osci_Enabled;
int    _DistanceMask_1_Strength_PostInversion_Osci_Slot;
float  _DistanceMask_1_Strength_PostInversion_Osci_Value_Start;
float  _DistanceMask_1_Strength_PostInversion_Osci_Value_End;
float  _DistanceMask_2_Distance_Start;
int    _DistanceMask_2_Distance_Start_Osci_Enabled;
int    _DistanceMask_2_Distance_Start_Osci_Slot;
float  _DistanceMask_2_Distance_Start_Osci_Value_Start;
float  _DistanceMask_2_Distance_Start_Osci_Value_End;
float  _DistanceMask_2_Distance_End;
int    _DistanceMask_2_Distance_End_Osci_Enabled;
int    _DistanceMask_2_Distance_End_Osci_Slot;
float  _DistanceMask_2_Distance_End_Osci_Value_Start;
float  _DistanceMask_2_Distance_End_Osci_Value_End;
float  _DistanceMask_2_Strength_PreInversion;
int    _DistanceMask_2_Strength_PreInversion_Osci_Enabled;
int    _DistanceMask_2_Strength_PreInversion_Osci_Slot;
float  _DistanceMask_2_Strength_PreInversion_Osci_Value_Start;
float  _DistanceMask_2_Strength_PreInversion_Osci_Value_End;
float  _DistanceMask_2_Strength_PostInversion;
int    _DistanceMask_2_Strength_PostInversion_Osci_Enabled;
int    _DistanceMask_2_Strength_PostInversion_Osci_Slot;
float  _DistanceMask_2_Strength_PostInversion_Osci_Value_Start;
float  _DistanceMask_2_Strength_PostInversion_Osci_Value_End;
float  _TouchReactivityInteractionMask_Intensity_Pre;
int    _TouchReactivityInteractionMask_Intensity_Pre_Osci_Enabled;
int    _TouchReactivityInteractionMask_Intensity_Pre_Osci_Slot;
float  _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_Start;
float  _TouchReactivityInteractionMask_Intensity_Pre_Osci_Value_End;
float  _TouchReactivityInteractionMask_Intensity;
int    _TouchReactivityInteractionMask_Intensity_Osci_Enabled;
int    _TouchReactivityInteractionMask_Intensity_Osci_Slot;
float  _TouchReactivityInteractionMask_Intensity_Osci_Value_Start;
float  _TouchReactivityInteractionMask_Intensity_Osci_Value_End;
int    _BlendMask_1_BlendMode;
int    _BlendMask_1_Mask_Fore_MaskChannel;
int    _BlendMask_1_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_1_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_1_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_1_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_1_Mask_Back_MaskChannel;
int    _BlendMask_1_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_1_Mask_Back_MaskChannel_Strength;
float  _BlendMask_1_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_1_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_1_Opacity;
int    _BlendMask_1_Opacity_Osci_Enabled;
int    _BlendMask_1_Opacity_Osci_Slot;
float  _BlendMask_1_Opacity_Osci_Value_Start;
float  _BlendMask_1_Opacity_Osci_Value_End;
float  _BlendMask_1_Strength_PreInversion;
int    _BlendMask_1_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_1_Strength_PreInversion_Osci_Slot;
float  _BlendMask_1_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_1_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_1_Strength_PostInversion;
int    _BlendMask_1_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_1_Strength_PostInversion_Osci_Slot;
float  _BlendMask_1_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_1_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_2_BlendMode;
int    _BlendMask_2_Mask_Fore_MaskChannel;
int    _BlendMask_2_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_2_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_2_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_2_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_2_Mask_Back_MaskChannel;
int    _BlendMask_2_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_2_Mask_Back_MaskChannel_Strength;
float  _BlendMask_2_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_2_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_2_Opacity;
int    _BlendMask_2_Opacity_Osci_Enabled;
int    _BlendMask_2_Opacity_Osci_Slot;
float  _BlendMask_2_Opacity_Osci_Value_Start;
float  _BlendMask_2_Opacity_Osci_Value_End;
float  _BlendMask_2_Strength_PreInversion;
int    _BlendMask_2_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_2_Strength_PreInversion_Osci_Slot;
float  _BlendMask_2_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_2_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_2_Strength_PostInversion;
int    _BlendMask_2_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_2_Strength_PostInversion_Osci_Slot;
float  _BlendMask_2_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_2_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_3_BlendMode;
int    _BlendMask_3_Mask_Fore_MaskChannel;
int    _BlendMask_3_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_3_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_3_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_3_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_3_Mask_Back_MaskChannel;
int    _BlendMask_3_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_3_Mask_Back_MaskChannel_Strength;
float  _BlendMask_3_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_3_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_3_Opacity;
int    _BlendMask_3_Opacity_Osci_Enabled;
int    _BlendMask_3_Opacity_Osci_Slot;
float  _BlendMask_3_Opacity_Osci_Value_Start;
float  _BlendMask_3_Opacity_Osci_Value_End;
float  _BlendMask_3_Strength_PreInversion;
int    _BlendMask_3_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_3_Strength_PreInversion_Osci_Slot;
float  _BlendMask_3_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_3_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_3_Strength_PostInversion;
int    _BlendMask_3_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_3_Strength_PostInversion_Osci_Slot;
float  _BlendMask_3_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_3_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_4_BlendMode;
int    _BlendMask_4_Mask_Fore_MaskChannel;
int    _BlendMask_4_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_4_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_4_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_4_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_4_Mask_Back_MaskChannel;
int    _BlendMask_4_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_4_Mask_Back_MaskChannel_Strength;
float  _BlendMask_4_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_4_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_4_Opacity;
int    _BlendMask_4_Opacity_Osci_Enabled;
int    _BlendMask_4_Opacity_Osci_Slot;
float  _BlendMask_4_Opacity_Osci_Value_Start;
float  _BlendMask_4_Opacity_Osci_Value_End;
float  _BlendMask_4_Strength_PreInversion;
int    _BlendMask_4_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_4_Strength_PreInversion_Osci_Slot;
float  _BlendMask_4_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_4_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_4_Strength_PostInversion;
int    _BlendMask_4_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_4_Strength_PostInversion_Osci_Slot;
float  _BlendMask_4_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_4_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_5_BlendMode;
int    _BlendMask_5_Mask_Fore_MaskChannel;
int    _BlendMask_5_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_5_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_5_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_5_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_5_Mask_Back_MaskChannel;
int    _BlendMask_5_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_5_Mask_Back_MaskChannel_Strength;
float  _BlendMask_5_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_5_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_5_Opacity;
int    _BlendMask_5_Opacity_Osci_Enabled;
int    _BlendMask_5_Opacity_Osci_Slot;
float  _BlendMask_5_Opacity_Osci_Value_Start;
float  _BlendMask_5_Opacity_Osci_Value_End;
float  _BlendMask_5_Strength_PreInversion;
int    _BlendMask_5_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_5_Strength_PreInversion_Osci_Slot;
float  _BlendMask_5_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_5_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_5_Strength_PostInversion;
int    _BlendMask_5_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_5_Strength_PostInversion_Osci_Slot;
float  _BlendMask_5_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_5_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_6_BlendMode;
int    _BlendMask_6_Mask_Fore_MaskChannel;
int    _BlendMask_6_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_6_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_6_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_6_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_6_Mask_Back_MaskChannel;
int    _BlendMask_6_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_6_Mask_Back_MaskChannel_Strength;
float  _BlendMask_6_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_6_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_6_Opacity;
int    _BlendMask_6_Opacity_Osci_Enabled;
int    _BlendMask_6_Opacity_Osci_Slot;
float  _BlendMask_6_Opacity_Osci_Value_Start;
float  _BlendMask_6_Opacity_Osci_Value_End;
float  _BlendMask_6_Strength_PreInversion;
int    _BlendMask_6_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_6_Strength_PreInversion_Osci_Slot;
float  _BlendMask_6_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_6_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_6_Strength_PostInversion;
int    _BlendMask_6_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_6_Strength_PostInversion_Osci_Slot;
float  _BlendMask_6_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_6_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_7_BlendMode;
int    _BlendMask_7_Mask_Fore_MaskChannel;
int    _BlendMask_7_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_7_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_7_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_7_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_7_Mask_Back_MaskChannel;
int    _BlendMask_7_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_7_Mask_Back_MaskChannel_Strength;
float  _BlendMask_7_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_7_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_7_Opacity;
int    _BlendMask_7_Opacity_Osci_Enabled;
int    _BlendMask_7_Opacity_Osci_Slot;
float  _BlendMask_7_Opacity_Osci_Value_Start;
float  _BlendMask_7_Opacity_Osci_Value_End;
float  _BlendMask_7_Strength_PreInversion;
int    _BlendMask_7_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_7_Strength_PreInversion_Osci_Slot;
float  _BlendMask_7_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_7_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_7_Strength_PostInversion;
int    _BlendMask_7_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_7_Strength_PostInversion_Osci_Slot;
float  _BlendMask_7_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_7_Strength_PostInversion_Osci_Value_End;
int    _BlendMask_8_BlendMode;
int    _BlendMask_8_Mask_Fore_MaskChannel;
int    _BlendMask_8_Mask_Fore_MaskChannel_Inverted;
float  _BlendMask_8_Mask_Fore_MaskChannel_Strength;
float  _BlendMask_8_Mask_Fore_MaskChannel_Contrast;
float  _BlendMask_8_Mask_Fore_MaskChannel_Brightness;
int    _BlendMask_8_Mask_Back_MaskChannel;
int    _BlendMask_8_Mask_Back_MaskChannel_Inverted;
float  _BlendMask_8_Mask_Back_MaskChannel_Strength;
float  _BlendMask_8_Mask_Back_MaskChannel_Contrast;
float  _BlendMask_8_Mask_Back_MaskChannel_Brightness;
float  _BlendMask_8_Opacity;
int    _BlendMask_8_Opacity_Osci_Enabled;
int    _BlendMask_8_Opacity_Osci_Slot;
float  _BlendMask_8_Opacity_Osci_Value_Start;
float  _BlendMask_8_Opacity_Osci_Value_End;
float  _BlendMask_8_Strength_PreInversion;
int    _BlendMask_8_Strength_PreInversion_Osci_Enabled;
int    _BlendMask_8_Strength_PreInversion_Osci_Slot;
float  _BlendMask_8_Strength_PreInversion_Osci_Value_Start;
float  _BlendMask_8_Strength_PreInversion_Osci_Value_End;
float  _BlendMask_8_Strength_PostInversion;
int    _BlendMask_8_Strength_PostInversion_Osci_Enabled;
int    _BlendMask_8_Strength_PostInversion_Osci_Slot;
float  _BlendMask_8_Strength_PostInversion_Osci_Value_Start;
float  _BlendMask_8_Strength_PostInversion_Osci_Value_End;
float  _ScrollMask_1_Speed;
int    _ScrollMask_1_Speed_TimeBase;
float4 _ScrollMask_1_Axis;
float  _ScrollMask_1_Frequency;
int    _ScrollMask_1_Frequency_Osci_Enabled;
int    _ScrollMask_1_Frequency_Osci_Slot;
float  _ScrollMask_1_Frequency_Osci_Value_Start;
float  _ScrollMask_1_Frequency_Osci_Value_End;
float  _ScrollMask_1_Gap;
int    _ScrollMask_1_Gap_Osci_Enabled;
int    _ScrollMask_1_Gap_Osci_Slot;
float  _ScrollMask_1_Gap_Osci_Value_Start;
float  _ScrollMask_1_Gap_Osci_Value_End;
float  _ScrollMask_1_Offset;
int    _ScrollMask_1_Offset_Osci_Enabled;
int    _ScrollMask_1_Offset_Osci_Slot;
float  _ScrollMask_1_Offset_Osci_Value_Start;
float  _ScrollMask_1_Offset_Osci_Value_End;
float  _ScrollMask_1_Strength_PreInversion;
int    _ScrollMask_1_Strength_PreInversion_Osci_Enabled;
int    _ScrollMask_1_Strength_PreInversion_Osci_Slot;
float  _ScrollMask_1_Strength_PreInversion_Osci_Value_Start;
float  _ScrollMask_1_Strength_PreInversion_Osci_Value_End;
float  _ScrollMask_1_Strength_PostInversion;
int    _ScrollMask_1_Strength_PostInversion_Osci_Enabled;
int    _ScrollMask_1_Strength_PostInversion_Osci_Slot;
float  _ScrollMask_1_Strength_PostInversion_Osci_Value_Start;
float  _ScrollMask_1_Strength_PostInversion_Osci_Value_End;
float  _ScrollMask_2_Speed;
int    _ScrollMask_2_Speed_TimeBase;
float4 _ScrollMask_2_Axis;
float  _ScrollMask_2_Frequency;
int    _ScrollMask_2_Frequency_Osci_Enabled;
int    _ScrollMask_2_Frequency_Osci_Slot;
float  _ScrollMask_2_Frequency_Osci_Value_Start;
float  _ScrollMask_2_Frequency_Osci_Value_End;
float  _ScrollMask_2_Gap;
int    _ScrollMask_2_Gap_Osci_Enabled;
int    _ScrollMask_2_Gap_Osci_Slot;
float  _ScrollMask_2_Gap_Osci_Value_Start;
float  _ScrollMask_2_Gap_Osci_Value_End;
float  _ScrollMask_2_Offset;
int    _ScrollMask_2_Offset_Osci_Enabled;
int    _ScrollMask_2_Offset_Osci_Slot;
float  _ScrollMask_2_Offset_Osci_Value_Start;
float  _ScrollMask_2_Offset_Osci_Value_End;
float  _ScrollMask_2_Strength_PreInversion;
int    _ScrollMask_2_Strength_PreInversion_Osci_Enabled;
int    _ScrollMask_2_Strength_PreInversion_Osci_Slot;
float  _ScrollMask_2_Strength_PreInversion_Osci_Value_Start;
float  _ScrollMask_2_Strength_PreInversion_Osci_Value_End;
float  _ScrollMask_2_Strength_PostInversion;
int    _ScrollMask_2_Strength_PostInversion_Osci_Enabled;
int    _ScrollMask_2_Strength_PostInversion_Osci_Slot;
float  _ScrollMask_2_Strength_PostInversion_Osci_Value_Start;
float  _ScrollMask_2_Strength_PostInversion_Osci_Value_End;
int    _MassBlendMask_1_BlendMode;
float  _MassBlendMask_1_Strength;
int    _MassBlendMask_1_Strength_Osci_Enabled;
int    _MassBlendMask_1_Strength_Osci_Slot;
float  _MassBlendMask_1_Strength_Osci_Value_Start;
float  _MassBlendMask_1_Strength_Osci_Value_End;
float  _MassBlendMask_1_Strength_PostInversion;
int    _MassBlendMask_1_Strength_PostInversion_Osci_Enabled;
int    _MassBlendMask_1_Strength_PostInversion_Osci_Slot;
float  _MassBlendMask_1_Strength_PostInversion_Osci_Value_Start;
float  _MassBlendMask_1_Strength_PostInversion_Osci_Value_End;
int    _MassBlendMask_1_1_MaskChannel;
int    _MassBlendMask_1_1_MaskChannel_Inverted;
float  _MassBlendMask_1_1_MaskChannel_Strength;
float  _MassBlendMask_1_1_MaskChannel_Contrast;
float  _MassBlendMask_1_1_MaskChannel_Brightness;
int    _MassBlendMask_1_2_MaskChannel;
int    _MassBlendMask_1_2_MaskChannel_Inverted;
float  _MassBlendMask_1_2_MaskChannel_Strength;
float  _MassBlendMask_1_2_MaskChannel_Contrast;
float  _MassBlendMask_1_2_MaskChannel_Brightness;
int    _MassBlendMask_1_3_MaskChannel;
int    _MassBlendMask_1_3_MaskChannel_Inverted;
float  _MassBlendMask_1_3_MaskChannel_Strength;
float  _MassBlendMask_1_3_MaskChannel_Contrast;
float  _MassBlendMask_1_3_MaskChannel_Brightness;
int    _MassBlendMask_1_4_MaskChannel;
int    _MassBlendMask_1_4_MaskChannel_Inverted;
float  _MassBlendMask_1_4_MaskChannel_Strength;
float  _MassBlendMask_1_4_MaskChannel_Contrast;
float  _MassBlendMask_1_4_MaskChannel_Brightness;
int    _MassBlendMask_1_5_MaskChannel;
int    _MassBlendMask_1_5_MaskChannel_Inverted;
float  _MassBlendMask_1_5_MaskChannel_Strength;
float  _MassBlendMask_1_5_MaskChannel_Contrast;
float  _MassBlendMask_1_5_MaskChannel_Brightness;
int    _MassBlendMask_1_6_MaskChannel;
int    _MassBlendMask_1_6_MaskChannel_Inverted;
float  _MassBlendMask_1_6_MaskChannel_Strength;
float  _MassBlendMask_1_6_MaskChannel_Contrast;
float  _MassBlendMask_1_6_MaskChannel_Brightness;
int    _MassBlendMask_1_7_MaskChannel;
int    _MassBlendMask_1_7_MaskChannel_Inverted;
float  _MassBlendMask_1_7_MaskChannel_Strength;
float  _MassBlendMask_1_7_MaskChannel_Contrast;
float  _MassBlendMask_1_7_MaskChannel_Brightness;
int    _MassBlendMask_1_8_MaskChannel;
int    _MassBlendMask_1_8_MaskChannel_Inverted;
float  _MassBlendMask_1_8_MaskChannel_Strength;
float  _MassBlendMask_1_8_MaskChannel_Contrast;
float  _MassBlendMask_1_8_MaskChannel_Brightness;
int    _MassBlendMask_2_BlendMode;
float  _MassBlendMask_2_Strength;
int    _MassBlendMask_2_Strength_Osci_Enabled;
int    _MassBlendMask_2_Strength_Osci_Slot;
float  _MassBlendMask_2_Strength_Osci_Value_Start;
float  _MassBlendMask_2_Strength_Osci_Value_End;
float  _MassBlendMask_2_Strength_PostInversion;
int    _MassBlendMask_2_Strength_PostInversion_Osci_Enabled;
int    _MassBlendMask_2_Strength_PostInversion_Osci_Slot;
float  _MassBlendMask_2_Strength_PostInversion_Osci_Value_Start;
float  _MassBlendMask_2_Strength_PostInversion_Osci_Value_End;
int    _MassBlendMask_2_1_MaskChannel;
int    _MassBlendMask_2_1_MaskChannel_Inverted;
float  _MassBlendMask_2_1_MaskChannel_Strength;
float  _MassBlendMask_2_1_MaskChannel_Contrast;
float  _MassBlendMask_2_1_MaskChannel_Brightness;
int    _MassBlendMask_2_2_MaskChannel;
int    _MassBlendMask_2_2_MaskChannel_Inverted;
float  _MassBlendMask_2_2_MaskChannel_Strength;
float  _MassBlendMask_2_2_MaskChannel_Contrast;
float  _MassBlendMask_2_2_MaskChannel_Brightness;
int    _MassBlendMask_2_3_MaskChannel;
int    _MassBlendMask_2_3_MaskChannel_Inverted;
float  _MassBlendMask_2_3_MaskChannel_Strength;
float  _MassBlendMask_2_3_MaskChannel_Contrast;
float  _MassBlendMask_2_3_MaskChannel_Brightness;
int    _MassBlendMask_2_4_MaskChannel;
int    _MassBlendMask_2_4_MaskChannel_Inverted;
float  _MassBlendMask_2_4_MaskChannel_Strength;
float  _MassBlendMask_2_4_MaskChannel_Contrast;
float  _MassBlendMask_2_4_MaskChannel_Brightness;
int    _MassBlendMask_2_5_MaskChannel;
int    _MassBlendMask_2_5_MaskChannel_Inverted;
float  _MassBlendMask_2_5_MaskChannel_Strength;
float  _MassBlendMask_2_5_MaskChannel_Contrast;
float  _MassBlendMask_2_5_MaskChannel_Brightness;
int    _MassBlendMask_2_6_MaskChannel;
int    _MassBlendMask_2_6_MaskChannel_Inverted;
float  _MassBlendMask_2_6_MaskChannel_Strength;
float  _MassBlendMask_2_6_MaskChannel_Contrast;
float  _MassBlendMask_2_6_MaskChannel_Brightness;
int    _MassBlendMask_2_7_MaskChannel;
int    _MassBlendMask_2_7_MaskChannel_Inverted;
float  _MassBlendMask_2_7_MaskChannel_Strength;
float  _MassBlendMask_2_7_MaskChannel_Contrast;
float  _MassBlendMask_2_7_MaskChannel_Brightness;
int    _MassBlendMask_2_8_MaskChannel;
int    _MassBlendMask_2_8_MaskChannel_Inverted;
float  _MassBlendMask_2_8_MaskChannel_Strength;
float  _MassBlendMask_2_8_MaskChannel_Contrast;
float  _MassBlendMask_2_8_MaskChannel_Brightness;
int    _LTCGI;
float  _GrabPass_Distortion_Amount;
int    _GrabPass_Distortion_Amount_MaskChannel;
int    _GrabPass_Distortion_Amount_MaskChannel_Inverted;
float  _GrabPass_Distortion_Amount_MaskChannel_Strength;
float  _GrabPass_Distortion_Amount_MaskChannel_Contrast;
float  _GrabPass_Distortion_Amount_MaskChannel_Brightness;
float  _GrabPass_Zoom_Amount;
int    _GrabPass_Blur_Enabled;
int    _GrabPass_Blur_Dispersion;
int    _GrabPass_Blur_Weight_MaskChannel;
int    _GrabPass_Blur_Weight_MaskChannel_Inverted;
float  _GrabPass_Blur_Weight_MaskChannel_Strength;
float  _GrabPass_Blur_Weight_MaskChannel_Contrast;
float  _GrabPass_Blur_Weight_MaskChannel_Brightness;
int    _GrabPass_Tint_Texture_AlphaIsMask;
float4 _GrabPass_Tint_Texture_Tiling;
float4 _GrabPass_Tint_Texture_Offset;
float4 _GrabPass_Tint_Texture_ScrollSpeed;
int    _GrabPass_Tint_Texture_ScrollSpeed_TimeBase;
int    _GrabPass_Tint_Texture_UVBus;
float4 _GrabPass_Tint_Color;
int    _GrabPass_Tint_MaskChannel;
int    _GrabPass_Tint_MaskChannel_Inverted;
float  _GrabPass_Tint_MaskChannel_Strength;
float  _GrabPass_Tint_MaskChannel_Contrast;
float  _GrabPass_Tint_MaskChannel_Brightness;
int    _Glitter_UVBus;
float  _Glitter_Density;
float  _Glitter_Amount;
int    _Glitter_Amount_Osci_Enabled;
int    _Glitter_Amount_Osci_Slot;
float  _Glitter_Amount_Osci_Value_Start;
float  _Glitter_Amount_Osci_Value_End;
float  _Glitter_Disorder;
int    _Glitter_AppearsOnMaterial;
int    _Glitter_MaskChannel;
int    _Glitter_MaskChannel_Inverted;
float  _Glitter_MaskChannel_Strength;
float  _Glitter_MaskChannel_Contrast;
float  _Glitter_MaskChannel_Brightness;
float4 _Glitter_Color;
int    _Glitter_Color_Osci_Enabled;
int    _Glitter_Color_Osci_Slot;
float4 _Glitter_Color_Osci_Color_Start;
float4 _Glitter_Color_Osci_Color_End;
float  _Glitter_Color_FromAlbedo;
int    _Glitter_Color_FromAlbedo_Osci_Enabled;
int    _Glitter_Color_FromAlbedo_Osci_Slot;
float  _Glitter_Color_FromAlbedo_Osci_Value_Start;
float  _Glitter_Color_FromAlbedo_Osci_Value_End;
float4 _Glitter_Opacity_MinMax;
int    _Glitter_Opacity_MinMax_Osci_Enabled;
int    _Glitter_Opacity_MinMax_Osci_Slot;
float4 _Glitter_Opacity_MinMax_Osci_Color_Start;
float4 _Glitter_Opacity_MinMax_Osci_Color_End;
float4 _Glitter_Size_MinMax;
int    _Glitter_Size_MinMax_Osci_Enabled;
int    _Glitter_Size_MinMax_Osci_Slot;
float4 _Glitter_Size_MinMax_Osci_Color_Start;
float4 _Glitter_Size_MinMax_Osci_Color_End;
float4 _Glitter_Brightness_MinMax;
int    _Glitter_Brightness_MinMax_Osci_Enabled;
int    _Glitter_Brightness_MinMax_Osci_Slot;
float4 _Glitter_Brightness_MinMax_Osci_Color_Start;
float4 _Glitter_Brightness_MinMax_Osci_Color_End;
int    _Glitter_Texture_Enabled;
int    _Glitter_Texture_Map_AlphaIsMask;
float4 _Glitter_Texture_Map_Tiling;
float4 _Glitter_Texture_Map_Offset;
float4 _Glitter_Texture_Zoom_MinMax;
int    _Glitter_Texture_Zoom_MinMax_Osci_Enabled;
int    _Glitter_Texture_Zoom_MinMax_Osci_Slot;
float4 _Glitter_Texture_Zoom_MinMax_Osci_Color_Start;
float4 _Glitter_Texture_Zoom_MinMax_Osci_Color_End;
int    _Glitter_Texture_Rotation_Random_Enabled;
float  _Glitter_Texture_Rotation_Speed;
int    _Glitter_Texture_Rotation_Speed_TimeBase;
int    _Glitter_HSV_Enabled;
float4 _Glitter_HSV_Hue_MinMax;
int    _Glitter_HSV_Hue_MinMax_Osci_Enabled;
int    _Glitter_HSV_Hue_MinMax_Osci_Slot;
float4 _Glitter_HSV_Hue_MinMax_Osci_Color_Start;
float4 _Glitter_HSV_Hue_MinMax_Osci_Color_End;
float4 _Glitter_HSV_Saturation_MinMax;
int    _Glitter_HSV_Saturation_MinMax_Osci_Enabled;
int    _Glitter_HSV_Saturation_MinMax_Osci_Slot;
float4 _Glitter_HSV_Saturation_MinMax_Osci_Color_Start;
float4 _Glitter_HSV_Saturation_MinMax_Osci_Color_End;
float  _Glitter_HSV_Hue_Speed;
int    _Glitter_HSV_Hue_Speed_TimeBase;
float  _Glitter_HSV_Hue_Shift;
int    _Glitter_HSV_Hue_Shift_Osci_Enabled;
int    _Glitter_HSV_Hue_Shift_Osci_Slot;
float  _Glitter_HSV_Hue_Shift_Osci_Value_Start;
float  _Glitter_HSV_Hue_Shift_Osci_Value_End;
float  _Glitter_AutoBlink_Speed;
int    _Glitter_AutoBlink_Speed_TimeBase;
float  _Glitter_AutoBlink_Randomness;
int    _Glitter_ManualBlink_Enabled;
float  _Glitter_ManualBlink_Offset;
int    _Glitter_ManualBlink_Offset_Osci_Enabled;
int    _Glitter_ManualBlink_Offset_Osci_Slot;
float  _Glitter_ManualBlink_Offset_Osci_Value_Start;
float  _Glitter_ManualBlink_Offset_Osci_Value_End;
float  _Glitter_ManualBlink_Offset_Randomness;
float4 _Glitter_UV_Scroll_Speed;
int    _Glitter_UV_Scroll_Speed_TimeBase;
float  _PostProcessHSV_Hue_Shift;
int    _PostProcessHSV_Hue_Shift_Osci_Enabled;
int    _PostProcessHSV_Hue_Shift_Osci_Slot;
float  _PostProcessHSV_Hue_Shift_Osci_Value_Start;
float  _PostProcessHSV_Hue_Shift_Osci_Value_End;
float  _PostProcessHSV_Sat_Shift;
int    _PostProcessHSV_Sat_Shift_Osci_Enabled;
int    _PostProcessHSV_Sat_Shift_Osci_Slot;
float  _PostProcessHSV_Sat_Shift_Osci_Value_Start;
float  _PostProcessHSV_Sat_Shift_Osci_Value_End;
float  _PostProcessHSV_Value_Shift;
int    _PostProcessHSV_Value_Shift_Osci_Enabled;
int    _PostProcessHSV_Value_Shift_Osci_Slot;
float  _PostProcessHSV_Value_Shift_Osci_Value_Start;
float  _PostProcessHSV_Value_Shift_Osci_Value_End;
float  _PostProcessHSV_Hue_Speed;
int    _PostProcessHSV_Hue_Speed_TimeBase;
int    _DistanceDither_Enabled;
int    _DistanceDither_Separate_Faces;
float  _DistanceDither_Front_Distance_Start;
float  _DistanceDither_Front_Distance_End;
float  _DistanceDither_Back_Distance_Start;
float  _DistanceDither_Back_Distance_End;
float  _DistanceDither_Front_Bias;
float  _DistanceDither_Back_Bias;
int    _DistanceDither_MaskChannel;
int    _DistanceDither_MaskChannel_Inverted;
float  _DistanceDither_MaskChannel_Strength;
float  _DistanceDither_MaskChannel_Contrast;
float  _DistanceDither_MaskChannel_Brightness;
int    _BackfaceFill_Enabled;
float4 _BackfaceFill_Color;
int    _PreviewMirror;
float  _Cutoff;
int    _Cutoff_Osci_Enabled;
int    _Cutoff_Osci_Slot;
float  _Cutoff_Osci_Value_Start;
float  _Cutoff_Osci_Value_End;
int    _FlipNormalsOnBackFacingTris;
int    _Osci_Slot_1_Type;
float  _Osci_Slot_1_Speed;
int    _Osci_Slot_1_Speed_TimeBase;
float  _Osci_Slot_1_Square_DutyCycle;
int    _Osci_Slot_1_Sine_HalfWave;
int    _Osci_Slot_2_Type;
float  _Osci_Slot_2_Speed;
int    _Osci_Slot_2_Speed_TimeBase;
float  _Osci_Slot_2_Square_DutyCycle;
int    _Osci_Slot_2_Sine_HalfWave;
int    _Osci_Slot_3_Type;
float  _Osci_Slot_3_Speed;
int    _Osci_Slot_3_Speed_TimeBase;
float  _Osci_Slot_3_Square_DutyCycle;
int    _Osci_Slot_3_Sine_HalfWave;
int    _Osci_Slot_4_Type;
float  _Osci_Slot_4_Speed;
int    _Osci_Slot_4_Speed_TimeBase;
float  _Osci_Slot_4_Square_DutyCycle;
int    _Osci_Slot_4_Sine_HalfWave;
int    _Osci_Slot_5_Type;
float  _Osci_Slot_5_Speed;
int    _Osci_Slot_5_Speed_TimeBase;
float  _Osci_Slot_5_Square_DutyCycle;
int    _Osci_Slot_5_Sine_HalfWave;
int    _Osci_Slot_6_Type;
float  _Osci_Slot_6_Speed;
int    _Osci_Slot_6_Speed_TimeBase;
float  _Osci_Slot_6_Square_DutyCycle;
int    _Osci_Slot_6_Sine_HalfWave;
int    _Osci_ALBand_1_Band;
int    _Osci_ALBand_1_Smoothness_Enabled;
float  _Osci_ALBand_1_Smoothness_Level;
float  _Osci_ALBand_1_Fallback_Type;
float  _Osci_ALBand_1_Fallback_Osci;
float  _Osci_ALBand_1_Fallback_Value;
int    _Osci_ALBand_2_Band;
int    _Osci_ALBand_2_Smoothness_Enabled;
float  _Osci_ALBand_2_Smoothness_Level;
float  _Osci_ALBand_2_Fallback_Type;
float  _Osci_ALBand_2_Fallback_Osci;
float  _Osci_ALBand_2_Fallback_Value;
int    _Osci_ALBand_3_Band;
int    _Osci_ALBand_3_Smoothness_Enabled;
float  _Osci_ALBand_3_Smoothness_Level;
float  _Osci_ALBand_3_Fallback_Type;
float  _Osci_ALBand_3_Fallback_Osci;
float  _Osci_ALBand_3_Fallback_Value;
int    _Osci_ALBand_4_Band;
int    _Osci_ALBand_4_Smoothness_Enabled;
float  _Osci_ALBand_4_Smoothness_Level;
float  _Osci_ALBand_4_Fallback_Type;
float  _Osci_ALBand_4_Fallback_Osci;
float  _Osci_ALBand_4_Fallback_Value;
int    _Osci_ALBand_5_Band;
int    _Osci_ALBand_5_Smoothness_Enabled;
float  _Osci_ALBand_5_Smoothness_Level;
float  _Osci_ALBand_5_Fallback_Type;
float  _Osci_ALBand_5_Fallback_Osci;
float  _Osci_ALBand_5_Fallback_Value;
int    _Osci_ALBand_6_Band;
int    _Osci_ALBand_6_Smoothness_Enabled;
float  _Osci_ALBand_6_Smoothness_Level;
float  _Osci_ALBand_6_Fallback_Type;
float  _Osci_ALBand_6_Fallback_Osci;
float  _Osci_ALBand_6_Fallback_Value;
int    _Osci_ALEnergy_1_Smoothness_Enabled;
float  _Osci_ALEnergy_1_Smoothness_Level;
float  _Osci_ALEnergy_1_Fallback_Type;
float  _Osci_ALEnergy_1_Fallback_Osci;
float  _Osci_ALEnergy_1_Fallback_Value;
int    _Osci_ALEnergy_2_Smoothness_Enabled;
float  _Osci_ALEnergy_2_Smoothness_Level;
float  _Osci_ALEnergy_2_Fallback_Type;
float  _Osci_ALEnergy_2_Fallback_Osci;
float  _Osci_ALEnergy_2_Fallback_Value;
int    _Osci_Mask_1_MaskChannel;
int    _Osci_Mask_1_MaskChannel_Inverted;
float  _Osci_Mask_1_MaskChannel_Strength;
float  _Osci_Mask_1_MaskChannel_Contrast;
float  _Osci_Mask_1_MaskChannel_Brightness;
int    _Osci_Mask_2_MaskChannel;
int    _Osci_Mask_2_MaskChannel_Inverted;
float  _Osci_Mask_2_MaskChannel_Strength;
float  _Osci_Mask_2_MaskChannel_Contrast;
float  _Osci_Mask_2_MaskChannel_Brightness;
int    _Osci_Mask_3_MaskChannel;
int    _Osci_Mask_3_MaskChannel_Inverted;
float  _Osci_Mask_3_MaskChannel_Strength;
float  _Osci_Mask_3_MaskChannel_Contrast;
float  _Osci_Mask_3_MaskChannel_Brightness;
int    _Osci_Mask_4_MaskChannel;
int    _Osci_Mask_4_MaskChannel_Inverted;
float  _Osci_Mask_4_MaskChannel_Strength;
float  _Osci_Mask_4_MaskChannel_Contrast;
float  _Osci_Mask_4_MaskChannel_Brightness;
int    _Osci_Mask_5_MaskChannel;
int    _Osci_Mask_5_MaskChannel_Inverted;
float  _Osci_Mask_5_MaskChannel_Strength;
float  _Osci_Mask_5_MaskChannel_Contrast;
float  _Osci_Mask_5_MaskChannel_Brightness;
int    _Osci_Mask_6_MaskChannel;
int    _Osci_Mask_6_MaskChannel_Inverted;
float  _Osci_Mask_6_MaskChannel_Strength;
float  _Osci_Mask_6_MaskChannel_Contrast;
float  _Osci_Mask_6_MaskChannel_Brightness;
int    _Osci_Mask_7_MaskChannel;
int    _Osci_Mask_7_MaskChannel_Inverted;
float  _Osci_Mask_7_MaskChannel_Strength;
float  _Osci_Mask_7_MaskChannel_Contrast;
float  _Osci_Mask_7_MaskChannel_Brightness;
int    _Osci_Mask_8_MaskChannel;
int    _Osci_Mask_8_MaskChannel_Inverted;
float  _Osci_Mask_8_MaskChannel_Strength;
float  _Osci_Mask_8_MaskChannel_Contrast;
float  _Osci_Mask_8_MaskChannel_Brightness;
int    _TimeBase_AL_Slot_1_Type;
int    _TimeBase_AL_Slot_1_Band;
int    _TimeBase_AL_Slot_1_UseTimeAsFallback;
int    _TimeBase_AL_Slot_1_AddTime;
float  _TimeBase_AL_Slot_1_Strength;
int    _TimeBase_AL_Slot_2_Type;
int    _TimeBase_AL_Slot_2_Band;
int    _TimeBase_AL_Slot_2_UseTimeAsFallback;
int    _TimeBase_AL_Slot_2_AddTime;
float  _TimeBase_AL_Slot_2_Strength;
int    _TimeBase_AL_Slot_3_Type;
int    _TimeBase_AL_Slot_3_Band;
int    _TimeBase_AL_Slot_3_UseTimeAsFallback;
int    _TimeBase_AL_Slot_3_AddTime;
float  _TimeBase_AL_Slot_3_Strength;
int    _TimeBase_AL_Slot_4_Type;
int    _TimeBase_AL_Slot_4_Band;
int    _TimeBase_AL_Slot_4_UseTimeAsFallback;
int    _TimeBase_AL_Slot_4_AddTime;
float  _TimeBase_AL_Slot_4_Strength;
int    _TimeBase_AL_Slot_5_Type;
int    _TimeBase_AL_Slot_5_Band;
int    _TimeBase_AL_Slot_5_UseTimeAsFallback;
int    _TimeBase_AL_Slot_5_AddTime;
float  _TimeBase_AL_Slot_5_Strength;
int    _TimeBase_AL_Slot_6_Type;
int    _TimeBase_AL_Slot_6_Band;
int    _TimeBase_AL_Slot_6_UseTimeAsFallback;
int    _TimeBase_AL_Slot_6_AddTime;
float  _TimeBase_AL_Slot_6_Strength;
int    _Diffuse_Type;
float  _Diffuse_Ramp_1_Start;
float  _Diffuse_Ramp_1_End;
float  _Diffuse_Ramp_1_Offset;
float  _Diffuse_Ramp_2_Start;
float  _Diffuse_Ramp_2_End;
float  _Diffuse_Ramp_2_Offset;
float  _Diffuse_Ramp_Blend;
float4 _Diffuse_Shadow_Tint_Color;
float  _LightProbeWeight;
float4 _LightProbe_Shadow_Tint_Color;
float  _LightColor_Weight;
int    _FallbackLight_Enabled;
float4 _FallbackLight_Direction;
float4 _FallbackLight_Color;
int    _Outline_Enabled;
float  _Outline_Size;
float4 _Outline_Color;
float  _Outline_Mask_Cutoff;
int    _Outline_MaskChannel;
int    _Outline_MaskChannel_Inverted;
float  _Outline_MaskChannel_Strength;
float  _Outline_MaskChannel_Contrast;
float  _Outline_MaskChannel_Brightness;
int    _Outline_AppearsOnMaterial;
int    _EarlyZ_Enabled;
int    _AudioLink_Disabled;

/* MARKER VARIABLES END */
  
  #if defined(RALIV_PENETRATOR) || defined(RALIV_ORIFICE)
    #include "Assets/RalivDynamicPenetrationSystem/Plugins/RalivDPS_Defines.cginc"
  #endif

#else
  #if defined(RALIV_ORIFICE)
	  sampler2D _OrificeData;
  #endif
#endif

SamplerState _SamplerLinearRepeat;
SamplerState _SamplerLinearClamp;
SamplerState _SamplerTrilinearClamp;
SamplerState _SamplerLinearMirror;

#if defined(NOT_BAKED)
  /* MARKER TEXTURE INCLUDE DEFINES START */
#define is_MaskChannel_1_Texture_set true
#define is_MaskChannel_2_Texture_set true
#define is_MaskChannel_3_Texture_set true
#define is_MaskChannel_4_Texture_set true
#define is_MaskChannel_5_Texture_set true
#define is_MaskChannel_6_Texture_set true
#define is_MaskChannel_7_Texture_set true
#define is_MaskChannel_8_Texture_set true
#define is_MainTex_set true
#define is_Mix_MainTex_set true
#define is_SecondaryTex_set true
#define is_Mix_SecondaryTex_set true
#define is_OcclusionMap_set true
#define is_Mix_OcclusionMap_set true
#define is_BumpMap_set true
#define is_Mix_BumpMap_set true
#define is_DetailNormalMap_set true
#define is_Mix_DetailNormalMap_set true
#define is_EmissionMap_set true
#define is_Mix_EmissionMap_set true
#define is_EmissionMap2_set true
#define is_Mix_EmissionMap2_set true
#define is_Matcap_1_Texture_set true
#define is_Mix_Matcap_1_Texture_set true
#define is_Matcap_2_Texture_set true
#define is_Mix_Matcap_2_Texture_set true
#define is_Matcap_3_Texture_set true
#define is_Mix_Matcap_3_Texture_set true
#define is_FakeCubemap_Texture_set true
#define is_TF_AnimationMap_set true
#define is_UVBus_1_Distortion_Texture_set true
#define is_UVBus_2_Distortion_Texture_set true
#define is_UVBus_3_Distortion_Texture_set true
#define is_UVBus_4_Distortion_Texture_set true
#define is_UVBus_5_Distortion_Texture_set true
#define is_UVBus_6_Distortion_Texture_set true
#define is_GrabPass_Tint_Texture_set true
#define is_Glitter_Texture_Map_set true
#define is_Diffuse_LUT_Texture_set true

/* MARKER TEXTURE INCLUDE DEFINES END */
#endif

Texture2D _MainTex;
Texture2D _Mix_MainTex;

Texture2D _SecondaryTex;
Texture2D _Mix_SecondaryTex;

Texture2D _OcclusionMap;
Texture2D _Mix_OcclusionMap;

Texture2D _DetailNormalMap;
Texture2D _Mix_DetailNormalMap;

Texture2D _BumpMap;
Texture2D _Mix_BumpMap;

Texture2D _Matcap_1_Texture;
Texture2D _Mix_Matcap_1_Texture;

Texture2D _Matcap_2_Texture;
Texture2D _Mix_Matcap_2_Texture;

Texture2D _Matcap_3_Texture;
Texture2D _Mix_Matcap_3_Texture;

Texture2D _EmissionMap;
Texture2D _Mix_EmissionMap;

Texture2D _EmissionMap2;
Texture2D _Mix_EmissionMap2;

Texture2D _UVBus_1_Distortion_Texture;
Texture2D _UVBus_2_Distortion_Texture;
Texture2D _UVBus_3_Distortion_Texture;
Texture2D _UVBus_4_Distortion_Texture;
Texture2D _UVBus_5_Distortion_Texture;
Texture2D _UVBus_6_Distortion_Texture;

// NOTE(valuef): Whenever SAMPLE_DEPTH_TEXTURE_LOD is defined to be UNITY_SAMPLE_TEX2DARRAY_LOD
// 2024-01-24
#if defined(UNITY_STEREO_INSTANCING_ENABLED) || defined(UNITY_STEREO_MULTIVIEW_ENABLED)
  #define USE_2D_ARRAY_DEPTH
#endif

#if defined(USE_2D_ARRAY_DEPTH)
  Texture2DArray _CameraDepthTexture;
  SamplerState sampler_CameraDepthTexture;

  #define SAMPLE_DEPTH(uv) _CameraDepthTexture.SampleLevel(sampler_CameraDepthTexture, float3((uv).x, (uv).y, (float)unity_StereoEyeIndex), 0).r;

#else
  Texture2D<float> _CameraDepthTexture;
  SamplerState sampler_CameraDepthTexture;

  #define SAMPLE_DEPTH(uv) _CameraDepthTexture.SampleLevel(sampler_CameraDepthTexture, uv, 0).r;

#endif

inline
bool
is_depth_texture_available() {
  float size_x;
  float size_y;

  #if defined(USE_2D_ARRAY_DEPTH)
    float num_elements;
    _CameraDepthTexture.GetDimensions(size_x, size_y, num_elements);
  #else
    _CameraDepthTexture.GetDimensions(size_x, size_y);
  #endif

  return size_x > 16 && size_y > 16;
}

TextureCube _FakeCubemap_Texture;
SamplerState sampler_FakeCubemap_Texture;
half4 _FakeCubemap_Texture_HDR;

Texture2D _TF_AnimationMap;

Texture2D _MaskChannel_1_Texture;
Texture2D _MaskChannel_2_Texture;
Texture2D _MaskChannel_3_Texture;
Texture2D _MaskChannel_4_Texture;
Texture2D _MaskChannel_5_Texture;
Texture2D _MaskChannel_6_Texture;
Texture2D _MaskChannel_7_Texture;
Texture2D _MaskChannel_8_Texture;

Texture2D _Glitter_Texture_Map;

#if defined(VFGOO_GRABPASS)
  Texture2D _GrabPass;
  Texture2D _GrabPass_Tint_Texture;
#endif

struct Oscillator_Info {
  bool enabled;

  int slot;

  float4 default_value;
  float4 start;
  float4 end;
};

Oscillator_Info make_oscillator_info(bool enabled, int slot, float4 default_value, float4 start, float4 end) {
  Oscillator_Info ret;
  ret.enabled = enabled;
  ret.slot = slot;
  ret.default_value = default_value;
  ret.start = start;
  ret.end = end;
  return ret;
}

static const Oscillator_Info OSCILLATOR_INFO_NONE = make_oscillator_info(false, 0, float4(0,0,0,0), float4(0,0,0,0), float4(0,0,0,0));

#define make_oscillator_value(_name, _default) \
  static Oscillator_Info _name = make_oscillator_info( \
    _name##_Enabled, \
    _name##_Slot, \
    _default, \
    _name##_Value_Start.rrrr, \
    _name##_Value_End.rrrr \
  )

#define make_oscillator_color4(_name, _default) \
  static Oscillator_Info _name = make_oscillator_info( \
    _name##_Enabled, \
    _name##_Slot, \
    _default, \
    _name##_Color_Start, \
    _name##_Color_End \
  )

/* MARKER OSCILLATOR INFO START */
make_oscillator_value(_MaskChannel_1_Strength_PreInversion_Osci, _MaskChannel_1_Strength_PreInversion);
make_oscillator_value(_MaskChannel_1_Strength_PostInversion_Osci, _MaskChannel_1_Strength_PostInversion);
make_oscillator_value(_MaskChannel_2_Strength_PreInversion_Osci, _MaskChannel_2_Strength_PreInversion);
make_oscillator_value(_MaskChannel_2_Strength_PostInversion_Osci, _MaskChannel_2_Strength_PostInversion);
make_oscillator_value(_MaskChannel_3_Strength_PreInversion_Osci, _MaskChannel_3_Strength_PreInversion);
make_oscillator_value(_MaskChannel_3_Strength_PostInversion_Osci, _MaskChannel_3_Strength_PostInversion);
make_oscillator_value(_MaskChannel_4_Strength_PreInversion_Osci, _MaskChannel_4_Strength_PreInversion);
make_oscillator_value(_MaskChannel_4_Strength_PostInversion_Osci, _MaskChannel_4_Strength_PostInversion);
make_oscillator_value(_MaskChannel_5_Strength_PreInversion_Osci, _MaskChannel_5_Strength_PreInversion);
make_oscillator_value(_MaskChannel_5_Strength_PostInversion_Osci, _MaskChannel_5_Strength_PostInversion);
make_oscillator_value(_MaskChannel_6_Strength_PreInversion_Osci, _MaskChannel_6_Strength_PreInversion);
make_oscillator_value(_MaskChannel_6_Strength_PostInversion_Osci, _MaskChannel_6_Strength_PostInversion);
make_oscillator_value(_MaskChannel_7_Strength_PreInversion_Osci, _MaskChannel_7_Strength_PreInversion);
make_oscillator_value(_MaskChannel_7_Strength_PostInversion_Osci, _MaskChannel_7_Strength_PostInversion);
make_oscillator_value(_MaskChannel_8_Strength_PreInversion_Osci, _MaskChannel_8_Strength_PreInversion);
make_oscillator_value(_MaskChannel_8_Strength_PostInversion_Osci, _MaskChannel_8_Strength_PostInversion);
make_oscillator_color4(_Color_Osci, _Color);
make_oscillator_color4(_Mix_Color_Osci, _Mix_Color);
make_oscillator_color4(_SecondaryTex_Color_Osci, _SecondaryTex_Color);
make_oscillator_color4(_Mix_SecondaryTex_Color_Osci, _Mix_SecondaryTex_Color);
make_oscillator_value(_Opacity_Osci, _Opacity);
make_oscillator_value(_Mix_Opacity_Osci, _Mix_Opacity);
make_oscillator_value(_BumpScale_Osci, _BumpScale);
make_oscillator_value(_Mix_BumpScale_Osci, _Mix_BumpScale);
make_oscillator_value(_DetailBumpScale_Osci, _DetailBumpScale);
make_oscillator_value(_Mix_DetailBumpScale_Osci, _Mix_DetailBumpScale);
make_oscillator_color4(_EmissionColor_Osci, _EmissionColor);
make_oscillator_color4(_Mix_EmissionColor_Osci, _Mix_EmissionColor);
make_oscillator_color4(_EmissionColor2_Osci, _EmissionColor2);
make_oscillator_color4(_Mix_EmissionColor2_Osci, _Mix_EmissionColor2);
make_oscillator_color4(_Matcap_1_Color_Osci, _Matcap_1_Color);
make_oscillator_color4(_Mix_Matcap_1_Color_Osci, _Mix_Matcap_1_Color);
make_oscillator_color4(_Matcap_2_Color_Osci, _Matcap_2_Color);
make_oscillator_color4(_Mix_Matcap_2_Color_Osci, _Mix_Matcap_2_Color);
make_oscillator_color4(_Matcap_3_Color_Osci, _Matcap_3_Color);
make_oscillator_color4(_Mix_Matcap_3_Color_Osci, _Mix_Matcap_3_Color);
make_oscillator_value(_AlbedoEmissionWeight_Osci, _AlbedoEmissionWeight);
make_oscillator_color4(_AddedEmissionColor_Osci, _AddedEmissionColor);
make_oscillator_value(_Mix_AlbedoEmissionWeight_Osci, _Mix_AlbedoEmissionWeight);
make_oscillator_color4(_Mix_AddedEmissionColor_Osci, _Mix_AddedEmissionColor);
make_oscillator_value(_Goo_Size_Osci, _Goo_Size);
make_oscillator_color4(_Goo_Offset_Osci, _Goo_Offset);
make_oscillator_value(_Goo_Deformation_MeshNormal_Offset_Min_Osci, _Goo_Deformation_MeshNormal_Offset_Min);
make_oscillator_value(_Goo_Deformation_MeshNormal_Offset_Max_Osci, _Goo_Deformation_MeshNormal_Offset_Max);
make_oscillator_value(_Goo_Deformation_ProceduralNormal_Size_Osci, _Goo_Deformation_ProceduralNormal_Size);
make_oscillator_value(_Goo_Drip_Size_Osci, _Goo_Drip_Size);
make_oscillator_value(_Goo_Drip_Start_Osci, _Goo_Drip_Start);
make_oscillator_value(_Goo_Drip_End_Osci, _Goo_Drip_End);
make_oscillator_value(_Goo_Drip_Amount_Osci, _Goo_Drip_Amount);
make_oscillator_color4(_CapsuleMask_1_Origin_Osci, _CapsuleMask_1_Origin);
make_oscillator_color4(_CapsuleMask_1_Axis_Osci, _CapsuleMask_1_Axis);
make_oscillator_value(_CapsuleMask_1_Radius_Osci, _CapsuleMask_1_Radius);
make_oscillator_value(_CapsuleMask_1_Height_Osci, _CapsuleMask_1_Height);
make_oscillator_value(_CapsuleMask_1_Strength_PreInversion_Osci, _CapsuleMask_1_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_1_Strength_PostInversion_Osci, _CapsuleMask_1_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_2_Origin_Osci, _CapsuleMask_2_Origin);
make_oscillator_color4(_CapsuleMask_2_Axis_Osci, _CapsuleMask_2_Axis);
make_oscillator_value(_CapsuleMask_2_Radius_Osci, _CapsuleMask_2_Radius);
make_oscillator_value(_CapsuleMask_2_Height_Osci, _CapsuleMask_2_Height);
make_oscillator_value(_CapsuleMask_2_Strength_PreInversion_Osci, _CapsuleMask_2_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_2_Strength_PostInversion_Osci, _CapsuleMask_2_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_3_Origin_Osci, _CapsuleMask_3_Origin);
make_oscillator_color4(_CapsuleMask_3_Axis_Osci, _CapsuleMask_3_Axis);
make_oscillator_value(_CapsuleMask_3_Radius_Osci, _CapsuleMask_3_Radius);
make_oscillator_value(_CapsuleMask_3_Height_Osci, _CapsuleMask_3_Height);
make_oscillator_value(_CapsuleMask_3_Strength_PreInversion_Osci, _CapsuleMask_3_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_3_Strength_PostInversion_Osci, _CapsuleMask_3_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_4_Origin_Osci, _CapsuleMask_4_Origin);
make_oscillator_color4(_CapsuleMask_4_Axis_Osci, _CapsuleMask_4_Axis);
make_oscillator_value(_CapsuleMask_4_Radius_Osci, _CapsuleMask_4_Radius);
make_oscillator_value(_CapsuleMask_4_Height_Osci, _CapsuleMask_4_Height);
make_oscillator_value(_CapsuleMask_4_Strength_PreInversion_Osci, _CapsuleMask_4_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_4_Strength_PostInversion_Osci, _CapsuleMask_4_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_5_Origin_Osci, _CapsuleMask_5_Origin);
make_oscillator_color4(_CapsuleMask_5_Axis_Osci, _CapsuleMask_5_Axis);
make_oscillator_value(_CapsuleMask_5_Radius_Osci, _CapsuleMask_5_Radius);
make_oscillator_value(_CapsuleMask_5_Height_Osci, _CapsuleMask_5_Height);
make_oscillator_value(_CapsuleMask_5_Strength_PreInversion_Osci, _CapsuleMask_5_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_5_Strength_PostInversion_Osci, _CapsuleMask_5_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_6_Origin_Osci, _CapsuleMask_6_Origin);
make_oscillator_color4(_CapsuleMask_6_Axis_Osci, _CapsuleMask_6_Axis);
make_oscillator_value(_CapsuleMask_6_Radius_Osci, _CapsuleMask_6_Radius);
make_oscillator_value(_CapsuleMask_6_Height_Osci, _CapsuleMask_6_Height);
make_oscillator_value(_CapsuleMask_6_Strength_PreInversion_Osci, _CapsuleMask_6_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_6_Strength_PostInversion_Osci, _CapsuleMask_6_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_7_Origin_Osci, _CapsuleMask_7_Origin);
make_oscillator_color4(_CapsuleMask_7_Axis_Osci, _CapsuleMask_7_Axis);
make_oscillator_value(_CapsuleMask_7_Radius_Osci, _CapsuleMask_7_Radius);
make_oscillator_value(_CapsuleMask_7_Height_Osci, _CapsuleMask_7_Height);
make_oscillator_value(_CapsuleMask_7_Strength_PreInversion_Osci, _CapsuleMask_7_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_7_Strength_PostInversion_Osci, _CapsuleMask_7_Strength_PostInversion);
make_oscillator_color4(_CapsuleMask_8_Origin_Osci, _CapsuleMask_8_Origin);
make_oscillator_color4(_CapsuleMask_8_Axis_Osci, _CapsuleMask_8_Axis);
make_oscillator_value(_CapsuleMask_8_Radius_Osci, _CapsuleMask_8_Radius);
make_oscillator_value(_CapsuleMask_8_Height_Osci, _CapsuleMask_8_Height);
make_oscillator_value(_CapsuleMask_8_Strength_PreInversion_Osci, _CapsuleMask_8_Strength_PreInversion);
make_oscillator_value(_CapsuleMask_8_Strength_PostInversion_Osci, _CapsuleMask_8_Strength_PostInversion);
make_oscillator_value(_TF_Manual_Osci, 1);
make_oscillator_value(_TF_Time_Osci, _TF_Time);
make_oscillator_value(_LightMix_Sensitivity_Osci, _LightMix_Sensitivity);
make_oscillator_value(_UVBus_1_Distortion_Texture_Strength_Osci, _UVBus_1_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_2_Distortion_Texture_Strength_Osci, _UVBus_2_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_3_Distortion_Texture_Strength_Osci, _UVBus_3_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_4_Distortion_Texture_Strength_Osci, _UVBus_4_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_5_Distortion_Texture_Strength_Osci, _UVBus_5_Distortion_Texture_Strength);
make_oscillator_value(_UVBus_6_Distortion_Texture_Strength_Osci, _UVBus_6_Distortion_Texture_Strength);
make_oscillator_value(_RimMask_1_Start_Osci, _RimMask_1_Start);
make_oscillator_value(_RimMask_1_End_Osci, _RimMask_1_End);
make_oscillator_value(_RimMask_1_Strength_PreInversion_Osci, _RimMask_1_Strength_PreInversion);
make_oscillator_value(_RimMask_1_Strength_PostInversion_Osci, _RimMask_1_Strength_PostInversion);
make_oscillator_value(_RimMask_1_Smoothing_Osci, _RimMask_1_Smoothing);
make_oscillator_value(_RimMask_2_Start_Osci, _RimMask_2_Start);
make_oscillator_value(_RimMask_2_End_Osci, _RimMask_2_End);
make_oscillator_value(_RimMask_2_Strength_PreInversion_Osci, _RimMask_2_Strength_PreInversion);
make_oscillator_value(_RimMask_2_Strength_PostInversion_Osci, _RimMask_2_Strength_PostInversion);
make_oscillator_value(_RimMask_2_Smoothing_Osci, _RimMask_2_Smoothing);
make_oscillator_value(_RimMask_3_Start_Osci, _RimMask_3_Start);
make_oscillator_value(_RimMask_3_End_Osci, _RimMask_3_End);
make_oscillator_value(_RimMask_3_Strength_PreInversion_Osci, _RimMask_3_Strength_PreInversion);
make_oscillator_value(_RimMask_3_Strength_PostInversion_Osci, _RimMask_3_Strength_PostInversion);
make_oscillator_value(_RimMask_3_Smoothing_Osci, _RimMask_3_Smoothing);
make_oscillator_value(_RimMask_4_Start_Osci, _RimMask_4_Start);
make_oscillator_value(_RimMask_4_End_Osci, _RimMask_4_End);
make_oscillator_value(_RimMask_4_Strength_PreInversion_Osci, _RimMask_4_Strength_PreInversion);
make_oscillator_value(_RimMask_4_Strength_PostInversion_Osci, _RimMask_4_Strength_PostInversion);
make_oscillator_value(_RimMask_4_Smoothing_Osci, _RimMask_4_Smoothing);
make_oscillator_value(_DistanceMask_1_Distance_Start_Osci, _DistanceMask_1_Distance_Start);
make_oscillator_value(_DistanceMask_1_Distance_End_Osci, _DistanceMask_1_Distance_End);
make_oscillator_value(_DistanceMask_1_Strength_PreInversion_Osci, _DistanceMask_1_Strength_PreInversion);
make_oscillator_value(_DistanceMask_1_Strength_PostInversion_Osci, _DistanceMask_1_Strength_PostInversion);
make_oscillator_value(_DistanceMask_2_Distance_Start_Osci, _DistanceMask_2_Distance_Start);
make_oscillator_value(_DistanceMask_2_Distance_End_Osci, _DistanceMask_2_Distance_End);
make_oscillator_value(_DistanceMask_2_Strength_PreInversion_Osci, _DistanceMask_2_Strength_PreInversion);
make_oscillator_value(_DistanceMask_2_Strength_PostInversion_Osci, _DistanceMask_2_Strength_PostInversion);
make_oscillator_value(_TouchReactivityInteractionMask_Intensity_Pre_Osci, _TouchReactivityInteractionMask_Intensity_Pre);
make_oscillator_value(_TouchReactivityInteractionMask_Intensity_Osci, _TouchReactivityInteractionMask_Intensity);
make_oscillator_value(_BlendMask_1_Opacity_Osci, _BlendMask_1_Opacity);
make_oscillator_value(_BlendMask_1_Strength_PreInversion_Osci, _BlendMask_1_Strength_PreInversion);
make_oscillator_value(_BlendMask_1_Strength_PostInversion_Osci, _BlendMask_1_Strength_PostInversion);
make_oscillator_value(_BlendMask_2_Opacity_Osci, _BlendMask_2_Opacity);
make_oscillator_value(_BlendMask_2_Strength_PreInversion_Osci, _BlendMask_2_Strength_PreInversion);
make_oscillator_value(_BlendMask_2_Strength_PostInversion_Osci, _BlendMask_2_Strength_PostInversion);
make_oscillator_value(_BlendMask_3_Opacity_Osci, _BlendMask_3_Opacity);
make_oscillator_value(_BlendMask_3_Strength_PreInversion_Osci, _BlendMask_3_Strength_PreInversion);
make_oscillator_value(_BlendMask_3_Strength_PostInversion_Osci, _BlendMask_3_Strength_PostInversion);
make_oscillator_value(_BlendMask_4_Opacity_Osci, _BlendMask_4_Opacity);
make_oscillator_value(_BlendMask_4_Strength_PreInversion_Osci, _BlendMask_4_Strength_PreInversion);
make_oscillator_value(_BlendMask_4_Strength_PostInversion_Osci, _BlendMask_4_Strength_PostInversion);
make_oscillator_value(_BlendMask_5_Opacity_Osci, _BlendMask_5_Opacity);
make_oscillator_value(_BlendMask_5_Strength_PreInversion_Osci, _BlendMask_5_Strength_PreInversion);
make_oscillator_value(_BlendMask_5_Strength_PostInversion_Osci, _BlendMask_5_Strength_PostInversion);
make_oscillator_value(_BlendMask_6_Opacity_Osci, _BlendMask_6_Opacity);
make_oscillator_value(_BlendMask_6_Strength_PreInversion_Osci, _BlendMask_6_Strength_PreInversion);
make_oscillator_value(_BlendMask_6_Strength_PostInversion_Osci, _BlendMask_6_Strength_PostInversion);
make_oscillator_value(_BlendMask_7_Opacity_Osci, _BlendMask_7_Opacity);
make_oscillator_value(_BlendMask_7_Strength_PreInversion_Osci, _BlendMask_7_Strength_PreInversion);
make_oscillator_value(_BlendMask_7_Strength_PostInversion_Osci, _BlendMask_7_Strength_PostInversion);
make_oscillator_value(_BlendMask_8_Opacity_Osci, _BlendMask_8_Opacity);
make_oscillator_value(_BlendMask_8_Strength_PreInversion_Osci, _BlendMask_8_Strength_PreInversion);
make_oscillator_value(_BlendMask_8_Strength_PostInversion_Osci, _BlendMask_8_Strength_PostInversion);
make_oscillator_value(_ScrollMask_1_Frequency_Osci, _ScrollMask_1_Frequency);
make_oscillator_value(_ScrollMask_1_Gap_Osci, _ScrollMask_1_Gap);
make_oscillator_value(_ScrollMask_1_Offset_Osci, _ScrollMask_1_Offset);
make_oscillator_value(_ScrollMask_1_Strength_PreInversion_Osci, _ScrollMask_1_Strength_PreInversion);
make_oscillator_value(_ScrollMask_1_Strength_PostInversion_Osci, _ScrollMask_1_Strength_PostInversion);
make_oscillator_value(_ScrollMask_2_Frequency_Osci, _ScrollMask_2_Frequency);
make_oscillator_value(_ScrollMask_2_Gap_Osci, _ScrollMask_2_Gap);
make_oscillator_value(_ScrollMask_2_Offset_Osci, _ScrollMask_2_Offset);
make_oscillator_value(_ScrollMask_2_Strength_PreInversion_Osci, _ScrollMask_2_Strength_PreInversion);
make_oscillator_value(_ScrollMask_2_Strength_PostInversion_Osci, _ScrollMask_2_Strength_PostInversion);
make_oscillator_value(_MassBlendMask_1_Strength_Osci, _MassBlendMask_1_Strength);
make_oscillator_value(_MassBlendMask_1_Strength_PostInversion_Osci, _MassBlendMask_1_Strength_PostInversion);
make_oscillator_value(_MassBlendMask_2_Strength_Osci, _MassBlendMask_2_Strength);
make_oscillator_value(_MassBlendMask_2_Strength_PostInversion_Osci, _MassBlendMask_2_Strength_PostInversion);
make_oscillator_value(_Glitter_Amount_Osci, _Glitter_Amount);
make_oscillator_color4(_Glitter_Color_Osci, _Glitter_Color);
make_oscillator_value(_Glitter_Color_FromAlbedo_Osci, _Glitter_Color_FromAlbedo);
make_oscillator_color4(_Glitter_Opacity_MinMax_Osci, _Glitter_Opacity_MinMax);
make_oscillator_color4(_Glitter_Size_MinMax_Osci, _Glitter_Size_MinMax);
make_oscillator_color4(_Glitter_Brightness_MinMax_Osci, _Glitter_Brightness_MinMax);
make_oscillator_color4(_Glitter_Texture_Zoom_MinMax_Osci, _Glitter_Texture_Zoom_MinMax);
make_oscillator_color4(_Glitter_HSV_Hue_MinMax_Osci, _Glitter_HSV_Hue_MinMax);
make_oscillator_color4(_Glitter_HSV_Saturation_MinMax_Osci, _Glitter_HSV_Saturation_MinMax);
make_oscillator_value(_Glitter_HSV_Hue_Shift_Osci, _Glitter_HSV_Hue_Shift);
make_oscillator_value(_Glitter_ManualBlink_Offset_Osci, _Glitter_ManualBlink_Offset);
make_oscillator_value(_PostProcessHSV_Hue_Shift_Osci, _PostProcessHSV_Hue_Shift);
make_oscillator_value(_PostProcessHSV_Sat_Shift_Osci, _PostProcessHSV_Sat_Shift);
make_oscillator_value(_PostProcessHSV_Value_Shift_Osci, _PostProcessHSV_Value_Shift);
make_oscillator_value(_Cutoff_Osci, _Cutoff);

/* MARKER OSCILLATOR INFO END */

#undef make_oscillator_value
#undef make_oscillator_color4


struct Mask_Info {
  int channel;
  bool inverted;
  float strength;
  float contrast;
  float brightness;
};

Mask_Info
make_mask_info(
  int channel, 
  int inverted, 
  float strength, 
  float contrast, 
  float brightness
) {
  Mask_Info ret;
  ret.channel = channel;
  ret.inverted = inverted != 0;
  ret.strength = strength;
  ret.contrast = contrast;
  ret.brightness = brightness;
  return ret;
}

#define make_mask_info_variable(_name) \
  static const Mask_Info _name = make_mask_info( \
    _name##Channel, \
    _name##Channel_Inverted, \
    _name##Channel_Strength, \
    _name##Channel_Contrast, \
    _name##Channel_Brightness \
  );

/* MARKER MASK INFO START */
make_mask_info_variable(_MainTex_Mask);
make_mask_info_variable(_Mix_MainTex_Mask);
make_mask_info_variable(_SecondaryTex_Mask);
make_mask_info_variable(_Mix_SecondaryTex_Mask);
make_mask_info_variable(_Opacity_Mask);
make_mask_info_variable(_Mix_Opacity_Mask);
make_mask_info_variable(_OcclusionMap_Mask);
make_mask_info_variable(_Mix_OcclusionMap_Mask);
make_mask_info_variable(_BumpMap_Mask);
make_mask_info_variable(_Mix_BumpMap_Mask);
make_mask_info_variable(_DetailNormalMap_Mask);
make_mask_info_variable(_Mix_DetailNormalMap_Mask);
make_mask_info_variable(_EmissionMap_Mask);
make_mask_info_variable(_Mix_EmissionMap_Mask);
make_mask_info_variable(_EmissionMap2_Mask);
make_mask_info_variable(_Mix_EmissionMap2_Mask);
make_mask_info_variable(_Matcap_1_Texture_Mask);
make_mask_info_variable(_Mix_Matcap_1_Texture_Mask);
make_mask_info_variable(_Matcap_2_Texture_Mask);
make_mask_info_variable(_Mix_Matcap_2_Texture_Mask);
make_mask_info_variable(_Matcap_3_Texture_Mask);
make_mask_info_variable(_Mix_Matcap_3_Texture_Mask);
make_mask_info_variable(_AlbedoEmissionWeight_Mask);
make_mask_info_variable(_AddedEmissionColor_Mask);
make_mask_info_variable(_Mix_AlbedoEmissionWeight_Mask);
make_mask_info_variable(_Mix_AddedEmissionColor_Mask);
make_mask_info_variable(_Glossiness_Mask);
make_mask_info_variable(_Metallic_Mask);
make_mask_info_variable(_Mix_Glossiness_Mask);
make_mask_info_variable(_Mix_Metallic_Mask);
make_mask_info_variable(_Goo_Deformation_MeshNormal_Mask);
make_mask_info_variable(_Goo_Drip_Mask);
make_mask_info_variable(_Physbone_1_Mask);
make_mask_info_variable(_Physbone_2_Mask);
make_mask_info_variable(_Physbone_3_Mask);
make_mask_info_variable(_Physbone_4_Mask);
make_mask_info_variable(_Physbone_Drip_Mask);
make_mask_info_variable(_Physbone_Body_Mask);
make_mask_info_variable(_TF_Manual_Mask);
make_mask_info_variable(_DebugVisualisation_Mask);
make_mask_info_variable(_TF_Bulging_Mask);
make_mask_info_variable(_TouchReactivity_Mask);
make_mask_info_variable(_ProximityDistortion_Mask);
make_mask_info_variable(_BlendMask_1_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_1_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_2_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_2_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_3_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_3_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_4_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_4_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_5_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_5_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_6_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_6_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_7_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_7_Mask_Back_Mask);
make_mask_info_variable(_BlendMask_8_Mask_Fore_Mask);
make_mask_info_variable(_BlendMask_8_Mask_Back_Mask);
make_mask_info_variable(_MassBlendMask_1_1_Mask);
make_mask_info_variable(_MassBlendMask_1_2_Mask);
make_mask_info_variable(_MassBlendMask_1_3_Mask);
make_mask_info_variable(_MassBlendMask_1_4_Mask);
make_mask_info_variable(_MassBlendMask_1_5_Mask);
make_mask_info_variable(_MassBlendMask_1_6_Mask);
make_mask_info_variable(_MassBlendMask_1_7_Mask);
make_mask_info_variable(_MassBlendMask_1_8_Mask);
make_mask_info_variable(_MassBlendMask_2_1_Mask);
make_mask_info_variable(_MassBlendMask_2_2_Mask);
make_mask_info_variable(_MassBlendMask_2_3_Mask);
make_mask_info_variable(_MassBlendMask_2_4_Mask);
make_mask_info_variable(_MassBlendMask_2_5_Mask);
make_mask_info_variable(_MassBlendMask_2_6_Mask);
make_mask_info_variable(_MassBlendMask_2_7_Mask);
make_mask_info_variable(_MassBlendMask_2_8_Mask);
make_mask_info_variable(_GrabPass_Distortion_Amount_Mask);
make_mask_info_variable(_GrabPass_Blur_Weight_Mask);
make_mask_info_variable(_GrabPass_Tint_Mask);
make_mask_info_variable(_Glitter_Mask);
make_mask_info_variable(_DistanceDither_Mask);
make_mask_info_variable(_Osci_Mask_1_Mask);
make_mask_info_variable(_Osci_Mask_2_Mask);
make_mask_info_variable(_Osci_Mask_3_Mask);
make_mask_info_variable(_Osci_Mask_4_Mask);
make_mask_info_variable(_Osci_Mask_5_Mask);
make_mask_info_variable(_Osci_Mask_6_Mask);
make_mask_info_variable(_Osci_Mask_7_Mask);
make_mask_info_variable(_Osci_Mask_8_Mask);
make_mask_info_variable(_Outline_Mask);

/* MARKER MASK INFO END */

#undef make_mask_info_variable

struct Texture_Info {
  Texture2D tex;
  SamplerState samp;
  float2 tiling;
  float2 offset;
  float2 scroll;
  Mask_Info mask;
  int uv_bus;
  int time_base_slot;

  bool is_set;
  float4 default_value;

  bool alpha_is_mask;
};

Texture_Info
make_tex_info(
  Texture2D tex,
  SamplerState samp,
  float2 tiling,
  float2 offset,
  float2 scroll,
  Mask_Info mask,
  int uv_bus,
  bool is_set,
  float4 default_value,
  bool alpha_is_mask,
  int time_base_slot
) {
  Texture_Info ret;
  ret.tex = tex;
  ret.samp = samp;
  ret.tiling = tiling;
  ret.offset = offset;
  ret.scroll = scroll;
  ret.mask = mask;
  ret.uv_bus = uv_bus;
  ret.is_set = is_set;
  ret.default_value = default_value;
  ret.alpha_is_mask = alpha_is_mask;
  ret.time_base_slot = time_base_slot;
  return ret;
}

static Mask_Info MASK_INFO_NONE = make_mask_info(0,0,1,1,0);

#define make_tex_info_mask(_name, _sampler, _is_set, _default, _alpha_is_mask, _mask) \
  make_tex_info(_name, _sampler, _name##_Tiling, _name##_Offset, _name##_ScrollSpeed, _mask, _name##_UVBus, _is_set, _default, _alpha_is_mask, _name##_ScrollSpeed_TimeBase)

#define make_tex_info_standard(_name, _sampler, _is_set, _default, _alpha_is_mask) \
  make_tex_info(_name, _sampler, _name##_Tiling, _name##_Offset, _name##_ScrollSpeed, _name##_Mask, _name##_UVBus, _is_set, _default, _alpha_is_mask, _name##_ScrollSpeed_TimeBase)

#define NO_TEX_TILING float4(1,1,0,0)
#define NO_TEX_OFFSET float4(1,1,0,0)
#define NO_TEX_SCROLL float2(0,0)

static Texture_Info MainTex                     = make_tex_info_standard(_MainTex,                    _SamplerLinearRepeat, is_MainTex_set,                     float4(1,1,1,1), _MainTex_AlphaIsMask);
static Texture_Info Mix_MainTex                 = make_tex_info_standard(_Mix_MainTex,                _SamplerLinearRepeat, is_Mix_MainTex_set,                 float4(1,1,1,1), _Mix_MainTex_AlphaIsMask);

static Texture_Info SecondaryTex                = make_tex_info_standard(_SecondaryTex,               _SamplerLinearRepeat, is_SecondaryTex_set,                float4(1,1,1,1), _SecondaryTex_AlphaIsMask);
static Texture_Info Mix_SecondaryTex            = make_tex_info_standard(_Mix_SecondaryTex,           _SamplerLinearRepeat, is_Mix_SecondaryTex_set,            float4(1,1,1,1), _Mix_SecondaryTex_AlphaIsMask);

static Texture_Info OcclusionMap                = make_tex_info_standard(_OcclusionMap,               _SamplerLinearRepeat, is_OcclusionMap_set,                float4(1,1,1,1), false);
static Texture_Info Mix_OcclusionMap            = make_tex_info_standard(_Mix_OcclusionMap,           _SamplerLinearRepeat, is_Mix_OcclusionMap_set,            float4(1,1,1,1), false);

static Texture_Info BumpMap                     = make_tex_info_standard(_BumpMap,                    _SamplerLinearRepeat, is_BumpMap_set,                     float4(0,0,1,1), false);
static Texture_Info Mix_BumpMap                 = make_tex_info_standard(_Mix_BumpMap,                _SamplerLinearRepeat, is_Mix_BumpMap_set,                 float4(0,0,1,1), false);

static Texture_Info DetailNormalMap             = make_tex_info_standard(_DetailNormalMap,            _SamplerLinearRepeat, is_DetailNormalMap_set,             float4(.5,.5,1,1), false);
static Texture_Info Mix_DetailNormalMap         = make_tex_info_standard(_Mix_DetailNormalMap,        _SamplerLinearRepeat, is_Mix_DetailNormalMap_set,         float4(.5,.5,1,1), false);

static Texture_Info EmissionMap                 = make_tex_info_standard(_EmissionMap,                _SamplerLinearRepeat, is_EmissionMap_set,                 float4(0,0,0,0), _EmissionMap_AlphaIsMask);
static Texture_Info Mix_EmissionMap             = make_tex_info_standard(_Mix_EmissionMap,            _SamplerLinearRepeat, is_Mix_EmissionMap_set,             float4(0,0,0,0), _Mix_EmissionMap_AlphaIsMask);

static Texture_Info EmissionMap2                = make_tex_info_standard(_EmissionMap2,               _SamplerLinearRepeat, is_EmissionMap2_set,                float4(0,0,0,0), _EmissionMap2_AlphaIsMask);
static Texture_Info Mix_EmissionMap2            = make_tex_info_standard(_Mix_EmissionMap2,           _SamplerLinearRepeat, is_Mix_EmissionMap2_set,            float4(0,0,0,0), _Mix_EmissionMap2_AlphaIsMask);

static Texture_Info Matcap_1_Texture            = make_tex_info(_Matcap_1_Texture,      _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Matcap_1_Texture_Mask,      UV_BUS_UV0, is_Matcap_1_Texture_set,      float4(0,0,0,0), _Matcap_1_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);
static Texture_Info Mix_Matcap_1_Texture        = make_tex_info(_Mix_Matcap_1_Texture,  _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Mix_Matcap_1_Texture_Mask,  UV_BUS_UV0, is_Mix_Matcap_1_Texture_set,  float4(0,0,0,0), _Mix_Matcap_1_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);

static Texture_Info Matcap_2_Texture            = make_tex_info(_Matcap_2_Texture,      _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Matcap_2_Texture_Mask,      UV_BUS_UV0, is_Matcap_2_Texture_set,      float4(0,0,0,0), _Matcap_2_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);
static Texture_Info Mix_Matcap_2_Texture        = make_tex_info(_Mix_Matcap_2_Texture,  _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Mix_Matcap_2_Texture_Mask,  UV_BUS_UV0, is_Mix_Matcap_2_Texture_set,  float4(0,0,0,0), _Mix_Matcap_2_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);

static Texture_Info Matcap_3_Texture            = make_tex_info(_Matcap_3_Texture,      _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Matcap_3_Texture_Mask,      UV_BUS_UV0, is_Matcap_3_Texture_set,      float4(0,0,0,0), _Matcap_3_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);
static Texture_Info Mix_Matcap_3_Texture        = make_tex_info(_Mix_Matcap_3_Texture,  _SamplerLinearRepeat, NO_TEX_TILING, NO_TEX_OFFSET, NO_TEX_SCROLL, _Mix_Matcap_3_Texture_Mask,  UV_BUS_UV0, is_Mix_Matcap_3_Texture_set,  float4(0,0,0,0), _Mix_Matcap_3_Texture_AlphaIsMask, TIMEBASE_SLOT_BASE);

#if defined(VFGOO_GRABPASS)
  static Texture_Info GrabPass_Tint_Texture     = make_tex_info_mask(_GrabPass_Tint_Texture,      _SamplerLinearRepeat, is_GrabPass_Tint_Texture_set,         float4(1,1,1,1), _GrabPass_Tint_Texture_AlphaIsMask, MASK_INFO_NONE);
#endif

inline 
bool can_use_audiolink() {
  if(_AudioLink_Disabled) {
    return false;
  }

  return AudioLinkIsAvailable();
}

float 
evaluate_al_time_base(
  int type,
  float strength,
  int band,
  int use_time_as_fallback,
  bool combine_with_normal_time
) {
  [branch] if(can_use_audiolink()) {
    // TIMEBASE_AL_TYPE_INCREASING             0
    // TIMEBASE_AL_TYPE_INCREASING_SMOOTHED    1
    // TIMEBASE_AL_TYPE_BACK_N_FORTH           2
    // TIMEBASE_AL_TYPE_BACK_N_FORTH_SMOOTHED  3
    float time = AudioLinkGetChronoTime(type, band);

    time *= strength;

    EDITOR_BRANCH if(combine_with_normal_time) {
      time = _Time.y + time;
    }

    return time;
  } 
  else if(use_time_as_fallback) {
    return _Time.y;
  }
  else {
    return 0;
  }
}

void 
init_time_bases() {
  TIME_BASES.slots[TIMEBASE_SLOT_BASE] = _Time.y;

  TIME_BASES.slots[TIMEBASE_SLOT_AL_1] = evaluate_al_time_base(
    _TimeBase_AL_Slot_1_Type, 
    _TimeBase_AL_Slot_1_Strength,
    _TimeBase_AL_Slot_1_Band,
    _TimeBase_AL_Slot_1_UseTimeAsFallback,
    _TimeBase_AL_Slot_1_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_2] = evaluate_al_time_base(
    _TimeBase_AL_Slot_2_Type, 
    _TimeBase_AL_Slot_2_Strength,
    _TimeBase_AL_Slot_2_Band,
    _TimeBase_AL_Slot_2_UseTimeAsFallback,
    _TimeBase_AL_Slot_2_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_3] = evaluate_al_time_base(
    _TimeBase_AL_Slot_3_Type, 
    _TimeBase_AL_Slot_3_Strength,
    _TimeBase_AL_Slot_3_Band,
    _TimeBase_AL_Slot_3_UseTimeAsFallback,
    _TimeBase_AL_Slot_3_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_4] = evaluate_al_time_base(
    _TimeBase_AL_Slot_4_Type, 
    _TimeBase_AL_Slot_4_Strength,
    _TimeBase_AL_Slot_4_Band,
    _TimeBase_AL_Slot_4_UseTimeAsFallback,
    _TimeBase_AL_Slot_4_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_5] = evaluate_al_time_base(
    _TimeBase_AL_Slot_5_Type, 
    _TimeBase_AL_Slot_5_Strength,
    _TimeBase_AL_Slot_5_Band,
    _TimeBase_AL_Slot_5_UseTimeAsFallback,
    _TimeBase_AL_Slot_5_AddTime
  );

  TIME_BASES.slots[TIMEBASE_SLOT_AL_6] = evaluate_al_time_base(
    _TimeBase_AL_Slot_6_Type, 
    _TimeBase_AL_Slot_6_Strength,
    _TimeBase_AL_Slot_6_Band,
    _TimeBase_AL_Slot_6_UseTimeAsFallback,
    _TimeBase_AL_Slot_6_AddTime
  );
}

float
evaluate_simple_oscillator(
  int   type,
  float speed,
  int   time_base_slot,
  float square_duty_cycle,
  int   sine_half_wave
) {
  float time = get_time(time_base_slot) * speed;

  EDITOR_BRANCH switch(type) {
    case OSCI_SIMPLE_TYPE_SIN: {
      EDITOR_BRANCH if(sine_half_wave) {
        return saturate(sin(time));
      }
      else {
        return sin(time) * .5 + .5;
      }
    }
    case OSCI_SIMPLE_TYPE_SQUARE: {
      if(frac(time) > square_duty_cycle) {
        return 1;
      }
      return 0;
    }
    case OSCI_SIMPLE_TYPE_SAW: {
      return frac(time);
    }
    case OSCI_SIMPLE_TYPE_TRIANGLE: {

      if(fmod(int(time), 2) == 0) {
        return frac(time);
      }
      else {
        return 1 - frac(time);
      }
    }
  }
  return 1;
}

float 
handle_al_fallback(
  float al_value,
  int   fallback_type,
  int   fallback_osci,
  float fallback_value
) {
  [branch] if(can_use_audiolink()) {
    return al_value;
  }

  EDITOR_BRANCH if(fallback_type == 0) {
    return fallback_value;
  }
  else {
    return OSCILLATORS.slots[fallback_osci];
  }
}

float
evaluate_al_band_oscillator(
  int   band,
  bool  use_smoothness,
  float smoothness,
  int   fallback_type,
  int   fallback_osci,
  float fallback_value
) {
  float ret;

  if(use_smoothness) {
    // NOTE(valuef): 0 is most smoothed, 15 is least so we invert the smoothness param 
    // 2023-11-12
    float x_off = 15 - smoothness;
    float y_off = band;
    float4 tap = AudioLinkData(ALPASS_FILTEREDAUDIOLINK + int2(x_off, y_off));

    ret = tap.r;
  }
  else {
    float y_off = band;
    float4 tap = AudioLinkData(ALPASS_AUDIOLINK + int2(0, y_off));

    ret = tap.r;
  }

  return handle_al_fallback(ret, fallback_type, fallback_osci, fallback_value);
}

float
evaluate_al_energy_osci(
  bool  use_smoothness,
  float smoothness,
  int   fallback_type,
  int   fallback_osci,
  float fallback_value
) {

  float4 vu_data;
  if(use_smoothness) {
    // NOTE(valuef): 0 for most smoothed, 3 is most smoothed. Editor assumes 0
    // is least and 3 is most smoothed so we have to invert the value.
    // The 0th x bin accumulates a lot of data so it's not really useful. We skip it entirely with the +1
    // 2024-01-14
    vu_data = AudioLinkData(ALPASS_FILTEREDVU + uint2(3 - smoothness + 1, 0));
  }
  else {
    vu_data = AudioLinkData(ALPASS_GENERALVU + uint2(8, 0));
  }

  // r: RMS Left
  // g: Peak Left	
  // b: RMS Right
  // a: Peak right
  float rms = (vu_data.r + vu_data.b) * .5;

  return handle_al_fallback(rms, fallback_type, fallback_osci, fallback_value);
}

void
init_oscillators() {
  OSCILLATORS.slots[OSCI_SIMPLE_1] = evaluate_simple_oscillator(
    _Osci_Slot_1_Type,
    _Osci_Slot_1_Speed,
    _Osci_Slot_1_Speed_TimeBase,
    _Osci_Slot_1_Square_DutyCycle,
    _Osci_Slot_1_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_2] = evaluate_simple_oscillator(
    _Osci_Slot_2_Type,
    _Osci_Slot_2_Speed,
    _Osci_Slot_2_Speed_TimeBase,
    _Osci_Slot_2_Square_DutyCycle,
    _Osci_Slot_2_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_3] = evaluate_simple_oscillator(
    _Osci_Slot_3_Type,
    _Osci_Slot_3_Speed,
    _Osci_Slot_3_Speed_TimeBase,
    _Osci_Slot_3_Square_DutyCycle,
    _Osci_Slot_3_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_4] = evaluate_simple_oscillator(
    _Osci_Slot_4_Type,
    _Osci_Slot_4_Speed,
    _Osci_Slot_4_Speed_TimeBase,
    _Osci_Slot_4_Square_DutyCycle,
    _Osci_Slot_4_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_5] = evaluate_simple_oscillator(
    _Osci_Slot_5_Type,
    _Osci_Slot_5_Speed,
    _Osci_Slot_5_Speed_TimeBase,
    _Osci_Slot_5_Square_DutyCycle,
    _Osci_Slot_5_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_6] = evaluate_simple_oscillator(
    _Osci_Slot_6_Type,
    _Osci_Slot_6_Speed,
    _Osci_Slot_6_Speed_TimeBase,
    _Osci_Slot_6_Square_DutyCycle,
    _Osci_Slot_6_Sine_HalfWave
  );

  OSCILLATORS.slots[OSCI_SIMPLE_IS_AL_AVAILABLE] = can_use_audiolink() ? 1 : 0;

  OSCILLATORS.slots[OSCI_AL_BAND_1] = evaluate_al_band_oscillator(
    _Osci_ALBand_1_Band,
    _Osci_ALBand_1_Smoothness_Enabled,
    _Osci_ALBand_1_Smoothness_Level,
    _Osci_ALBand_1_Fallback_Type,
    _Osci_ALBand_1_Fallback_Osci,
    _Osci_ALBand_1_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_2] = evaluate_al_band_oscillator(
    _Osci_ALBand_2_Band,
    _Osci_ALBand_2_Smoothness_Enabled,
    _Osci_ALBand_2_Smoothness_Level,
    _Osci_ALBand_2_Fallback_Type,
    _Osci_ALBand_2_Fallback_Osci,
    _Osci_ALBand_2_Fallback_Value

  );

  OSCILLATORS.slots[OSCI_AL_BAND_3] = evaluate_al_band_oscillator(
    _Osci_ALBand_3_Band,
    _Osci_ALBand_3_Smoothness_Enabled,
    _Osci_ALBand_3_Smoothness_Level,
    _Osci_ALBand_3_Fallback_Type,
    _Osci_ALBand_3_Fallback_Osci,
    _Osci_ALBand_3_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_4] = evaluate_al_band_oscillator(
    _Osci_ALBand_4_Band,
    _Osci_ALBand_4_Smoothness_Enabled,
    _Osci_ALBand_4_Smoothness_Level,
    _Osci_ALBand_4_Fallback_Type,
    _Osci_ALBand_4_Fallback_Osci,
    _Osci_ALBand_4_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_5] = evaluate_al_band_oscillator(
    _Osci_ALBand_5_Band,
    _Osci_ALBand_5_Smoothness_Enabled,
    _Osci_ALBand_5_Smoothness_Level,
    _Osci_ALBand_5_Fallback_Type,
    _Osci_ALBand_5_Fallback_Osci,
    _Osci_ALBand_5_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_BAND_6] = evaluate_al_band_oscillator(
    _Osci_ALBand_6_Band,
    _Osci_ALBand_6_Smoothness_Enabled,
    _Osci_ALBand_6_Smoothness_Level,
    _Osci_ALBand_6_Fallback_Type,
    _Osci_ALBand_6_Fallback_Osci,
    _Osci_ALBand_6_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_ENERGY_1] = evaluate_al_energy_osci(
    _Osci_ALEnergy_1_Smoothness_Enabled,
    _Osci_ALEnergy_1_Smoothness_Level,
    _Osci_ALEnergy_1_Fallback_Type,
    _Osci_ALEnergy_1_Fallback_Osci,
    _Osci_ALEnergy_1_Fallback_Value
  );

  OSCILLATORS.slots[OSCI_AL_ENERGY_2] = evaluate_al_energy_osci(
    _Osci_ALEnergy_2_Smoothness_Enabled,
    _Osci_ALEnergy_2_Smoothness_Level,
    _Osci_ALEnergy_2_Fallback_Type,
    _Osci_ALEnergy_2_Fallback_Osci,
    _Osci_ALEnergy_2_Fallback_Value
  );
}

float4 
get_value(Oscillator_Info info) {
  if(!info.enabled) {
    return info.default_value;
  }

  float osci = OSCILLATORS.slots[info.slot];
  return lerp(info.start, info.end, osci.rrrr);
}

#define XYZ_COMPONENT_X 0
#define XYZ_COMPONENT_Y 1
#define XYZ_COMPONENT_Z 2

#define UV_VERTEX_CHANNEL_0 0
#define UV_VERTEX_CHANNEL_1 1
#define UV_VERTEX_CHANNEL_3 2
#define UV_VERTEX_CHANNEL_4 3
#define UV_VERTEX_CHANNEL_5 4
#define UV_VERTEX_CHANNEL_6 5
#define UV_VERTEX_CHANNEL_7 6

#define UV_SPECIAL_SOURCE_VERTEX_CHANNEL  0  
#define UV_SPECIAL_SOURCE_WORLD_LOCATION  1
#define UV_SPECIAL_SOURCE_BAKED_VERTEX    2
#define UV_SPECIAL_SOURCE_SKINNED_VERTEX  3

float2
make_uv_special(
  float2 uv0,
  float2 uv1,
  float2 uv3,
  float2 uv4,
  float2 uv5,
  float2 uv6,
  float2 uv7,
  float3 world_vertex,
  float3 baked_vertex,
  float3 skinned_vertex,

  int source,
  int vertex_channel,
  int world_location_x,
  int world_location_y,
  int baked_vertex_x,
  int baked_vertex_y,
  int skinned_vertex_x,
  int skinned_vertex_y,
  Texture2D distortion_tex,
  float2 distortion_tiling,
  float2 distortion_offset,
  float2 distortion_scroll,
  int distortion_uv_bus,
  bool distortion_is_set,
  Oscillator_Info distortion_strength,
  int distortion_time_base_slot
) {
  float2 uv = float2(0,0);
  
  EDITOR_BRANCH switch(source) {
    case UV_SPECIAL_SOURCE_VERTEX_CHANNEL:
      float2 uv_channels[7] = { uv0, uv1, uv3, uv4, uv5, uv6, uv7 };
      uv = uv_channels[vertex_channel];
      break;
    case UV_SPECIAL_SOURCE_WORLD_LOCATION:
      uv.x = world_vertex[world_location_x];
      uv.y = world_vertex[world_location_y];
      break;
    case UV_SPECIAL_SOURCE_BAKED_VERTEX: 
      uv.x = baked_vertex[baked_vertex_x];
      uv.y = baked_vertex[baked_vertex_y];
      break;
    case UV_SPECIAL_SOURCE_SKINNED_VERTEX:
      uv.x = skinned_vertex[skinned_vertex_x];
      uv.y = skinned_vertex[skinned_vertex_y];
      break;
  }

  if(distortion_is_set) {
    float2 distortion = sample_texture_2d(
      distortion_tex, 
      distortion_tiling, 
      distortion_offset,
      distortion_scroll, 
      distortion_uv_bus,
      _SamplerLinearRepeat,
      distortion_time_base_slot
    );

    // NOTE(valuef): .5 to adjust for the * 2
    // 2024-01-15
    uv += .5 * (distortion * 2 - 1) * get_value(distortion_strength);
  }

  return uv;
}


void
init_uv_bus(
  float2 uv0,
  float2 uv1,
  float2 uv3,
  float2 uv4,
  float2 uv5,
  float2 uv6,
  float2 uv7,
  float3 world_vertex,
  float3 baked_pos,
  float3 skinned_vertex
) {
  UV_BUSES = (UV_Bus)0;

  UV_BUSES.uv[UV_BUS_UV0] = uv0;
  UV_BUSES.uv[UV_BUS_UV1] = uv1;
  UV_BUSES.uv[UV_BUS_UV3] = uv3;
  UV_BUSES.uv[UV_BUS_UV4] = uv4;
  UV_BUSES.uv[UV_BUS_UV5] = uv5;
  UV_BUSES.uv[UV_BUS_UV6] = uv6;
  UV_BUSES.uv[UV_BUS_UV7] = uv7;


  {
    // NOTE(valuef): Adapted poiyomi panosphere UVs. 
    // Retrieved 2023-08-28.
    //
    // MIT BEGIN
    //MIT License

    //Copyright (c) 2023 Poiyomi Inc.

    //Permission is hereby granted, free of charge, to any person obtaining a copy
    //of this software and associated documentation files (the "Software"), to deal
    //in the Software without restriction, including without limitation the rights
    //to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    //copies of the Software, and to permit persons to whom the Software is
    //furnished to do so, subject to the following conditions:

    //The above copyright notice and this permission notice shall be included in all
    //copies or substantial portions of the Software.

    //THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    //IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    //FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    //AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    //LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    //OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    //SOFTWARE.

    float3 camera;
    #ifdef USING_STEREO_MATRICES
      camera = (unity_StereoWorldSpaceCameraPos[0] + unity_StereoWorldSpaceCameraPos[1]) * .5;
    #else
      camera = _WorldSpaceCameraPos.xyz;
    #endif

    float3 normalizedCoords = normalize(world_vertex - camera);

    float latitude = acos(normalizedCoords.y);
    float longitude = atan2(normalizedCoords.z, normalizedCoords.x);
    float phi = longitude / (UNITY_PI * 2.0);
    float phi_frac = frac(phi);
    if(!IS_VERTEX_SHADER) {
      longitude = fwidth(phi) - 0.0001 < fwidth(phi_frac) ? phi : phi_frac;
    }
    longitude *= 2;
    float2 sphereCoords = float2(longitude, latitude) * float2(0.5, 1.0 / UNITY_PI);
    sphereCoords = float2(0.5, 1.0) - sphereCoords;
    sphereCoords = (sphereCoords + float4(0, 1 - unity_StereoEyeIndex, 1, 0.5).xy) * float4(0, 1 - unity_StereoEyeIndex, 1, 0.5).zw;
    // MIT END

    UV_BUSES.uv[UV_BUS_PANOSPHERE] = sphereCoords;
  }

  #define make_special(_prefix) \
    make_uv_special( \
      uv0, uv1, uv3, uv4, uv5, uv6, uv7, \
      world_vertex, baked_pos, skinned_vertex, \
      _prefix##_Source, \
      _prefix##_VertexChannel_Channel, \
      _prefix##_WorldLocation_XComponent, \
      _prefix##_WorldLocation_YComponent, \
      _prefix##_BakedVertex_XComponent, \
      _prefix##_BakedVertex_YComponent, \
      _prefix##_SkinnedVertex_XComponent, \
      _prefix##_SkinnedVertex_YComponent, \
      _prefix##_Distortion_Texture, \
      _prefix##_Distortion_Texture_Tiling, \
      _prefix##_Distortion_Texture_Offset, \
      _prefix##_Distortion_Texture_ScrollSpeed, \
      _prefix##_Distortion_Texture_UVBus, \
      is##_prefix##_Distortion_Texture_set, \
      _prefix##_Distortion_Texture_Strength_Osci, \
      _prefix##_Distortion_Texture_ScrollSpeed_TimeBase \
    )

  #if defined(VFGOO_ENABLE_UV_BUS_1)
    UV_BUSES.uv[UV_BUS_1] = make_special(_UVBus_1);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_2)
    UV_BUSES.uv[UV_BUS_2] = make_special(_UVBus_2);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_3)
    UV_BUSES.uv[UV_BUS_3] = make_special(_UVBus_3);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_4)
    UV_BUSES.uv[UV_BUS_4] = make_special(_UVBus_4);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_5)
    UV_BUSES.uv[UV_BUS_5] = make_special(_UVBus_5);
  #endif

  #if defined(VFGOO_ENABLE_UV_BUS_6)
    UV_BUSES.uv[UV_BUS_6] = make_special(_UVBus_6);
  #endif

  #undef make_special
}

#define APPEARS_ON_MATERIAL_BOTH          0
#define APPEARS_ON_MATERIAL_ONLY_PRE_TF   1
#define APPEARS_ON_MATERIAL_ONLY_POST_TF  2

#define MASK_NONE                           0

#define MASK_1_R                            1
#define MASK_1_G                            2
#define MASK_1_B                            3
#define MASK_1_A                            4

#define MASK_2_R                            5
#define MASK_2_G                            6
#define MASK_2_B                            7
#define MASK_2_A                            8

#define MASK_3_R                            9
#define MASK_3_G                            10
#define MASK_3_B                            11
#define MASK_3_A                            12

#define MASK_4_R                            13
#define MASK_4_G                            14
#define MASK_4_B                            15
#define MASK_4_A                            16

#define MASK_5_R                            17
#define MASK_5_G                            18
#define MASK_5_B                            19
#define MASK_5_A                            20

#define MASK_6_R                            21
#define MASK_6_G                            22
#define MASK_6_B                            23
#define MASK_6_A                            24

#define MASK_7_R                            25
#define MASK_7_G                            26
#define MASK_7_B                            27
#define MASK_7_A                            28

#define MASK_8_R                            29
#define MASK_8_G                            30
#define MASK_8_B                            31
#define MASK_8_A                            32

#define MASK_GOO_NOISE                      33
#define MASK_GOO_DRIP                       34

#define MASK_VERTEX_COLOR_R                 35
#define MASK_VERTEX_COLOR_G                 36
#define MASK_VERTEX_COLOR_B                 37
#define MASK_VERTEX_COLOR_A                 38

#define MASK_IS_AL_AVAILABLE                39
#define MASK_RIM_4                          40
// unused 41
// unused 42

#define MASK_CAPSULE_1                      43
#define MASK_CAPSULE_2                      44
#define MASK_CAPSULE_3                      45
#define MASK_CAPSULE_4                      46

#define MASK_POINT_LIGHTS                   47

#define MASK_RIM_1                          48
#define MASK_RIM_2                          49

#define MASK_TOUCH_REACTIVITY_INTERACTION   50 

#define MASK_BLEND_1                        51
#define MASK_BLEND_2                        52
#define MASK_BLEND_3                        53
#define MASK_BLEND_4                        54
#define MASK_BLEND_5                        55
#define MASK_BLEND_6                        56
#define MASK_BLEND_7                        57
#define MASK_BLEND_8                        58

#define MASK_RIM_3                          59

#define MASK_CAPSULE_5                      60
#define MASK_CAPSULE_6                      61
#define MASK_CAPSULE_7                      62
#define MASK_CAPSULE_8                      63

#define MASK_SCROLL_1                       64
#define MASK_SCROLL_2                       65

#define MASK_MASSBLEND_1                    66
#define MASK_MASSBLEND_2                    67

#define MASK_BACKFACE                       68

#define MASK_DISTANCE_1               69
#define MASK_DISTANCE_2               70

#define MASK_MAX                            71

struct Mask_Channels {
  // NOTE(valuef): x is the normal mask, y is the inverted masks.
  // We do this because some masks have special case inversions as we can't just 1-x them due to that creating
  // an undesirable inversion due to some lossy math that we do. For those cases, we need to do the 1-x inversion as early
  // as we can in the math, and not after we've done all the math.
  // 2023-09-12
  float2 masks[MASK_MAX];
};

static Mask_Channels MASK_CHANNELS;

// @DelayedGooDripEvaluationInVS
// NOTE(valuef): We ignore the inverted mask on the MASK_GOO_DRIP mask in the VS because for
// performance reasons we evaluate it in the middle of the VS and not immediatelly. This means that
// the Mask_Channels is not fully initialized for half of the VS beacuse we pass it a bogus
// placeholder value of 0. Now it works fine until you invert the mask, then you get some incorrect
// results where the goo mask ends up being all white even when it shouldn't be (because we inverted
// the 0 to a 1, duh!) and that's not desired. So, to prevent that undesired behaviour we set the goo
// drip mask value to (0,0) and keep it that way until we have evaluated the goo drip, then we set
// the proper value.
// 2023-09-12

float
get_mask(
  Mask_Info info
) {
  EDITOR_BRANCH if(info.channel == 0) return 1;

  float2 both_masks = MASK_CHANNELS.masks[info.channel];
  
  float mask = info.inverted ? both_masks.y : both_masks.x;

  // NOTE(valuef): https://www.desmos.com/calculator/mcgtyjntlf
  // where a is contrast and b is brightness
  // 2023-10-27
  mask = info.contrast * (mask - .5) + .5 + info.brightness;

  mask = saturate(mask * info.strength);

  return mask;
}

float2
evaluate_capsule_mask(
  float3 baked_pos,
  float3 axis,
  float3 origin,
  bool flip,
  float height,
  float radius,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  float ld = dot(axis, baked_pos - origin);
  ld = clamp(ld, -height, height);
  
  float3 on_line = origin + ld * axis;

  float t = 1 - saturate(length(baked_pos - on_line) / radius);

  t = saturate(t * pre_inversion_strength);

  EDITOR_BRANCH if(flip) {
    t = 1 - t;
  }

  float2 mask = float2(t, 1-t);
  mask = saturate(mask * post_inversion_strength );

  return mask;
}

int
get_light_id(int index) {
  return (int)((unity_LightColor[index].a/0.001)*255.0);
}

float3
get_light_pos(int index) {
  float raw_x[4] = { unity_4LightPosX0.x, unity_4LightPosX0.y, unity_4LightPosX0.z, unity_4LightPosX0.w };
  float raw_y[4] = { unity_4LightPosY0.x, unity_4LightPosY0.y, unity_4LightPosY0.z, unity_4LightPosX0.w };
  float raw_z[4] = { unity_4LightPosZ0.x, unity_4LightPosZ0.y, unity_4LightPosZ0.z, unity_4LightPosZ0.w };
 
  return float3(raw_x[index], raw_y[index], raw_z[index]);
}

float
get_light_range(int index) {

  float raw[4] = { unity_4LightAtten0.x, unity_4LightAtten0.y, unity_4LightAtten0.z, unity_4LightAtten0.w };

  // https://forum.unity.com/threads/point-light-in-v-f-shader.499717/
  return 5.0 * (1.0 / sqrt(raw[index]));
}

// NOTE(valuef): Looks like the fwdadd pass will get proper vertex lights while the shadowcaster wont.
// 2023-10-02
float
vs_make_point_light_mask(
  float3 world_vertex
) {
  #if defined(VF_GOO_SHADOWCASTER)
    return 0;
  #endif

  #if !defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    return 0;
  #endif

  float mask = 0;
  for(int idx = 0; idx < 4; idx++) {

    int id = get_light_id(idx);

    EDITOR_BRANCH if(id == 10) {
      float3 light_pos = get_light_pos(idx);
      float range = get_light_range(idx);

      float3 delta = light_pos - world_vertex;
      float len = saturate(length(delta) / range);

      float t = (len - 1) / (get_value(_LightMix_Sensitivity_Osci) - 1);

      mask += t;
    }
  }

  mask = saturate(mask);

  return mask;
}

float2
make_rim_mask_channel(
  float fres,
  float start,
  float end,
  float pre_inversion_strength,
  float post_inversion_strength,
  float smoothing
) {
  float mask = saturate((fres - start) / (end - start));

  mask = pow(mask,smoothing);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

#define DIFFUSE_TYPE_PBR 0
#define DIFFUSE_TYPE_PBR_LUT 1
#define DIFFUSE_TYPE_PBR_RAMP 2
#define DIFFUSE_TYPE_NONE 3

#define BLEND_LERP              0
#define BLEND_MIN_DARKEN        1 
#define BLEND_MAX_LIGHTEN       2
#define BLEND_MULTIPLY          3
#define BLEND_SUBTRACT          4
#define BLEND_DIVIDE            5
#define BLEND_ADD_LINEAR_DODGE  6
#define BLEND_DIFFERENCE        7

float2
make_blend_mask(
  Mask_Info fore_mask,
  Mask_Info back_mask,
  float opacity,
  int blend_mode,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  // NOTE(valuef): We're mimicking the substance designer blend node behaviour here for
  // consistency sake and some people will already have a model of how that node works so
  // it's better than reinventing the wheel.
  // 2023-08-29

  float fore = get_mask(fore_mask);
  float back = get_mask(back_mask);

  EDITOR_BRANCH if(blend_mode != BLEND_LERP) {
    fore *= opacity;
  }

  float mask = 1;
  
  // NOTE(valuef): From https://www.shadertoy.com/view/XdS3RW
  // s = back, d = fore
  // 2023-08-29
  EDITOR_BRANCH switch(blend_mode) {
    case BLEND_LERP:              mask = lerp(back, fore, opacity); break; 
    case BLEND_MIN_DARKEN:        mask = min(back, fore); break;
    case BLEND_MAX_LIGHTEN:       mask = max(back, fore); break;
    case BLEND_MULTIPLY:          mask = back * fore; break;
    case BLEND_SUBTRACT:          mask = back - fore; break;
    case BLEND_DIVIDE:            mask = back / fore; break;
    case BLEND_ADD_LINEAR_DODGE:  mask = back + fore; break;
    case BLEND_DIFFERENCE:        mask = abs(fore - back); break;
  }

  mask = saturate(mask);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

#define MASSBLEND_ADD_LINEAR_DODGE  0
#define MASSBLEND_MULTIPLY          1

float2
make_mass_blend_mask(
  Mask_Info mask_1_info,
  Mask_Info mask_2_info,
  Mask_Info mask_3_info,
  Mask_Info mask_4_info,
  Mask_Info mask_5_info,
  Mask_Info mask_6_info,
  Mask_Info mask_7_info,
  Mask_Info mask_8_info,
  int massblend_mode,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  const int NUM_MASKS = 8;

  Mask_Info masks[NUM_MASKS] = {
    mask_1_info,
    mask_2_info,
    mask_3_info,
    mask_4_info,
    mask_5_info,
    mask_6_info,
    mask_7_info,
    mask_8_info,
  };

  float mask = 0;

  EDITOR_BRANCH if(massblend_mode == MASSBLEND_ADD_LINEAR_DODGE) {

    for(int i = 0; i < NUM_MASKS; i++) {
      Mask_Info info = masks[i];
      EDITOR_BRANCH if(info.channel != MASK_NONE) {
        mask += get_mask(info);
      }
    }

    mask = saturate(mask);
  }
  else EDITOR_BRANCH if(massblend_mode == MASSBLEND_MULTIPLY) {
    mask = 1;

    for(int i = 0; i < NUM_MASKS; i++) {
      Mask_Info info = masks[i];
      mask *= get_mask(info);
    }
  }

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

#define trivial_inverted_mask(_val) float2((_val), 1 - (_val))

inline
float2
make_texture_mask_channel_mask(
  float mask,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  mask = saturate(mask * pre_inversion_strength);

  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

inline
float2
evaluate_scroll_mask(
  float3 skinned_pos,
  float speed,
  int time_base_slot,
  float3 axis,
  float frequency,
  float gap,
  float offset,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  skinned_pos *= frequency;
  float time = get_time(time_base_slot) * speed;

  float d = dot(skinned_pos, axis);

  // https://www.desmos.com/calculator/etdutrzdsq
  float saw = frac(time + d + offset) / gap;
  float mask = sin(saturate(saw) * UNITY_PI);
  mask = saturate(mask);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

inline
float2
evaluate_proximity_mask(
  float world_distance,
  float start,
  float end,
  float pre_inversion_strength,
  float post_inversion_strength
) {
  // NOTE(valuef): plus magic constant to make sure that any banding is invisible.
  // Kind of a hack but it works
  // 2023-11-10
  float near_plane = _ProjectionParams.y + 0.003;
  start += near_plane;
  end += near_plane;

  float mask = (world_distance - start) / (end - start);
  mask = saturate(mask);

  mask = saturate(mask * pre_inversion_strength);
  float2 ret = float2(mask, 1 - mask);
  ret = saturate(ret * post_inversion_strength);

  return ret;
}

void
init_mask_channels(
  float goo_noise,
  float2 goo_drip,
  float4 vertex_colors,
  float3 baked_pos,
  float3 world_normal,
  float3 eye_vec,
  float touch_reactivity_interaction,
  float point_lights,
  float3 skinned_pos,
  float2 backface_mask,
  float world_distance
) {
  MASK_CHANNELS.masks = (Mask_Channels)0;

  MASK_CHANNELS.masks[MASK_NONE] = float2(1,1);
  MASK_CHANNELS.masks[MASK_BACKFACE] = backface_mask;
  MASK_CHANNELS.masks[MASK_IS_AL_AVAILABLE] = can_use_audiolink() ? float2(1,0) : float2(0,1);

  {
    #define scroll_mask(_prefix) \
      evaluate_scroll_mask( \
        skinned_pos, \
        _prefix##_Speed, \
        _prefix##_Speed_TimeBase, \
        _prefix##_Axis, \
        get_value(_prefix##_Frequency_Osci), \
        get_value(_prefix##_Gap_Osci), \
        get_value(_prefix##_Offset_Osci), \
        get_value(_prefix##_Strength_PreInversion_Osci), \
        get_value(_prefix##_Strength_PostInversion_Osci) \
      )

    #if defined(VFGOO_ENABLE_MASK_SCROLL_1)
      MASK_CHANNELS.masks[MASK_SCROLL_1] = scroll_mask(_ScrollMask_1);
    #endif

    #if defined(VFGOO_ENABLE_MASK_SCROLL_2)
      MASK_CHANNELS.masks[MASK_SCROLL_2] = scroll_mask(_ScrollMask_2);
    #endif
  }

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
  {
    float pre_inversion_strength = get_value(_TouchReactivityInteractionMask_Intensity_Pre_Osci);
    float post_inversion_strength = get_value(_TouchReactivityInteractionMask_Intensity_Osci);

    #define calc(_val) saturate((_val) * intensity)

    float val = saturate(touch_reactivity_interaction * pre_inversion_strength);
    float2 mask = float2(val, 1 - val);
    mask = saturate(mask * post_inversion_strength);

    MASK_CHANNELS.masks[MASK_TOUCH_REACTIVITY_INTERACTION] = mask;

    #undef calc
  }
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    MASK_CHANNELS.masks[MASK_POINT_LIGHTS] = trivial_inverted_mask(point_lights);
  #endif

  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_R] = trivial_inverted_mask(vertex_colors.r);
  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_G] = trivial_inverted_mask(vertex_colors.g);
  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_B] = trivial_inverted_mask(vertex_colors.b);
  MASK_CHANNELS.masks[MASK_VERTEX_COLOR_A] = trivial_inverted_mask(vertex_colors.a);

  {
    float fres = dot(world_normal, -eye_vec);

    #define rim_mask_channel(_prefix) \
      make_rim_mask_channel( \
        fres, \
        get_value(_prefix##_Start_Osci), \
        get_value(_prefix##_End_Osci), \
        get_value(_prefix##_Strength_PreInversion_Osci), \
        get_value(_prefix##_Strength_PostInversion_Osci), \
        get_value(_prefix##_Smoothing_Osci) \
      )

    #if defined(VFGOO_ENABLE_MASK_RIM_1)
      MASK_CHANNELS.masks[MASK_RIM_1] = rim_mask_channel(_RimMask_1);
    #endif

    #if defined(VFGOO_ENABLE_MASK_RIM_2)
      MASK_CHANNELS.masks[MASK_RIM_2] = rim_mask_channel(_RimMask_2);
    #endif

    #if defined(VFGOO_ENABLE_MASK_RIM_3)
      MASK_CHANNELS.masks[MASK_RIM_3] = rim_mask_channel(_RimMask_3);
    #endif

    #if defined(VFGOO_ENABLE_MASK_RIM_4)
      MASK_CHANNELS.masks[MASK_RIM_4] = rim_mask_channel(_RimMask_4);
    #endif


    #undef rim_mask_channel

  }

  {
    #define calc(_val) saturate(1-((_val) *2))

    float2 value = float2(
      calc(goo_noise),
      calc(1-goo_noise)
    );

    MASK_CHANNELS.masks[MASK_GOO_NOISE] = value;

    #undef calc
  }

  MASK_CHANNELS.masks[MASK_GOO_DRIP] = goo_drip;

  #define evaluate_capsule_mask_macro(_name) \
    evaluate_capsule_mask(\
      baked_pos, \
      get_value(_name##_Axis_Osci), \
      get_value(_name##_Origin_Osci), \
      _name##_Flip, \
      get_value(_name##_Height_Osci), \
      get_value(_name##_Radius_Osci), \
      get_value(_name##_Strength_PreInversion_Osci), \
      get_value(_name##_Strength_PostInversion_Osci) \
    )

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_1)
    MASK_CHANNELS.masks[MASK_CAPSULE_1] = evaluate_capsule_mask_macro(_CapsuleMask_1);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_2)
    MASK_CHANNELS.masks[MASK_CAPSULE_2] = evaluate_capsule_mask_macro(_CapsuleMask_2);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_3)
    MASK_CHANNELS.masks[MASK_CAPSULE_3] = evaluate_capsule_mask_macro(_CapsuleMask_3);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_4)
    MASK_CHANNELS.masks[MASK_CAPSULE_4] = evaluate_capsule_mask_macro(_CapsuleMask_4);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_5)
    MASK_CHANNELS.masks[MASK_CAPSULE_5] = evaluate_capsule_mask_macro(_CapsuleMask_5);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_6)
    MASK_CHANNELS.masks[MASK_CAPSULE_6] = evaluate_capsule_mask_macro(_CapsuleMask_6);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_7)
    MASK_CHANNELS.masks[MASK_CAPSULE_7] = evaluate_capsule_mask_macro(_CapsuleMask_7);
  #endif

  #if defined(VFGOO_ENABLE_MASK_CAPSULE_8)
    MASK_CHANNELS.masks[MASK_CAPSULE_8] = evaluate_capsule_mask_macro(_CapsuleMask_8);
  #endif

  #undef evaluate_capsule_mask_macro

  #define sample_mask_texture_macro(_index, _name, _sampler) \
    { \
      float4 tap = float4(1,1,1,1); \
      \
      if(is##_name##_Texture_set) { \
        tap = sample_texture_2d( \
          _name##_Texture,  \
          _name##_Texture_Tiling, \
          _name##_Texture_Offset, \
          _name##_Texture_ScrollSpeed, \
          _name##_Texture_UVBus, \
          _sampler, \
          _name##_Texture_ScrollSpeed_TimeBase \
        ); \
      } \
      \
      float pre_inversion_strength = get_value(_name##_Strength_PreInversion_Osci); \
      float post_inversion_strength = get_value(_name##_Strength_PostInversion_Osci); \
      \
      MASK_CHANNELS.masks[_index##_R] = make_texture_mask_channel_mask(tap.r, pre_inversion_strength, post_inversion_strength); \
      MASK_CHANNELS.masks[_index##_G] = make_texture_mask_channel_mask(tap.g, pre_inversion_strength, post_inversion_strength); \
      MASK_CHANNELS.masks[_index##_B] = make_texture_mask_channel_mask(tap.b, pre_inversion_strength, post_inversion_strength); \
      MASK_CHANNELS.masks[_index##_A] = make_texture_mask_channel_mask(tap.a, pre_inversion_strength, post_inversion_strength); \
    }
  
  #if defined(VFGOO_ENABLE_MASK_TEXTURE_1)
    sample_mask_texture_macro(MASK_1, _MaskChannel_1, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_2)
    sample_mask_texture_macro(MASK_2, _MaskChannel_2, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_3)
    sample_mask_texture_macro(MASK_3, _MaskChannel_3, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_4)
    sample_mask_texture_macro(MASK_4, _MaskChannel_4, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_5)
    sample_mask_texture_macro(MASK_5, _MaskChannel_5, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_6)
    sample_mask_texture_macro(MASK_6, _MaskChannel_6, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_7)
    sample_mask_texture_macro(MASK_7, _MaskChannel_7, _SamplerLinearRepeat);
  #endif

  #if defined(VFGOO_ENABLE_MASK_TEXTURE_8)
    sample_mask_texture_macro(MASK_8, _MaskChannel_8, _SamplerLinearRepeat);
  #endif

  #undef sample_mask_texture_macro

  #if defined(VFGOO_ENABLE_MASK_DISTANCE_1)
    MASK_CHANNELS.masks[MASK_DISTANCE_1] = evaluate_proximity_mask(
      world_distance, 
      get_value(_DistanceMask_1_Distance_Start_Osci),
      get_value(_DistanceMask_1_Distance_End_Osci),
      get_value(_DistanceMask_1_Strength_PreInversion_Osci),
      get_value(_DistanceMask_1_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_DISTANCE_2)
    MASK_CHANNELS.masks[MASK_DISTANCE_2] = evaluate_proximity_mask(
      world_distance, 
      get_value(_DistanceMask_2_Distance_Start_Osci),
      get_value(_DistanceMask_2_Distance_End_Osci),
      get_value(_DistanceMask_2_Strength_PreInversion_Osci),
      get_value(_DistanceMask_2_Strength_PostInversion_Osci)
    );
  #endif


  #if defined(VFGOO_ENABLE_MASK_MASSBLEND_1)
    MASK_CHANNELS.masks[MASK_MASSBLEND_1] = make_mass_blend_mask(
      _MassBlendMask_1_1_Mask,
      _MassBlendMask_1_2_Mask,
      _MassBlendMask_1_3_Mask,
      _MassBlendMask_1_4_Mask,
      _MassBlendMask_1_5_Mask,
      _MassBlendMask_1_6_Mask,
      _MassBlendMask_1_7_Mask,
      _MassBlendMask_1_8_Mask,
      _MassBlendMask_1_BlendMode,
      get_value(_MassBlendMask_1_Strength_Osci),
      get_value(_MassBlendMask_1_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_MASSBLEND_2)
    MASK_CHANNELS.masks[MASK_MASSBLEND_2] = make_mass_blend_mask(
      _MassBlendMask_2_1_Mask,
      _MassBlendMask_2_2_Mask,
      _MassBlendMask_2_3_Mask,
      _MassBlendMask_2_4_Mask,
      _MassBlendMask_2_5_Mask,
      _MassBlendMask_2_6_Mask,
      _MassBlendMask_2_7_Mask,
      _MassBlendMask_2_8_Mask,
      _MassBlendMask_2_BlendMode,
      get_value(_MassBlendMask_2_Strength_Osci),
      get_value(_MassBlendMask_2_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_1)
    MASK_CHANNELS.masks[MASK_BLEND_1] = make_blend_mask(
      _BlendMask_1_Mask_Fore_Mask,
      _BlendMask_1_Mask_Back_Mask,
      get_value(_BlendMask_1_Opacity_Osci),
      _BlendMask_1_BlendMode,
      get_value(_BlendMask_1_Strength_PreInversion_Osci),
      get_value(_BlendMask_1_Strength_PostInversion_Osci)
    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_2)
    MASK_CHANNELS.masks[MASK_BLEND_2] = make_blend_mask(
      _BlendMask_2_Mask_Fore_Mask,
      _BlendMask_2_Mask_Back_Mask,
      get_value(_BlendMask_2_Opacity_Osci),
      _BlendMask_2_BlendMode,
      get_value(_BlendMask_2_Strength_PreInversion_Osci),
      get_value(_BlendMask_2_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_3)
    MASK_CHANNELS.masks[MASK_BLEND_3] = make_blend_mask(
      _BlendMask_3_Mask_Fore_Mask,
      _BlendMask_3_Mask_Back_Mask,
      get_value(_BlendMask_3_Opacity_Osci),
      _BlendMask_3_BlendMode,
      get_value(_BlendMask_3_Strength_PreInversion_Osci),
      get_value(_BlendMask_3_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_4)
    MASK_CHANNELS.masks[MASK_BLEND_4] = make_blend_mask(
      _BlendMask_4_Mask_Fore_Mask,
      _BlendMask_4_Mask_Back_Mask,
      get_value(_BlendMask_4_Opacity_Osci),
      _BlendMask_4_BlendMode,
      get_value(_BlendMask_4_Strength_PreInversion_Osci),
      get_value(_BlendMask_4_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_5)
    MASK_CHANNELS.masks[MASK_BLEND_5] = make_blend_mask(
      _BlendMask_5_Mask_Fore_Mask,
      _BlendMask_5_Mask_Back_Mask,
      get_value(_BlendMask_5_Opacity_Osci),
      _BlendMask_5_BlendMode,
      get_value(_BlendMask_5_Strength_PreInversion_Osci),
      get_value(_BlendMask_5_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_6)
    MASK_CHANNELS.masks[MASK_BLEND_6] = make_blend_mask(
      _BlendMask_6_Mask_Fore_Mask,
      _BlendMask_6_Mask_Back_Mask,
      get_value(_BlendMask_6_Opacity_Osci),
      _BlendMask_6_BlendMode,
      get_value(_BlendMask_6_Strength_PreInversion_Osci),
      get_value(_BlendMask_6_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_7)
    MASK_CHANNELS.masks[MASK_BLEND_7] = make_blend_mask(
      _BlendMask_7_Mask_Fore_Mask,
      _BlendMask_7_Mask_Back_Mask,
      get_value(_BlendMask_7_Opacity_Osci),
      _BlendMask_7_BlendMode,
      get_value(_BlendMask_7_Strength_PreInversion_Osci),
      get_value(_BlendMask_7_Strength_PostInversion_Osci)

    );
  #endif

  #if defined(VFGOO_ENABLE_MASK_BLEND_8)
    MASK_CHANNELS.masks[MASK_BLEND_8] = make_blend_mask(
      _BlendMask_8_Mask_Fore_Mask,
      _BlendMask_8_Mask_Back_Mask,
      get_value(_BlendMask_8_Opacity_Osci),
      _BlendMask_8_BlendMode,
      get_value(_BlendMask_8_Strength_PreInversion_Osci),
      get_value(_BlendMask_8_Strength_PostInversion_Osci)
    );
  #endif
}

void
init_masks_as_oscillators() {
  OSCILLATORS.slots[OSCI_MASK_1] = get_mask(_Osci_Mask_1_Mask);
  OSCILLATORS.slots[OSCI_MASK_2] = get_mask(_Osci_Mask_2_Mask);
  OSCILLATORS.slots[OSCI_MASK_3] = get_mask(_Osci_Mask_3_Mask);
  OSCILLATORS.slots[OSCI_MASK_4] = get_mask(_Osci_Mask_4_Mask);
  OSCILLATORS.slots[OSCI_MASK_5] = get_mask(_Osci_Mask_5_Mask);
  OSCILLATORS.slots[OSCI_MASK_6] = get_mask(_Osci_Mask_6_Mask);
  OSCILLATORS.slots[OSCI_MASK_7] = get_mask(_Osci_Mask_7_Mask);
  OSCILLATORS.slots[OSCI_MASK_8] = get_mask(_Osci_Mask_8_Mask);
}

// NOTE(valuef): any inline of these texture samplers is marked with @InlinedTextureSampling
// 2023-08-20
float4
sample_texture_separate_mask(
  const Texture_Info info,
  out float mask
) {
  float4 tap = info.default_value;

  if(info.is_set) {
    tap = sample_texture_2d(info.tex, info.tiling, info.offset, info.scroll, info.uv_bus, info.samp, info.time_base_slot);
  }

  mask = get_mask(info.mask);

  if(info.alpha_is_mask) {
    mask *= tap.a;
  }

  return tap;
}


float4
sample_texture(
  const Texture_Info info
) {
  // @InlinedTextureSampling
  float mask;
  float4 tap = sample_texture_separate_mask(info, mask);

  tap *= mask;

  return tap;
}

#if defined(RALIV_PENETRATOR) || defined(RALIV_ORIFICE)
  #include "Assets/RalivDynamicPenetrationSystem/Plugins/RalivDPS_Functions.cginc"
#endif

#define RENDERING_MODE_OPAQUE       0
#define RENDERING_MODE_TRANSPARENT  1
#define RENDERING_MODE_FADE         2
#define RENDERING_MODE_CUTOUT       3

// _ALPHAPREMULTIPLY_ON is set
inline bool is_using_premultiplied_alpha() {
  // one oneminussrcalpha
  return _SourceBlend == 1 && _DestinationBlend == 10;
}

// fade,
// _ALPHABLEND_ON is set
inline bool is_using_postmultiplied_alpha() {
  // srcalpha oneminussrcalpha
  return _SourceBlend == 5 && _DestinationBlend == 10;
}

float3 rgb2hsv(float3 c) {
  float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
  float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
  float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

  float d = q.x - min(q.w, q.y);
  float e = 1.0e-10;
  return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

float3 hsv2rgb(float3 c) {
  float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
  float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
  return c.z * lerp(K.xxx, saturate(p - K.xxx), c.y);
}

// NOTE(valuef): There are some problems with TEXCOORD < 2
// If the mesh has any texcoord vertex attributes with semantic index over 2, and there are
// shaders PRESENT ON THE MESH that make use of any of them, everything is okay.
// However, if those shaders are NOT present on the mesh during upload but instead are set up to
// be swapped into using simple material swap animations, then the vertex input input layout for
// texcoord attributes above 2 will not be properly set up!
//
// Here is some renderdoc IA info:
//
// === Deuzear with UV7 data and a shader that uses it as the default shader. Works fine ===
//  Input Layouts
//    Slot	Semantic Name	  Semantic Index	Format	              Input Slot	Byte Offset	  Per Instance	Instance Data Step Rate
//    0	    POSITION	      0	              R32G32B32_FLOAT	      0	          0	            False	        0
//    1	    NORMAL	        0	              R32G32B32_FLOAT	      0	          12	          False	        0
//    2	    TANGENT	        0	              R32G32B32A32_FLOAT	  0	          24	          False	        0
//    3	    COLOR	          0	              R8G8B8A8_UNORM	      3	          4	            False	        0
//    4	    TEXCOORD	      0	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    5	    TEXCOORD	      1	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    6	    TEXCOORD	      2	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    7	    TEXCOORD	      3	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    8	    TEXCOORD	      4	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    9	    TEXCOORD	      5	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    10	  TEXCOORD	      6	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    11	  TEXCOORD	      7	              R32G32B32A32_FLOAT	  1	          16	          False	        0
//    12	  BLENDWEIGHTS	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    13	  BLENDINDICES	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//
//  Vertex Buffers
//    Slot	  Buffer	                                                                            Stride	Offset	Byte Length
//    0	      Buffer-1-1134400	                                                                  40	    0	      1134400
//    1	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    2	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    3	      Buffer-1-20	                                                                        0	      0	      20
//
//  Index Buffer
//    Buffer	                                                              Format	  Offset	  Byte Length
//    wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	R16_UINT	0	        286668
//
//  Primitive Topology
//    Triangle List
//
// === Deuzear with UV2 data, a shader that doesn't use it as a default shader and a shader that does use it as a material swap via animation. Works fine. ===
//  Input Layouts
//    Slot	Semantic Name	  Semantic Index	Format	              Input Slot	Byte Offset	  Per Instance	Instance Data Step Rate
//    0	    POSITION	      0	              R32G32B32_FLOAT	      0	          0	            False	        0
//    1	    NORMAL	        0	              R32G32B32_FLOAT	      0	          12	          False	        0
//    2	    TANGENT	        0	              R32G32B32A32_FLOAT	  0	          24	          False	        0
//    3	    COLOR	          0	              R8G8B8A8_UNORM	      3	          4	            False	        0
//    4	    TEXCOORD	      0	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    5	    TEXCOORD	      1	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    6	    TEXCOORD	      2	              R32G32B32A32_FLOAT	  1	          16	          False	        0
//    7	    TEXCOORD	      3	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    8	    TEXCOORD	      4	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    9	    TEXCOORD	      5	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    10	  TEXCOORD	      6	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    11	  TEXCOORD	      7	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    12	  BLENDWEIGHTS	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    13	  BLENDINDICES	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//
//  Vertex Buffers
//    Slot	  Buffer	                                                                            Stride	Offset	Byte Length
//    0	      Buffer-1-1134400	                                                                  40	    0	      1134400
//    1	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    2	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    3	      Buffer-1-20	                                                                        0	      0	      20
//
//  Index Buffer
//    Buffer	                                                              Format	  Offset	  Byte Length
//    wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	R16_UINT	0	        286668
//
//  Primitive Topology
//    Triangle List
//
// === Deuzear with UV3 data, a shader that doesn't use it as a default shader and a shader that does use it as a material swap via animation. Broken normals and UV3 data. ===
//  Input Layouts
//    Slot	Semantic Name	  Semantic Index	Format	              Input Slot	Byte Offset	  Per Instance	Instance Data Step Rate
//    0	    POSITION	      0	              R32G32B32_FLOAT	      0	          0	            False	        0
//    1	    NORMAL	        0	              R32G32B32_FLOAT	      0	          12	          False	        0
//    2	    TANGENT	        0	              R32G32B32A32_FLOAT	  0	          24	          False	        0
//    3	    COLOR	          0	              R8G8B8A8_UNORM	      3	          4	            False	        0
//    4	    TEXCOORD	      0	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    5	    TEXCOORD	      1	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    6	    TEXCOORD	      2	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    7	    TEXCOORD	      3	              R32G32B32A32_FLOAT	  1	          0	            False	        0
//    8	    TEXCOORD	      4	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    9	    TEXCOORD	      5	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    10	  TEXCOORD	      6	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    11	  TEXCOORD	      7	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    12	  BLENDWEIGHTS	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//    13	  BLENDINDICES	  0	              R8G8B8A8_UNORM	      0	          0	            False	        0
//
//  Vertex Buffers
//    Slot	  Buffer	                                                                            Stride	Offset	Byte Length
//    0	      Buffer-1-1134400	                                                                  40	    0	      1134400
//    1	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              16	    0	      453760
//    2	      wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	              32	    0	      907520
//    3	      Buffer-1-20	                                                                        0	      0	      20
//
//  Index Buffer
//    Buffer	                                                              Format	  Offset	  Byte Length
//    wtf-untitled_Body(Baked with UV7s and smooth normals) (VF_1_G_BAKED)	R16_UINT	0	        286668
//
//  Primitive Topology
//    Triangle List
//
// It's a bit unclear as to why the normal baking breaks with UV3-7 material swaps, but it's clear
// that the UV3 data does not have the proper byte offset set whereas the UV2 version and UV7
// default version do!
// 
// I'm completely in the dark on what's going on behind the scenes here at the API level.
// 2023-03-07
//
// It's likely happening due to the mesh channel optimization step during the unity bundle build process.
// 2023-08-04
//
// Confirmed, turning of mesh optimizaton before building seems to fix it.
// 2023-08-17
struct Vertex_Input {
  float4 vertex_colors : COLOR;
  float4 vertex : POSITION;
  half3 normal : NORMAL;

  float2 uv0 : TEXCOORD0;
  float2 uv1 : TEXCOORD1; 
  float3 baked_pos : TEXCOORD2; /* NOTE(valuef): Reserved for baked goo data */
  float2 uv3 : TEXCOORD3;
  float2 uv4 : TEXCOORD4;
  float2 uv5 : TEXCOORD5;
  float2 uv6 : TEXCOORD6;
  float2 uv7 : TEXCOORD7;

  half4 tangent : TANGENT;

	uint vertex_id : SV_VertexID;

  UNITY_VERTEX_INPUT_INSTANCE_ID
};

struct Vertex_Output_Forward_Base {
  float4 pos : SV_POSITION;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  UNITY_VERTEX_OUTPUT_STEREO

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD1;
  #endif

  float3 eye_vec_unnormalized : TEXCOORD2;

  /* [3x3:tangentToWorld | 1x3:viewDirForParallax or worldPos] */
  float4 tangentToWorldAndPackedData[3] : TEXCOORD3; 

  /* SH or Lightmap UV */
  half4 ambientOrLightmapUV : TEXCOORD6; 

  UNITY_LIGHTING_COORDS(7,8)
  UNITY_FOG_COORDS(9)

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise : TEXCOORD10;
  #endif

  #if !defined(OPT_GRAB_POS_INTERPOLATOR_DISABLED)
    float4 grab_pos : TEXCOORD11;
  #endif

  float3 baked_pos : TEXCOORD12;

  #if defined(NOT_BAKED)
    float4 debug : TEXCOORD13;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD14;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD15;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD16;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD17;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD18;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD19;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD20;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD21;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD22;
  #endif
};

struct Vertex_Output_Outline {
  float4 pos : SV_POSITION;

  UNITY_VERTEX_OUTPUT_STEREO
  UNITY_FOG_COORDS(0)

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD1;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD2;
  #endif

  // TODO can this be optimized out?
  float3 baked_pos : TEXCOORD3;

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD4;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD5;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise  : TEXCOORD6;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD7;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD8;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD9;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD10;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD11;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD12;
  #endif

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    /* Only used for uv buses and panosphere */
    float3 world_pos : TEXCOORD13;            
  #endif

  // TODO optimize these out
  /* Only for rim mask & center-out tf */
  float3 eye_vec_unnormalized : TEXCOORD14; 

  /* Only for rim mask & center out tf*/
  float3 world_normal : TEXCOORD15;         

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD16;
  #endif
};

struct Vertex_Output_Early_Z {
  float4 pos : SV_POSITION;

  UNITY_VERTEX_OUTPUT_STEREO
};

struct Vertex_Output_Forward_Add {
  float4 pos : SV_POSITION;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  UNITY_VERTEX_OUTPUT_STEREO

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD1;
  #endif

  float3 eye_vec_unnormalized : TEXCOORD2;

  /* [3x3:tangentToWorld | 1x3:lightDir] */
  float4 tangentToWorldAndLightDir[3] : TEXCOORD3; 

  float3 posWorld : TEXCOORD6;

  UNITY_LIGHTING_COORDS(7, 8)
  UNITY_FOG_COORDS(9)

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise : TEXCOORD10;
  #endif

  float3 baked_pos : TEXCOORD11;

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD12;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD13;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD14;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD15;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD16;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD17;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD18;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD19;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD20;
  #endif
};

struct Vertex_Output_Shadow_Caster {
  float4 pos : SV_POSITION;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    float4 vertex_colors : COLOR;
  #endif

  V2F_SHADOW_CASTER_NOPOS
  UNITY_VERTEX_OUTPUT_STEREO

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    float2 uv0 : TEXCOORD1;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    float2 uv1 : TEXCOORD2;
  #endif

  // unused TEXCOORD3;

  float3 baked_pos : TEXCOORD4;

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    float light_mask : TEXCOORD5;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    float goo_drip : TEXCOORD6;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    float goo_noise  : TEXCOORD7;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    float2 uv3 : TEXCOORD8;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    float2 uv4 : TEXCOORD9;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    float2 uv5 : TEXCOORD10;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    float2 uv6 : TEXCOORD11;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    float2 uv7 : TEXCOORD12;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    float3 skinned_vertex : TEXCOORD13;
  #endif

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    /* Only used for uv buses and panosphere */
    float3 world_pos : TEXCOORD14;            
  #endif

  // TODO optimize these out
  /* Only for rim mask & center-out tf */
  float3 eye_vec_unnormalized : TEXCOORD15; 

  /* Only for rim mask & center-out tf */
  float3 world_normal : TEXCOORD16;         

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    float touch_reactivity_interaction : TEXCOORD17;
  #endif
};

half3 ShadeSHPerPixel(half3 normal, half3 ambient, float3 worldPos) {
  half3 ambient_contrib = 0.0;

  #if defined(UNITY_SAMPLE_FULL_SH_PER_PIXEL)
    // Completely per-pixel
    #if UNITY_LIGHT_PROBE_PROXY_VOLUME
      if(unity_ProbeVolumeParams.x == 1.0) {
        ambient_contrib = SHEvalLinearL0L1_SampleProbeVolume(half4(normal, 1.0), worldPos);
      }
      else {
        ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
      }
    #else
      ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
    #endif

    ambient_contrib += SHEvalLinearL2(half4(normal, 1.0));

    ambient += max(half3(0, 0, 0), ambient_contrib);

    #ifdef UNITY_COLORSPACE_GAMMA
      ambient = LinearToGammaSpace(ambient);
    #endif
  #else
    // L2 per-vertex, L0..L1 & gamma-correction per-pixel
    // Ambient in this case is expected to be always Linear, see ShadeSHPerVertex()
    #if UNITY_LIGHT_PROBE_PROXY_VOLUME
      if(unity_ProbeVolumeParams.x == 1.0) {
        ambient_contrib = SHEvalLinearL0L1_SampleProbeVolume(half4(normal, 1.0), worldPos);
      }
      else {
        ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
      }
    #else
      ambient_contrib = SHEvalLinearL0L1(half4(normal, 1.0));
    #endif

    // include L2 contribution in vertex shader before clamp.
    ambient = max(half3(0, 0, 0), ambient+ambient_contrib);

    #ifdef UNITY_COLORSPACE_GAMMA
      ambient = LinearToGammaSpace(ambient);
    #endif
  #endif

  return ambient;
}

half3 ShadeSHPerVertex(half3 normal, half3 ambient) {
  #if defined(UNITY_SAMPLE_FULL_SH_PER_PIXEL)
    // Completely per-pixel
    // nothing to do here
  #else
    // L2 per-vertex, L0..L1 & gamma-correction per-pixel

    // NOTE: SH data is always in Linear AND calculation is split between vertex & pixel
    // Convert ambient to Linear and do final gamma-correction at the end(per-pixel)
    #ifdef UNITY_COLORSPACE_GAMMA
      ambient = GammaToLinearSpace(ambient);
    #endif

    ambient += SHEvalLinearL2(half4(normal, 1.0));     // no max since this is only L2 contribution
  #endif

  return ambient;
}

inline half4 VertexGIForward(float3 posWorld, half3 normalWorld) {
  half4 ambientOrLightmapUV = 0;

  // NOTE(valuef): By default this keyword is a multi-compile keyword but for the sake of build times we're baking it in.
  // In rare situations with too many lights, the avatar may look like it's not receiving lights BUT for now this is okay I think.
  // Also from testing, not including this keyword still seems to upload vertex light information into the shader. 
  //
  // So, all in all, since in VRC we mostly use vertex lights for world-space positions of nearby objects, we're likely not going
  // to be using them for lights. So we should be good.
  //
  // 2023-10-31
  /*
  #ifdef VERTEXLIGHT_ON
    // Approximated illumination from non-important point lights
    ambientOrLightmapUV.rgb = Shade4PointLights(
      unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
      unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
      unity_4LightAtten0, posWorld, normalWorld
    );
  #endif
  */

  ambientOrLightmapUV.rgb = ShadeSHPerVertex(normalWorld, ambientOrLightmapUV.rgb);

  return ambientOrLightmapUV;
}

#define IN_WORLDPOS(i) half3(i.tangentToWorldAndPackedData[0].w,i.tangentToWorldAndPackedData[1].w,i.tangentToWorldAndPackedData[2].w)

struct Fragment_Common_Data {
  float3 diffColor;
  float3 specColor;

  // Note: smoothness & oneMinusReflectivity for optimization purposes, mostly for DX9 SM2.0 level.
  // Most of the math is being done on these (1-x) values, and that saves a few precious ALU slots.
  float oneMinusReflectivity;
  float smoothness;

  float3 normalWorld;
  float3 normal_world_seamless;
  float3 posWorld;

  float4 albedo;
  float3 emissive_from_albedo_source;

  float alpha;

  float3 eye_vec;

  float4 glitter;
};

inline half3 PreMultiplyAlpha(half3 diffColor, half alpha, half oneMinusReflectivity, out half outModifiedAlpha) {
  bool is_transparent = false;

  EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT) {
    // NOTE: shader relies on pre-multiply alpha-blend (_SrcBlend = One, _DstBlend = OneMinusSrcAlpha)

    // Transparency 'removes' from Diffuse component
    diffColor *= alpha;

    // Reflectivity 'removes' from the rest of components, including Transparency
    // outAlpha = 1-(1-alpha)*(1-reflectivity) = 1-(oneMinusReflectivity - alpha*oneMinusReflectivity) =
    //          = 1-oneMinusReflectivity + alpha*oneMinusReflectivity
    outModifiedAlpha = 1-oneMinusReflectivity + alpha*oneMinusReflectivity;
  }
  else {
    outModifiedAlpha = alpha;
  }

  return diffColor;
}

half3 UnpackScaleNormal(half4 packednormal, half bumpScale) {
  packednormal.x *= packednormal.w;

  half3 normal;
  normal.xy = (packednormal.xy * 2 - 1);
  normal.xy *= bumpScale;
  normal.z = sqrt(1.0 - saturate(dot(normal.xy, normal.xy)));

  return normal;
}

inline half OneMinusReflectivityFromMetallic(half metallic) {
  // We'll need oneMinusReflectivity, so
  //   1-reflectivity = 1-lerp(dielectricSpec, 1, metallic) = lerp(1-dielectricSpec, 0, metallic)
  // store (1-dielectricSpec) in unity_ColorSpaceDielectricSpec.a, then
  //   1-reflectivity = lerp(alpha, 0, metallic) = alpha + metallic*(0 - alpha) =
  //                  = alpha - metallic * alpha
  half oneMinusDielectricSpec = unity_ColorSpaceDielectricSpec.a;
  return oneMinusDielectricSpec - metallic * oneMinusDielectricSpec;
}

inline half3 DiffuseAndSpecularFromMetallic(half3 albedo, half metallic, out half3 specColor, out half oneMinusReflectivity) {
  specColor = lerp(unity_ColorSpaceDielectricSpec.rgb, albedo, metallic);
  oneMinusReflectivity = OneMinusReflectivityFromMetallic(metallic);
  return albedo * oneMinusReflectivity;
}

struct UnityLight {
  half3 color;
  half3 dir;
};

struct UnityIndirect {
  half3 diffuse;
  half3 specular;
};

struct UnityGI {
  UnityLight light;
  UnityIndirect indirect;
};

struct UnityGIInput {
  // pixel light, sent from the engine
  UnityLight light;

  float3 worldPos;
  half3 worldViewDir;
  half atten;
  half3 ambient;

  // interpolated lightmap UVs are passed as full float precision data to fragment shaders
  // so lightmapUV (which is used as a tmp inside of lightmap fragment shaders) should
  // also be full float precision to avoid data loss before sampling a texture.
  float4 lightmapUV; // .xy = static lightmap UV, .zw = dynamic lightmap UV

  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION) || defined(UNITY_ENABLE_REFLECTION_BUFFERS)
    float4 boxMin[2];
  #endif

  #ifdef UNITY_SPECCUBE_BOX_PROJECTION
    float4 boxMax[2];
    float4 probePosition[2];
  #endif

  // HDR cubemap properties, use to decompress HDR texture
  float4 probeHDR[2];
};

inline bool has_world_space_light_direction() {
  return any(_WorldSpaceLightPos0.xyz);
}

// NOTE(valuef): direction should be normalized at usage site
// 2024-01-04
inline
UnityLight
get_directional_light(float3 world_pos) {
  UnityLight ret;
  ret.color = _LightColor0.rgb;

  float3 world_space_light;
  #ifndef USING_LIGHT_MULTI_COMPILE
      ret.dir = _WorldSpaceLightPos0.xyz - world_pos * _WorldSpaceLightPos0.w;
  #else
    #ifndef USING_DIRECTIONAL_LIGHT
      ret.dir = _WorldSpaceLightPos0.xyz - world_pos;
    #else
      ret.dir = _WorldSpaceLightPos0.xyz;
    #endif
  #endif


  EDITOR_BRANCH if(_FallbackLight_Enabled) {
    [branch] if(!has_world_space_light_direction()) {
      ret.color = _FallbackLight_Color.rgb;
      ret.dir = _FallbackLight_Direction.xyz;
    }
  }

  return ret;
}

inline float pow2(float x) { return x * x; }

float SmoothnessToPerceptualRoughness(float smoothness) {
  return 1 - smoothness;
}

// GlossyEnvironment - Function to integrate the specular lighting with default sky or reflection probes
struct Unity_GlossyEnvironmentData {
  // - Deferred case have one cubemap
  // - Forward case can have two blended cubemap (unusual should be deprecated).

  // Surface properties use for cubemap integration
  half perceptual_roughness;
  half3 reflUVW;
};

Unity_GlossyEnvironmentData UnityGlossyEnvironmentSetup(half Smoothness, half3 worldViewDir, half3 Normal, half3 fresnel0) {
  Unity_GlossyEnvironmentData g;

  g.perceptual_roughness = SmoothnessToPerceptualRoughness(Smoothness);
  g.reflUVW  = reflect(-worldViewDir, Normal);

  return g;
}

inline void ResetUnityLight(out UnityLight outLight) {
  outLight.color = half3(0, 0, 0);
  outLight.dir = half3(0, 1, 0); // Irrelevant direction, just not null
}

inline void ResetUnityGI(out UnityGI outGI) {
  ResetUnityLight(outGI.light);
  outGI.indirect.diffuse = 0;
  outGI.indirect.specular = 0;
}

inline UnityGI UnityGI_Base(UnityGIInput data, half occlusion, half3 normalWorld) {
  UnityGI o_gi;
  ResetUnityGI(o_gi);

  // Base pass with Lightmap support is responsible for handling ShadowMask / blending here for performance reason
  #if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
    half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
    float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
    float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
    data.atten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
  #endif

  o_gi.light = data.light;
  o_gi.light.color *= data.atten;

  #if UNITY_SHOULD_SAMPLE_SH
    o_gi.indirect.diffuse = ShadeSHPerPixel(normalWorld, data.ambient, data.worldPos);
  #endif

  #if defined(LIGHTMAP_ON)
    // Baked lightmaps
    half4 bakedColorTex = UNITY_SAMPLE_TEX2D(unity_Lightmap, data.lightmapUV.xy);
    half3 bakedColor = DecodeLightmap(bakedColorTex);

    #ifdef DIRLIGHTMAP_COMBINED
      fixed4 bakedDirTex = UNITY_SAMPLE_TEX2D_SAMPLER(unity_LightmapInd, unity_Lightmap, data.lightmapUV.xy);
      o_gi.indirect.diffuse += DecodeDirectionalLightmap(bakedColor, bakedDirTex, normalWorld);

      #if defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN)
        ResetUnityLight(o_gi.light);
        o_gi.indirect.diffuse = SubtractMainLightWithRealtimeAttenuationFromLightmap(o_gi.indirect.diffuse, data.atten, bakedColorTex, normalWorld);
      #endif

    #else // not directional lightmap
      o_gi.indirect.diffuse += bakedColor;

      #if defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN)
        ResetUnityLight(o_gi.light);
        o_gi.indirect.diffuse = SubtractMainLightWithRealtimeAttenuationFromLightmap(o_gi.indirect.diffuse, data.atten, bakedColorTex, normalWorld);
      #endif
    #endif
  #endif

  o_gi.indirect.diffuse *= occlusion;
  return o_gi;
}


inline UnityGI UnityGlobalIllumination(UnityGIInput data, half occlusion, half3 normalWorld) {
  return UnityGI_Base(data, occlusion, normalWorld);
}

inline float3 BoxProjectedCubemapDirection(float3 worldRefl, float3 worldPos, float4 cubemapCenter, float4 boxMin, float4 boxMax) {
  // Do we have a valid reflection probe?
  UNITY_BRANCH
  if(cubemapCenter.w > 0.0) {
    float3 nrdir = normalize(worldRefl);

    #if 1
      float3 rbmax = (boxMax.xyz - worldPos) / nrdir;
      float3 rbmin = (boxMin.xyz - worldPos) / nrdir;

      float3 rbminmax = (nrdir > 0.0f) ? rbmax : rbmin;

    #else // Optimized version
      float3 rbmax = (boxMax.xyz - worldPos);
      float3 rbmin = (boxMin.xyz - worldPos);

      float3 select = step(float3(0,0,0), nrdir);
      float3 rbminmax = lerp(rbmax, rbmin, select);
      rbminmax /= nrdir;
    #endif

    float fa = min(min(rbminmax.x, rbminmax.y), rbminmax.z);

    worldPos -= cubemapCenter.xyz;
    worldRefl = worldPos + nrdir * fa;
  }

  return worldRefl;
}

half perceptualRoughnessToMipmapLevel(half perceptualRoughness) {
  return perceptualRoughness * UNITY_SPECCUBE_LOD_STEPS;
}

half3 Unity_GlossyEnvironment(UNITY_ARGS_TEXCUBE(tex), half4 hdr, Unity_GlossyEnvironmentData glossIn) {

  half perceptualRoughness = glossIn.perceptual_roughness;
  perceptualRoughness = perceptualRoughness*(1.7 - 0.7*perceptualRoughness);

  half mip = perceptualRoughnessToMipmapLevel(perceptualRoughness);
  half3 R = glossIn.reflUVW;
  half4 rgbm = UNITY_SAMPLE_TEXCUBE_LOD(tex, R, mip);

  return DecodeHDR(rgbm, hdr);
}

float
get_appears_on_mask(
  int appears_on, 
  float material_mix
) {
  EDITOR_BRANCH if(appears_on == APPEARS_ON_MATERIAL_ONLY_PRE_TF) {
    return 1-material_mix;
  }
  else EDITOR_BRANCH if(appears_on == APPEARS_ON_MATERIAL_ONLY_POST_TF) {
    return material_mix;
  }
  return 1;
}

inline 
half3 
UnityGI_IndirectSpecular(
  UnityGIInput data, 
  half occlusion, 
  Unity_GlossyEnvironmentData glossIn, 
  float material_mix
) {
  half3 specular;

  half3 originalReflUVW = glossIn.reflUVW;
  #ifdef UNITY_SPECCUBE_BOX_PROJECTION
    // we will tweak reflUVW in glossIn directly (as we pass it to Unity_GlossyEnvironment twice for probe0 and probe1), so keep original to pass into BoxProjectedCubemapDirection
    glossIn.reflUVW = BoxProjectedCubemapDirection(originalReflUVW, data.worldPos, data.probePosition[0], data.boxMin[0], data.boxMax[0]);
  #endif

  EDITOR_BRANCH if(_GlossyReflections_Enabled) {
    {
      half3 env0 = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE(unity_SpecCube0), data.probeHDR[0], glossIn);

      #ifdef UNITY_SPECCUBE_BLENDING
        const float kBlendFactor = 0.99999;
        float blendLerp = data.boxMin[0].w;

        UNITY_BRANCH
        if(blendLerp < kBlendFactor) {
          #ifdef UNITY_SPECCUBE_BOX_PROJECTION
            glossIn.reflUVW = BoxProjectedCubemapDirection(
              originalReflUVW, data.worldPos, data.probePosition[1], data.boxMin[1], data.boxMax[1]
            );
          #endif

          half3 env1 = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE_SAMPLER(unity_SpecCube1,unity_SpecCube0), data.probeHDR[1], glossIn);
          specular = lerp(env1, env0, blendLerp);
        }
        else {
          specular = env0;
        }
      #else
        specular = env0;
      #endif
    }

    EDITOR_BRANCH if(_FakeCubemap_Enabled) {
      half3 fake_refl;
      if(is_FakeCubemap_Texture_set) {
        {
          half3 old = glossIn.reflUVW;
          glossIn.reflUVW = originalReflUVW;
          fake_refl = Unity_GlossyEnvironment(UNITY_PASS_TEXCUBE(_FakeCubemap_Texture), _FakeCubemap_Texture_HDR, glossIn);
          glossIn.reflUVW = old;
        }

        fake_refl = fake_refl * _FakeCubemap_Tint2.rgb;
        fake_refl *= _FakeCubemap_Exposure;
      }
      else {
        // NOTE(valuef): This is 0.5^2.2 as the default value of cubemaps (0.5, 0.5, 0.5, 1).
        // The 2.2 pow is an educated guess to match the value we get by sampling the unset texture.
        // 2022-10-21
        fake_refl = 0.21763764082.rrr;
      }

      float appears_on = get_appears_on_mask(_FakeCubemap_AppearsOnMaterial, material_mix);

      fake_refl = lerp(specular, fake_refl, appears_on);
      specular = lerp(specular, fake_refl, _FakeCubemap_Blend);
    }
  }
  else {
    specular = unity_IndirectSpecColor.rgb;
  }

  return specular * occlusion;
}

inline 
UnityGI 
UnityGlobalIllumination(
  UnityGIInput data, 
  half occlusion, 
  half3 normalWorld, 
  Unity_GlossyEnvironmentData glossIn,
  float material_mix
) {
  UnityGI o_gi = UnityGI_Base(data, occlusion, normalWorld);
  o_gi.indirect.specular = UnityGI_IndirectSpecular(data, occlusion, glossIn, material_mix);
  return o_gi;
}

inline 
UnityGI 
FragmentGI(
  Fragment_Common_Data s, 
  float3 eyeVec,
  half occlusion, 
  half4 i_ambientOrLightmapUV, 
  half atten, 
  UnityLight light,
  float material_mix
) {
  UnityGIInput d;
  d.light = light;
  d.worldPos = s.posWorld;
  d.worldViewDir = -eyeVec;
  d.atten = atten;

  d.ambient = i_ambientOrLightmapUV.rgb;
  d.lightmapUV = 0;

  d.probeHDR[0] = unity_SpecCube0_HDR;
  d.probeHDR[1] = unity_SpecCube1_HDR;

  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
    d.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
  #endif

  #ifdef UNITY_SPECCUBE_BOX_PROJECTION
    d.boxMax[0] = unity_SpecCube0_BoxMax;
    d.probePosition[0] = unity_SpecCube0_ProbePosition;
    d.boxMax[1] = unity_SpecCube1_BoxMax;
    d.boxMin[1] = unity_SpecCube1_BoxMin;
    d.probePosition[1] = unity_SpecCube1_ProbePosition;
  #endif

  Unity_GlossyEnvironmentData g = UnityGlossyEnvironmentSetup(s.smoothness, -eyeVec, s.normalWorld, s.specColor);
  UnityGI gi = UnityGlobalIllumination(d, occlusion, s.normalWorld, g, material_mix);

  return gi;
}

inline float2 Unity_SafeNormalize(float2 inVec) {
  float dp2 = max(0.001f, dot(inVec, inVec));
  return inVec * rsqrt(dp2);
}

inline float3 Unity_SafeNormalize(float3 inVec) {
  float dp3 = max(0.001f, dot(inVec, inVec));
  return inVec * rsqrt(dp3);
}

// Pow5 uses the same amount of instructions as generic pow(), but has 2 advantages:
// 1) better instruction pipelining
// 2) no need to worry about NaNs
inline half Pow5(half x) {
  return x*x * x*x * x;
}

inline half2 Pow5(half2 x) {
  return x*x * x*x * x;
}

inline half3 Pow5(half3 x) {
  return x*x * x*x * x;
}

inline half4 Pow5(half4 x) {
  return x*x * x*x * x;
}


// Note: Disney diffuse must be multiply by diffuseAlbedo / PI. This is done outside of this function.
half DisneyDiffuse(half NdotV, half NdotL, half LdotH, half perceptualRoughness) {
  half fd90 = 0.5 + 2 * LdotH * LdotH * perceptualRoughness;

  // Two schlick fresnel term
  half lightScatter   = (1 + (fd90 - 1) * Pow5(1 - NdotL));
  half viewScatter    = (1 + (fd90 - 1) * Pow5(1 - NdotV));

  return lightScatter * viewScatter;
}

float PerceptualRoughnessToRoughness(float perceptualRoughness) {
  return perceptualRoughness * perceptualRoughness;
}

inline half PerceptualRoughnessToSpecPower(half perceptualRoughness) {
  half m = PerceptualRoughnessToRoughness(perceptualRoughness);   // m is the true academic roughness.
  half sq = max(1e-4f, m*m);

  // https://dl.dropboxusercontent.com/u/55891920/papers/mm_brdf.pdf
  half n = (2.0 / sq) - 2.0;                          

  // prevent possible cases of pow(0,0), which could happen when roughness is 1.0 and NdotH is zero
  n = max(n, 1e-4f);                                  
  return n;
}

inline half3 FresnelTerm(half3 F0, half cosA) {
  half t = Pow5(1 - cosA);   // ala Schlick interpoliation
  return F0 + (1-F0) * t;
}

inline half3 FresnelLerp(half3 F0, half3 F90, half cosA) {
  // ala Schlick interpoliation
  half t = Pow5(1 - cosA);   
  return lerp(F0, F90, t);
}

// Ref: http://jcgt.org/published/0003/02/03/paper.pdf
inline float SmithJointGGXVisibilityTerm(float NdotL, float NdotV, float roughness) {
  #if 0
    // Original formulation:
    //  lambda_v    = (-1 + sqrt(a2 * (1 - NdotL2) / NdotL2 + 1)) * 0.5f;
    //  lambda_l    = (-1 + sqrt(a2 * (1 - NdotV2) / NdotV2 + 1)) * 0.5f;
    //  G           = 1 / (1 + lambda_v + lambda_l);

    // Reorder code to be more optimal
    half a          = roughness;
    half a2         = a * a;

    half lambdaV    = NdotL * sqrt((-NdotV * a2 + NdotV) * NdotV + a2);
    half lambdaL    = NdotV * sqrt((-NdotL * a2 + NdotL) * NdotL + a2);

    // Simplify visibility term: (2.0f * NdotL * NdotV) /  ((4.0f * NdotL * NdotV) * (lambda_v + lambda_l + 1e-5f));
    return 0.5f / (lambdaV + lambdaL + 1e-5f);  // This function is not intended to be running on Mobile,
                                                // therefore epsilon is smaller than can be represented by half
  #else
    // Approximation of the above formulation (simplify the sqrt, not mathematically correct but close enough)
    float a = roughness;
    float lambdaV = NdotL * (NdotV * (1 - a) + a);
    float lambdaL = NdotV * (NdotL * (1 - a) + a);

    return 0.5f / (lambdaV + lambdaL + 1e-5f);
  #endif
}

inline float GGXTerm(float NdotH, float roughness) {
  float a2 = roughness * roughness;
  float d = (NdotH * a2 - NdotH) * NdotH + 1.0f; // 2 mad

  // This function is not intended to be running on Mobile,
  // therefore epsilon is smaller than what can be represented by half
  return UNITY_INV_PI * a2 / (d * d + 1e-7f); 
}

struct TF_And_Material_Mix {
  // NOTE(valuef): May be combined with built_in_tf, use this to lerp between material data
  // 2023-09-11
  float material_mix;

  float bulge_t;
};

float3
sample_matcap(
  const Texture_Info matcap,
  float3 color,
  float size,
  bool use_world_lighting,
  float3 world_normal,
  float3 eye_vec,
  float3 pbr_diffuse_tint,
  float3 pbr_specular_light_term,
  float3 pbr_specular_indirect_term
) {
  if(!matcap.is_set) {
    return float3(0,0,0);
  }

  if(IS_FORWARD_ADD && !use_world_lighting) {
    // NOTE(valuef): No need to evaluate matcaps twice in the forwardadd pass if they aren't affected by lighting
    // 2023-11-10
    return float3(0,0,0);
  }

  // NOTE(valuef): Adapted poiyomi double sided matcap.
  // Retrieved 2023-11-09
  //
  // MIT BEGIN
  //MIT License

  //Copyright (c) 2023 Poiyomi Inc.

  //Permission is hereby granted, free of charge, to any person obtaining a copy
  //of this software and associated documentation files (the "Software"), to deal
  //in the Software without restriction, including without limitation the rights
  //to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  //copies of the Software, and to permit persons to whom the Software is
  //furnished to do so, subject to the following conditions:

  //The above copyright notice and this permission notice shall be included in all
  //copies or substantial portions of the Software.

  //THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  //IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  //FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  //AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  //LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  //OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  //SOFTWARE.

  float3 reflection = reflect(eye_vec, world_normal);
  float2 uv = float2(dot(reflection, float3(1, 0, 0)), dot(reflection, float3(0, 1, 0)));
  uv = (uv * size) + float2(.5,.5);
  // MIT END

  // @InlinedTextureSampling
  float4 tap = matcap.tex.Sample(matcap.samp, uv);
  float3 col = tap.rgb * color;

  col *= get_mask(matcap.mask);

  if(matcap.alpha_is_mask) {
    col *= tap.a;
  }

  if(use_world_lighting) {
    col.rgb = (col.rgb * pbr_diffuse_tint) + (col.rgb * pbr_specular_light_term) + (col.rgb * pbr_specular_indirect_term);
  }

  return col;
}

#define apply_mat_mix(_target, _mix_value, _base_value, _condition, _material_mix) \
    EDITOR_BRANCH if(_condition && _TF_Enabled)  _target = lerp(_mix_value, _base_value, _material_mix); \
    else            _target = _base_value;


// Main Physically Based BRDF
// Derived from Disney work and based on Torrance-Sparrow micro-facet model
//   BRDF = kD / pi + kS * (D * V * F) / 4
//   I = BRDF * NdotL
//
// * GGX NDF
// * Smith for Visiblity term
// * Schlick approximation for Fresnel
half4 
BRDF1_Unity_PBS(
  half3 diffColor, 
  half3 specColor, 
  half oneMinusReflectivity, 
  half smoothness,
  float3 normal, 
  float3 viewDir,
  UnityLight light, 
  UnityIndirect indirect,
  TF_And_Material_Mix mix_info
) {
  float perceptualRoughness = SmoothnessToPerceptualRoughness(smoothness);
  float3 halfDir = Unity_SafeNormalize(float3(light.dir) + viewDir);

  // NdotV should not be negative for visible pixels, but it can happen due to perspective projection and normal mapping
  // In this case normal should be modified to become valid (i.e facing camera) and not cause weird artifacts.
  // but this operation adds few ALU and users may not want it. Alternative is to simply take the abs of NdotV (less correct but works too).
  // Following define allow to control this. Set it to 0 if ALU is critical on your platform.
  // This correction is interesting for GGX with SmithJoint visibility function because artifacts are more visible in this case due to highlight edge of rough surface
  // The amount we shift the normal toward the view vector is defined by the dot product.
  half shiftAmount = dot(normal, viewDir);
  normal = shiftAmount < 0.0f ? normal + viewDir * (-shiftAmount + 1e-5f) : normal;
  // A re-normalization should be applied here but as the shift is small we don't do it to save ALU.
  //normal = normalize(normal);

  float nv = dot(normal, viewDir); // this saturate should no be necessary here

  float nl = saturate(dot(normal, light.dir));
  float nh = saturate(dot(normal, halfDir));

  half lv = saturate(dot(light.dir, viewDir));
  half lh = saturate(dot(light.dir, halfDir));

  half diffuseTerm = DisneyDiffuse(nv, nl, lh, perceptualRoughness) * nl;

  EDITOR_BRANCH if(_Diffuse_Type == DIFFUSE_TYPE_PBR_LUT) {
    diffuseTerm = _Diffuse_LUT_Texture.Sample(_SamplerLinearClamp, diffuseTerm).r;
  }
  else EDITOR_BRANCH if(_Diffuse_Type == DIFFUSE_TYPE_PBR_RAMP) {
    float ramp_1 = saturate(((diffuseTerm - _Diffuse_Ramp_1_Offset) - _Diffuse_Ramp_1_Start) / (_Diffuse_Ramp_1_End - _Diffuse_Ramp_1_Start));
    float ramp_2 = saturate(((diffuseTerm - _Diffuse_Ramp_2_Offset) - _Diffuse_Ramp_2_Start) / (_Diffuse_Ramp_2_End - _Diffuse_Ramp_2_Start));
    
    diffuseTerm = lerp(ramp_1, ramp_2, _Diffuse_Ramp_Blend);
  }
  else EDITOR_BRANCH if(_Diffuse_Type == DIFFUSE_TYPE_NONE) {
    diffuseTerm = 1;
  }
  
  // Specular term
  // HACK: theoretically we should divide diffuseTerm by Pi and not multiply specularTerm!
  // BUT 1) that will make shader look significantly darker than Legacy ones
  // and 2) on engine side "Non-important" lights have to be divided by Pi too in cases when they are injected into ambient SH
  float roughness = PerceptualRoughnessToRoughness(perceptualRoughness);
  roughness = max(roughness, 0.002);

  float V = SmithJointGGXVisibilityTerm(nl, nv, roughness);
  float D = GGXTerm(nh, roughness);

  // Torrance-Sparrow model, Fresnel is applied later
  float specularTerm = V*D * UNITY_PI; 

  #ifdef UNITY_COLORSPACE_GAMMA
    specularTerm = sqrt(max(1e-4h, specularTerm));
  #endif

  // specularTerm * nl can be NaN on Metal in some cases, use max() to make sure it's a sane value
  specularTerm = max(0, specularTerm * nl);

  // surfaceReduction = Int D(NdotH) * NdotH * Id(NdotL>0) dH = 1/(roughness^2+1)
  half surfaceReduction;
  #ifdef UNITY_COLORSPACE_GAMMA
    // 1-0.28*x^3 as approximation for (1/(x^4+1))^(1/2.2) on the domain [0;1]
    surfaceReduction = 1.0-0.28*roughness*perceptualRoughness;
  #else
    // fade in [0.5;1]
    surfaceReduction = 1.0 / (roughness*roughness + 1.0);           
  #endif

  EDITOR_BRANCH if(!_SpecularHightlights_Enabled) {
    specularTerm = 0.0;
  }
  else {
    // To provide true Lambert lighting, we need to be able to kill specular completely.
    specularTerm *= any(specColor) ? 1.0 : 0.0;
  }

  half grazingTerm = saturate(smoothness + (1-oneMinusReflectivity));

  float3 light_color_term = lerp(float3(1,1,1), light.color, _LightColor_Weight);

  // NOTE(valuef): Bias the shadows toward the tint color based off of the lack of diffuse term.
  // 2023-01-08
  float3 tinted_diffuse = lerp(_Diffuse_Shadow_Tint_Color.rgb, 1, diffuseTerm);
  float3 tinted_indirect_diffuse = lerp(_LightProbe_Shadow_Tint_Color.rgb, 1, indirect.diffuse);

  float3 light_probes = _LightProbeWeight * tinted_indirect_diffuse;
  float3 direct_light = light_color_term * tinted_diffuse;

  float3 diffuse_tint = light_probes + direct_light;
  float3 specular_light_term = specularTerm * light_color_term * FresnelTerm(specColor * _Specular_Tint, lh);
  float3 specular_indirect_term = _World_ReflectionProbe_Tint.rgb * (surfaceReduction * indirect.specular * FresnelLerp(specColor, grazingTerm, nv)) * _IndirectLighting_Amount;

  

  float3 color = float3(0,0,0);

  color += diffColor * diffuse_tint;
  color += specular_light_term;
  color += specular_indirect_term;

  {
    float3 matcaps = float3(0,0,0);

    {
      float3 base = sample_matcap(
        Matcap_1_Texture, 
        get_value(_Matcap_1_Color_Osci), 
        _Matcap_1_Size,
        _Matcap_1_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 mix = sample_matcap(
        Mix_Matcap_1_Texture, 
        get_value(_Mix_Matcap_1_Color_Osci), 
        _Mix_Matcap_1_Size,
        _Mix_Matcap_1_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 matcap;
      apply_mat_mix(matcap, mix, base, _Mix_Separate_Matcap_1, mix_info.material_mix.rrr);
      matcaps += matcap;
    }

    {
      float3 base = sample_matcap(
        Matcap_2_Texture, 
        get_value(_Matcap_2_Color_Osci), 
        _Matcap_2_Size,
        _Matcap_2_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 mix = sample_matcap(
        Mix_Matcap_2_Texture, 
        get_value(_Mix_Matcap_2_Color_Osci), 
        _Mix_Matcap_2_Size,
        _Mix_Matcap_2_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 matcap;
      apply_mat_mix(matcap, mix, base, _Mix_Separate_Matcap_2, mix_info.material_mix.rrr);
      matcaps += matcap;
    }

    {
      float3 base = sample_matcap(
        Matcap_3_Texture, 
        get_value(_Matcap_3_Color_Osci), 
        _Matcap_3_Size,
        _Matcap_3_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 mix = sample_matcap(
        Mix_Matcap_3_Texture, 
        get_value(_Mix_Matcap_3_Color_Osci), 
        _Mix_Matcap_3_Size,
        _Mix_Matcap_3_Lighting_Enabled,
        normal, -viewDir, diffuse_tint, specular_light_term, specular_indirect_term
      );

      float3 matcap;
      apply_mat_mix(matcap, mix, base, _Mix_Separate_Matcap_3, mix_info.material_mix.rrr);
      matcaps += matcap;
    }


    color += matcaps;

  }

  return half4(color, 1);
}

// TANOISE START
// tanoise.cginc - Retrieved 2023-03-07 
// Original source
//  https://github.com/cnlohr/shadertrixx/blob/main/Assets/cnlohr/Shaders/tanoise/tanoise.cginc
// 
// tanoise -> Extremely fast noise that does repeat, but "feels" like
// perlin noise... Ok, not perlin but smooth noise.  It can be used like
// perlin noise in many applications. Rewritten to avoid license issues.
//
//  Usage:
//    * For normal (not 1D) lookups, just use any white noise map.
//    * For 1D Output textures, you will need an offset texture map.
//    * For 4D->1D and 3D->2D Lookups, you will need to make sure SRGB on
//      your tex is OFF!
//    * For 3D->1D Lookups, it only uses the .r and .g channels of the texture.
//    * There is a possible benefit to using tanoise2,3,4 on an 1-channel
//      texture in that you could make it larger to support less repeating. 
//
//  float4 tanoise4( in float4 x )    //4 Texture Lookups
//  float tanoise4_1d( in float4 x )  //1 Texture Lookup
//  float4 tanoise3( in float3 x )    //2 Texture Lookups
//  float tanoise3_1d( in float3 x )  //1 Texture Lookup
//	float tanoise3_1d_fast( in float3 x ) //1 Texture Lookup, No matrix scramble (Slightly poorer quality)
//  float2 tanoise3_2d( in float3 x ) //1 Texture Lookup
//  float4 tanoise2( in float2 x )    //1 Texture Lookup
//  float4 tanoise2_hq( in float2 x ) //4 Texture Lookup (For when hardware interpreters aren't good enough)
//  float4 tanoise4_hq( in float4 x ) //12 texture lookups
//
//  The texture should be the noise texture bound. i.e. add this to properties
//  Properties {
//		_TANoiseTex ("TANoise", 2D) = "white" {}
//        ...
//  }
//
//  NOTE: You must:
//    * Disable compression (unless you want it muted)
//    * Use bilinear filtering. 
//    * Use repeat wrapping.
//    * If you are using the single-texel lookups, disable sRGB.
//
//  Map Generation:
//    * The C rand() function is insufficient for generation of this texture.
//      (It has obvious patterns).
//    * Recommended use an LFSR.
//    * See appendix at end.
//
//  TODO: Improve matrix for non-ordinal-direction viewing.  It should be
//    possible to make the noise resistant to 90-degree angle artifacts even
//    when viewerd from other axes.
//
// The original version of this noise is restrictively licensed.  Code was
// re-written for HLSL 2020 <>< CNLohr, code henseforth may be liberally
// licensed under MIT-X11, NewBSD or Any Creative Commons License including
// CC0.
//
// This is a included in shadertrixx https://github.com/cnlohr/shadertrixx
//
// There was also a bug in the version by stubbe which caused a migration in
// x/y/z when there was an applied w value.  The matrix undoes the migration
// in this version.
//
// The absolutely key idea here is by permuting the input by a matrix, the 
// artifacts from a gridded noise source can be decimated.  At least in most
// applications!  This was loosely referenced in this page here:
//   http://devmag.org.za/2009/04/25/perlin-noise/
//
// The specific tactic for arbitrary noise was mentioned here, though this
// does not give the noise a perlinesque feel.
//   https://shadertoyunofficial.wordpress.com/2016/07/21/usual-tricks-in-shadertoyglsl/
//
// Original concepts behind this algorithm are from: 
//   https://www.shadertoy.com/view/XslGRr
// The modified version is here:
//   https://www.shadertoy.com/view/XltSWj 
//
// The original noise came with this header.
//
// Created by inigo quilez - iq/2013
// Adapted for 4d by stubbe in 2016
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
//
// Fast 3D (value) noise by using two cubic-smooth bilinear interpolations in a LUT, 
// which is much faster than its hash based (purely procedural) counterpart.
//
// Note that instead of fetching from a grey scale texture twice at an offset of (37,17)
// pixels, the green channel of the texture is a copy of the red channel offset that amount
// (thx Dave Hoskins for the suggestion to try this)
//
// Adaped by stubbe for 4d: By applying the same trick again we can copy red and green into 
// blue and alpha with an offset for w and effectively sample a 4d noise by sampling and
// blending two 3d noises.
//
//  C. Lohr notes:
// Originally, they used zOffset 37,17 and wOffset 59.0, 83.0
// This was the original matrix.
//   const mat4 m = mat4( 0.00,  0.80,  0.60, -0.4,
//                       -0.80,  0.36, -0.48, -0.5,
//                       -0.60, -0.48,  0.64,  0.2,
//                        0.40,  0.30,  0.20,  0.4);
// We have adapted this to use a pure-hexagonal move in the upper left.
// And appropriate shifts outside that.
//
// I experimentally found this combination to work better, and it seems to
// cause less repeating when applied to a sphere and a cube.  Selection of
// noise offset values is critical to avoid apparent repeating patterns.
// 

#define tanoiseZOff float2(37,17)
//#define tanoiseZOff float2(51,111)

Texture2D _TANoiseTex;
uniform half4 _TANoiseTex_TexelSize; 

static const float4x4 tanoiseM = 
{
  -0.071301, 0.494967, -0.757557, 0.372699,
  0.494967, 0.388720, 0.303345, 0.701985,
  -0.757557, 0.303345, 0.497523, -0.290552,
  0.372699, 0.701985, -0.290552, -0.532815
};


// NOTE(valuef): Adapted to use the original zoff (37, 17) as (51, 111) was causing some sort of
// quantization artifact likely to do with improper sampling.
//
// 2023-03-09
float4 tanoise3( in float3 x ) {
  float3 c = mul(tanoiseM,x);
	float3 p = floor(c);
	float3 f = frac(c);

	// First level smoothing for nice interpolation between levels. This
	// gets rid of the sharp artifacts that will come from the bilinear
	// interpolation.
	f = f * f * ( 3.0 - 2.0 * f );

	// Compute a u,v coordinateback in
	float2 uv = ( p.xy + p.z*tanoiseZOff ) + f.xy;

	fixed4 r = _TANoiseTex.SampleLevel(_SamplerLinearRepeat, (uv+0.5)*_TANoiseTex_TexelSize, 0.0 );
	fixed4 g = _TANoiseTex.SampleLevel(_SamplerLinearRepeat, (uv+0.5 + tanoiseZOff)*_TANoiseTex_TexelSize, 0.0 );
	return lerp( r, g, f.z );
}

// TANOISE END


half3x3 CreateTangentToWorldPerVertex(half3 normal, half3 tangent, half tangentSign) {
  // For odd-negative scale transforms we need to flip the sign
  half sign = tangentSign * unity_WorldTransformParams.w;
  half3 binormal = cross(normal, tangent) * sign;
  return half3x3(tangent, binormal, normal);
}

UnityLight AdditiveLight(half3 lightDir, half atten) {
  UnityLight l;

  l.color = _LightColor0.rgb;
  l.dir = lightDir;

  #ifndef USING_DIRECTIONAL_LIGHT
    l.dir = normalize(l.dir);
  #endif

  // shadow the light
  l.color *= atten;

  return l;
}

UnityIndirect ZeroIndirect() {
  UnityIndirect ind;
  ind.diffuse = 0;
  ind.specular = 0;
  return ind;
}

inline
float
calculate_built_in_tf_animation(
  float3 baked_pos,
  float3 world_normal,
  float3 eye_vec,
  out float unclamped_tf
) {
 
  float noise = 0;
  EDITOR_BRANCH if(is_TF_AnimationMap_set) {
    float mip = _TF_AnimationMap_Mip;

    if(_TF_AnimationMap_UseUVBus) {
      // @InlinedTextureSampling
      float2 uv = resolve_uv_bus(_TF_AnimationMap_UVBus);

      float2 off = _TF_AnimationMap_Offset.xy;
      float2 scale = _TF_AnimationMap_Scale.xy;

      uv = apply_uv_tiling_offset_and_scroll(uv, scale, off, float2(0,0), _Time.y);

      if(IS_VERTEX_SHADER) {
        noise = _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv, mip);
      }
      else {
        noise = _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv);
      }
    }
    else {
      float3 off = _TF_AnimationMap_Offset.xyz;
      float3 scale = _TF_AnimationMap_Scale.xyz;

      float2 uv_x = float2(off.x + scale.x * baked_pos.yz);
      float2 uv_y = float2(off.y + scale.y * baked_pos.zx);
      float2 uv_z = float2(off.z + scale.z * baked_pos.xy);

      float3 noise3;
      
      if(IS_VERTEX_SHADER) {
        noise3 = float3(
          _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv_x, mip).r,
          _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv_y, mip).r,
          _TF_AnimationMap.SampleLevel(_SamplerLinearRepeat, uv_z, mip).r
        );
      }
      else {
        noise3 = float3(
          _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv_x).r,
          _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv_y).r,
          _TF_AnimationMap.Sample(_SamplerLinearRepeat, uv_z).r
        );
      }

      noise = (noise3.x + noise3.y + noise3.z) * (1.0/3.0);
    }
  }
  else {
    noise = 0;
  }

  float tf_slider = get_value(_TF_Time_Osci).r;

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_TF_Visualisation_Enabled) {
      tf_slider = frac(_Time.y * _TF_Visualisation_Speed);
    }
  #endif

  float margin;
  if(IS_VERTEX_SHADER) {
    margin = _TF_Animation_Blur_VS;
  }
  else {
    margin = _TF_Animation_Blur_PS;
  }
  margin = abs(margin);

  EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_VERY_SIMPLE) {
    unclamped_tf = tf_slider;
    return tf_slider;
  }
  else EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_SIMPLE_WITH_NOISE) {
    // NOTE(valuef): https://www.desmos.com/calculator/f4py5sok4x
    // 2022-10-11
    float t2 = tf_slider * (1 + margin);

    float start = 0 - margin + t2;
    float end = 0 + t2;

    float tf = (noise - start) / (end - start);

    unclamped_tf = tf;

    tf = saturate(tf);

    return 1-tf;
  }
  else EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_RADIAL) {
    float radius = tf_slider * _TF_Animation_Radial_Radius;

    float tf = length(baked_pos - _TF_Animation_Radial_Origin);
    tf /= radius;

    if(_TF_Animation_Radial_LegacyNoise_Enabled) {
      tf /= 2;
      tf += noise;
    }
    else {
      tf -= noise * .5;
    }
    tf = 1-tf;

    float start = 0;
    float end = 0 + margin;

    tf = (tf - start) / (end - start);

    unclamped_tf = tf;

    tf = saturate(tf);

    return tf;
  }
  else EDITOR_BRANCH if(_TF_Mode == TF_ANIMATION_CENTER_OUT) {
    float tf = dot(world_normal, -eye_vec);

    tf -= noise * .5;
    tf = saturate(tf);
    EDITOR_BRANCH if(!_TF_Animation_CenterOut_Invert) {
      tf = 1 - tf;
    }

    float t2 = tf_slider * (1 + margin);
    float start = 0 - margin + t2;
    float end = 0 + t2;

    tf = (tf - start) / (end - start);

    unclamped_tf = tf;
    if(!_TF_Animation_CenterOut_Invert) {
      unclamped_tf = 1-unclamped_tf;
    }

    tf = 1-saturate(tf);

    return tf;
  }

  unclamped_tf = 0;
  return 0;
}

float _VRChatMirrorMode;

// NOTE(valuef): VRC Mirrors seem to have a lot of trouble with the _CameraDepthTexture. By default
// it seems like that value is set to be some kind of constant black or constant white. But it
// seems like what texture is bound to that sampler is undefined. I've had instanced where the depth
// texture of the mirror is set to some bizzare texture that's loaded in VRAM.
// So we want to guard any _CameraDepthTexture samples with a mirror check to make sure we don't
// read garbage.
// 2022-09-20
inline
bool
is_rendering_for_mirror() {
  // NOTE(valuef):
  // As of VRChat 2022.3.1 (2022-10-19)
  // 0 - Rendering normally, not in a mirror
  // 1 - Rendering in a mirror viewed in VR
  // 2 - Rendering in a mirror viewed in desktop mode

  #if defined(NOT_BAKED)
    return _PreviewMirror != 0;
  #endif

  return _VRChatMirrorMode != 0;
}

inline
bool
can_use_camera_depth() {
  return !is_rendering_for_mirror() && is_depth_texture_available();
}

TF_And_Material_Mix
calculate_tf_and_material_mix(
  float3 baked_pos,
  float3 world_normal,
  float3 view_dir
) {
  TF_And_Material_Mix ret;

  EDITOR_BRANCH if(!_TF_Enabled) {
    ret.material_mix = 1;
    ret.bulge_t = 1;
    return ret;
  }

  bool is_manual_enabled = (_TF_Manual_Mask.channel != MASK_NONE) || _TF_Manual_Osci_Enabled;
  bool is_builtin_enabled = _TF_Mode != TF_ANIMATION_NONE;

  float manual = 0;
  float builtin = 0;
  float builtin_unclamped_tf = 0;

  EDITOR_BRANCH if(is_manual_enabled) {
    manual = get_mask(_TF_Manual_Mask);
    manual *= saturate(get_value(_TF_Manual_Osci).r);
  }

  EDITOR_BRANCH if(is_builtin_enabled) {
    builtin = calculate_built_in_tf_animation(baked_pos, world_normal, view_dir, builtin_unclamped_tf);
  }

  EDITOR_BRANCH if(is_manual_enabled && is_builtin_enabled) {
    EDITOR_BRANCH if(_TF_ManualBuiltin_BlendMode == 0) { // mul
      ret.material_mix = (manual * builtin);
      ret.bulge_t = manual * (saturate(builtin_unclamped_tf + _TF_Animation_Bulging_Offset + .5));
    }
    else { // add
      ret.material_mix = saturate(manual + builtin);
      ret.bulge_t = saturate(manual + (saturate(builtin_unclamped_tf + _TF_Animation_Bulging_Offset + .5)));
    }
  }
  else EDITOR_BRANCH if(is_manual_enabled) {
    ret.material_mix = manual;
    ret.bulge_t = manual;
  }
  else EDITOR_BRANCH if(is_builtin_enabled) {
    ret.material_mix = builtin;
    ret.bulge_t = saturate(builtin_unclamped_tf + _TF_Animation_Bulging_Offset + .5);
  }
  else {
    ret.material_mix = _TF_Enabled ? 0 : 1;
    ret.bulge_t = ret.material_mix;
  }

  return ret;
}

struct Distortion_Result {
  float goo_noise;
  float goo_drip;

  float3 world_normal;
  float4 world_position;
  float4 local_vertex;
  float4 clip_vertex;
  float4 grab_pos;

  float4 debug;

  float light_mask;

  float touch_reactivity_interaction;
};

float
sample_depth_for_touch_reactivity(
  float our_depth,
  float4 clip_vertex,
  float2 offset
) {
  float4 sample_clip = clip_vertex;
  sample_clip.xy += offset;

  // NOTE(valuef): Not going to be correct for mirrors
  // 2023-09-13
  float4 screen = ComputeGrabScreenPos(sample_clip);
  float tap = SAMPLE_DEPTH(screen.xy / screen.w);

  float depth = LinearEyeDepth(tap);
  return 1-saturate(abs(our_depth - depth) / _TouchReactivity_Remap_End);
}

inline
void
normalize_eye_vec(
  float3 eye_vec_unnormalized,
  out float3 eye_vec,
  out float world_distance
) {
  world_distance = length(eye_vec_unnormalized);
  eye_vec = eye_vec_unnormalized / max(.001, world_distance);
}

inline
Distortion_Result
do_distortion(
  float3  input_baked_pos,
  float3  input_normal,
  float4  input_vertex,
  float4  input_color,
  float4  input_tangent,
  uint    input_vertex_id,
  float3  input_early_world_position,
  const bool apply_depth_distortion
) {
  input_vertex.xyz -= input_normal.xyz * _NormalOffset_Amount;

  #if defined(RALIV_PENETRATOR)
    PenetratorReshape(input_vertex, input_normal);
  #elif defined(RALIV_ORIFICE)
    OrificeReshape(input_vertex, input_normal, input_tangent.xyz, input_vertex_id);
  #endif

  float3 early_eye_vec;
  float early_world_distance;
  normalize_eye_vec(
    input_early_world_position - _WorldSpaceCameraPos.xyz,
    /* out */ early_eye_vec, 
    /* out */ early_world_distance
  );

  // NOTE(valuef): So it appears that the Unity mesh skinning algorithm scales the normals along
  // with the scale of the armature. I do not understand why it does this or even if it's useful,
  // but it's something that, in order to be correct, we have to deal with in the shader.
  // Behind the scenes, UnityObjectToWorldNormal does a normalize after the coordinate system
  // change, so we get good direction vectors.
  // As an aside, it's interesting to note how the input POSITION vertex data is the position of the
  // skinned vertex and it appears that the scale of a skinned mesh is not encoded in the model
  // matrix but instead it's applied during skinning! So from what I can tell, taking the length of
  // the skinned normal is one way of getting an approximation of the scale of a skinned mesh
  // without setting any extra uniforms or input vertex data.
  // 2022-09-18

  float3 world_normal = UnityObjectToWorldNormal(input_normal);

  Distortion_Result ret;
  ret.debug = 0.0.rrrr;
  ret.local_vertex = input_vertex;
  ret.goo_noise = 0;

  float3 noise_normal = float3(0,0,0);

  {
    float3 noise_uv = get_value(_Goo_Size_Osci) * input_baked_pos;
    noise_uv -= get_time(_Goo_Speed_TimeBase) * _Goo_Speed.xyz + get_value(_Goo_Offset_Osci).xyz;

    EDITOR_BRANCH if(_Goo_Enabled) {
      float4 tap = tanoise3(noise_uv);
      ret.goo_noise = tap.w;
      noise_normal = normalize(tap.xyz * 2 - 1);
    }
  }

  float light_mask = vs_make_point_light_mask(input_early_world_position);

  init_mask_channels(
    ret.goo_noise, 
    float2(0,0), // @DelayedGooDripEvaluationInVS
    input_color, 
    input_baked_pos, 
    world_normal, 
    early_eye_vec,
    0, // @TouchReactivityInteractionMaskUnavailableInVS
    light_mask,
    input_vertex,
    float2(0,0),
    early_world_distance
  );

  init_masks_as_oscillators();
  
  TF_And_Material_Mix mix_info = calculate_tf_and_material_mix(input_baked_pos, world_normal, early_eye_vec);

  float droop = 0;
  float drip_mask = get_mask(_Goo_Drip_Mask);

  const int NUM_PHYSBONES = 4;
  Capsule_Physbone_Data cap_pb[NUM_PHYSBONES];

  {
    int i = 0;
    cap_pb[i].is_enabled  = _Physbone_1_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_1_Proximity_X, _Physbone_1_Proximity_Y, _Physbone_1_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_1_Mask);
  }
  {
    int i = 1;
    cap_pb[i].is_enabled  = _Physbone_2_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_2_Proximity_X, _Physbone_2_Proximity_Y, _Physbone_2_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_2_Mask);
  }
  {
    int i = 2;
    cap_pb[i].is_enabled  = _Physbone_3_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_3_Proximity_X, _Physbone_3_Proximity_Y, _Physbone_3_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_3_Mask);
  }
  {
    int i = 3;
    cap_pb[i].is_enabled  = _Physbone_4_Enabled;
    cap_pb[i].proximity   = float3(_Physbone_4_Proximity_X, _Physbone_4_Proximity_Y, _Physbone_4_Proximity_Z);
    cap_pb[i].mask        = get_mask(_Physbone_4_Mask);
  }

  // NOTE(valuef): Up until this point, local_vertex was canonical vertex position data. To save on
  // matrix multiplies during the drip & physics deformation calculations, we let world_position be
  // the canonical. This way we don't have to convert world_x/y/z and world gravity to local space.
  // :CanonicalVertexPositionSwitch
  // 2023-03-22
  float4 world_position = mul(unity_ObjectToWorld, ret.local_vertex);

  float3 world_x = float3(1,0,0);
  float3 world_y = float3(0,1,0);
  float3 world_z = float3(0,0,1);
  float3 world_gravity = normalize(_Goo_Drip_Gravity_Vector.xyz);

  float3 drag_force = float3(0,0,0);

  {for(int i = 0; i < NUM_PHYSBONES; i++) {
    EDITOR_BRANCH if(!cap_pb[i].is_enabled) {
      continue;
    }

    drag_force += (
      world_x * cap_pb[i].proximity.x + 
      world_y * cap_pb[i].proximity.y + 
      world_z * cap_pb[i].proximity.z
    ) * cap_pb[i].mask;
  }}

  EDITOR_BRANCH if(_Goo_Enabled && _Goo_Drip_Enabled) {	

    float physbone_drip_strength = _Physbone_Drip_DragForce_Strength;
    physbone_drip_strength *= get_mask(_Physbone_Drip_Mask);

    float3 drip_drag_force = drag_force * physbone_drip_strength;

    float3 total_force = world_gravity + drip_drag_force;

    float3 force_direction = Unity_SafeNormalize(total_force);

    float d = max(0, dot(force_direction, world_normal));

    float drip_start = get_value(_Goo_Drip_Start_Osci);
    float drip_end = get_value(_Goo_Drip_End_Osci);
    d = saturate((d - drip_start) / (drip_end - drip_start));	
    d *= drip_mask;

    EDITOR_BRANCH if(!_Goo_Drip_ApplyOnMaterialMix) {
      d *= mix_info.material_mix;
    }

    float physics_drip = d;

    float drip_amount = get_value(_Goo_Drip_Amount_Osci);
    d *= (1 - drip_amount) + ret.goo_noise * drip_amount;

    float drip_size = get_value(_Goo_Drip_Size_Osci);
    float3 force_offset = (world_gravity + drip_drag_force) * d * drip_size;

    world_position.xyz += force_offset;

    droop = d;
  }

  EDITOR_BRANCH if(_TF_Bulging_Enabled) {

    float bulge_edge_mask = 1-pow2(2 * mix_info.bulge_t - 1);

    bulge_edge_mask *= get_mask(_TF_Bulging_Mask);
    
    float bulge_size = _TF_Bulging_Size / 100;
    world_position.xyz += world_normal.xyz * bulge_edge_mask * bulge_size;
  }

  float goo_deformation_mask = get_mask(_Goo_Deformation_MeshNormal_Mask);

  EDITOR_BRANCH if(_Goo_Enabled && _Goo_Deformation_Enabled) {

    float weight = ret.goo_noise;

    float mesh_offset_min = get_value(_Goo_Deformation_MeshNormal_Offset_Min_Osci);
    float mesh_offset_max = get_value(_Goo_Deformation_MeshNormal_Offset_Max_Osci);
    float mesh_normal_t = lerp(mesh_offset_min, mesh_offset_max, weight);
    float3 mesh_normal_offset = world_normal.xyz * (mesh_normal_t / 100);

    float3 world_noise_normal = UnityObjectToWorldNormal(noise_normal);

    float procedural_normal_size = get_value(_Goo_Deformation_ProceduralNormal_Size_Osci);
    float3 procedural_normal_offset = weight * world_noise_normal * (procedural_normal_size / 100);

    float3 offset = 0.0.rrr;
    offset += mesh_normal_offset;
    offset += procedural_normal_offset;

    offset *= goo_deformation_mask;

    EDITOR_BRANCH if(!_Goo_Deformation_ApplyOnMaterialMix) {
      offset *= mix_info.material_mix;
    }

    world_position.xyz += offset;
  }

  // NOTE(valuef): The correct way of doing this is to do it after we do the drip toggle as that
  // one needs to work off of normal unmodified world normals, but we save a
  // UnityObjectToWorldNormal (4 dp3 1 rsq 1 mul) call if we do it before hand as only have to
  // calculate the world normal once.
  // 2022-08-16
  EDITOR_BRANCH if(_Goo_Enabled && _Goo_Deformation_Enabled) {
    const float DEG_TO_RAD = UNITY_PI / 180.0;

    float xy = lerp(_Goo_Normal_Offset_Min_Degrees, _Goo_Normal_Offset_Max_Degrees, ret.goo_noise);
    float yz = lerp(_Goo_Normal_Offset_Min_Degrees, _Goo_Normal_Offset_Max_Degrees, ret.goo_noise);

    xy *= goo_deformation_mask;
    yz *= goo_deformation_mask;

    EDITOR_BRANCH if(!_Goo_Deformation_ApplyOnMaterialMix) {
      xy *= mix_info.material_mix;
      yz *= mix_info.material_mix;
    }

    world_normal.xy = mul(rot2x2(xy * DEG_TO_RAD), world_normal.xy);
    world_normal.yz = mul(rot2x2(yz * DEG_TO_RAD), world_normal.yz);
  }

  // @DelayedGooDripEvaluationInVS
  MASK_CHANNELS.masks[MASK_GOO_DRIP] = float2(droop, 1-droop);

  {
    float3 force_offset = drag_force;
    force_offset *= _Physbone_Body_DragForce_Strength;
    force_offset *= get_mask(_Physbone_Body_Mask);

    EDITOR_BRANCH if(!_Physics_Body_ApplyOnMaterialMix) {
      force_offset *= mix_info.material_mix;
    }

    world_position.xyz += force_offset;
  }

  EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_TOTAL_DRAG_FORCE) {
    ret.debug.rgb = abs(drag_force) * .2;
    ret.debug.w = 1; 
  }
  
  ret.clip_vertex = UnityWorldToClipPos(world_position);

  ret.touch_reactivity_interaction = 0;

  bool do_touch_reactivity = apply_depth_distortion && _TouchReactivity_Mode == TOUCH_REACTIVITY_MODE_ENABLED;

  if(_TouchReactivity_Bypassed) {
    do_touch_reactivity = false;
  }

  EDITOR_BRANCH if(do_touch_reactivity) {

    // NOTE(valuef): we use ComputeGrabScreenPos in case the depth buffer is flipped.
    // 2022-08-16
    float4 screen_uv = ComputeGrabScreenPos(ret.clip_vertex);

    [branch] if(can_use_camera_depth()) {
      // NOTE(valeuf): should be the same as -UnityObjectToViewPos(input_vertex).z;
      // 2022-08-16
      float our_depth = screen_uv.w;
      float t = 0;
      {
        float sz = .005 * _TouchReactivity_Dispersion;
        float2 clip_sz = mul((float2x2)UNITY_MATRIX_P, sz.rr);

        // NOTE(valuef): Sampling pattern:
        //   .  
        //  . . 
        // . X .
        //  . . 
        //   .  
        // Picked this one over a simple box as we the +x -x +y -y poles that
        // have been offset by an extra 1 give us a small bit of extra visual
        // smoothness for free.
        // 2022-12-21
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(0,2));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(-1,1));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(1,1));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(-2,0));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(0,0));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(2,0));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(-1,-1));
        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(1,-1));

        t += sample_depth_for_touch_reactivity(our_depth, ret.clip_vertex, clip_sz * float2(0,-2));

        t /= 9.0;
      }

      EDITOR_BRANCH if(_ProximityDistortion_Enabled) {
        float near_plane = _ProjectionParams.y;
        float delta = our_depth - near_plane;

        // NOTE(valuef): start and end are swapped to save on a (1 - t) instruction
        // 2022-09-18
        float start = _ProximityDistortion_Depth_End;
        float end = _ProximityDistortion_Depth_Start;
        float close_t = saturate((delta - start) / (end - start));

        float proximity_distorion_mask = get_mask(_ProximityDistortion_Mask);
        close_t *= proximity_distorion_mask;

        t = saturate(t+close_t);
      }

      EDITOR_BRANCH if(!_TouchReactivity_And_PD_ApplyOnMaterialMix) {
        t *= mix_info.material_mix;
      }

      float touch_reactivity =  t * _TouchReactivity_Strength;

      touch_reactivity *= get_mask(_TouchReactivity_Mask);

      // NOTE(valuef): Touch reactivity in the VS won't have much use due to how late we evaluate it,
      // so we're marking it as unavailable in the VS and only available in the PS.
      // @TouchReactivityInteractionMaskUnavailableInVS
      // 2023-08-29
      ret.touch_reactivity_interaction = abs(touch_reactivity);

      world_position.xyz += world_normal * touch_reactivity;
    }

    ret.clip_vertex = UnityWorldToClipPos(world_position);
  }

  ret.grab_pos = ComputeGrabScreenPos(ret.clip_vertex);

  // NOTE(valuef): Propagate the canonical vertex information to local_vertex in case any macro in
  // a stack above us uses it.
  // 2023-03-22
  // :CanonicalVertexPositionSwitch
  ret.local_vertex = mul(unity_WorldToObject, world_position);

  ret.world_position = world_position;
  ret.world_normal = world_normal;

  ret.goo_drip = droop;
  ret.light_mask = light_mask;

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_NORMAL) {
      ret.debug.xyz = input_normal;
      ret.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_VS) {
      ret.debug.xyz = pow(get_mask(_DebugVisualisation_Mask),2.2);
      ret.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_TF_VS) {
      ret.debug.xyz = pow(mix_info.material_mix,2.2);
      ret.debug.w = 1;
    }
  #endif

  return ret;
}

const static float dither_pattern[8][8] = {
  { 0.0/64.0, 32.0/64.0,  8.0/64.0, 40.0/64.0, 02.0/64.0, 34.0/64.0, 10.0/64.0, 42.0/64.0}, 
  {48.0/64.0, 16.0/64.0, 56.0/64.0, 24.0/64.0, 50.0/64.0, 18.0/64.0, 58.0/64.0, 26.0/64.0}, 
  {12.0/64.0, 44.0/64.0, 04.0/64.0, 36.0/64.0, 14.0/64.0, 46.0/64.0, 06.0/64.0, 38.0/64.0}, 
  {60.0/64.0, 28.0/64.0, 52.0/64.0, 20.0/64.0, 62.0/64.0, 30.0/64.0, 54.0/64.0, 22.0/64.0}, 
  { 3.0/64.0, 35.0/64.0, 11.0/64.0, 43.0/64.0, 01.0/64.0, 33.0/64.0,  9.0/64.0, 41.0/64.0}, 
  {51.0/64.0, 19.0/64.0, 59.0/64.0, 27.0/64.0, 49.0/64.0, 17.0/64.0, 57.0/64.0, 25.0/64.0},
  {15.0/64.0, 47.0/64.0, 07.0/64.0, 39.0/64.0, 13.0/64.0, 45.0/64.0, 05.0/64.0, 37.0/64.0},
  {63.0/64.0, 31.0/64.0, 55.0/64.0, 23.0/64.0, 61.0/64.0, 29.0/64.0, 53.0/64.0, 21.0/64.0} 
};

Vertex_Output_Outline
vertex_outline(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;

  EDITOR_BRANCH if(!_Outline_Enabled) {
    return (Vertex_Output_Outline)0;
  }

  Vertex_Output_Outline o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Outline, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  float3 world_pos = dist.world_position + dist.world_normal * _Outline_Size;

  o.pos = UnityWorldToClipPos(world_pos);
  o.world_normal = dist.world_normal;

  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = world_pos - _WorldSpaceCameraPos.xyz;

  o.baked_pos = v.baked_pos;

  UNITY_TRANSFER_FOG(o, o.pos);

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    o.world_pos = world_pos;
  #endif

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  return o;
}

Vertex_Output_Early_Z
vertex_early_z(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;

  EDITOR_BRANCH if(!_EarlyZ_Enabled) {
    return (Vertex_Output_Early_Z)0;
  }

  Vertex_Output_Early_Z o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Early_Z, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  o.pos = dist.clip_vertex;

  return o;
}

Vertex_Output_Forward_Base 
vertex_base(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;
  IS_FORWARD_BASE = true;

  Vertex_Output_Forward_Base o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Forward_Base, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  o.baked_pos = v.baked_pos;

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  #if defined(NOT_BAKED)
    o.debug = dist.debug;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GRAB_POS_INTERPOLATOR_DISABLED)
    o.grab_pos = dist.grab_pos;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  o.pos = dist.clip_vertex;

  // NOTE(valuef): UNITY_TRANSFER_LIGHTING uses v.vertex so we want to reflect changes to it here.
  // 2022-08-18
  v.vertex = dist.local_vertex;

  o.tangentToWorldAndPackedData[0].w = dist.world_position.x;
  o.tangentToWorldAndPackedData[1].w = dist.world_position.y;
  o.tangentToWorldAndPackedData[2].w = dist.world_position.z;

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  // NOTE(valuef): We normalize the eye vec later on in the PS
  // 2023-11-09
  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = dist.world_position.xyz - _WorldSpaceCameraPos.xyz;

  float4 tangentWorld = float4(UnityObjectToWorldDir(v.tangent.xyz), v.tangent.w);

  float3x3 tangentToWorld = CreateTangentToWorldPerVertex(
    dist.world_normal, tangentWorld.xyz, tangentWorld.w
  );

  o.tangentToWorldAndPackedData[0].xyz = tangentToWorld[0];
  o.tangentToWorldAndPackedData[1].xyz = tangentToWorld[1];
  o.tangentToWorldAndPackedData[2].xyz = tangentToWorld[2];

  // NOTE(valuef): From what I can tell, the mesh would store its lightmap uv in UV2 if it had the
  // lightmap lighting baked in. However this shader is designed to be an avatar shader. You're not
  // really going to bake lightmap info into an avatar that can appear on any world, so we use UV2
  // for our own data.
  // This macro still is important for lighting (from the looks of it in the Unity cginc code), so
  // we still use it but we pass in float2(0,0) in cases where it might want the lightmap uvs.
  // @LightmapUVHack
  // 2023-09-13
  UNITY_TRANSFER_LIGHTING(o, float2(0,0)); 

  o.ambientOrLightmapUV = VertexGIForward(dist.world_position, dist.world_normal);

  UNITY_TRANSFER_FOG(o, o.pos);

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  return o;
}

float3
sample_emission_constant(
  float3 albedo,
  float albedo_emission_weight,
  Mask_Info albedo_emission_weight_mask,
  float3 added_emission_color,
  Mask_Info added_emission_color_mask
) {
  float3 emission = float3(0,0,0);

  emission += albedo.rgb * albedo_emission_weight * get_mask(albedo_emission_weight_mask);
  emission += added_emission_color * get_mask(added_emission_color_mask);

  return emission;
}

float3
sample_emission(
  const Texture_Info emission,
  float3 color
) {
  float3 col = sample_texture(emission);
  col *= color;
  return col;
}

float3
sample_detail_normal(
  const Texture_Info tex,
  float scale
) {
  // @InlinedTextureSampling
  if(!tex.is_set) {
    return float3(0,0,1);
  }

  float mask;
  float4 tap = sample_texture_separate_mask(tex, mask);

  float3 detail_normal = UnpackScaleNormal(tap, scale);

  detail_normal.xy *= mask;

  return detail_normal;
}

float3 
sample_normal(
  const Texture_Info tex,
  float scale
) {
  // @InlinedTextureSampling
  if(!tex.is_set) {
    return float3(0,0,1);
  }

  float mask;
  float4 tap = sample_texture_separate_mask(tex, mask);

  float3 normal = UnpackScaleNormal(tap, scale);
  normal.xy *= mask;

  return normal;
}

struct Metallic_Glossiness {
  float metallic;
  float glossiness;
};

Metallic_Glossiness
sample_metallic_glossiness(
  float constant_metal,
  Mask_Info constant_metal_mask,
  float constant_gloss,
  Mask_Info constant_gloss_mask
) {
  Metallic_Glossiness ret;

  ret.metallic = constant_metal * get_mask(constant_metal_mask);
  ret.glossiness = constant_gloss * get_mask(constant_gloss_mask);

  return ret;
}

float
sample_fresnel_opacity(
  bool enabled,
  float start,
  float end,
  float intensity,
  Mask_Info mask_info,
  float3 world_normal,
  float3 eye_vec
) {
  EDITOR_BRANCH if(!enabled) {
    return 1;
  }

  float fres = dot(world_normal, -eye_vec);

  fres = saturate((fres - start) / (end - start));
  fres = (1 - intensity) + fres * intensity;
  fres *= get_mask(mask_info);

  return fres;
}

float
sample_opacity(
  float opacity,
  Mask_Info mask_info
) {
  opacity *= get_mask(mask_info);
  return opacity;
}

// NOTE(valuef): 
// https://www.shadertoy.com/view/4djSRW
//
// Hash without Sine
// MIT License BEGIN
/* Copyright (c)2014 David Hoskins.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.*/

// Retrieved 2024-03-20
float hash12(float2 p) {
	float3 p3  = frac(float3(p.xyx) * .1031);
  p3 += dot(p3, p3.yzx + 33.33);
  return frac((p3.x + p3.y) * p3.z);
}

// Retrieved 2024-03-20
float2 hash22(float2 p) {
	float3 p3 = frac(float3(p.xyx) * float3(.1031, .1030, .0973));
  p3 += dot(p3, p3.yzx+33.33);
  return frac((p3.xx+p3.yz)*p3.zy);
}
// MIT License END


inline
void
pixel_init(
  float2  uv0,
  float2  uv1,
  float2  uv3,
  float2  uv4,
  float2  uv5,
  float2  uv6,
  float2  uv7,
  float3  pos_world,
  float3  baked_pos,
  float3  skinned_vertex,
  float   goo_noise,
  float   goo_drip,
  float4  vertex_colors,
  float3  world_normal,
  float3  eye_vec_unnormalized,
  float   touch_reactivity_interaction,
  float   light_mask,
  float4  tbn_vecs[3],
  float4  pixel_pos,
  bool    is_frontface,
  float4  grab_pos,
  out     TF_And_Material_Mix   out_mix_info,
  out     Fragment_Common_Data  out_s
) {

  // @EyeVecNormalization */
  float3 eye_vec;
  float world_distance_to_pixel;
  normalize_eye_vec(eye_vec_unnormalized, /* out */ eye_vec, /* out */ world_distance_to_pixel);
  out_s.eye_vec = eye_vec;

  init_time_bases();
  init_oscillators();

  init_uv_bus(uv0, uv1, uv3, uv4, uv5, uv6, uv7, pos_world, baked_pos, skinned_vertex);

  init_mask_channels(
    goo_noise, 
    float2(goo_drip, 1 - goo_drip),
    vertex_colors, 
    baked_pos, 
    world_normal, 
    eye_vec,
    touch_reactivity_interaction,
    light_mask,
    skinned_vertex,
    float2(1 - is_frontface, is_frontface),
    world_distance_to_pixel
  );

  init_masks_as_oscillators();
  
  EDITOR_BRANCH if(_DistanceDither_Enabled) {
    bool use_front_face_values = false;
    EDITOR_BRANCH if(_DistanceDither_Separate_Faces) {
      use_front_face_values = is_frontface;
    }
  
    // NOTE(valuef): start and end here are swapped on purpose as in the UI, the 'start' is the distance at which the dither starts
    // to eat away at the material, and end is where it's fully eaten it.
    // Here is's the other way around: start is the distance at which the material STARTS to show up, end is where it's fully shown.
    // 2023-11-10
    float start = use_front_face_values ? _DistanceDither_Front_Distance_End    : _DistanceDither_Back_Distance_End;
    float end   = use_front_face_values ? _DistanceDither_Front_Distance_Start  : _DistanceDither_Back_Distance_Start;
    float bias  = use_front_face_values ? _DistanceDither_Front_Bias            : _DistanceDither_Back_Bias;

    // NOTE(valuef): plus magic constant to make sure that any banding is invisible.
    // Kind of a hack but it works
    // 2023-11-10
    float near_plane = _ProjectionParams.y + 0.003;
    start += near_plane;
    end += near_plane;

    float t = (world_distance_to_pixel - start) / (end - start);

    float mask = get_mask(_DistanceDither_Mask);
    t += (1-mask);

    t = saturate(t);
    t -= bias;

    float dither = dither_pattern[uint(pixel_pos.y) % 8][uint(pixel_pos.x) % 8];
    if(dither >= t) {
      discard;
    }
  }

  // NOTE(valuef): We recalculate the tf value here so that we quanitize that value to the pixel
  // grid instead of per-vertex, which lets us get a sharper and more detailed tf animation.
  // 2022-10-20
  out_mix_info = calculate_tf_and_material_mix(baked_pos, world_normal, eye_vec);

  {
    float3 base = sample_texture(MainTex) * get_value(_Color_Osci).rgb;
    float3 mix  = sample_texture(Mix_MainTex) * get_value(_Mix_Color_Osci).rgb;

    float4 base_secondary = sample_texture(SecondaryTex) * get_value(_SecondaryTex_Color_Osci).rgba;
    float4 mix_secondary  = sample_texture(Mix_SecondaryTex) * get_value(_Mix_SecondaryTex_Color_Osci).rgba;

    float base_opacity  = sample_opacity(get_value(_Opacity_Osci).r, _Opacity_Mask);
    float mix_opacity   = sample_opacity(get_value(_Mix_Opacity_Osci).r, _Mix_Opacity_Mask);

    if(!IS_SHADOWCASTER) {

      [branch] if(can_use_camera_depth()) {
        float4 depth_uv = grab_pos;
        depth_uv.xy /= depth_uv.w;

        float depth_tap = SAMPLE_DEPTH(depth_uv);
        float view_depth = LinearEyeDepth(depth_tap);
        
        float our_depth = grab_pos.w;
        float depth_delta = view_depth - our_depth;

        float t;
        {
          // NOTE(valuef): start and end are swapped to save on a 1-t. 
          // 2022-09-21
          float start = _IntersectionModulation_Depth_End;
          float end = _IntersectionModulation_Depth_Start;
          t = saturate((depth_delta - start) / (end - start));
        }

        EDITOR_BRANCH if(_IntersectionModulation_Color_Enabled) {
          base.rgb            = lerp(base,            _IntersectionModulation_Color_Target.rgb, t);
          base_secondary.rgb  = lerp(base_secondary,  _IntersectionModulation_Color_Target.rgb, t);
        }

        EDITOR_BRANCH if(_IntersectionModulation_Opacity_Enabled) {
          base_opacity = saturate(base_opacity + t * _IntersectionModulation_Opacity_Amount);
        }

        EDITOR_BRANCH if(_IntersectionModulation_HSV_Enabled) {
          {
            base.rgb = rgb2hsv(base.rgb);

            base.r += _IntersectionModulation_HSV_Hue_Amount * t;
            base.g += _IntersectionModulation_HSV_Saturation_Amount * t;
            base.b += _IntersectionModulation_HSV_Value_Amount * t;

            base.rgb = hsv2rgb(base.rgb);
          }

          {
            base_secondary.rgb = rgb2hsv(base_secondary.rgb);

            base_secondary.r += _IntersectionModulation_HSV_Hue_Amount * t;
            base_secondary.g += _IntersectionModulation_HSV_Saturation_Amount * t;
            base_secondary.b += _IntersectionModulation_HSV_Value_Amount * t;

            base_secondary.rgb = hsv2rgb(base_secondary.rgb);
          }
        }
      }
    }

    apply_mat_mix(out_s.albedo.rgb,   mix,          base,         _Mix_Separate_MainTex, out_mix_info.material_mix.rrr);
    apply_mat_mix(out_s.albedo.a,     mix_opacity,  base_opacity, _Mix_Separate_Opacity, out_mix_info.material_mix);

    // NOTE(valuef): before we apply the secondary color texture.
    out_s.emissive_from_albedo_source = out_s.albedo.rgb;

    {
      float4 final_secondary;
      apply_mat_mix(final_secondary, mix_secondary, base_secondary, _Mix_Separate_SecondaryTex, out_mix_info.material_mix.rrrr);

      if(_SecondaryTex_BlendMode == 1) {
        out_s.albedo.rgb = lerp(out_s.albedo.rgb, final_secondary.rgb, final_secondary.a);
      }
      else {
        out_s.albedo.rgb += final_secondary;
      }
    }
  }

  out_s.glitter = float4(0,0,0,0);

  #if defined(VFGOO_ENABLE_GLITTER)
    if(IS_FORWARD_BASE || IS_FORWARD_ADD) {
      float2 uv_scroll_time = get_time(_Glitter_UV_Scroll_Speed_TimeBase);

      float2 base_uv = resolve_uv_bus(_Glitter_UVBus) * _Glitter_Density + uv_scroll_time * _Glitter_UV_Scroll_Speed;

      float tile_sq_dist = 9999;
      float2 tile_uv = float2(0,0);
      float2 tile_index = float2(0,0);
      float2 tile_rng = float2(0,0); 

      EDITOR_BRANCH if(_Glitter_Disorder > 0) {
        
        // NOTE(valuef): Without the unroll, the compiler makes the assumption
        // that frac(tile_rng) == 0 at every usage site. It's clearly incorrect
        // and somehow the unroll breaks this assumption.
        // So we keep this.
        // 2024-03-26
        [unroll] for(float xoff = -1; xoff <= 1; xoff++) {
          for(float yoff = -1; yoff <= 1; yoff++) {
            float2 tile_offset = float2(xoff, yoff);
            float2 tile_offset_rng = hash22(floor(base_uv) + tile_offset);

            float2 voronoi_factor = tile_offset_rng * _Glitter_Disorder;

            float2 final_uv = frac(base_uv) - tile_offset - voronoi_factor;

            float candidate_sq_dist = dot(final_uv, final_uv);

            if(tile_sq_dist > candidate_sq_dist) {
              tile_sq_dist = candidate_sq_dist;
              tile_uv = final_uv;
              tile_index = tile_offset + floor(base_uv);
              tile_rng = tile_offset_rng;
            }
          }
        }
      }
      else {
        tile_uv = frac(base_uv) - .5;
        tile_index = floor(base_uv);
        tile_rng = hash22(tile_index);
        tile_sq_dist = dot(tile_uv, tile_uv);
      }

      float rng = hash12(tile_index);

      float phase;
      {
        float blink_randomness = _Glitter_AutoBlink_Randomness * rng;
        float blink_time_offset = get_time(_Glitter_AutoBlink_Speed_TimeBase) * _Glitter_AutoBlink_Speed;

        float auto_phase = cos(blink_randomness + blink_time_offset);

        phase = auto_phase;

        EDITOR_BRANCH if(_Glitter_ManualBlink_Enabled) {
          float blink_manual_offset = get_value(_Glitter_ManualBlink_Offset_Osci);
          float blink_manual_randomness = _Glitter_ManualBlink_Offset_Randomness * rng;

          // NOTE(valuef): manual_phase needs to be large enough (in turn,
          // 'blink_manual_randomness' needs to be large ) so that when we do
          // the amplitude modulation with 'phase', we get enough aliasing in
          // the signal that the moire pattern of manual_phase created by the
          // relatively low sampling rate of our framerate re-creates the
          // randomness instead of a consistent pulsing.
          //
          // It's a weird way of doing this but can't think of anything else
          // that won't introduce some kind of regular pattern into the
          // blinking.
          //
          // We put manual blinking under a toggle so that people don't have to
          // think about these variables unless they want manual blink control
          // for real.
          // 2024-03-28
          float manual_phase = cos(blink_manual_randomness + blink_manual_offset);

          phase *= manual_phase;
        }
      
        phase = max(0, phase);
      }

      out_s.glitter = get_value(_Glitter_Color_Osci);
      out_s.glitter.rgb *= lerp(float3(1,1,1), out_s.albedo.rgb, get_value(_Glitter_Color_FromAlbedo_Osci).rrr);

      EDITOR_BRANCH if(_Glitter_Texture_Enabled) {
        if(is_Glitter_Texture_Map_set) {

          float2 uv = tile_uv;

          float2 size_minmax = get_value(_Glitter_Texture_Zoom_MinMax_Osci);
          float size = lerp(size_minmax.x, size_minmax.y, frac(rng + tile_rng.y));

          EDITOR_BRANCH if(_Glitter_Texture_Rotation_Random_Enabled || _Glitter_Texture_Rotation_Speed != 0) {
            float rotation = rng * UNITY_PI * 2 * _Glitter_Texture_Rotation_Random_Enabled;
            rotation += get_time(_Glitter_Texture_Rotation_Speed_TimeBase) * _Glitter_Texture_Rotation_Speed;

            uv = mul(rot2x2(rotation), uv);
          }

          uv *= size;
          uv += .5.rr;

          uv = uv * _Glitter_Texture_Map_Tiling + _Glitter_Texture_Map_Offset;

          // NOTE(valuef): We have discontinuities in the space-repeated UVs so we
          // resort to using the tiled base uv for derivatives. That alone does
          // help but in cases where we have A LOT of glitter that's shown, mip
          // transition artifacts become VERY obvious. So we combat this problem by
          // using a trilinear sampler to blend between mips.
          // 2024-03-21
          float4 tap = _Glitter_Texture_Map.SampleGrad(_SamplerTrilinearClamp, uv, ddx(base_uv), ddy(base_uv));

          out_s.glitter.rgb *= tap.rgb;

          EDITOR_BRANCH if(_Glitter_Texture_Map_AlphaIsMask) {
            out_s.glitter.a *= tap.a;
          }
        }
      }

      float2 circle_size_minmax = get_value(_Glitter_Size_MinMax_Osci).xy;
      float circle_size = lerp(circle_size_minmax.x, circle_size_minmax.y, frac(tile_rng.y - rng * 13));

      float dist = sqrt(tile_sq_dist);
      float circle = saturate((circle_size - dist) / fwidth(dist));

      EDITOR_BRANCH if(_Glitter_HSV_Enabled) {
        out_s.glitter.rgb = rgb2hsv(out_s.glitter.rgb);

        float2 hue_minmax = get_value(_Glitter_HSV_Hue_MinMax_Osci);
        float hue_random = lerp(hue_minmax.x, hue_minmax.y, (tile_rng.x + tile_rng.y + rng)/3);

        float2 sat_minmax = get_value(_Glitter_HSV_Saturation_MinMax_Osci);
        float sat_random = lerp(sat_minmax.x, sat_minmax.y, frac(tile_rng.x - tile_rng.y));

        float hue_shift_speed = get_time(_Glitter_HSV_Hue_Speed_TimeBase) * _Glitter_HSV_Hue_Speed;

        float hue_shift = get_value(_Glitter_HSV_Hue_Shift_Osci);

        out_s.glitter.x = frac(out_s.glitter.x + hue_random + hue_shift_speed + hue_shift);
        out_s.glitter.y = saturate(out_s.glitter.y + sat_random);

        out_s.glitter.rgb = hsv2rgb(out_s.glitter.rgb);
      }

      float amount_mask = 1;
      float amount = get_value(_Glitter_Amount_Osci);

      if(rng >= amount) {
        amount_mask = 0;
      }

      {
        float brightness = circle * phase * amount_mask;
        float2 brightness_minmax = get_value(_Glitter_Brightness_MinMax_Osci);
        brightness = max(0, brightness * (brightness_minmax.y - brightness_minmax.x) + brightness_minmax.x);
        out_s.glitter.a *= brightness;
      }

      {
        float mask = get_mask(_Glitter_Mask);
        out_s.glitter.a *= mask;
      }

      EDITOR_BRANCH if(_Glitter_AppearsOnMaterial != APPEARS_ON_MATERIAL_BOTH) {
        float appears_on = get_appears_on_mask(_Glitter_AppearsOnMaterial, out_mix_info.material_mix);
        out_s.glitter.a *= appears_on;
      }

      {
        float2 opacity_minmax = get_value(_Glitter_Opacity_MinMax_Osci);
        float opacity_random = lerp(opacity_minmax.x, opacity_minmax.y, frac(tile_rng.y - rng));
        out_s.glitter.a *= opacity_random;
      }
    }
  #endif
  
  EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_CUTOUT) {
    clip(out_s.albedo.a - get_value(_Cutoff_Osci) + out_s.glitter.a);
  }

  // NOTE(valuef): smoothness is 1 minus the square root of real roughness m.
  float metallic;
  {
    {
      Metallic_Glossiness base = sample_metallic_glossiness(
        _Metallic,
        _Metallic_Mask,
        _Glossiness,
        _Glossiness_Mask
      );

      Metallic_Glossiness mix = sample_metallic_glossiness(
        _Mix_Metallic,
        _Mix_Metallic_Mask,
        _Mix_Glossiness,
        _Mix_Glossiness_Mask
      );

      apply_mat_mix(metallic,         mix.metallic,    base.metallic,   _Mix_Separate_MetallicGlossiness, out_mix_info.material_mix);
      apply_mat_mix(out_s.smoothness, mix.glossiness,  base.glossiness, _Mix_Separate_MetallicGlossiness, out_mix_info.material_mix);
    }
  }

  out_s.diffColor = DiffuseAndSpecularFromMetallic(
    out_s.albedo, metallic, 
    /*out*/ out_s.specColor, 
    /*out*/ out_s.oneMinusReflectivity
  );

  {
    float3 tangent = tbn_vecs[0].xyz;
    float3 binormal = tbn_vecs[1].xyz;
    float3 normal = tbn_vecs[2].xyz;

    float3 seamless_tangent = normalize(cross(float3(0,-1,0), normal));
    // TODO : bitangent sign
    float3 seamless_binormal = cross(normal, seamless_tangent);

    #if UNITY_TANGENT_ORTHONORMALIZE
      normal = normalize(normal);

      // ortho-normalize Tangent
      tangent = normalize(tangent - normal * dot(tangent, normal));

      // recalculate Binormal
      half3 newB = cross(normal, tangent);
      binormal = newB * sign(dot(newB, binormal));
    #endif

    float3 normal_tangent;
    {
      float3 normal;
      {
        float3 base = sample_normal(BumpMap, get_value(_BumpScale_Osci).r);
        float3 mix = sample_normal(Mix_BumpMap, get_value(_Mix_BumpScale_Osci).r);

        apply_mat_mix(normal, mix, base, _Mix_Separate_BumpMap, out_mix_info.material_mix);

      }
  
      float3 detail;
      {
        float3 base = sample_detail_normal(DetailNormalMap, get_value(_DetailBumpScale_Osci).r);
        float3 mix = sample_detail_normal(Mix_DetailNormalMap, get_value(_Mix_DetailBumpScale_Osci).r);

        apply_mat_mix(detail, mix, base, _Mix_Separate_DetailNormalMap, out_mix_info.material_mix);
      }

      // NOTE(valuef): Technically it'd be a good idea to normalize both the normal and detail as apply_mat_mix will
      // perform a lerp between the base and mix, but from testing, it seems like there's no perceptible difference
      // between a normalized and non-normalized detail & normal textures during a blend with all (4 in total) detail
      // and normal textures set and a basic blend between them with some blur.
      // 2023-08-20

      // NOTE(valuef): RNM from https://blog.selfshadow.com/publications/blending-in-detail/
      // 2022-08-17
      normal.z += 1;
      detail.xy *= -1;
      normal_tangent = normal * dot(normal, detail) / normal.z - detail;
    }

    out_s.normalWorld = normalize(
      tangent * normal_tangent.x + 
      binormal * normal_tangent.y + 
      normal * normal_tangent.z
    );

    out_s.normal_world_seamless = normalize(
      seamless_tangent * normal_tangent.x + 
      seamless_binormal * normal_tangent.y + 
      normal * normal_tangent.z
    );
  }

  if(_GSAA_Enabled) {
    // NOTE(valuef): Valve's GSAA 
    // https://media.steampowered.com/apps/valve/2015/Alex_Vlachos_Advanced_VR_Rendering_GDC2015.pdf
    // pg. 43
    float3 normal = out_s.normalWorld;

    float3 nddx = ddx_fine(normal);
    float3 nddy = ddy_fine(normal);

    float geometric_roughness_term = pow(saturate(max(dot(nddx, nddx), dot(nddy, nddy))), .333);

    out_s.smoothness = min(out_s.smoothness, 1 - geometric_roughness_term);
  }

  out_s.posWorld = pos_world;

  if(!IS_SHADOWCASTER) {
    out_s.diffColor = PreMultiplyAlpha(
      out_s.diffColor, 
      out_s.albedo.a, 
      out_s.oneMinusReflectivity, 
      /*out*/ out_s.alpha
    );
  }
  else {
    out_s.alpha = 1;
  }
}

float
sample_occlusion(
  const Texture_Info tex,
  float strength
) {
  float occlusion = sample_texture(tex).g;
  if(tex.is_set || tex.mask.channel != 0) {
    // :LerpOneTo
    // NOTE(valuef): This is pretty much just a (occ * _OcclusionStrength) but the hinge of where
    // the curve rotates is (1,1) instead of (0,0)
    // 2023-04-28
    occlusion = (1.0 - strength) + occlusion * strength;
  }
  return occlusion;
}

const static float2 grabpass_blur_locations[21] = {
  float2(0.809017, 0.587785),
  float2(-0.309017, 0.951056),
  float2(-1, -0),
  float2(-0.309016, -0.951057),
  float2(0.809017, -0.587785),
  float2(0.618034, 1.902112),
  float2(-1.101794, 1.669146),
  float2(-1.991948, 0.179278),
  float2(-1.382124, -1.44559),
  float2(0.268468, -1.9819),
  float2(1.716898, -1.025798),
  float2(1.87247, 0.70275),
  float2(-0.927051, 2.853168),
  float2(-2.544144, 1.5897571),
  float2(-2.970804, -0.417519),
  float2(-2.00739, -2.229435),
  float2(-0.104697004, -2.998173),
  float2(1.8469859, -2.36403),
  float2(2.934444, -0.623733),
  float2(2.6488411, 1.408416),
  float2(1.123818, 2.7815518),
};

float3
do_hsv_postprocessing(
  float3 col
) {
  col = rgb2hsv(col);

  col.x = frac(col.x + get_value(_PostProcessHSV_Hue_Shift_Osci) + _PostProcessHSV_Hue_Speed * get_time(_PostProcessHSV_Hue_Speed_TimeBase));
  col.y = (col.y + get_value(_PostProcessHSV_Sat_Shift_Osci));
  col.z = (col.z + get_value(_PostProcessHSV_Value_Shift_Osci));

  col = hsv2rgb(col);

  return col;
}


float4
pixel_early_z(
  Vertex_Output_Early_Z i
) : SV_Target {

  EDITOR_BRANCH if(!_EarlyZ_Enabled) {
    discard;
  }

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  return float4(1,1,1,1);
}

float4 
pixel_outline(
  Vertex_Output_Outline i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {

  EDITOR_BRANCH if(!_Outline_Enabled) {
    discard;
  }

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  float4 unused_tangent_to_world[3] = {0.0.rrr,0.0.rrr,0.0.rrr,0.0.rrr};

  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
      i.world_pos,                    /* pos_world */
    #else
      float3(0,0,0),
    #endif

    i.baked_pos,                    /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif

    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                    /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                     /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.world_normal,                 /* world_normal */
    i.eye_vec_unnormalized.xyz,     /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction, /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                   /* light_mask */
    #else
      0,
    #endif

    unused_tangent_to_world,        /* tbn_vecs       @Unused */
    pixel_pos,                      /* pixel_pos */
    is_front_face,                  /* is_front_face  */
    1.0.rrrr,                       /* grab_pos       @Unused */
    mix_info,                       /* out_mix_info */
    s                               /* out_s        */
  );

  // TODO advanced outline colors like gradients, al etc?
  // TODO some kind of transparency/dither support in the future so we don't just cut off the outline?
  float3 color = _Outline_Color;

  float appears_on = get_appears_on_mask(_Outline_AppearsOnMaterial, mix_info.material_mix);
  clip(appears_on - .5);

  float mask = get_mask(_Outline_Mask);
  clip(mask - _Outline_Mask_Cutoff);

  UNITY_EXTRACT_FOG(i);
  UNITY_APPLY_FOG(_unity_fogCoord, color);

  #if defined(VFGOO_ENABLE_HSV_POSTPROCESSING)
    color.rgb = do_hsv_postprocessing(color.rgb);
  #endif

  return float4(color.rgb, 1);
}

float4 
pixel_base(
  Vertex_Output_Forward_Base i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {
  IS_FORWARD_BASE = true;

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
  
  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  // NOTE(valuef): Use any variables in s over the ones in i after this, including stuff like
  // world pos, material_mix etc
  // 2023-08-26
  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    IN_WORLDPOS(i),                         /* pos_world */
    i.baked_pos,                            /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif

    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                            /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                             /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.tangentToWorldAndPackedData[2].xyz,   /* world_normal */
    i.eye_vec_unnormalized.xyz,             /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction,         /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                           /* light_mask */
    #else
      0,
    #endif

    i.tangentToWorldAndPackedData,          /* tbn_vecs */
    pixel_pos,                              /* pixel_pos */
    is_front_face,                          /* is_front_face */

    #if !defined(OPT_GRAB_POS_INTERPOLATOR_DISABLED)
      i.grab_pos,                             /* grab_pos */
    #else
      float4(0,0,0,1),
    #endif

    mix_info,                               /* out_mix_info */
    s                                       /* out_s */
  );

  if(_BackfaceFill_Enabled && !is_front_face) {
    return _BackfaceFill_Color;
  }

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_PS) {
      i.debug.xyz = pow(get_mask(_DebugVisualisation_Mask),2.2);
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_TF_PS) {
      i.debug.xyz = pow(mix_info.material_mix,2.2);
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_UV) {
      i.debug.xy = resolve_uv_bus(_DebugVisualisation_UVBus);
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_UV2_CHANNEL) {
      i.debug.xyz = i.baked_pos.xyz;
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_SKINNED_VERTICES) {
      i.debug.xyz = i.skinned_vertex;
      i.debug.w = 1;
    }
    else EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_IS_CAMERA_DEPTH_TEXTURE_AVAILABLE) {
      i.debug.xyz = (is_depth_texture_available() ? 1 : 0).rrr;
      i.debug.w = 1;
    }
       
    EDITOR_BRANCH if(i.debug.w > 0) {
      return i.debug;
    }
  #endif


  EDITOR_BRANCH if(_FlipNormalsOnBackFacingTris) {
    if(!is_front_face) {
      s.normalWorld = -s.normalWorld;
    }
  }

  UnityLight mainLight = get_directional_light(s.posWorld);
  UNITY_LIGHT_ATTENUATION(atten, i, s.posWorld);

  float occlusion;
  {
    float base  = sample_occlusion(OcclusionMap, _OcclusionStrength);
    float mix   = sample_occlusion(Mix_OcclusionMap, _Mix_OcclusionStrength);

    apply_mat_mix(occlusion, mix, base, _Mix_Separate_Occlusion, mix_info.material_mix);
  }

  UnityGI gi = FragmentGI(s, s.eye_vec.xyz, occlusion, i.ambientOrLightmapUV, atten, mainLight, mix_info.material_mix);

  half4 c = BRDF1_Unity_PBS(
    s.diffColor, s.specColor, 
    s.oneMinusReflectivity, s.smoothness, 
    s.normalWorld, -s.eye_vec.xyz, 
    gi.light, gi.indirect,
    mix_info  /* mix_info */
  );

  float3 emissive = float3(0,0,0);
  {
    float3 emission1;
    {
      float3 base = sample_emission(EmissionMap,      get_value(_EmissionColor_Osci).rgb);
      float3 mix  = sample_emission(Mix_EmissionMap,  get_value(_Mix_EmissionColor_Osci).rgb);

      apply_mat_mix(emission1, mix, base, _Mix_Separate_Emission_1, mix_info.material_mix.rrr);
    }

    float3 emission2;
    {
      float3 base = sample_emission(EmissionMap2, get_value(_EmissionColor2_Osci).rgb);
      float3 mix = sample_emission(Mix_EmissionMap2, get_value(_Mix_EmissionColor2_Osci).rgb);

      apply_mat_mix(emission2, mix, base, _Mix_Separate_Emission_2, mix_info.material_mix.rrr);
    }

    float3 emission_constant;
    {
      float3 base = sample_emission_constant(
        s.emissive_from_albedo_source,
        get_value(_AlbedoEmissionWeight_Osci).r,
        _AlbedoEmissionWeight_Mask,
        get_value(_AddedEmissionColor_Osci).rgb,
        _AddedEmissionColor_Mask
      );

      float3 mix = sample_emission_constant(
        s.emissive_from_albedo_source,
        get_value(_Mix_AlbedoEmissionWeight_Osci).r,
        _Mix_AlbedoEmissionWeight_Mask,
        get_value(_Mix_AddedEmissionColor_Osci).rgb,
        _Mix_AddedEmissionColor_Mask
      );

      apply_mat_mix(emission_constant, mix, base, _Mix_Separate_Emission_Const, mix_info.material_mix.rrr);
    }

    emissive += emission1;
    emissive += emission2;
    emissive += emission_constant;
  }

  #if defined(LTCGI) 
  {
    float3 ltcgi_diff = 0;
    float3 ltcgi_spec = 0;
    float2 light_map_uv = float2(0,0);

    float ltcgi_total_spec_intensity;
    float ltcgi_total_diff_intensity;
    
    LTCGI_Contribution(
      s.posWorld,
      s.normalWorld,
      -s.eye_vec.xyz,
      1 - s.smoothness,
      light_map_uv,
      /* inout */ ltcgi_diff,
      /* inout */ ltcgi_spec,
      /* out */ ltcgi_total_spec_intensity,
      /* out */ ltcgi_total_diff_intensity
    );

    emissive += ltcgi_diff;
    emissive += ltcgi_spec;
  }
  #endif

  // TODO(valuef): To properly add the glitter on top of a faded out material, we need to do stuff in the following order:
  // 1. Normal light calculations
  // 2. Apply transparency.
  // 3. Apply glitter and the transparency of glitter.
  //
  // We can do this in the transparent rendering preset as the premultiplied alpha nature of it gives us enough control to
  // do this.
  // However, in fade, we do step 2 outside the shader via our blend mode.
  // Because of that, we can't really 'add' the glitter 'on top' of a transparent material in fade without also adding
  // black glitter, which is undesired.
  // So in a future breaking update, we should consider switching to a premul workflow and drop postmul support.
  // 2024-03-25
  //
  // NOTE(valuef): Sparkles don't 'emit' light, they reflect it. So fog should
  // affect them whereas emission shouldn't be affected by fog.
  // 2024-03-25
  #if defined(VFGOO_ENABLE_GLITTER)
    // NOTE(valuef): We've already done the alpha cutoff earlier on, so no need
    // to blend here or else we'll have color bleed. BUT we still need to apply
    // the mask here so the bleed is just going to be something we have to live
    // with.
    // 2024-03-25
    c.rgb += s.glitter.rgb * s.glitter.a;
  #endif

  UNITY_EXTRACT_FOG(i);
  UNITY_APPLY_FOG(_unity_fogCoord, c.rgb);

  EDITOR_BRANCH if(is_using_postmultiplied_alpha() || is_using_premultiplied_alpha()) {
    c.a = s.alpha;
  }
  else {
    c.a = 1.0;
  }

  c.rgb += emissive * c.a;

  #if defined(VFGOO_GRABPASS)
  {
    float3 view_normal = normalize(mul((float3x3)UNITY_MATRIX_IT_MV, s.normalWorld));
    view_normal.xy = Unity_SafeNormalize(view_normal.xy);

    float2 uv = i.grab_pos.xy;
    {
      {
        float t = _GrabPass_Distortion_Amount;
        t *= get_mask(_GrabPass_Distortion_Amount_Mask);

        uv += view_normal.xy * t;
      }

      uv /= i.grab_pos.w;

      {
        uv -= float2(.5, .5);
        uv *= _GrabPass_Zoom_Amount;
        uv += float2(.5, .5);
      }
    }

    float4 grab = _GrabPass.SampleLevel(_SamplerLinearMirror, uv, 0);

    EDITOR_BRANCH if(_GrabPass_Blur_Enabled) {
      float4 blurred = grab;

      float dispersion = _GrabPass_Blur_Dispersion;

      float size_x, size_y;
      _GrabPass.GetDimensions(size_x, size_y);
      for(uint i = 0; i < 21; ++i) {
        float2 offset = grabpass_blur_locations[i];
        float2 tap_uv = uv + (offset / float2(size_x,size_y)) * dispersion;
        float4 tap = _GrabPass.SampleLevel(_SamplerLinearMirror, tap_uv, 0);

        blurred += tap;
      }
      blurred /= 22;

      {
        float t = get_mask(_GrabPass_Blur_Weight_Mask);
        grab = lerp(grab, blurred, t);
      }
    }

    {
      float mask;
      float4 tint = sample_texture_separate_mask(GrabPass_Tint_Texture, mask);
      tint.rgb *= _GrabPass_Tint_Color.rgb;

      float3 tinted = grab.rgb * tint;

      float t = mask * get_mask(_GrabPass_Tint_Mask) * _GrabPass_Tint_Color.a;
      grab.rgb = lerp(grab.rgb, tinted.rgb, t);
    }

    EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT) {
      c.rgb += grab.rgb * (1-s.alpha);
    }
    else EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_FADE) {
      c.rgb = lerp(grab.rgb, c.rgb, s.alpha);
    }

    c.a = 1;
  }
  #endif

  #if defined(VFGOO_ENABLE_HSV_POSTPROCESSING)
    c.rgb = do_hsv_postprocessing(c.rgb);
  #endif

  return c;
}

Vertex_Output_Forward_Add 
vertex_add(
  Vertex_Input v
) {
  IS_VERTEX_SHADER = true;
  IS_FORWARD_ADD = true;

  Vertex_Output_Forward_Add o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Forward_Add, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  o.baked_pos = v.baked_pos;

  init_time_bases();
  init_oscillators();

  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    true                    /* apply depth distortion */
  );

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  o.pos = dist.clip_vertex;

  // NOTE(valuef): TRANSFER_VERTEX_TO_FRAGMENT and UNITY_TRANSFER_LIGHTING uses v.vertex so we want
  // to reflect changes to it here.
  // 2022-08-18
  v.vertex = dist.local_vertex;

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = dist.world_position.xyz - _WorldSpaceCameraPos; 
  o.posWorld = dist.world_position.xyz;

  {
    float4 tangentWorld = float4(UnityObjectToWorldDir(v.tangent.xyz), v.tangent.w);

    float3x3 tangentToWorld = CreateTangentToWorldPerVertex(
      dist.world_normal, tangentWorld.xyz, tangentWorld.w
    );

    o.tangentToWorldAndLightDir[0].xyz = tangentToWorld[0];
    o.tangentToWorldAndLightDir[1].xyz = tangentToWorld[1];
    o.tangentToWorldAndLightDir[2].xyz = tangentToWorld[2];
  }

  // @LightmapUVHack
  UNITY_TRANSFER_LIGHTING(o, float2(0,0)); 

  {
    // NOTE(valuef): This is normalized in the pixel shader
    // 2022-09-18
    float3 lightDir = get_directional_light(dist.world_position.xyz).dir;

    o.tangentToWorldAndLightDir[0].w = lightDir.x;
    o.tangentToWorldAndLightDir[1].w = lightDir.y;
    o.tangentToWorldAndLightDir[2].w = lightDir.z;
  }

  UNITY_TRANSFER_FOG(o, o.pos);

  TRANSFER_VERTEX_TO_FRAGMENT(o);

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  return o;
}

float4
pixel_add(
  Vertex_Output_Forward_Add i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {

  IS_FORWARD_ADD = true;

  UNITY_APPLY_DITHER_CROSSFADE(i.pos.xy);
  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_TF_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_UV ||
       _DebugVisualisation_Type == DEBUG_VIS_UV2_CHANNEL ||
       _DebugVisualisation_Type == DEBUG_VIS_SKINNED_VERTICES
    ) {
      discard;
    }
  #endif

  if(_BackfaceFill_Enabled && !is_front_face) {
    discard;
  }

  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    i.posWorld,                         /* pos_world */
    i.baked_pos,                        /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif


    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                        /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                         /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.tangentToWorldAndLightDir[2].xyz, /* world_normal */
    i.eye_vec_unnormalized.xyz,         /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction,     /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                       /* light_mask */
    #else
      0,
    #endif

    i.tangentToWorldAndLightDir,        /* tbn_vecs */
    pixel_pos,                          /* pixel_pos */
    is_front_face,                      /* is_front_face */
    1.0.rrrr,                           /* grab_pos     @Unused*/
    mix_info,                           /* out_mix_info */
    s                                   /* out_s */
  );

  UNITY_LIGHT_ATTENUATION(atten, i, s.posWorld)

  half3 light_dir = half3(
    i.tangentToWorldAndLightDir[0].w, 
    i.tangentToWorldAndLightDir[1].w, 
    i.tangentToWorldAndLightDir[2].w
  );
  UnityLight light = AdditiveLight(light_dir, atten);

  UnityIndirect noIndirect = ZeroIndirect();

  half4 c = BRDF1_Unity_PBS(
    s.diffColor, s.specColor, 
    s.oneMinusReflectivity, s.smoothness, 
    s.normalWorld, -s.eye_vec, 
    light, noIndirect,
    mix_info  /* mix_info */
  );

  #if defined(VFGOO_ENABLE_GLITTER)
    c.rgb += s.glitter.rgb * s.glitter.a * light.color;
  #endif

  // fog towards black in additive pass
  UNITY_EXTRACT_FOG(i);
  UNITY_APPLY_FOG_COLOR(_unity_fogCoord, c.rgb, half4(0,0,0,0));

  EDITOR_BRANCH if(is_using_postmultiplied_alpha() || is_using_premultiplied_alpha()) {
    c.a = s.alpha;
  }
  else {
    c.a = 1.0;
  }

  #if defined(VFGOO_ENABLE_HSV_POSTPROCESSING)
    c.rgb = do_hsv_postprocessing(c.rgb);
  #endif

  return c;
}

Vertex_Output_Shadow_Caster
vertex_shadow_caster(
  Vertex_Input v
) {
  IS_SHADOWCASTER = true;
  IS_VERTEX_SHADER = true;

  Vertex_Output_Shadow_Caster o;

  UNITY_SETUP_INSTANCE_ID(v);
  UNITY_INITIALIZE_OUTPUT(Vertex_Output_Shadow_Caster, o);
  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

  float3 early_world_position = mul(unity_ObjectToWorld, v.vertex);

  init_time_bases();
  init_oscillators();
  init_uv_bus(v.uv0, v.uv1, v.uv3, v.uv4, v.uv5, v.uv6, v.uv7, early_world_position, v.baked_pos, v.vertex);

  Distortion_Result dist = do_distortion(
    v.baked_pos,            /* baked pos */
    v.normal,               /* normal */ 
    v.vertex,               /* vertex */
    v.vertex_colors,        /* vertex color */
    v.tangent,              /* tangent */
    v.vertex_id,            /* vertex id */
    early_world_position,   /* world position */
    false                   /* apply depth distortion */
  );

  o.baked_pos = v.baked_pos;

  #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
    o.vertex_colors = v.vertex_colors;
  #endif

  #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
    o.uv0 = v.uv0;
  #endif

  #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
    o.uv1 = v.uv1;
  #endif

  #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
    o.uv3 = v.uv3;
  #endif

  #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
    o.uv4 = v.uv4;
  #endif

  #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
    o.uv5 = v.uv5;
  #endif

  #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
    o.uv6 = v.uv6;
  #endif

  #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
    o.uv7 = v.uv7;
  #endif

  #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
    o.touch_reactivity_interaction = dist.touch_reactivity_interaction;
  #endif

  #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
    o.light_mask = dist.light_mask;
  #endif

  #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
    o.goo_drip = dist.goo_drip;
  #endif

  #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
    o.goo_noise = dist.goo_noise;
  #endif

  //TRANSFER_SHADOW_CASTER_NOPOS(o,o.pos)
  // NOTE(valuef): TRANSFER_SHADOW_CASTER_NOPOS expansion
  #if defined(SHADOWS_CUBE) && !defined(SHADOWS_CUBE_IN_DEPTH_TEX)
    o.vec = dist.world_position.xyz - _LightPositionRange.xyz; 
    o.pos = dist.clip_vertex;
  #else
    // NOTE(valuef): UnityClipSpaceShadowCasterPos expanstion
    float4 world_position = dist.world_position;
    if(unity_LightShadowBias.z != 0.0) {
      float3 wLight = normalize(get_directional_light(world_position).dir);

      // apply normal offset bias (inset position along the normal)
      // bias needs to be scaled by sine between normal and light direction
      // (http://the-witness.net/news/2013/09/shadow-mapping-summary-part-1/)
      //
      // unity_LightShadowBias.z contains user-specified normal offset amount
      // scaled by world space texel size.

      float shadowCos = dot(dist.world_normal, wLight);
      float shadowSine = sqrt(1-shadowCos*shadowCos);
      float normalBias = unity_LightShadowBias.z * shadowSine;

      world_position.xyz -= dist.world_normal * normalBias;
    }
    o.pos = mul(UNITY_MATRIX_VP, world_position);
    o.pos = UnityApplyLinearShadowBias(o.pos);
  #endif

  #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
    o.skinned_vertex = v.vertex;
  #endif

  #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
    o.world_pos = dist.world_position;
  #endif

  o.world_normal = dist.world_normal;

  // @EyeVecNormalization
  o.eye_vec_unnormalized.xyz = dist.world_position.xyz - _WorldSpaceCameraPos.xyz;

  return o;
}

#if defined(UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS)
  sampler3D _DitherMaskLOD;
#endif

float4
pixel_shadow_caster(
  Vertex_Output_Shadow_Caster i,
  bool is_front_face : SV_IsFrontFace,
  float4 pixel_pos : SV_Position

) : SV_Target {
  IS_SHADOWCASTER = true;

  UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);

  #if defined(NOT_BAKED)
    EDITOR_BRANCH if(_DebugVisualisation_Type == DEBUG_VIS_MASK_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_TF_PS ||
       _DebugVisualisation_Type == DEBUG_VIS_UV ||
       _DebugVisualisation_Type == DEBUG_VIS_UV2_CHANNEL ||
       _DebugVisualisation_Type == DEBUG_VIS_SKINNED_VERTICES
    ) {
      discard;
    }
  #endif

  TF_And_Material_Mix mix_info;
  Fragment_Common_Data s;

  float4 unused_tangent_to_world[3] = {0.0.rrr,0.0.rrr,0.0.rrr,0.0.rrr};
  pixel_init(
    #if !defined(OPT_UV0_INTERPOLATOR_DISABLED)
      i.uv0, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV1_INTERPOLATOR_DISABLED)
      i.uv1, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV3_INTERPOLATOR_DISABLED)
      i.uv3, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV4_INTERPOLATOR_DISABLED)
      i.uv4, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV5_INTERPOLATOR_DISABLED)
      i.uv5, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV6_INTERPOLATOR_DISABLED)
      i.uv6, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV7_INTERPOLATOR_DISABLED)
      i.uv7, 
    #else
      float2(0,0),
    #endif

    #if !defined(OPT_UV_BUS_ONLY_WORLD_POSITION_INTERPOLATOR_DISABLED)
      i.world_pos,                    /* pos_world */
    #else
      float3(0,0,0),
    #endif

    i.baked_pos,                    /* baked_pos */

    #if !defined(OPT_SKINNED_VERTEX_LOCATION_INTERPOLATOR_DISABLED)
      i.skinned_vertex,                       /* skinned_vertex */
    #else
      float3(0,0,0),
    #endif

    #if !defined(OPT_GOO_NOISE_INTERPOLATOR_DISABLED)
      i.goo_noise,                    /* goo_noise */
    #else
      0,
    #endif

    #if !defined(OPT_GOO_DRIP_INTERPOLATOR_DISABLED)
      i.goo_drip,                     /* goo_drip */
    #else
      0,
    #endif

    #if !defined(OPT_VERTEX_COLOR_INTERPOLATOR_DISABLED)
      i.vertex_colors,                        /* vertex_colors */
    #else
      float4(0,0,0,0),
    #endif

    i.world_normal,                 /* world_normal */
    i.eye_vec_unnormalized.xyz,     /* eye_vec_unnormalized */

    #if defined(VFGOO_ENABLE_MASK_TOUCH_REACTIVITY)
      i.touch_reactivity_interaction, /* touch_reactivity_interaction */
    #else
      0,
    #endif

    #if defined(VFGOO_ENABLE_MASK_POINT_LIGHTS)
      i.light_mask,                   /* light_mask */
    #else
      0,
    #endif

    unused_tangent_to_world,        /* tbn_vecs       @Unused */
    pixel_pos,                      /* pixel_pos */
    is_front_face,                  /* is_front_face  */
    1.0.rrrr,                       /* grab_pos       @Unused */
    mix_info,                       /* out_mix_info */
    s                               /* out_s        */
  );

  float alpha = s.albedo.a;

  EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT || _RenderingMode == RENDERING_MODE_FADE) {

    EDITOR_BRANCH if(_RenderingMode == RENDERING_MODE_TRANSPARENT) {
      PreMultiplyAlpha(
        half3(0, 0, 0), 
        alpha, 
        s.oneMinusReflectivity, 
        /* out */ alpha
      );
    }

    #if defined(UNITY_USE_DITHER_MASK_FOR_ALPHABLENDED_SHADOWS)
      // Use dither mask for alpha blended shadows, based on pixel position xy
      // and alpha level. Our dither texture is 4x4x16.
      half alphaRef = tex3D(_DitherMaskLOD, float3(i.pos.xy*0.25,alpha*0.9375)).a;
      clip(alphaRef - 0.01);
    #else
      clip(alpha - _Cutoff);
    #endif
  }

  SHADOW_CASTER_FRAGMENT(i)
}


      ENDCG
    }
  }
}

